"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var telemetry_exports = {};
__export(telemetry_exports, {
  errorTelemetry: () => errorTelemetry,
  telemetryMiddleware: () => telemetryMiddleware,
  timedTelemetry: () => timedTelemetry
});
module.exports = __toCommonJS(telemetry_exports);
var import_child_process = require("child_process");
var import_os = __toESM(require("os"));
var import_path = __toESM(require("path"));
var import_project_config = require("@redwoodjs/project-config");
const spawnProcess = (...args) => {
  const execPath = import_os.default.type() === "Windows_NT" ? `"${process.execPath}"` : process.execPath;
  const spawnOptions = import_os.default.type() === "Windows_NT" ? {
    stdio: process.env.REDWOOD_VERBOSE_TELEMETRY ? ["ignore", "inherit", "inherit"] : "ignore",
    // The following options run the process in the background without a console window, even though they don't look like they would.
    // See https://github.com/nodejs/node/issues/21825#issuecomment-503766781 for information
    detached: false,
    windowsHide: false,
    shell: true
  } : {
    stdio: process.env.REDWOOD_VERBOSE_TELEMETRY ? ["ignore", "inherit", "inherit"] : "ignore",
    detached: process.env.REDWOOD_VERBOSE_TELEMETRY ? false : true,
    windowsHide: true
  };
  (0, import_child_process.spawn)(
    execPath,
    [
      import_path.default.join(__dirname, "scripts", "invoke.js"),
      ...args,
      "--root",
      (0, import_project_config.getPaths)().base
    ],
    spawnOptions
  ).unref();
};
const timedTelemetry = async (argv, options, func) => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return func.call(void 0);
  }
  const start = /* @__PURE__ */ new Date();
  const result = await func.call(void 0);
  const duration = (/* @__PURE__ */ new Date()).getTime() - start.getTime();
  spawnProcess(
    "--argv",
    JSON.stringify(argv),
    "--duration",
    duration.toString(),
    "--type",
    JSON.stringify(options.type)
  );
  return result;
};
const errorTelemetry = async (argv, error) => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return;
  }
  spawnProcess("--argv", JSON.stringify(argv), "--error", JSON.stringify(error));
};
const telemetryMiddleware = async () => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return;
  }
  spawnProcess("--argv", JSON.stringify(process.argv));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  errorTelemetry,
  telemetryMiddleware,
  timedTelemetry
});
