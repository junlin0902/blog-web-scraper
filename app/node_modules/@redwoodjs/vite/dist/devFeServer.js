import { createServerAdapter } from "@whatwg-node/server";
import express from "express";
import { createServer as createViteServer } from "vite";
import { cjsInterop } from "vite-plugin-cjs-interop";
import { getProjectRoutes } from "@redwoodjs/internal/dist/routes.js";
import { getConfig, getPaths } from "@redwoodjs/project-config";
import {
  createPerRequestMap,
  createServerStorage
} from "@redwoodjs/server-store";
import { registerFwGlobalsAndShims } from "./lib/registerFwGlobalsAndShims.js";
import { invoke } from "./middleware/invokeMiddleware.js";
import { createMiddlewareRouter } from "./middleware/register.js";
import { rscRoutesAutoLoader } from "./plugins/vite-plugin-rsc-routes-auto-loader.js";
import { collectCssPaths, componentsModules } from "./streaming/collectCss.js";
import { createReactStreamingHandler } from "./streaming/createReactStreamingHandler.js";
import {
  convertExpressHeaders,
  ensureProcessDirWeb,
  getFullUrl
} from "./utils.js";
globalThis.__REDWOOD__PRERENDER_PAGES = {};
async function createServer() {
  ensureProcessDirWeb();
  registerFwGlobalsAndShims();
  const app = express();
  const rwPaths = getPaths();
  const rscEnabled = getConfig().experimental.rsc?.enabled ?? false;
  const serverStorage = createServerStorage();
  app.use("*", (req, _res, next) => {
    const fullUrl = getFullUrl(req, rscEnabled);
    const perReqStore = createPerRequestMap({
      // Convert express headers to fetch header
      headers: convertExpressHeaders(req.headersDistinct),
      fullUrl
    });
    serverStorage.run(perReqStore, next);
  });
  if (!rwPaths.web.entryServer || !rwPaths.web.entryClient) {
    throw new Error(
      "Vite entry points not found. Please check that your project has an entry.client.{jsx,tsx} and entry.server.{jsx,tsx} file in the web/src directory."
    );
  }
  if (!rwPaths.web.viteConfig) {
    throw new Error(
      "Vite config not found. You need to setup your project with Vite using `yarn rw setup vite`"
    );
  }
  const vite = await createViteServer({
    configFile: rwPaths.web.viteConfig,
    plugins: [
      cjsInterop({
        dependencies: [
          // Skip ESM modules: rwjs/auth, rwjs/web, rwjs/auth-*-middleware, rwjs/router
          "@redwoodjs/forms",
          "@redwoodjs/prerender/*",
          "@redwoodjs/auth-*-api",
          "@redwoodjs/auth-*-web"
        ]
      }),
      rscEnabled && rscRoutesAutoLoader()
    ],
    server: { middlewareMode: true },
    logLevel: "info",
    clearScreen: false,
    appType: "custom"
  });
  const handleWithMiddleware = (route) => {
    return createServerAdapter(async (req) => {
      const middlewareRouter = await createMiddlewareRouter(vite);
      const middleware = middlewareRouter.find(
        req.method,
        req.url
      )?.handler;
      if (!middleware) {
        return new Response("No middleware found", { status: 404 });
      }
      const [mwRes] = await invoke(req, middleware, {
        route,
        viteDevServer: vite
      });
      return mwRes.toResponse();
    });
  };
  app.use(vite.middlewares);
  if (rscEnabled) {
    const { createRscRequestHandler } = await import("./rsc/rscRequestHandler.js");
    app.use(
      "/rw-rsc",
      createRscRequestHandler({
        getMiddlewareRouter: async () => createMiddlewareRouter(vite),
        viteDevServer: vite
      })
    );
  }
  const routes = getProjectRoutes();
  const routeHandler = await createReactStreamingHandler(
    {
      routes,
      clientEntryPath: rwPaths.web.entryClient,
      getStylesheetLinks: (route) => {
        return getCssLinks({ rwPaths, route, vite });
      },
      // Recreate middleware router on each request in dev
      getMiddlewareRouter: async () => createMiddlewareRouter(vite)
    },
    vite
  );
  app.get("*", createServerAdapter(routeHandler));
  app.post("*", handleWithMiddleware());
  const port = getConfig().web.port;
  console.log(`Started server on http://localhost:${port}`);
  return app.listen(port);
}
let devApp = createServer();
process.stdin.on("data", async (data) => {
  const str = data.toString().trim().toLowerCase();
  if (str === "rs" || str === "restart") {
    console.log("Restarting dev web server.....");
    (await devApp).close(() => {
      devApp = createServer();
    });
  }
});
function getCssLinks({
  rwPaths,
  route,
  vite
}) {
  const appAndRouteModules = componentsModules(
    [rwPaths.web.app, route?.filePath].filter(Boolean),
    vite
  );
  const collectedCss = collectCssPaths(appAndRouteModules);
  const cssLinks = Array.from(collectedCss);
  return cssLinks;
}
