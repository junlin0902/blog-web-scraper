import fs from "node:fs";
import path from "node:path";
import * as babel from "@babel/core";
import fse from "fs-extra";
import { transformWithEsbuild } from "vite";
import { getWebSideDefaultBabelConfig } from "@redwoodjs/babel-config";
import { getPaths } from "@redwoodjs/project-config";
const cleanWebBuild = () => {
  const rwjsPaths = getPaths();
  fse.removeSync(rwjsPaths.web.dist);
  fse.removeSync(path.join(rwjsPaths.generated.prebuild, "web"));
};
async function prebuildWebFile(srcPath, flags = {}) {
  const code = fs.readFileSync(srcPath, "utf-8");
  const config = getWebSideDefaultBabelConfig(flags);
  const result = babel.transform(code, {
    ...config,
    cwd: getPaths().web.base,
    filename: srcPath
  });
  return result;
}
async function transform(srcPath) {
  const code = fs.readFileSync(srcPath, "utf-8");
  const loader = path.extname(srcPath).match(/^\.m?ts/) ? "tsx" : "jsx";
  const transformed = await transformWithEsbuild(code, srcPath, {
    loader
  });
  return transformed.code;
}
const prebuildWebFiles = async (srcFiles, flags) => {
  const rwjsPaths = getPaths();
  const processFile = async (srcPath) => {
    const relativePathFromSrc = path.relative(rwjsPaths.base, srcPath);
    const dstPath = path.join(rwjsPaths.generated.prebuild, relativePathFromSrc).replace(/\.(ts)$/, ".js");
    try {
      const result = await prebuildWebFile(srcPath, flags);
      if (!result?.code) {
        throw new Error("No code returned from prebuildWebFile");
      }
      fs.mkdirSync(path.dirname(dstPath), { recursive: true });
      fs.writeFileSync(dstPath, result.code);
    } catch {
      console.warn("Error:", srcPath, "could not prebuilt.");
      return void 0;
    }
    return dstPath;
  };
  const promises = [];
  for (const srcPath of srcFiles) {
    promises.push(processFile(srcPath));
  }
  return await Promise.all(promises);
};
const buildWeb = async ({ verbose }) => {
  const { build } = await import("vite");
  const viteConfig = getPaths().web.viteConfig;
  if (process.cwd() !== getPaths().web.base) {
    throw new Error(
      "Looks like you are running the command from the wrong dir, this can lead to unintended consequences on CSS processing"
    );
  }
  if (!viteConfig) {
    throw new Error("Could not locate your web/vite.config.{js,ts} file");
  }
  return build({
    configFile: viteConfig,
    envFile: false,
    logLevel: verbose ? "info" : "warn"
  });
};
export {
  buildWeb,
  cleanWebBuild,
  prebuildWebFile,
  prebuildWebFiles,
  transform
};
