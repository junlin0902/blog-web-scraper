import { pathToFileURL } from "node:url";
import { getPaths } from "@redwoodjs/project-config";
function stripQueryStringAndHashFromPath(url) {
  return url.split("?")[0].split("#")[0];
}
function ensureProcessDirWeb(webDir = getPaths().web.base) {
  if (process.cwd() !== webDir) {
    console.error("\u26A0\uFE0F  Warning: CWD is ", process.cwd());
    console.warn("~".repeat(50));
    console.warn(
      "The cwd must be web/. Please use `yarn rw <command>` or run the command from the web/ directory."
    );
    console.log(`Changing cwd to ${webDir}....`);
    console.log();
    process.chdir(webDir);
  }
}
function makeFilePath(path) {
  return pathToFileURL(path).href;
}
async function ssrLoadEntryServer(viteDevServer) {
  const rwPaths = getPaths();
  if (!rwPaths.web.entryServer) {
    throw new Error("entryServer not defined");
  }
  return viteDevServer.ssrLoadModule(
    rwPaths.web.entryServer
    // Have to type cast here because ssrLoadModule just returns a generic
    // Record<string, any> type
  );
}
function convertExpressHeaders(expressDistinctHeaders) {
  const headers = new Headers();
  for (const name in expressDistinctHeaders) {
    const values = expressDistinctHeaders[name];
    if (Array.isArray(values)) {
      for (const value of values) {
        headers.append(name, value);
      }
    }
  }
  return headers;
}
const getFullUrl = (req, rscEnabled) => {
  const baseUrl = req.protocol + "://" + req.headers.host;
  const url = new URL(req.originalUrl || "", baseUrl);
  const pathname = url.searchParams.get("__rwjs__pathname");
  const search = url.searchParams.get("__rwjs__search");
  let pathnamePlusSearch = req.originalUrl;
  if (rscEnabled && pathname !== null && search !== null) {
    pathnamePlusSearch = pathname + "?" + search;
  }
  return baseUrl + pathnamePlusSearch;
};
export {
  convertExpressHeaders,
  ensureProcessDirWeb,
  getFullUrl,
  makeFilePath,
  ssrLoadEntryServer,
  stripQueryStringAndHashFromPath
};
