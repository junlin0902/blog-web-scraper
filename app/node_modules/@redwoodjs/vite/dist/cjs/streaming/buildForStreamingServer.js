"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var buildForStreamingServer_exports = {};
__export(buildForStreamingServer_exports, {
  buildForStreamingServer: () => buildForStreamingServer
});
module.exports = __toCommonJS(buildForStreamingServer_exports);
var import_vite = require("vite");
var import_vite_plugin_cjs_interop = require("vite-plugin-cjs-interop");
var import_project_config = require("@redwoodjs/project-config");
async function buildForStreamingServer({
  verbose = false
}) {
  console.log("Starting streaming server build...\n");
  const rwPaths = (0, import_project_config.getPaths)();
  if (!rwPaths.web.viteConfig) {
    throw new Error("Vite config not found");
  }
  await (0, import_vite.build)({
    configFile: rwPaths.web.viteConfig,
    plugins: [
      (0, import_vite_plugin_cjs_interop.cjsInterop)({
        dependencies: [
          // Skip ESM modules: rwjs/auth, rwjs/web, rwjs/auth-*-middleware, rwjs/router
          "@redwoodjs/forms",
          "@redwoodjs/prerender/*",
          "@redwoodjs/auth-*-api",
          "@redwoodjs/auth-*-web"
        ]
      })
    ],
    build: {
      // TODO (RSC): Remove `minify: false` when we don't need to debug as often
      minify: false,
      outDir: rwPaths.web.distSsr,
      ssr: true,
      emptyOutDir: true
    },
    envFile: false,
    define: {
      "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV)
    },
    logLevel: verbose ? "info" : "warn"
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildForStreamingServer
});
