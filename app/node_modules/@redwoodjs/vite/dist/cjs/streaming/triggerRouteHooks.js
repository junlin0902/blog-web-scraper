"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var triggerRouteHooks_exports = {};
__export(triggerRouteHooks_exports, {
  loadAndRunRouteHooks: () => loadAndRunRouteHooks,
  triggerRouteHooks: () => triggerRouteHooks
});
module.exports = __toCommonJS(triggerRouteHooks_exports);
var import_util = require("@redwoodjs/router/util");
const triggerRouteHooks = async ({
  routeHooks,
  req,
  parsedParams = {},
  previousOutput
}) => {
  const event = {
    params: parsedParams,
    headers: req.headers || {},
    query: (0, import_util.parseSearch)(req.url),
    // cookies: req.cookies || {}, // TODO (STREAMING) we probably need some sort of cookie parser
    // TODO (STREAMING) called app routeHook, but its just the previous output
    appRouteHook: previousOutput
  };
  let meta = previousOutput?.meta || [];
  try {
    const metaRouteHookOutput = await routeHooks?.meta?.(event) || [];
    const currentMeta = Array.isArray(metaRouteHookOutput) ? metaRouteHookOutput : [metaRouteHookOutput];
    meta = [...meta, ...currentMeta];
  } catch (e) {
    throw new Error(`Error in meta hook: ${e.message}`);
  }
  return {
    meta
  };
};
const defaultRouteHookOutput = {
  meta: []
};
const loadAndRunRouteHooks = async ({
  paths = [],
  reqMeta,
  viteDevServer,
  previousOutput = defaultRouteHookOutput
}) => {
  const loadModule = async (path) => {
    return viteDevServer ? viteDevServer.ssrLoadModule(path) : import(path);
  };
  let currentRouteHooks;
  let rhOutput = defaultRouteHookOutput;
  const routeHookPath = paths.shift();
  try {
    if (routeHookPath) {
      currentRouteHooks = await loadModule(routeHookPath);
      rhOutput = await triggerRouteHooks({
        routeHooks: currentRouteHooks,
        req: reqMeta.req,
        parsedParams: reqMeta.parsedParams,
        previousOutput
      });
    }
    if (paths.length > 0) {
      return loadAndRunRouteHooks({
        paths,
        reqMeta,
        previousOutput: rhOutput,
        viteDevServer
      });
    } else {
      return rhOutput;
    }
  } catch (e) {
    console.error(`Error loading route hooks in ${routeHookPath}}`);
    throw e;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  loadAndRunRouteHooks,
  triggerRouteHooks
});
