"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serverInjectionTransform_exports = {};
__export(serverInjectionTransform_exports, {
  createServerInjectionTransform: () => createServerInjectionTransform
});
module.exports = __toCommonJS(serverInjectionTransform_exports);
var import_encode_decode = require("./encode-decode.js");
function createServerInjectionTransform({
  injectionState,
  createElement,
  ServerInjectedHtml,
  renderToString,
  onlyOnFlush = false
}) {
  const transformStream = new TransformStream({
    transform(chunk, controller) {
      if (onlyOnFlush) {
        controller.enqueue(chunk);
      } else {
        const mergedBytes = insertHtml(chunk);
        controller.enqueue(mergedBytes);
      }
    },
    flush(controller) {
      const mergedBytes = insertHtml();
      controller.enqueue(mergedBytes);
      const moveTagsScript = (0, import_encode_decode.encodeText)(`<script>document.querySelectorAll('body [data-rwjs-head]').forEach((el) => {
        document.querySelectorAll('head ' + el.tagName).forEach((e) => {
          if (
            el.tagName === 'TITLE' ||
            (el.tagName === 'META' &&
              el.getAttribute('name') === e.getAttribute('name') &&
              el.getAttribute('property') === e.getAttribute('property'))
          ) {
            e.remove();
          }
          document.head.appendChild(el);
        });
      });
        </script>`);
      controller.enqueue(moveTagsScript);
    }
  });
  return transformStream;
  function insertHtml(chunk) {
    const serverHtmlOutput = renderToString(
      createElement(ServerInjectedHtml, {
        injectionState
      })
    );
    const injectedBytes = (0, import_encode_decode.encodeText)(serverHtmlOutput);
    if (chunk !== void 0) {
      const mergedBytes = new Uint8Array(chunk.length + injectedBytes.length);
      mergedBytes.set(chunk);
      mergedBytes.set(injectedBytes, chunk.length);
      return mergedBytes;
    } else {
      const injectedHtmlOutput = new Uint8Array(injectedBytes.length);
      injectedHtmlOutput.set(injectedBytes);
      return injectedHtmlOutput;
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createServerInjectionTransform
});
