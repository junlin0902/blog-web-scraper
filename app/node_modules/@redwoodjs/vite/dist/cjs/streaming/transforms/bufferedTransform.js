"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bufferedTransform_exports = {};
__export(bufferedTransform_exports, {
  createBufferedTransformStream: () => createBufferedTransformStream
});
module.exports = __toCommonJS(bufferedTransform_exports);
const queueTask = setImmediate;
function createBufferedTransformStream() {
  let bufferedBytes = new Uint8Array();
  let pendingFlush = null;
  const flushBuffer = (controller) => {
    if (!pendingFlush) {
      pendingFlush = new Promise((resolve) => {
        queueTask(() => {
          controller.enqueue(bufferedBytes);
          bufferedBytes = new Uint8Array();
          pendingFlush = null;
          resolve();
        });
      });
    }
  };
  return new TransformStream({
    transform(chunk, controller) {
      const newBufferedBytes = new Uint8Array(
        bufferedBytes.length + chunk.length
      );
      newBufferedBytes.set(bufferedBytes);
      newBufferedBytes.set(chunk, bufferedBytes.length);
      bufferedBytes = newBufferedBytes;
      flushBuffer(controller);
    },
    flush() {
      if (pendingFlush) {
        return pendingFlush;
      }
      return;
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBufferedTransformStream
});
