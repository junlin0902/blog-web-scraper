"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var buildRouteHooks_exports = {};
__export(buildRouteHooks_exports, {
  buildRouteHooks: () => buildRouteHooks
});
module.exports = __toCommonJS(buildRouteHooks_exports);
var import_esbuild = require("esbuild");
var import_babel_config = require("@redwoodjs/babel-config");
var import_files = require("@redwoodjs/internal/dist/files.js");
var import_project_config = require("@redwoodjs/project-config");
async function buildRouteHooks(verbose, rwPaths) {
  const allRouteHooks = (0, import_files.findRouteHooksSrc)();
  const runRwBabelTransformsPlugin = {
    name: "rw-esbuild-babel-transform",
    setup(build) {
      build.onLoad({ filter: /\.(js|ts|tsx|jsx)$/ }, async (args) => {
        const transformedCode = await (0, import_babel_config.transformWithBabel)(args.path, [
          ...(0, import_babel_config.getRouteHookBabelPlugins)()
        ]);
        if (transformedCode?.code) {
          return {
            contents: transformedCode.code,
            loader: "js"
          };
        }
        throw new Error(`Could not transform file: ${args.path}`);
      });
    }
  };
  await (0, import_esbuild.build)({
    absWorkingDir: (0, import_project_config.getPaths)().web.base,
    entryPoints: allRouteHooks,
    platform: "node",
    target: "node16",
    // @MARK Disable splitting and esm, because Redwood web modules don't support esm yet
    // outExtension: { '.js': '.mjs' },
    // format: 'esm',
    // splitting: true,
    bundle: true,
    plugins: [runRwBabelTransformsPlugin],
    packages: "external",
    logLevel: verbose ? "info" : "error",
    outdir: rwPaths.web.distRouteHooks
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildRouteHooks
});
