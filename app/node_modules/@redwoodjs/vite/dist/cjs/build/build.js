"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var build_exports = {};
__export(build_exports, {
  buildWeb: () => buildWeb,
  cleanWebBuild: () => cleanWebBuild,
  prebuildWebFile: () => prebuildWebFile,
  prebuildWebFiles: () => prebuildWebFiles,
  transform: () => transform
});
module.exports = __toCommonJS(build_exports);
var import_node_fs = __toESM(require("node:fs"), 1);
var import_node_path = __toESM(require("node:path"), 1);
var babel = __toESM(require("@babel/core"), 1);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_vite = require("vite");
var import_babel_config = require("@redwoodjs/babel-config");
var import_project_config = require("@redwoodjs/project-config");
const cleanWebBuild = () => {
  const rwjsPaths = (0, import_project_config.getPaths)();
  import_fs_extra.default.removeSync(rwjsPaths.web.dist);
  import_fs_extra.default.removeSync(import_node_path.default.join(rwjsPaths.generated.prebuild, "web"));
};
async function prebuildWebFile(srcPath, flags = {}) {
  const code = import_node_fs.default.readFileSync(srcPath, "utf-8");
  const config = (0, import_babel_config.getWebSideDefaultBabelConfig)(flags);
  const result = babel.transform(code, {
    ...config,
    cwd: (0, import_project_config.getPaths)().web.base,
    filename: srcPath
  });
  return result;
}
async function transform(srcPath) {
  const code = import_node_fs.default.readFileSync(srcPath, "utf-8");
  const loader = import_node_path.default.extname(srcPath).match(/^\.m?ts/) ? "tsx" : "jsx";
  const transformed = await (0, import_vite.transformWithEsbuild)(code, srcPath, {
    loader
  });
  return transformed.code;
}
const prebuildWebFiles = async (srcFiles, flags) => {
  const rwjsPaths = (0, import_project_config.getPaths)();
  const processFile = async (srcPath) => {
    const relativePathFromSrc = import_node_path.default.relative(rwjsPaths.base, srcPath);
    const dstPath = import_node_path.default.join(rwjsPaths.generated.prebuild, relativePathFromSrc).replace(/\.(ts)$/, ".js");
    try {
      const result = await prebuildWebFile(srcPath, flags);
      if (!result?.code) {
        throw new Error("No code returned from prebuildWebFile");
      }
      import_node_fs.default.mkdirSync(import_node_path.default.dirname(dstPath), { recursive: true });
      import_node_fs.default.writeFileSync(dstPath, result.code);
    } catch {
      console.warn("Error:", srcPath, "could not prebuilt.");
      return void 0;
    }
    return dstPath;
  };
  const promises = [];
  for (const srcPath of srcFiles) {
    promises.push(processFile(srcPath));
  }
  return await Promise.all(promises);
};
const buildWeb = async ({ verbose }) => {
  const { build } = await import("vite");
  const viteConfig = (0, import_project_config.getPaths)().web.viteConfig;
  if (process.cwd() !== (0, import_project_config.getPaths)().web.base) {
    throw new Error(
      "Looks like you are running the command from the wrong dir, this can lead to unintended consequences on CSS processing"
    );
  }
  if (!viteConfig) {
    throw new Error("Could not locate your web/vite.config.{js,ts} file");
  }
  return build({
    configFile: viteConfig,
    envFile: false,
    logLevel: verbose ? "info" : "warn"
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildWeb,
  cleanWebBuild,
  prebuildWebFile,
  prebuildWebFiles,
  transform
});
