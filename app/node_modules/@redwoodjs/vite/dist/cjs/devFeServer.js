"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_server = require("@whatwg-node/server");
var import_express = __toESM(require("express"), 1);
var import_vite = require("vite");
var import_vite_plugin_cjs_interop = require("vite-plugin-cjs-interop");
var import_routes = require("@redwoodjs/internal/dist/routes.js");
var import_project_config = require("@redwoodjs/project-config");
var import_server_store = require("@redwoodjs/server-store");
var import_registerFwGlobalsAndShims = require("./lib/registerFwGlobalsAndShims.js");
var import_invokeMiddleware = require("./middleware/invokeMiddleware.js");
var import_register = require("./middleware/register.js");
var import_vite_plugin_rsc_routes_auto_loader = require("./plugins/vite-plugin-rsc-routes-auto-loader.js");
var import_collectCss = require("./streaming/collectCss.js");
var import_createReactStreamingHandler = require("./streaming/createReactStreamingHandler.js");
var import_utils = require("./utils.js");
globalThis.__REDWOOD__PRERENDER_PAGES = {};
async function createServer() {
  (0, import_utils.ensureProcessDirWeb)();
  (0, import_registerFwGlobalsAndShims.registerFwGlobalsAndShims)();
  const app = (0, import_express.default)();
  const rwPaths = (0, import_project_config.getPaths)();
  const rscEnabled = (0, import_project_config.getConfig)().experimental.rsc?.enabled ?? false;
  const serverStorage = (0, import_server_store.createServerStorage)();
  app.use("*", (req, _res, next) => {
    const fullUrl = (0, import_utils.getFullUrl)(req, rscEnabled);
    const perReqStore = (0, import_server_store.createPerRequestMap)({
      // Convert express headers to fetch header
      headers: (0, import_utils.convertExpressHeaders)(req.headersDistinct),
      fullUrl
    });
    serverStorage.run(perReqStore, next);
  });
  if (!rwPaths.web.entryServer || !rwPaths.web.entryClient) {
    throw new Error(
      "Vite entry points not found. Please check that your project has an entry.client.{jsx,tsx} and entry.server.{jsx,tsx} file in the web/src directory."
    );
  }
  if (!rwPaths.web.viteConfig) {
    throw new Error(
      "Vite config not found. You need to setup your project with Vite using `yarn rw setup vite`"
    );
  }
  const vite = await (0, import_vite.createServer)({
    configFile: rwPaths.web.viteConfig,
    plugins: [
      (0, import_vite_plugin_cjs_interop.cjsInterop)({
        dependencies: [
          // Skip ESM modules: rwjs/auth, rwjs/web, rwjs/auth-*-middleware, rwjs/router
          "@redwoodjs/forms",
          "@redwoodjs/prerender/*",
          "@redwoodjs/auth-*-api",
          "@redwoodjs/auth-*-web"
        ]
      }),
      rscEnabled && (0, import_vite_plugin_rsc_routes_auto_loader.rscRoutesAutoLoader)()
    ],
    server: { middlewareMode: true },
    logLevel: "info",
    clearScreen: false,
    appType: "custom"
  });
  const handleWithMiddleware = (route) => {
    return (0, import_server.createServerAdapter)(async (req) => {
      const middlewareRouter = await (0, import_register.createMiddlewareRouter)(vite);
      const middleware = middlewareRouter.find(
        req.method,
        req.url
      )?.handler;
      if (!middleware) {
        return new Response("No middleware found", { status: 404 });
      }
      const [mwRes] = await (0, import_invokeMiddleware.invoke)(req, middleware, {
        route,
        viteDevServer: vite
      });
      return mwRes.toResponse();
    });
  };
  app.use(vite.middlewares);
  if (rscEnabled) {
    const { createRscRequestHandler } = await import("./rsc/rscRequestHandler.js");
    app.use(
      "/rw-rsc",
      createRscRequestHandler({
        getMiddlewareRouter: async () => (0, import_register.createMiddlewareRouter)(vite),
        viteDevServer: vite
      })
    );
  }
  const routes = (0, import_routes.getProjectRoutes)();
  const routeHandler = await (0, import_createReactStreamingHandler.createReactStreamingHandler)(
    {
      routes,
      clientEntryPath: rwPaths.web.entryClient,
      getStylesheetLinks: (route) => {
        return getCssLinks({ rwPaths, route, vite });
      },
      // Recreate middleware router on each request in dev
      getMiddlewareRouter: async () => (0, import_register.createMiddlewareRouter)(vite)
    },
    vite
  );
  app.get("*", (0, import_server.createServerAdapter)(routeHandler));
  app.post("*", handleWithMiddleware());
  const port = (0, import_project_config.getConfig)().web.port;
  console.log(`Started server on http://localhost:${port}`);
  return app.listen(port);
}
let devApp = createServer();
process.stdin.on("data", async (data) => {
  const str = data.toString().trim().toLowerCase();
  if (str === "rs" || str === "restart") {
    console.log("Restarting dev web server.....");
    (await devApp).close(() => {
      devApp = createServer();
    });
  }
});
function getCssLinks({
  rwPaths,
  route,
  vite
}) {
  const appAndRouteModules = (0, import_collectCss.componentsModules)(
    [rwPaths.web.app, route?.filePath].filter(Boolean),
    vite
  );
  const collectedCss = (0, import_collectCss.collectCssPaths)(appAndRouteModules);
  const cssLinks = Array.from(collectedCss);
  return cssLinks;
}
