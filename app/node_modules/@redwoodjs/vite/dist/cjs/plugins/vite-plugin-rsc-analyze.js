"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var vite_plugin_rsc_analyze_exports = {};
__export(vite_plugin_rsc_analyze_exports, {
  rscAnalyzePlugin: () => rscAnalyzePlugin
});
module.exports = __toCommonJS(vite_plugin_rsc_analyze_exports);
var import_node_path = __toESM(require("node:path"), 1);
var swc = __toESM(require("@swc/core"), 1);
function rscAnalyzePlugin(clientEntryCallback, serverEntryCallback) {
  return {
    name: "redwood-rsc-analyze-plugin",
    transform(code, id) {
      const ext = import_node_path.default.extname(id);
      if ([".ts", ".tsx", ".js", ".jsx"].includes(ext)) {
        const mod = swc.parseSync(code, {
          syntax: ext === ".ts" || ext === ".tsx" ? "typescript" : "ecmascript",
          tsx: ext === ".tsx"
        });
        let directiveFound = false;
        for (const item of mod.body) {
          if (item.type === "ExpressionStatement" && item.expression.type === "StringLiteral") {
            if (item.expression.value === "use client") {
              clientEntryCallback(id);
              directiveFound = true;
            } else if (item.expression.value === "use server") {
              serverEntryCallback(id);
              directiveFound = true;
            }
          }
        }
        if (!directiveFound && code.includes("use server") && containsServerAction(mod)) {
          serverEntryCallback(id);
        }
      }
      return code;
    }
  };
}
function isServerAction(node) {
  return node.body?.type === "BlockStatement" && node.body.stmts.some(
    (s) => s.type === "ExpressionStatement" && s.expression.type === "StringLiteral" && s.expression.value === "use server"
  );
}
function isFunctionDeclaration(node) {
  return node.type === "FunctionDeclaration";
}
function isFunctionExpression(node) {
  return node.type === "FunctionExpression";
}
function isArrowFunctionExpression(node) {
  return node.type === "ArrowFunctionExpression";
}
function containsServerAction(mod) {
  function walk(node) {
    if (isFunctionDeclaration(node) || isFunctionExpression(node) || isArrowFunctionExpression(node)) {
      if (isServerAction(node)) {
        return true;
      }
    }
    return Object.values(node).some(
      (value) => (Array.isArray(value) ? value : [value]).some((v) => {
        if (typeof v?.type === "string") {
          return walk(v);
        }
        if (typeof v?.expression?.type === "string") {
          return walk(v.expression);
        }
        return false;
      })
    );
  }
  return walk(mod);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscAnalyzePlugin
});
