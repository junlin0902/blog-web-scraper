"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var vite_plugin_rsc_routes_auto_loader_exports = {};
__export(vite_plugin_rsc_routes_auto_loader_exports, {
  rscRoutesAutoLoader: () => rscRoutesAutoLoader
});
module.exports = __toCommonJS(vite_plugin_rsc_routes_auto_loader_exports);
var import_path = __toESM(require("path"), 1);
var import_generator = __toESM(require("@babel/generator"), 1);
var import_parser = require("@babel/parser/index.cjs");
var import_traverse = __toESM(require("@babel/traverse"), 1);
var t = __toESM(require("@babel/types"), 1);
var import_vite = require("vite");
var import_project_config = require("@redwoodjs/project-config");
const generate = import_generator.default.default;
const traverse = import_traverse.default.default;
const getPathRelativeToSrc = (maybeAbsolutePath) => {
  if (!import_path.default.isAbsolute(maybeAbsolutePath)) {
    return maybeAbsolutePath;
  }
  return `./${import_path.default.relative((0, import_project_config.getPaths)().web.src, maybeAbsolutePath)}`;
};
const withRelativeImports = (page) => {
  return {
    ...page,
    relativeImport: (0, import_project_config.ensurePosixPath)(getPathRelativeToSrc(page.importPath))
  };
};
function rscRoutesAutoLoader() {
  const routesFileId = (0, import_vite.normalizePath)((0, import_project_config.getPaths)().web.routes);
  const pages = (0, import_project_config.processPagesDir)().map(withRelativeImports);
  const duplicatePageImportNames = /* @__PURE__ */ new Set();
  const sortedPageImportNames = pages.map((page) => page.importName).sort();
  for (let i = 0; i < sortedPageImportNames.length - 1; i++) {
    if (sortedPageImportNames[i + 1] === sortedPageImportNames[i]) {
      duplicatePageImportNames.add(sortedPageImportNames[i]);
    }
  }
  if (duplicatePageImportNames.size > 0) {
    const pageNames = Array.from(duplicatePageImportNames).map((name) => `'${name}'`).join(", ");
    throw new Error(
      `Unable to find only a single file ending in 'Page.{js,jsx,ts,tsx}' in the following page directories: ${pageNames}`
    );
  }
  return {
    name: "rsc-routes-auto-loader-dev",
    transform: async function(code, id) {
      if (id !== routesFileId) {
        return null;
      }
      if (pages.length === 0) {
        return null;
      }
      const ext = import_path.default.extname(id);
      const plugins = [];
      if (ext === ".jsx") {
        plugins.push("jsx");
      }
      const ast = (0, import_parser.parse)(code, {
        sourceType: "unambiguous",
        plugins
      });
      const importedNames = /* @__PURE__ */ new Set();
      const allImports = /* @__PURE__ */ new Map();
      const wrappers = /* @__PURE__ */ new Set();
      traverse(ast, {
        ImportDeclaration(path2) {
          const importPath = path2.node.source.value;
          if (importPath === null) {
            return;
          }
          const userImportRelativePath = getPathRelativeToSrc(
            (0, import_project_config.importStatementPath)(importPath)
          );
          const defaultSpecifier = path2.node.specifiers.filter(
            (specifier) => t.isImportDefaultSpecifier(specifier)
          )[0];
          if (userImportRelativePath && defaultSpecifier) {
            importedNames.add(defaultSpecifier.local.name);
          }
          path2.node.specifiers.forEach((specifier) => {
            allImports.set(specifier.local.name, path2.node);
          });
        },
        JSXElement() {
        },
        CallExpression(path2) {
          if ((t.isIdentifier(path2.node.callee, { name: "jsxs" }) || t.isIdentifier(path2.node.callee, { name: "jsx" })) && t.isIdentifier(path2.node.arguments[0]) && path2.node.arguments[0].name === "Set") {
            const jsxArgs = path2.node.arguments;
            if (t.isObjectExpression(jsxArgs[1])) {
              const wrapProp = jsxArgs[1].properties.find(
                (prop) => t.isObjectProperty(prop) && t.isIdentifier(prop.key, { name: "wrap" })
              );
              if (t.isArrayExpression(wrapProp?.value)) {
                wrapProp.value.elements.forEach((element) => {
                  if (t.isIdentifier(element)) {
                    wrappers.add(element.name);
                  }
                });
              } else if (t.isIdentifier(wrapProp?.value)) {
                wrappers.add(wrapProp.value.name);
              }
            }
          }
        }
      });
      const nonImportedPages = pages.filter(
        (page) => !importedNames.has(page.importName)
      );
      wrappers.forEach((wrapper) => {
        const wrapperImport = allImports.get(wrapper);
        if (wrapperImport) {
          wrapperImport.source.value = "@redwoodjs/router/dist/dummyComponent";
        }
      });
      for (const page of nonImportedPages) {
        ast.program.body.unshift(
          t.variableDeclaration("const", [
            t.variableDeclarator(
              t.identifier(page.constName),
              t.arrowFunctionExpression([], t.nullLiteral())
            )
          ])
        );
      }
      return generate(ast).code;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscRoutesAutoLoader
});
