"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var vite_plugin_rsc_reload_exports = {};
__export(vite_plugin_rsc_reload_exports, {
  rscReloadPlugin: () => rscReloadPlugin
});
module.exports = __toCommonJS(vite_plugin_rsc_reload_exports);
var import_node_path = __toESM(require("node:path"), 1);
var swc = __toESM(require("@swc/core"), 1);
function rscReloadPlugin(fn) {
  let enabled = false;
  const isClientEntry = (id, code) => {
    const ext = import_node_path.default.extname(id);
    if ([".ts", ".tsx", ".js", ".jsx"].includes(ext)) {
      const mod = swc.parseSync(code, {
        syntax: ext === ".ts" || ext === ".tsx" ? "typescript" : "ecmascript",
        tsx: ext === ".tsx"
      });
      for (const item of mod.body) {
        if (item.type === "ExpressionStatement" && item.expression.type === "StringLiteral" && item.expression.value === "use client") {
          return true;
        }
      }
    }
    return false;
  };
  return {
    name: "reload-plugin",
    configResolved(config) {
      if (config.mode === "development") {
        enabled = true;
      }
    },
    async handleHotUpdate(ctx) {
      if (!enabled) {
        return [];
      }
      if (ctx.modules.length && !isClientEntry(ctx.file, await ctx.read())) {
        return fn("full-reload");
      } else {
        return [];
      }
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscReloadPlugin
});
