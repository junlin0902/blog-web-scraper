"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var vite_plugin_remove_from_bundle_exports = {};
__export(vite_plugin_remove_from_bundle_exports, {
  excludeOnMatch: () => excludeOnMatch,
  removeFromBundle: () => removeFromBundle
});
module.exports = __toCommonJS(vite_plugin_remove_from_bundle_exports);
function removeFromBundle(modulesToExclude, exportNames) {
  const isMissingIdToExclude = modulesToExclude.some(
    (module2) => module2.id === void 0
  );
  if (isMissingIdToExclude) {
    throw new Error("You must specify an id to exclude");
  }
  return {
    name: "remove-from-bundle",
    apply: "build",
    // <-- @MARK important
    load: (id) => {
      return excludeOnMatch(modulesToExclude, id, exportNames);
    }
  };
}
function generateModuleWithExports(exportNames) {
  return {
    code: `export default {}; ${exportNames.map((name) => `export const ${name} = undefined;`).join("\n")}`
  };
}
function excludeOnMatch(modulesToExclude, id, exportNames = []) {
  if (modulesToExclude.some((module2) => module2.id.test(id))) {
    return generateModuleWithExports(exportNames);
  }
  return null;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  excludeOnMatch,
  removeFromBundle
});
