"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var buildRouteManifest_exports = {};
__export(buildRouteManifest_exports, {
  buildRouteManifest: () => buildRouteManifest
});
module.exports = __toCommonJS(buildRouteManifest_exports);
var import_promises = __toESM(require("node:fs/promises"), 1);
var import_node_path = __toESM(require("node:path"), 1);
var import_node_url = __toESM(require("node:url"), 1);
var import_routes = require("@redwoodjs/internal/dist/routes.js");
var import_project_config = require("@redwoodjs/project-config");
async function buildRouteManifest() {
  const rwPaths = (0, import_project_config.getPaths)();
  const buildManifestUrl = import_node_url.default.pathToFileURL(
    import_node_path.default.join((0, import_project_config.getPaths)().web.distBrowser, "client-build-manifest.json")
  ).href;
  const clientBuildManifest = (await import(buildManifestUrl, { with: { type: "json" } })).default;
  const routesList = (0, import_routes.getProjectRoutes)();
  const routeManifest = routesList.reduce((acc, route) => {
    acc[route.pathDefinition] = {
      name: route.name,
      bundle: route.relativeFilePath ? (
        // @TODO(RSC_DC): this no longer resolves to anything i.e. its always null
        // Because the clientBuildManifest has no pages, because all pages are Server-components?
        // This may be a non-issue, because RSC pages don't need a client bundle per page (or atleast not the same bundle)
        clientBuildManifest[route.relativeFilePath]?.file ?? null
      ) : null,
      matchRegexString: route.matchRegexString,
      // NOTE this is the path definition, not the actual path
      // E.g. /blog/post/{id:Int}
      pathDefinition: route.pathDefinition,
      hasParams: route.hasParams,
      routeHooks: FIXME_constructRouteHookPath(route.routeHooks),
      redirect: route.redirect ? {
        to: route.redirect?.to,
        permanent: false
      } : null,
      relativeFilePath: route.relativeFilePath,
      isPrivate: route.isPrivate,
      unauthenticated: route.unauthenticated,
      roles: route.roles,
      pageIdentifier: route.pageIdentifier
    };
    return acc;
  }, {});
  console.log("routeManifest", JSON.stringify(routeManifest, null, 2));
  const webRouteManifest = rwPaths.web.routeManifest;
  await import_promises.default.mkdir(rwPaths.web.distSsr, { recursive: true });
  return import_promises.default.writeFile(webRouteManifest, JSON.stringify(routeManifest, null, 2));
}
const FIXME_constructRouteHookPath = (routeHookSrcPath) => {
  const rwPaths = (0, import_project_config.getPaths)();
  if (!routeHookSrcPath) {
    return null;
  }
  if ((0, import_project_config.getAppRouteHook)()) {
    return import_node_path.default.relative(rwPaths.web.src, routeHookSrcPath).replace(".ts", ".js");
  } else {
    return import_node_path.default.relative(import_node_path.default.join(rwPaths.web.src, "pages"), routeHookSrcPath).replace(".ts", ".js");
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildRouteManifest
});
