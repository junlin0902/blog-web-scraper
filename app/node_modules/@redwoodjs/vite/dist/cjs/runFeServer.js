"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var runFeServer_exports = {};
__export(runFeServer_exports, {
  runFeServer: () => runFeServer
});
module.exports = __toCommonJS(runFeServer_exports);
var import_node_path = __toESM(require("node:path"), 1);
var import_node_url = __toESM(require("node:url"), 1);
var import_server = require("@whatwg-node/server");
var import_dotenv_defaults = require("dotenv-defaults");
var import_express = __toESM(require("express"), 1);
var import_http_proxy_middleware = require("http-proxy-middleware");
var import_ws = __toESM(require("ws"), 1);
var import_project_config = require("@redwoodjs/project-config");
var import_rscCss = require("@redwoodjs/router/rscCss");
var import_server_store = require("@redwoodjs/server-store");
var import_registerFwGlobalsAndShims = require("./lib/registerFwGlobalsAndShims.js");
var import_invokeMiddleware = require("./middleware/invokeMiddleware.js");
var import_register = require("./middleware/register.js");
var import_createReactStreamingHandler = require("./streaming/createReactStreamingHandler.js");
var import_utils = require("./utils.js");
(0, import_dotenv_defaults.config)({
  path: import_node_path.default.join((0, import_project_config.getPaths)().base, ".env"),
  defaults: import_node_path.default.join((0, import_project_config.getPaths)().base, ".env.defaults"),
  // @ts-expect-error - Old typings. @types/dotenv-defaults depends on dotenv
  // v8. dotenv-defaults uses dotenv v14
  multiline: true
});
async function runFeServer() {
  const app = (0, import_express.default)();
  const rwPaths = (0, import_project_config.getPaths)();
  const rwConfig = (0, import_project_config.getConfig)();
  const rscEnabled = rwConfig.experimental?.rsc?.enabled;
  (0, import_registerFwGlobalsAndShims.registerFwGlobalsAndShims)();
  if (rscEnabled) {
    const { setClientEntries } = await import("./rsc/rscRenderer.js");
    createWebSocketServer();
    try {
      await setClientEntries();
    } catch (e) {
      console.error("Failed to load client entries");
      console.error(e);
      process.exit(1);
    }
  }
  const routeManifestUrl = import_node_url.default.pathToFileURL(rwPaths.web.routeManifest).href;
  const routeManifest = (await import(routeManifestUrl, { with: { type: "json" } })).default;
  const clientBuildManifestUrl = import_node_url.default.pathToFileURL(
    import_node_path.default.join(rwPaths.web.distBrowser, "client-build-manifest.json")
  ).href;
  const clientBuildManifest = (await import(clientBuildManifestUrl, { with: { type: "json" } })).default;
  const clientEntry = rscEnabled ? clientBuildManifest["entry.client.tsx"] || clientBuildManifest["entry.client.jsx"] : Object.values(clientBuildManifest).find(
    (manifestItem) => manifestItem.isEntry
  );
  if (!clientEntry) {
    throw new Error("Could not find client entry in build manifest");
  }
  const middlewareRouter = await (0, import_register.createMiddlewareRouter)();
  const serverStorage = (0, import_server_store.createServerStorage)();
  const handleWithMiddleware = () => {
    return (0, import_server.createServerAdapter)(async (req) => {
      const matchedMw = middlewareRouter.find(req.method, req.url);
      const handler = matchedMw?.handler;
      if (!matchedMw) {
        return new Response("No middleware found", { status: 404 });
      }
      const [mwRes] = await (0, import_invokeMiddleware.invoke)(req, handler, {
        params: matchedMw?.params
      });
      return mwRes.toResponse();
    });
  };
  app.use(
    "/assets",
    import_express.default.static(rwPaths.web.distBrowser + "/assets", { index: false })
  );
  app.use("*", (req, _res, next) => {
    const fullUrl = (0, import_utils.getFullUrl)(req, rscEnabled);
    const headers = (0, import_utils.convertExpressHeaders)(req.headersDistinct);
    const perReqStore = (0, import_server_store.createPerRequestMap)({ headers, fullUrl });
    serverStorage.run(perReqStore, next);
  });
  app.use(
    rwConfig.web.apiUrl,
    (0, import_http_proxy_middleware.createProxyMiddleware)({
      changeOrigin: false,
      // Using 127.0.0.1 to force ipv4. With `localhost` you don't really know
      // if it's going to be ipv4 or ipv6
      target: `http://127.0.0.1:${rwConfig.api.port}`
    })
  );
  if (rscEnabled) {
    const { createRscRequestHandler } = await import("./rsc/rscRequestHandler.js");
    app.use(
      "/rw-rsc",
      createRscRequestHandler({
        getMiddlewareRouter: async () => middlewareRouter
      })
    );
  }
  app.use(import_express.default.static(rwPaths.web.distBrowser, { index: false }));
  const getStylesheetLinks = rscEnabled ? (0, import_rscCss.getRscStylesheetLinkGenerator)(clientEntry.css) : () => clientEntry.css || [];
  const routeHandler = await (0, import_createReactStreamingHandler.createReactStreamingHandler)({
    routes: Object.values(routeManifest),
    clientEntryPath: clientEntry.file,
    getStylesheetLinks,
    getMiddlewareRouter: async () => middlewareRouter
  });
  app.get("*", (0, import_server.createServerAdapter)(routeHandler));
  app.post("*", handleWithMiddleware());
  app.listen(rwConfig.web.port);
  console.log(
    `Started production FE server on http://localhost:${rwConfig.web.port}`
  );
}
function createWebSocketServer() {
  const wsServer = new import_ws.WebSocketServer({ port: 18998 });
  wsServer.on("connection", (ws) => {
    console.log("A new client connected.");
    ws.on("message", (data) => {
      const message = data.toString();
      console.log("Received message:", message);
      wsServer.clients.forEach((client) => {
        if (client.readyState === import_ws.default.OPEN) {
          client.send(message);
        }
      });
    });
    ws.on("close", () => {
      console.log("A client disconnected.");
    });
  });
}
runFeServer();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  runFeServer
});
