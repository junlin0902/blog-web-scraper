"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rscBuildClient_exports = {};
__export(rscBuildClient_exports, {
  rscBuildClient: () => rscBuildClient
});
module.exports = __toCommonJS(rscBuildClient_exports);
var import_vite = require("vite");
var import_project_config = require("@redwoodjs/project-config");
var import_onWarn = require("../lib/onWarn.js");
var import_vite_plugin_rsc_routes_auto_loader = require("../plugins/vite-plugin-rsc-routes-auto-loader.js");
var import_utils = require("../utils.js");
async function rscBuildClient(clientEntryFiles) {
  console.log("\n");
  console.log("2. rscBuildClient");
  console.log("=================\n");
  const rwPaths = (0, import_project_config.getPaths)();
  (0, import_utils.ensureProcessDirWeb)();
  if (!rwPaths.web.entryClient) {
    throw new Error("Missing web/src/entry.client");
  }
  const clientBuildOutput = await (0, import_vite.build)({
    envFile: false,
    define: {
      "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV)
    },
    build: {
      // TODO (RSC): Remove `minify: false` when we don't need to debug as often
      minify: false,
      outDir: rwPaths.web.distBrowser,
      emptyOutDir: true,
      // Needed because `outDir` is not inside `root`
      rollupOptions: {
        onwarn: import_onWarn.onWarn,
        input: {
          // @MARK: temporary hack to find the entry client so we can get the
          // index.css bundle but we don't actually want this on an rsc page!
          __rwjs__client_entry: rwPaths.web.entryClient,
          // we need this, so that the output contains rsc-specific bundles
          // for the client-only components. They get loaded once the page is
          // rendered
          ...clientEntryFiles
        },
        preserveEntrySignatures: "exports-only",
        output: {
          // This is not ideal. See
          // https://rollupjs.org/faqs/#why-do-additional-imports-turn-up-in-my-entry-chunks-when-code-splitting
          // But we need it to prevent `import 'client-only'` from being
          // hoisted into App.tsx
          // TODO (RSC): Fix when https://github.com/rollup/rollup/issues/5235
          // is resolved
          hoistTransitiveImports: false,
          entryFileNames: () => {
            return "assets/[name]-[hash].mjs";
          },
          chunkFileNames: `assets/[name]-[hash].mjs`
        }
      },
      manifest: "client-build-manifest.json"
    },
    esbuild: {
      logLevel: "debug"
    },
    logLevel: "info",
    plugins: [(0, import_vite_plugin_rsc_routes_auto_loader.rscRoutesAutoLoader)()]
  });
  if (!("output" in clientBuildOutput)) {
    throw new Error("Unexpected vite client build output");
  }
  return clientBuildOutput.output;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscBuildClient
});
