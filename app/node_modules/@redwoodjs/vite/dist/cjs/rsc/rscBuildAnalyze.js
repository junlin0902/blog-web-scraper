"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rscBuildAnalyze_exports = {};
__export(rscBuildAnalyze_exports, {
  rscBuildAnalyze: () => rscBuildAnalyze
});
module.exports = __toCommonJS(rscBuildAnalyze_exports);
var import_vite = require("vite");
var import_project_config = require("@redwoodjs/project-config");
var import_entries = require("../lib/entries.js");
var import_onWarn = require("../lib/onWarn.js");
var import_vite_plugin_rsc_analyze = require("../plugins/vite-plugin-rsc-analyze.js");
async function rscBuildAnalyze() {
  console.log("\n");
  console.log("1. rscBuildAnalyze");
  console.log("==================\n");
  const rwPaths = (0, import_project_config.getPaths)();
  const clientEntryFileSet = /* @__PURE__ */ new Set();
  const serverEntryFileSet = /* @__PURE__ */ new Set();
  if (!rwPaths.web.viteConfig) {
    throw new Error("Vite config not found");
  }
  await (0, import_vite.build)({
    configFile: rwPaths.web.viteConfig,
    root: rwPaths.web.src,
    // @MARK: We don't care about the build output from this step. It's just
    // for returning the entry names. Plus, the entire RSC build is chatty
    // enough as it is. You can enable this temporarily if you need to for
    // debugging, but we're keeping it silent by default.
    logLevel: "silent",
    plugins: [
      (0, import_vite_plugin_rsc_analyze.rscAnalyzePlugin)(
        (id) => clientEntryFileSet.add(id),
        (id) => serverEntryFileSet.add(id)
      )
    ],
    ssr: {
      // We can ignore everything that starts with `node:` because it's not
      // going to be RSCs
      // As of vite 5.2 `true` here means "all except node built-ins"
      noExternal: true,
      // Anything we know won't have "use client" or "use server" in it can
      // safely be external. The more we can externalize the better, because
      // it means we can skip analyzing them, which means faster build times.
      external: [
        "@prisma/client",
        "@prisma/fetch-engine",
        "@prisma/internals",
        "@redwoodjs/auth-dbauth-api",
        "@redwoodjs/cookie-jar",
        "@redwoodjs/server-store",
        "@simplewebauthn/server",
        "graphql-scalars",
        "minimatch",
        "playwright",
        "react"
      ],
      resolve: {
        externalConditions: ["react-server"]
      }
    },
    build: {
      // TODO (RSC): Remove `minify: false` when we don't need to debug as often
      minify: false,
      manifest: "rsc-build-manifest.json",
      write: false,
      // We generate the entries from the simple `getEntries` function that analyses
      // the various pages plus the ServerEntry file. This may need revisiting when we
      // spend time on improving dev support or expand the scope of the components
      // that are looked up via the entries mappings.
      ssr: true,
      rollupOptions: {
        onwarn: import_onWarn.onWarn,
        input: (0, import_entries.getEntries)()
      }
    }
  });
  const clientEntryFiles = Object.fromEntries(
    Array.from(clientEntryFileSet).map((filename, i) => {
      const rscName = `rsc-${filename.split(/[\/\\]/).at(-1)}-${i}`;
      return [rscName, filename];
    })
  );
  const serverEntryFiles = Object.fromEntries(
    Array.from(serverEntryFileSet).map((filename, i) => {
      const rsaName = `rsa-${filename.split(/[\/\\]/).at(-1)}-${i}`;
      return [rsaName, filename];
    })
  );
  console.log("clientEntryFiles", clientEntryFiles);
  console.log("serverEntryFiles", serverEntryFiles);
  return {
    clientEntryFiles,
    serverEntryFiles
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscBuildAnalyze
});
