"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rscBuildEntriesFile_exports = {};
__export(rscBuildEntriesFile_exports, {
  rscBuildEntriesMappings: () => rscBuildEntriesMappings
});
module.exports = __toCommonJS(rscBuildEntriesFile_exports);
var import_promises = __toESM(require("fs/promises"), 1);
var import_vite = require("vite");
var import_project_config = require("@redwoodjs/project-config");
async function rscBuildEntriesMappings(clientBuildOutput, ssrBuildOutput, serverBuildOutput, clientEntryFiles) {
  console.log("\n");
  console.log("6. rscBuildEntriesMapping");
  console.log("=========================\n");
  const rwPaths = (0, import_project_config.getPaths)();
  const clientEntries = {};
  for (const item of clientBuildOutput) {
    const { name, fileName } = item;
    const entryFile = name && // TODO (RSC) Can't we just compare the names? `item.name === name`
    serverBuildOutput.find(
      (item2) => "moduleIds" in item2 && item2.moduleIds.includes(clientEntryFiles[name])
    )?.fileName;
    if (entryFile) {
      if (process.platform === "win32") {
        const entryFileSlash = entryFile.replaceAll("\\", "/");
        clientEntries[entryFileSlash] = fileName;
      } else {
        clientEntries[entryFile] = fileName;
      }
    }
  }
  console.log("clientEntries", clientEntries);
  const ssrEntries = {};
  for (const item of ssrBuildOutput) {
    const { name, fileName } = item;
    const entryFile = name && // TODO (RSC) Can't we just compare the names? `item.name === name`
    serverBuildOutput.find(
      (item2) => "moduleIds" in item2 && item2.moduleIds.includes(clientEntryFiles[name])
    )?.fileName;
    if (entryFile) {
      if (process.platform === "win32") {
        const entryFileSlash = entryFile.replaceAll("\\", "/");
        ssrEntries[entryFileSlash] = fileName;
      } else {
        ssrEntries[entryFile] = fileName;
      }
    }
  }
  console.log("ssrEntries", ssrEntries);
  await import_promises.default.appendFile(
    rwPaths.web.distRscEntries,
    `// client component mapping (dist/rsc -> dist/browser)
export const clientEntries = ${JSON.stringify(clientEntries, void 0, 2)};

`
  );
  await import_promises.default.appendFile(
    rwPaths.web.distRscEntries,
    `// client component mapping (dist/rsc -> dist/ssr)
export const ssrEntries = ${JSON.stringify(ssrEntries, void 0, 2)};

`
  );
  const serverEntries = {};
  const entries = {
    __rwjs__ServerEntry: (0, import_project_config.getPaths)().web.entryServer || "",
    __rwjs__Routes: (0, import_project_config.getPaths)().web.routes
  };
  for (const [name, sourceFile] of Object.entries(entries)) {
    const buildOutputItem = serverBuildOutput.find((item) => {
      return item.facadeModuleId === (0, import_vite.normalizePath)(sourceFile);
    });
    if (buildOutputItem) {
      serverEntries[name] = buildOutputItem.fileName;
    }
  }
  console.log("serverEntries", serverEntries);
  await import_promises.default.appendFile(
    rwPaths.web.distRscEntries,
    `// server component mapping (src -> dist/rsc)
export const serverEntries = ${JSON.stringify(serverEntries, void 0, 2)};

`
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rscBuildEntriesMappings
});
