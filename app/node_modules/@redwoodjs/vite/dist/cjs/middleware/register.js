"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var register_exports = {};
__export(register_exports, {
  addMiddlewareHandlers: () => addMiddlewareHandlers,
  chain: () => chain,
  createMiddlewareRouter: () => createMiddlewareRouter,
  groupByRoutePatterns: () => groupByRoutePatterns
});
module.exports = __toCommonJS(register_exports);
var import_find_my_way = __toESM(require("find-my-way"), 1);
var import_project_config = require("@redwoodjs/project-config");
var import_middleware = require("@redwoodjs/web/middleware");
var import_utils = require("../utils.js");
const validateMw = (mw) => {
  if (typeof mw === "function") {
    return mw;
  } else if (typeof mw === "object" && typeof mw.invoke === "function") {
    return mw.invoke.bind(mw);
  } else {
    console.error("Received as middleware: ", mw);
    throw new Error(
      "Please check the return on registerMiddleware. Must be a Middleware function, Class or tuple of [Middleware, string]"
    );
  }
};
const groupByRoutePatterns = (mwRegList) => {
  const grouped = {};
  mwRegList.forEach((mwReg) => {
    if (Array.isArray(mwReg)) {
      const [mw, pattern = "*"] = mwReg;
      const mwFunction = validateMw(mw);
      if (!grouped[pattern]) {
        grouped[pattern] = [];
      }
      grouped[pattern].push(mwFunction);
    } else {
      grouped["*"] = [...grouped["*"] || [], validateMw(mwReg)];
    }
  });
  return grouped;
};
const chain = (mwList) => {
  return async (req, res = import_middleware.MiddlewareResponse.next(), options) => {
    let response = res;
    for (const mw of mwList) {
      const mwOutput = await mw(req, response, options);
      if (mwOutput) {
        response = mwOutput;
      }
    }
    return response;
  };
};
const addMiddlewareHandlers = (mwRegList = []) => {
  const groupedMw = groupByRoutePatterns(mwRegList);
  const mwRouter = (0, import_find_my_way.default)();
  for (const pattern in groupedMw) {
    const mwList = groupedMw[pattern];
    const chainedMw = chain(mwList);
    mwRouter.on(["GET", "POST"], pattern, chainedMw);
  }
  return mwRouter;
};
const createMiddlewareRouter = async (vite) => {
  const rwPaths = (0, import_project_config.getPaths)();
  const entryServerImport = vite ? await (0, import_utils.ssrLoadEntryServer)(vite) : await import((0, import_utils.makeFilePath)(rwPaths.web.distSsrEntryServer));
  const { registerMiddleware } = entryServerImport;
  if (!registerMiddleware) {
    return (0, import_find_my_way.default)();
  }
  return addMiddlewareHandlers(await registerMiddleware());
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addMiddlewareHandlers,
  chain,
  createMiddlewareRouter,
  groupByRoutePatterns
});
