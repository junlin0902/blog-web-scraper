"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var entries_exports = {};
__export(entries_exports, {
  getEntries: () => getEntries,
  getEntriesFromDist: () => getEntriesFromDist
});
module.exports = __toCommonJS(entries_exports);
var import_project_config = require("@redwoodjs/project-config");
var import_dist = require("@redwoodjs/structure/dist/index.js");
var import_utils = require("../utils.js");
function getEntries() {
  const entries = {};
  const rwProject = (0, import_dist.getProject)((0, import_project_config.getPaths)().base);
  const routes = rwProject.getRouter().routes;
  const pages = routes.map((route) => route.page);
  for (const page of pages) {
    entries[page.constName] = (0, import_project_config.ensurePosixPath)((0, import_project_config.importStatementPath)(page.path));
  }
  const serverEntry = (0, import_project_config.getPaths)().web.entryServer;
  if (!serverEntry) {
    throw new Error("Server Entry file not found");
  }
  entries["__rwjs__ServerEntry"] = serverEntry;
  entries["__rwjs__Routes"] = (0, import_project_config.getPaths)().web.routes;
  return entries;
}
async function getEntriesFromDist() {
  const entriesDist = (0, import_project_config.getPaths)().web.distRscEntries;
  const { serverEntries } = await import((0, import_utils.makeFilePath)(entriesDist));
  return serverEntries;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getEntries,
  getEntriesFromDist
});
