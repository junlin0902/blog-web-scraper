"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var envVarDefinitions_exports = {};
__export(envVarDefinitions_exports, {
  getEnvVarDefinitions: () => getEnvVarDefinitions
});
module.exports = __toCommonJS(envVarDefinitions_exports);
var import_node_path = __toESM(require("node:path"), 1);
var import_project_config = require("@redwoodjs/project-config");
function getEnvVarDefinitions() {
  const rwConfig = (0, import_project_config.getConfig)();
  const rwPaths = (0, import_project_config.getPaths)();
  return {
    RWJS_ENV: {
      RWJS_API_GRAPHQL_URL: rwConfig.web.apiGraphQLUrl ?? rwConfig.web.apiUrl + "/graphql",
      RWJS_API_URL: rwConfig.web.apiUrl,
      __REDWOOD__APP_TITLE: rwConfig.web.title || import_node_path.default.basename(rwPaths.base),
      RWJS_EXP_STREAMING_SSR: rwConfig.experimental.streamingSsr?.enabled,
      RWJS_EXP_RSC: rwConfig.experimental?.rsc?.enabled
    },
    RWJS_DEBUG_ENV: {
      RWJS_SRC_ROOT: rwPaths.web.src,
      REDWOOD_ENV_EDITOR: JSON.stringify(process.env.REDWOOD_ENV_EDITOR)
    },
    // Vite can automatically expose environment variables, but we
    // disable that in `buildFeServer.ts` by setting `envFile: false`
    // because we want to use our own logic for loading .env,
    // .env.defaults, etc
    // The two object spreads below will expose all environment
    // variables listed in redwood.toml and all environment variables
    // prefixed with REDWOOD_ENV_
    ...Object.fromEntries(
      rwConfig.web.includeEnvironmentVariables.flatMap((envName) => [
        // TODO: Figure out if/why we need to disable eslint here, when we
        // didn't have to before, when this code was in index.ts
        // Re-enable if possible
        // eslint-disable-next-line
        [`import.meta.env.${envName}`, JSON.stringify(process.env[envName])],
        // TODO: Figure out if/why we need to disable eslint here, when we
        // didn't have to before, when this code was in index.ts
        // Re-enable if possible
        // eslint-disable-next-line
        [`process.env.${envName}`, JSON.stringify(process.env[envName])]
      ])
    ),
    ...Object.entries(process.env).reduce(
      (acc, [key, value]) => {
        if (key.startsWith("REDWOOD_ENV_")) {
          acc[`import.meta.env.${key}`] = JSON.stringify(value);
          acc[`process.env.${key}`] = JSON.stringify(value);
        }
        return acc;
      },
      {}
    )
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getEnvVarDefinitions
});
