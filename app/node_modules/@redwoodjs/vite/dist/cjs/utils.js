"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  convertExpressHeaders: () => convertExpressHeaders,
  ensureProcessDirWeb: () => ensureProcessDirWeb,
  getFullUrl: () => getFullUrl,
  makeFilePath: () => makeFilePath,
  ssrLoadEntryServer: () => ssrLoadEntryServer,
  stripQueryStringAndHashFromPath: () => stripQueryStringAndHashFromPath
});
module.exports = __toCommonJS(utils_exports);
var import_node_url = require("node:url");
var import_project_config = require("@redwoodjs/project-config");
function stripQueryStringAndHashFromPath(url) {
  return url.split("?")[0].split("#")[0];
}
function ensureProcessDirWeb(webDir = (0, import_project_config.getPaths)().web.base) {
  if (process.cwd() !== webDir) {
    console.error("\u26A0\uFE0F  Warning: CWD is ", process.cwd());
    console.warn("~".repeat(50));
    console.warn(
      "The cwd must be web/. Please use `yarn rw <command>` or run the command from the web/ directory."
    );
    console.log(`Changing cwd to ${webDir}....`);
    console.log();
    process.chdir(webDir);
  }
}
function makeFilePath(path) {
  return (0, import_node_url.pathToFileURL)(path).href;
}
async function ssrLoadEntryServer(viteDevServer) {
  const rwPaths = (0, import_project_config.getPaths)();
  if (!rwPaths.web.entryServer) {
    throw new Error("entryServer not defined");
  }
  return viteDevServer.ssrLoadModule(
    rwPaths.web.entryServer
    // Have to type cast here because ssrLoadModule just returns a generic
    // Record<string, any> type
  );
}
function convertExpressHeaders(expressDistinctHeaders) {
  const headers = new Headers();
  for (const name in expressDistinctHeaders) {
    const values = expressDistinctHeaders[name];
    if (Array.isArray(values)) {
      for (const value of values) {
        headers.append(name, value);
      }
    }
  }
  return headers;
}
const getFullUrl = (req, rscEnabled) => {
  const baseUrl = req.protocol + "://" + req.headers.host;
  const url = new URL(req.originalUrl || "", baseUrl);
  const pathname = url.searchParams.get("__rwjs__pathname");
  const search = url.searchParams.get("__rwjs__search");
  let pathnamePlusSearch = req.originalUrl;
  if (rscEnabled && pathname !== null && search !== null) {
    pathnamePlusSearch = pathname + "?" + search;
  }
  return baseUrl + pathnamePlusSearch;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  convertExpressHeaders,
  ensureProcessDirWeb,
  getFullUrl,
  makeFilePath,
  ssrLoadEntryServer,
  stripQueryStringAndHashFromPath
});
