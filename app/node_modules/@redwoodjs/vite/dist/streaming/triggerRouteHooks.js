import { parseSearch } from "@redwoodjs/router/util";
const triggerRouteHooks = async ({
  routeHooks,
  req,
  parsedParams = {},
  previousOutput
}) => {
  const event = {
    params: parsedParams,
    headers: req.headers || {},
    query: parseSearch(req.url),
    // cookies: req.cookies || {}, // TODO (STREAMING) we probably need some sort of cookie parser
    // TODO (STREAMING) called app routeHook, but its just the previous output
    appRouteHook: previousOutput
  };
  let meta = previousOutput?.meta || [];
  try {
    const metaRouteHookOutput = await routeHooks?.meta?.(event) || [];
    const currentMeta = Array.isArray(metaRouteHookOutput) ? metaRouteHookOutput : [metaRouteHookOutput];
    meta = [...meta, ...currentMeta];
  } catch (e) {
    throw new Error(`Error in meta hook: ${e.message}`);
  }
  return {
    meta
  };
};
const defaultRouteHookOutput = {
  meta: []
};
const loadAndRunRouteHooks = async ({
  paths = [],
  reqMeta,
  viteDevServer,
  previousOutput = defaultRouteHookOutput
}) => {
  const loadModule = async (path) => {
    return viteDevServer ? viteDevServer.ssrLoadModule(path) : import(path);
  };
  let currentRouteHooks;
  let rhOutput = defaultRouteHookOutput;
  const routeHookPath = paths.shift();
  try {
    if (routeHookPath) {
      currentRouteHooks = await loadModule(routeHookPath);
      rhOutput = await triggerRouteHooks({
        routeHooks: currentRouteHooks,
        req: reqMeta.req,
        parsedParams: reqMeta.parsedParams,
        previousOutput
      });
    }
    if (paths.length > 0) {
      return loadAndRunRouteHooks({
        paths,
        reqMeta,
        previousOutput: rhOutput,
        viteDevServer
      });
    } else {
      return rhOutput;
    }
  } catch (e) {
    console.error(`Error loading route hooks in ${routeHookPath}}`);
    throw e;
  }
};
export {
  loadAndRunRouteHooks,
  triggerRouteHooks
};
