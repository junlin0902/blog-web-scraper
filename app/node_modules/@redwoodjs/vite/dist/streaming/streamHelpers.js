import path from "node:path";
import { getConfig, getPaths } from "@redwoodjs/project-config";
import { makeFilePath } from "../utils.js";
import { createBufferedTransformStream } from "./transforms/bufferedTransform.js";
import { createTimeoutTransform } from "./transforms/cancelTimeoutTransform.js";
import { createServerInjectionTransform } from "./transforms/serverInjectionTransform.js";
const rscWebpackShims = `globalThis.__rw_module_cache__ ||= new Map();

globalThis.__webpack_chunk_load__ ||= (id) => {
  console.log('rscWebpackShims chunk load id', id)
  return import(id).then((mod) => {
    console.log('rscWebpackShims chunk load mod', mod)

    // checking mod.default to better support CJS. If it's an object, it's
    // likely a CJS module. Otherwise it's probably an ES module with a
    // default export
    if (mod.default && typeof mod.default === 'object') {
      return globalThis.__rw_module_cache__.set(id, mod.default)
    }

    return globalThis.__rw_module_cache__.set(id, mod)
  })
};

globalThis.__webpack_require__ ||= (id) => {
  console.log('rscWebpackShims require id', id)
  return globalThis.__rw_module_cache__.get(id)
};
`;
async function reactRenderToStreamResponse(mwRes, renderOptions, streamOptions) {
  const { waitForAllReady = false } = streamOptions;
  const {
    ServerEntry,
    FallbackDocument,
    currentUrl,
    metaTags,
    cssLinks,
    isProd,
    jsBundles = [],
    authState
  } = renderOptions;
  if (!isProd) {
    jsBundles.push(
      new URL("../../inject/reactRefresh.js", import.meta.url).pathname
    );
  }
  const assetMap = JSON.stringify({
    css: cssLinks,
    meta: metaTags
  });
  const rscEnabled = getConfig().experimental?.rsc?.enabled;
  const { createElement } = rscEnabled ? await importModule("__rwjs__react") : await import("react");
  const {
    createInjector,
    ServerHtmlProvider,
    ServerInjectedHtml
  } = rscEnabled ? await importModule("__rwjs__server_inject") : await import("@redwoodjs/web/serverInject");
  const { renderToString } = rscEnabled ? await importModule("rd-server") : await import("react-dom/server");
  const { injectionState, injectToPage } = createInjector();
  const bufferTransform = createBufferedTransformStream();
  const serverInjectionTransform = createServerInjectionTransform({
    injectionState,
    createElement,
    ServerInjectedHtml,
    renderToString,
    onlyOnFlush: waitForAllReady
  });
  const controller = new AbortController();
  const timeoutHandle = setTimeout(() => {
    controller.abort();
  }, 1e4);
  const timeoutTransform = createTimeoutTransform(timeoutHandle);
  const { ServerAuthProvider } = rscEnabled ? await importModule("__rwjs__server_auth_provider") : await import("@redwoodjs/auth/dist/AuthProvider/ServerAuthProvider.js");
  const { LocationProvider } = rscEnabled ? await importModule("__rwjs__location") : await import("@redwoodjs/router/location");
  const renderRoot = (url) => {
    return createElement(
      ServerAuthProvider,
      {
        value: authState
      },
      createElement(
        LocationProvider,
        {
          location: url
        },
        createElement(
          ServerHtmlProvider,
          {
            value: injectToPage
          },
          createElement(ServerEntry, {
            css: cssLinks,
            meta: metaTags
          })
        )
      )
    );
  };
  const bootstrapOptions = {
    bootstrapScriptContent: (
      // Only insert assetMap if client side JS will be loaded
      jsBundles.length > 0 ? `window.__REDWOOD__ASSET_MAP = ${assetMap}; ${rscWebpackShims}` : void 0
    ),
    bootstrapModules: jsBundles
  };
  const { renderToReadableStream } = rscEnabled ? await importModule("rd-server") : await import("react-dom/server.edge");
  try {
    let didErrorOutsideShell = false;
    const renderToStreamOptions = {
      ...bootstrapOptions,
      signal: controller.signal,
      onError: (err) => {
        didErrorOutsideShell = true;
        console.error("\u{1F53B} Caught error outside shell");
        streamOptions.onError?.(err);
      }
    };
    const root = renderRoot(currentUrl);
    const reactStream = await renderToReadableStream(root, renderToStreamOptions);
    if (waitForAllReady) {
      await reactStream.allReady;
    }
    const transformsToApply = [
      !waitForAllReady && bufferTransform,
      serverInjectionTransform,
      !waitForAllReady && timeoutTransform
    ];
    const outputStream = applyStreamTransforms(
      reactStream,
      transformsToApply
    );
    mwRes.status = didErrorOutsideShell ? 500 : 200;
    mwRes.body = outputStream;
    mwRes.headers.set("content-type", "text/html");
    return mwRes.toResponse();
  } catch (e) {
    console.error("\u{1F53B} Failed to render shell");
    streamOptions.onError?.(e);
    const fallbackShell = await renderToReadableStream(
      FallbackDocument({
        children: null,
        css: cssLinks,
        meta: metaTags
      }),
      bootstrapOptions
    );
    mwRes.status = 500;
    mwRes.body = fallbackShell;
    mwRes.headers.set("content-type", "text/html");
    return mwRes.toResponse();
  } finally {
    clearTimeout(timeoutHandle);
  }
}
function applyStreamTransforms(reactStream, transformsToApply) {
  let outputStream = reactStream;
  for (const transform of transformsToApply) {
    if (!transform) {
      continue;
    }
    outputStream = outputStream.pipeThrough(transform);
  }
  return outputStream;
}
async function importModule(mod) {
  const distSsr = getPaths().web.distSsr;
  const rdServerPath = makeFilePath(path.join(distSsr, "rd-server.mjs"));
  const reactPath = makeFilePath(path.join(distSsr, "__rwjs__react.mjs"));
  const locationPath = makeFilePath(path.join(distSsr, "__rwjs__location.mjs"));
  const ServerAuthProviderPath = makeFilePath(
    path.join(distSsr, "__rwjs__server_auth_provider.mjs")
  );
  const ServerInjectPath = makeFilePath(
    path.join(distSsr, "__rwjs__server_inject.mjs")
  );
  if (mod === "rd-server") {
    return (await import(rdServerPath)).default;
  } else if (mod === "__rwjs__react") {
    return (await import(reactPath)).default;
  } else if (mod === "__rwjs__location") {
    return await import(locationPath);
  } else if (mod === "__rwjs__server_auth_provider") {
    return await import(ServerAuthProviderPath);
  } else if (mod === "__rwjs__server_inject") {
    return await import(ServerInjectPath);
  }
  throw new Error("Unknown module " + mod);
}
export {
  importModule,
  reactRenderToStreamResponse
};
