const queueTask = setImmediate;
function createBufferedTransformStream() {
  let bufferedBytes = new Uint8Array();
  let pendingFlush = null;
  const flushBuffer = (controller) => {
    if (!pendingFlush) {
      pendingFlush = new Promise((resolve) => {
        queueTask(() => {
          controller.enqueue(bufferedBytes);
          bufferedBytes = new Uint8Array();
          pendingFlush = null;
          resolve();
        });
      });
    }
  };
  return new TransformStream({
    transform(chunk, controller) {
      const newBufferedBytes = new Uint8Array(
        bufferedBytes.length + chunk.length
      );
      newBufferedBytes.set(bufferedBytes);
      newBufferedBytes.set(chunk, bufferedBytes.length);
      bufferedBytes = newBufferedBytes;
      flushBuffer(controller);
    },
    flush() {
      if (pendingFlush) {
        return pendingFlush;
      }
      return;
    }
  });
}
export {
  createBufferedTransformStream
};
