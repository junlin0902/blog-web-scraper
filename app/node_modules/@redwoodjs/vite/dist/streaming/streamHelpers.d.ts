import type React from 'react';
import type { ServerAuthState } from '@redwoodjs/auth/dist/AuthProvider/ServerAuthProvider.js';
import type { TagDescriptor } from '@redwoodjs/web';
import type { MiddlewareResponse } from '@redwoodjs/web/middleware';
import type { ServerEntryType } from '../types.js';
interface RenderToStreamArgs {
    ServerEntry: ServerEntryType;
    FallbackDocument: React.FunctionComponent;
    currentUrl: URL;
    metaTags: TagDescriptor[];
    cssLinks: string[];
    isProd: boolean;
    jsBundles?: string[];
    authState: ServerAuthState;
}
interface StreamOptions {
    waitForAllReady?: boolean;
    onError?: (err: Error) => void;
}
export declare function reactRenderToStreamResponse(mwRes: MiddlewareResponse, renderOptions: RenderToStreamArgs, streamOptions: StreamOptions): Promise<Response>;
export declare function importModule(mod: 'rd-server' | '__rwjs__react' | '__rwjs__location' | '__rwjs__server_auth_provider' | '__rwjs__server_inject'): Promise<any>;
export {};
//# sourceMappingURL=streamHelpers.d.ts.map