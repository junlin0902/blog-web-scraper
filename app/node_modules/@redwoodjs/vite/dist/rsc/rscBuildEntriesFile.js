import fs from "fs/promises";
import { normalizePath } from "vite";
import { getPaths } from "@redwoodjs/project-config";
async function rscBuildEntriesMappings(clientBuildOutput, ssrBuildOutput, serverBuildOutput, clientEntryFiles) {
  console.log("\n");
  console.log("6. rscBuildEntriesMapping");
  console.log("=========================\n");
  const rwPaths = getPaths();
  const clientEntries = {};
  for (const item of clientBuildOutput) {
    const { name, fileName } = item;
    const entryFile = name && // TODO (RSC) Can't we just compare the names? `item.name === name`
    serverBuildOutput.find(
      (item2) => "moduleIds" in item2 && item2.moduleIds.includes(clientEntryFiles[name])
    )?.fileName;
    if (entryFile) {
      if (process.platform === "win32") {
        const entryFileSlash = entryFile.replaceAll("\\", "/");
        clientEntries[entryFileSlash] = fileName;
      } else {
        clientEntries[entryFile] = fileName;
      }
    }
  }
  console.log("clientEntries", clientEntries);
  const ssrEntries = {};
  for (const item of ssrBuildOutput) {
    const { name, fileName } = item;
    const entryFile = name && // TODO (RSC) Can't we just compare the names? `item.name === name`
    serverBuildOutput.find(
      (item2) => "moduleIds" in item2 && item2.moduleIds.includes(clientEntryFiles[name])
    )?.fileName;
    if (entryFile) {
      if (process.platform === "win32") {
        const entryFileSlash = entryFile.replaceAll("\\", "/");
        ssrEntries[entryFileSlash] = fileName;
      } else {
        ssrEntries[entryFile] = fileName;
      }
    }
  }
  console.log("ssrEntries", ssrEntries);
  await fs.appendFile(
    rwPaths.web.distRscEntries,
    `// client component mapping (dist/rsc -> dist/browser)
export const clientEntries = ${JSON.stringify(clientEntries, void 0, 2)};

`
  );
  await fs.appendFile(
    rwPaths.web.distRscEntries,
    `// client component mapping (dist/rsc -> dist/ssr)
export const ssrEntries = ${JSON.stringify(ssrEntries, void 0, 2)};

`
  );
  const serverEntries = {};
  const entries = {
    __rwjs__ServerEntry: getPaths().web.entryServer || "",
    __rwjs__Routes: getPaths().web.routes
  };
  for (const [name, sourceFile] of Object.entries(entries)) {
    const buildOutputItem = serverBuildOutput.find((item) => {
      return item.facadeModuleId === normalizePath(sourceFile);
    });
    if (buildOutputItem) {
      serverEntries[name] = buildOutputItem.fileName;
    }
  }
  console.log("serverEntries", serverEntries);
  await fs.appendFile(
    rwPaths.web.distRscEntries,
    `// server component mapping (src -> dist/rsc)
export const serverEntries = ${JSON.stringify(serverEntries, void 0, 2)};

`
  );
}
export {
  rscBuildEntriesMappings
};
