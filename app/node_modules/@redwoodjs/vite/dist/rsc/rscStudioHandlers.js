import http from "node:http";
import { getConfig, getRawConfig } from "@redwoodjs/project-config";
import { renderRscToStream } from "./rscRenderer.js";
const isTest = () => {
  return process.env.NODE_ENV === "test";
};
const isDevelopment = () => {
  return process.env.NODE_ENV !== "production" && !isTest();
};
const isStudioEnabled = () => {
  return getRawConfig()["studio"] !== void 0;
};
const shouldSendToStudio = () => {
  return isStudioEnabled() && !isDevelopment();
};
const getStudioPort = () => {
  return getConfig().studio.basePort;
};
const processRenderRscStream = async (readable) => {
  return new Promise((resolve, reject) => {
    const chunks = [];
    const writable = new WritableStream({
      write(chunk) {
        chunks.push(chunk);
      },
      close() {
        resolve(Buffer.concat(chunks).toString("utf8"));
      }
    });
    readable.pipeTo(writable).catch((error) => reject(error));
  });
};
const postFlightToStudio = (payload, metadata) => {
  if (shouldSendToStudio()) {
    const base64Payload = Buffer.from(payload).toString("base64");
    const encodedMetadata = Buffer.from(JSON.stringify(metadata)).toString(
      "base64"
    );
    const jsonBody = JSON.stringify({
      flight: {
        encodedPayload: base64Payload,
        encoding: "base64",
        encodedMetadata
      }
    });
    const options = {
      hostname: "localhost",
      port: getStudioPort(),
      path: "/.redwood/functions/rsc-flight",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(jsonBody)
      }
    };
    const req = http.request(options, (res) => {
      res.setEncoding("utf8");
    });
    req.on("error", (e) => {
      console.error(
        `An error occurred sending the Flight Payload to Studio: ${e.message}`
      );
    });
    req.write(jsonBody);
    req.end();
  }
};
const createStudioFlightHandler = (readable, metadata) => {
  if (shouldSendToStudio()) {
    processRenderRscStream(readable).then((payload) => {
      console.debug("Sending RSC Rendered stream to Studio");
      postFlightToStudio(payload, metadata);
      console.debug("Sent RSC Rendered stream to Studio", payload, metadata);
    }).catch((error) => {
      console.error("An error occurred getting RSC Rendered steam:", error);
    });
  } else {
    console.debug("Studio is not enabled");
  }
};
const sendRscFlightToStudio = async (input) => {
  if (!shouldSendToStudio()) {
    console.debug("Studio is not enabled");
    return;
  }
  const { rscId, rsaId, args, basePath, req, handleError } = input;
  try {
    const startedAt = Date.now();
    const start = performance.now();
    const readable = await renderRscToStream({ rscId, rsaId, args });
    const endedAt = Date.now();
    const end = performance.now();
    const duration = end - start;
    const metadata = {
      rsc: {
        rscId,
        rsaId,
        args
      },
      request: {
        basePath,
        originalUrl: req.originalUrl,
        url: req.url,
        headers: req.headers
      },
      performance: {
        startedAt,
        endedAt,
        duration
      }
    };
    createStudioFlightHandler(readable, metadata);
  } catch (e) {
    if (e instanceof Error) {
      console.error("An error occurred rendering RSC and sending to Studio:", e);
      handleError(e);
    }
  }
};
export {
  sendRscFlightToStudio
};
