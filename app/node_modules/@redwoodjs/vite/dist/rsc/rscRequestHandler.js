import { Readable } from "node:stream";
import * as DefaultFetchAPI from "@whatwg-node/fetch";
import { normalizeNodeRequest } from "@whatwg-node/server";
import busboy from "busboy";
import {
  decodeReply,
  decodeReplyFromBusboy
} from "../bundled/react-server-dom-webpack.server.js";
import { hasStatusCode } from "../lib/StatusError.js";
import { invoke } from "../middleware/invokeMiddleware.js";
import { renderRscToStream } from "./rscRenderer.js";
import { sendRscFlightToStudio } from "./rscStudioHandlers.js";
const BASE_PATH = "/rw-rsc/";
function createRscRequestHandler(options) {
  return async (req, res, next) => {
    console.log("BASE_PATH", BASE_PATH);
    console.log("req.originalUrl", req.originalUrl, "req.url", req.url);
    console.log("req.headers.host", req.headers.host);
    console.log("req.headers['rw-rsc']", req.headers["rw-rsc"]);
    const mwRouter = await options.getMiddlewareRouter();
    if (mwRouter) {
      const webReq = normalizeNodeRequest(req, DefaultFetchAPI.Request);
      const matchedMw = mwRouter.find(webReq.method, webReq.url);
      const [mwResponse] = await invoke(
        webReq,
        matchedMw?.handler,
        {
          params: matchedMw?.params,
          viteDevServer: options.viteDevServer
        }
      );
      const webRes = mwResponse.toResponse();
      webRes.headers.forEach((value, key) => {
        res.setHeader(key, value);
      });
      if (mwResponse.isRedirect() || mwResponse.body) {
        throw new Error(
          "Not Implemented: What should happen if this RSC handler fails? And which part - Client side router?"
        );
      }
    }
    if (req.headers["rw-rsc"] !== "1") {
      return next();
    }
    const url = new URL(req.originalUrl || "", "http://" + req.headers.host);
    let rscId;
    let rsaId;
    let args = [];
    if (url.pathname.startsWith(BASE_PATH)) {
      rscId = url.pathname.split("/").pop();
      rsaId = url.searchParams.get("action_id") || void 0;
      console.log("rscId", rscId);
      console.log("rsaId", rsaId);
      if (rscId && rscId !== "_") {
        res.setHeader("Content-Type", "text/x-component");
      } else {
        rscId = void 0;
      }
      if (rsaId) {
        if (req.headers["content-type"]?.startsWith("multipart/form-data")) {
          console.log("RSA: multipart/form-data");
          const bb = busboy({ headers: req.headers });
          const reply = decodeReplyFromBusboy(bb);
          req.pipe(bb);
          args = await reply;
          if (args[0] instanceof FormData) {
            const serializedFormData = {};
            for (const [key, value] of args[0]) {
              if (serializedFormData[key] !== void 0) {
                if (!Array.isArray(serializedFormData[key])) {
                  serializedFormData[key] = [serializedFormData[key]];
                }
                serializedFormData[key].push(value);
              } else {
                serializedFormData[key] = value;
              }
            }
            args[0] = {
              __formData__: true,
              state: serializedFormData
            };
          }
        } else {
          console.log("RSA: regular body");
          let body = "";
          for await (const chunk of req) {
            body += chunk;
          }
          if (body) {
            args = await decodeReply(body);
          }
        }
      }
    }
    console.log("rscRequestHandler: args", args);
    if (rscId || rsaId) {
      const handleError = (err) => {
        console.log("handleError() err", err);
        if (hasStatusCode(err)) {
          res.statusCode = err.statusCode;
        } else {
          console.info("Cannot render RSC", err);
          res.statusCode = 500;
        }
        res.end(String(err));
      };
      try {
        const readable = await renderRscToStream({ rscId, rsaId, args });
        Readable.fromWeb(readable).pipe(res);
        await sendRscFlightToStudio({
          rscId,
          rsaId,
          args,
          basePath: BASE_PATH,
          req,
          handleError
        });
      } catch (e) {
        handleError(e);
      }
    }
  };
}
export {
  createRscRequestHandler
};
