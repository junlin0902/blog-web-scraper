import path from "node:path";
import url from "node:url";
import { createServerAdapter } from "@whatwg-node/server";
import { config as loadDotEnv } from "dotenv-defaults";
import express from "express";
import { createProxyMiddleware } from "http-proxy-middleware";
import WebSocket, { WebSocketServer } from "ws";
import { getConfig, getPaths } from "@redwoodjs/project-config";
import { getRscStylesheetLinkGenerator } from "@redwoodjs/router/rscCss";
import {
  createPerRequestMap,
  createServerStorage
} from "@redwoodjs/server-store";
import { registerFwGlobalsAndShims } from "./lib/registerFwGlobalsAndShims.js";
import { invoke } from "./middleware/invokeMiddleware.js";
import { createMiddlewareRouter } from "./middleware/register.js";
import { createReactStreamingHandler } from "./streaming/createReactStreamingHandler.js";
import { convertExpressHeaders, getFullUrl } from "./utils.js";
loadDotEnv({
  path: path.join(getPaths().base, ".env"),
  defaults: path.join(getPaths().base, ".env.defaults"),
  // @ts-expect-error - Old typings. @types/dotenv-defaults depends on dotenv
  // v8. dotenv-defaults uses dotenv v14
  multiline: true
});
async function runFeServer() {
  const app = express();
  const rwPaths = getPaths();
  const rwConfig = getConfig();
  const rscEnabled = rwConfig.experimental?.rsc?.enabled;
  registerFwGlobalsAndShims();
  if (rscEnabled) {
    const { setClientEntries } = await import("./rsc/rscRenderer.js");
    createWebSocketServer();
    try {
      await setClientEntries();
    } catch (e) {
      console.error("Failed to load client entries");
      console.error(e);
      process.exit(1);
    }
  }
  const routeManifestUrl = url.pathToFileURL(rwPaths.web.routeManifest).href;
  const routeManifest = (await import(routeManifestUrl, { with: { type: "json" } })).default;
  const clientBuildManifestUrl = url.pathToFileURL(
    path.join(rwPaths.web.distBrowser, "client-build-manifest.json")
  ).href;
  const clientBuildManifest = (await import(clientBuildManifestUrl, { with: { type: "json" } })).default;
  const clientEntry = rscEnabled ? clientBuildManifest["entry.client.tsx"] || clientBuildManifest["entry.client.jsx"] : Object.values(clientBuildManifest).find(
    (manifestItem) => manifestItem.isEntry
  );
  if (!clientEntry) {
    throw new Error("Could not find client entry in build manifest");
  }
  const middlewareRouter = await createMiddlewareRouter();
  const serverStorage = createServerStorage();
  const handleWithMiddleware = () => {
    return createServerAdapter(async (req) => {
      const matchedMw = middlewareRouter.find(req.method, req.url);
      const handler = matchedMw?.handler;
      if (!matchedMw) {
        return new Response("No middleware found", { status: 404 });
      }
      const [mwRes] = await invoke(req, handler, {
        params: matchedMw?.params
      });
      return mwRes.toResponse();
    });
  };
  app.use(
    "/assets",
    express.static(rwPaths.web.distBrowser + "/assets", { index: false })
  );
  app.use("*", (req, _res, next) => {
    const fullUrl = getFullUrl(req, rscEnabled);
    const headers = convertExpressHeaders(req.headersDistinct);
    const perReqStore = createPerRequestMap({ headers, fullUrl });
    serverStorage.run(perReqStore, next);
  });
  app.use(
    rwConfig.web.apiUrl,
    createProxyMiddleware({
      changeOrigin: false,
      // Using 127.0.0.1 to force ipv4. With `localhost` you don't really know
      // if it's going to be ipv4 or ipv6
      target: `http://127.0.0.1:${rwConfig.api.port}`
    })
  );
  if (rscEnabled) {
    const { createRscRequestHandler } = await import("./rsc/rscRequestHandler.js");
    app.use(
      "/rw-rsc",
      createRscRequestHandler({
        getMiddlewareRouter: async () => middlewareRouter
      })
    );
  }
  app.use(express.static(rwPaths.web.distBrowser, { index: false }));
  const getStylesheetLinks = rscEnabled ? getRscStylesheetLinkGenerator(clientEntry.css) : () => clientEntry.css || [];
  const routeHandler = await createReactStreamingHandler({
    routes: Object.values(routeManifest),
    clientEntryPath: clientEntry.file,
    getStylesheetLinks,
    getMiddlewareRouter: async () => middlewareRouter
  });
  app.get("*", createServerAdapter(routeHandler));
  app.post("*", handleWithMiddleware());
  app.listen(rwConfig.web.port);
  console.log(
    `Started production FE server on http://localhost:${rwConfig.web.port}`
  );
}
function createWebSocketServer() {
  const wsServer = new WebSocketServer({ port: 18998 });
  wsServer.on("connection", (ws) => {
    console.log("A new client connected.");
    ws.on("message", (data) => {
      const message = data.toString();
      console.log("Received message:", message);
      wsServer.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(message);
        }
      });
    });
    ws.on("close", () => {
      console.log("A client disconnected.");
    });
  });
}
runFeServer();
export {
  runFeServer
};
