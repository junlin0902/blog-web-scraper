import fs from "node:fs/promises";
import path from "node:path";
import url from "node:url";
import { getProjectRoutes } from "@redwoodjs/internal/dist/routes.js";
import { getAppRouteHook, getPaths } from "@redwoodjs/project-config";
async function buildRouteManifest() {
  const rwPaths = getPaths();
  const buildManifestUrl = url.pathToFileURL(
    path.join(getPaths().web.distBrowser, "client-build-manifest.json")
  ).href;
  const clientBuildManifest = (await import(buildManifestUrl, { with: { type: "json" } })).default;
  const routesList = getProjectRoutes();
  const routeManifest = routesList.reduce((acc, route) => {
    acc[route.pathDefinition] = {
      name: route.name,
      bundle: route.relativeFilePath ? (
        // @TODO(RSC_DC): this no longer resolves to anything i.e. its always null
        // Because the clientBuildManifest has no pages, because all pages are Server-components?
        // This may be a non-issue, because RSC pages don't need a client bundle per page (or atleast not the same bundle)
        clientBuildManifest[route.relativeFilePath]?.file ?? null
      ) : null,
      matchRegexString: route.matchRegexString,
      // NOTE this is the path definition, not the actual path
      // E.g. /blog/post/{id:Int}
      pathDefinition: route.pathDefinition,
      hasParams: route.hasParams,
      routeHooks: FIXME_constructRouteHookPath(route.routeHooks),
      redirect: route.redirect ? {
        to: route.redirect?.to,
        permanent: false
      } : null,
      relativeFilePath: route.relativeFilePath,
      isPrivate: route.isPrivate,
      unauthenticated: route.unauthenticated,
      roles: route.roles,
      pageIdentifier: route.pageIdentifier
    };
    return acc;
  }, {});
  console.log("routeManifest", JSON.stringify(routeManifest, null, 2));
  const webRouteManifest = rwPaths.web.routeManifest;
  await fs.mkdir(rwPaths.web.distSsr, { recursive: true });
  return fs.writeFile(webRouteManifest, JSON.stringify(routeManifest, null, 2));
}
const FIXME_constructRouteHookPath = (routeHookSrcPath) => {
  const rwPaths = getPaths();
  if (!routeHookSrcPath) {
    return null;
  }
  if (getAppRouteHook()) {
    return path.relative(rwPaths.web.src, routeHookSrcPath).replace(".ts", ".js");
  } else {
    return path.relative(path.join(rwPaths.web.src, "pages"), routeHookSrcPath).replace(".ts", ".js");
  }
};
export {
  buildRouteManifest
};
