import fmw from 'find-my-way';
import type Router from 'find-my-way';
import type { ViteDevServer } from 'vite';
import { MiddlewareResponse } from '@redwoodjs/web/middleware';
import type { Middleware, MiddlewareInvokeOptions, MiddlewareRequest } from '@redwoodjs/web/middleware';
import type { MiddlewareReg } from './types.js';
type GroupedMw = Record<string, Middleware[]>;
export declare const groupByRoutePatterns: (mwRegList: MiddlewareReg) => GroupedMw;
/**
 * Takes an array of middleware, and returns a single middleware function
 * that chains them together, by passing the output of one to the next.
 * @param groupedMw
 */
export declare const chain: (mwList: Middleware[]) => (req: MiddlewareRequest, res?: MiddlewareResponse, options?: MiddlewareInvokeOptions) => Promise<MiddlewareResponse>;
export declare const addMiddlewareHandlers: (mwRegList?: MiddlewareReg) => fmw.Instance<fmw.HTTPVersion.V1>;
/**
 * If you pass in the vite dev server, we're running in development
 * @param vite
 * @returns Middleware find-my-way Router
 */
export declare const createMiddlewareRouter: (vite?: ViteDevServer) => Promise<Router.Instance<any>>;
export {};
//# sourceMappingURL=register.d.ts.map