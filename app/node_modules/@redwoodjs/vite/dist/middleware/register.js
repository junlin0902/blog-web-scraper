import fmw from "find-my-way";
import { getPaths } from "@redwoodjs/project-config";
import { MiddlewareResponse } from "@redwoodjs/web/middleware";
import { makeFilePath, ssrLoadEntryServer } from "../utils.js";
const validateMw = (mw) => {
  if (typeof mw === "function") {
    return mw;
  } else if (typeof mw === "object" && typeof mw.invoke === "function") {
    return mw.invoke.bind(mw);
  } else {
    console.error("Received as middleware: ", mw);
    throw new Error(
      "Please check the return on registerMiddleware. Must be a Middleware function, Class or tuple of [Middleware, string]"
    );
  }
};
const groupByRoutePatterns = (mwRegList) => {
  const grouped = {};
  mwRegList.forEach((mwReg) => {
    if (Array.isArray(mwReg)) {
      const [mw, pattern = "*"] = mwReg;
      const mwFunction = validateMw(mw);
      if (!grouped[pattern]) {
        grouped[pattern] = [];
      }
      grouped[pattern].push(mwFunction);
    } else {
      grouped["*"] = [...grouped["*"] || [], validateMw(mwReg)];
    }
  });
  return grouped;
};
const chain = (mwList) => {
  return async (req, res = MiddlewareResponse.next(), options) => {
    let response = res;
    for (const mw of mwList) {
      const mwOutput = await mw(req, response, options);
      if (mwOutput) {
        response = mwOutput;
      }
    }
    return response;
  };
};
const addMiddlewareHandlers = (mwRegList = []) => {
  const groupedMw = groupByRoutePatterns(mwRegList);
  const mwRouter = fmw();
  for (const pattern in groupedMw) {
    const mwList = groupedMw[pattern];
    const chainedMw = chain(mwList);
    mwRouter.on(["GET", "POST"], pattern, chainedMw);
  }
  return mwRouter;
};
const createMiddlewareRouter = async (vite) => {
  const rwPaths = getPaths();
  const entryServerImport = vite ? await ssrLoadEntryServer(vite) : await import(makeFilePath(rwPaths.web.distSsrEntryServer));
  const { registerMiddleware } = entryServerImport;
  if (!registerMiddleware) {
    return fmw();
  }
  return addMiddlewareHandlers(await registerMiddleware());
};
export {
  addMiddlewareHandlers,
  chain,
  createMiddlewareRouter,
  groupByRoutePatterns
};
