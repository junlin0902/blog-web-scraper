import path from "node:path";
import * as swc from "@swc/core";
function rscAnalyzePlugin(clientEntryCallback, serverEntryCallback) {
  return {
    name: "redwood-rsc-analyze-plugin",
    transform(code, id) {
      const ext = path.extname(id);
      if ([".ts", ".tsx", ".js", ".jsx"].includes(ext)) {
        const mod = swc.parseSync(code, {
          syntax: ext === ".ts" || ext === ".tsx" ? "typescript" : "ecmascript",
          tsx: ext === ".tsx"
        });
        let directiveFound = false;
        for (const item of mod.body) {
          if (item.type === "ExpressionStatement" && item.expression.type === "StringLiteral") {
            if (item.expression.value === "use client") {
              clientEntryCallback(id);
              directiveFound = true;
            } else if (item.expression.value === "use server") {
              serverEntryCallback(id);
              directiveFound = true;
            }
          }
        }
        if (!directiveFound && code.includes("use server") && containsServerAction(mod)) {
          serverEntryCallback(id);
        }
      }
      return code;
    }
  };
}
function isServerAction(node) {
  return node.body?.type === "BlockStatement" && node.body.stmts.some(
    (s) => s.type === "ExpressionStatement" && s.expression.type === "StringLiteral" && s.expression.value === "use server"
  );
}
function isFunctionDeclaration(node) {
  return node.type === "FunctionDeclaration";
}
function isFunctionExpression(node) {
  return node.type === "FunctionExpression";
}
function isArrowFunctionExpression(node) {
  return node.type === "ArrowFunctionExpression";
}
function containsServerAction(mod) {
  function walk(node) {
    if (isFunctionDeclaration(node) || isFunctionExpression(node) || isArrowFunctionExpression(node)) {
      if (isServerAction(node)) {
        return true;
      }
    }
    return Object.values(node).some(
      (value) => (Array.isArray(value) ? value : [value]).some((v) => {
        if (typeof v?.type === "string") {
          return walk(v);
        }
        if (typeof v?.expression?.type === "string") {
          return walk(v.expression);
        }
        return false;
      })
    );
  }
  return walk(mod);
}
export {
  rscAnalyzePlugin
};
