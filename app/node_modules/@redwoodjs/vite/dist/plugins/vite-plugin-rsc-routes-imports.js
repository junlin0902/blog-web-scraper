import path from "path";
import babelGenerator from "@babel/generator";
const { default: generate } = babelGenerator;
import { parse as babelParse } from "@babel/parser/index.cjs";
import babelTraverse from "@babel/traverse";
const { default: traverse } = babelTraverse;
import * as t from "@babel/types";
import { normalizePath } from "vite";
import {
  ensurePosixPath,
  getPaths,
  importStatementPath,
  processPagesDir
} from "@redwoodjs/project-config";
const getPathRelativeToSrc = (maybeAbsolutePath) => {
  if (!path.isAbsolute(maybeAbsolutePath)) {
    return maybeAbsolutePath;
  }
  return `./${path.relative(getPaths().web.src, maybeAbsolutePath)}`;
};
const withRelativeImports = (page) => {
  return {
    ...page,
    relativeImport: ensurePosixPath(getPathRelativeToSrc(page.importPath))
  };
};
function rscRoutesImports() {
  const routesFileId = normalizePath(getPaths().web.routes);
  const pages = processPagesDir().map(withRelativeImports);
  const duplicatePageImportNames = /* @__PURE__ */ new Set();
  const sortedPageImportNames = pages.map((page) => page.importName).sort();
  for (let i = 0; i < sortedPageImportNames.length - 1; i++) {
    if (sortedPageImportNames[i + 1] === sortedPageImportNames[i]) {
      duplicatePageImportNames.add(sortedPageImportNames[i]);
    }
  }
  if (duplicatePageImportNames.size > 0) {
    const pageNames = Array.from(duplicatePageImportNames).map((name) => `'${name}'`).join(", ");
    throw new Error(
      `Unable to find only a single file ending in 'Page.{js,jsx,ts,tsx}' in the following page directories: ${pageNames}`
    );
  }
  return {
    name: "rsc-routes-imports",
    transform: async function(code, id) {
      if (id !== routesFileId) {
        return null;
      }
      if (pages.length === 0) {
        return null;
      }
      const ext = path.extname(id);
      const plugins = [];
      if (ext === ".jsx") {
        plugins.push("jsx");
      }
      const ast = babelParse(code, {
        sourceType: "unambiguous",
        plugins
      });
      const importedNames = /* @__PURE__ */ new Set();
      traverse(ast, {
        ImportDeclaration(path2) {
          const importPath = path2.node.source.value;
          if (importPath === null) {
            return;
          }
          const userImportRelativePath = getPathRelativeToSrc(
            importStatementPath(path2.node.source?.value)
          );
          const defaultSpecifier = path2.node.specifiers.filter(
            (specifier) => t.isImportDefaultSpecifier(specifier)
          )[0];
          if (userImportRelativePath && defaultSpecifier) {
            importedNames.add(defaultSpecifier.local.name);
          }
        }
      });
      const nonImportedPages = pages.filter((page) => {
        return !importedNames.has(page.importName);
      });
      for (const page of nonImportedPages) {
        ast.program.body.unshift(
          t.importDeclaration(
            [t.importDefaultSpecifier(t.identifier(page.importName))],
            t.stringLiteral(page.importPath)
          )
        );
      }
      return generate(ast).code;
    }
  };
}
export {
  rscRoutesImports
};
