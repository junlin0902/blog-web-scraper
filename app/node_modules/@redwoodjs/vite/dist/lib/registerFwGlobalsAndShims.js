import path from "node:path";
import { getConfig, getPaths } from "@redwoodjs/project-config";
const registerFwGlobalsAndShims = () => {
  registerFwGlobals();
  registerFwShims();
};
function registerFwGlobals() {
  const rwConfig = getConfig();
  const rwPaths = getPaths();
  globalThis.RWJS_ENV = {
    RWJS_API_GRAPHQL_URL: rwConfig.web.apiGraphQLUrl ?? rwConfig.web.apiUrl + "/graphql",
    RWJS_API_URL: rwConfig.web.apiUrl,
    __REDWOOD__APP_TITLE: rwConfig.web.title || path.basename(rwPaths.base),
    RWJS_EXP_STREAMING_SSR: rwConfig.experimental.streamingSsr?.enabled,
    RWJS_EXP_RSC: rwConfig.experimental?.rsc?.enabled,
    RWJS_EXP_SSR_GRAPHQL_ENDPOINT: (() => {
      const apiPath = rwConfig.web.apiGraphQLUrl ?? rwConfig.web.apiUrl + "/graphql";
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*?:/.test(apiPath)) {
        return apiPath;
      } else {
        let webHost = process.env.REDWOOD_WEB_HOST;
        webHost ??= rwConfig.web.host;
        webHost ??= process.env.NODE_ENV === "production" ? "0.0.0.0" : "[::]";
        let webPort;
        if (process.env.REDWOOD_WEB_PORT) {
          webPort = parseInt(process.env.REDWOOD_WEB_PORT);
        } else {
          webPort = rwConfig.web.port;
        }
        const proxiedApiUrl = swapLocalhostFor127(
          "http://" + webHost + ":" + webPort + apiPath
        );
        if (process.env.NODE_ENV === "production" && !process.env.RWJS_EXP_SSR_GRAPHQL_ENDPOINT?.length) {
          console.log("------------------ WARNING ! -------------------------");
          console.warn();
          console.warn();
          console.warn(`You haven't configured your API absolute url.`);
          console.warn(`Using ${proxiedApiUrl}`);
          console.warn();
          console.warn(
            "You can override this for SSR by setting RWJS_EXP_SSR_GRAPHQL_ENDPOINT in your environment vars"
          );
          console.warn();
          console.log("------------------ WARNING ! -------------------------");
          return proxiedApiUrl;
        }
        return swapLocalhostFor127(
          process.env.RWJS_EXP_SSR_GRAPHQL_ENDPOINT ?? proxiedApiUrl
        );
      }
    })()
  };
  globalThis.RWJS_DEBUG_ENV = {
    RWJS_SRC_ROOT: rwPaths.web.src,
    REDWOOD_ENV_EDITOR: JSON.stringify(process.env.REDWOOD_ENV_EDITOR)
  };
}
function registerFwShims() {
  if (!getConfig().experimental?.rsc?.enabled) {
    return;
  }
  globalThis.__rw_module_cache__ ||= /* @__PURE__ */ new Map();
  globalThis.__webpack_chunk_load__ ||= async (id) => {
    console.log("registerFwShims chunk load id", id);
    return import(id).then((mod) => {
      console.log("registerFwShims chunk load mod", mod);
      if (mod.default && typeof mod.default === "object") {
        return globalThis.__rw_module_cache__.set(id, mod.default);
      }
      return globalThis.__rw_module_cache__.set(id, mod);
    });
  };
  globalThis.__webpack_require__ ||= (id) => {
    console.log("registerFwShims require id", id);
    return globalThis.__rw_module_cache__.get(id);
  };
}
function swapLocalhostFor127(hostString) {
  return hostString.replace("localhost", "127.0.0.1");
}
export {
  registerFwGlobalsAndShims
};
