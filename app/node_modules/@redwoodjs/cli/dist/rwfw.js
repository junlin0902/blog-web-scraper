#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_path = __toESM(require("path"));
var import_configstore = __toESM(require("configstore/index"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_project_config = require("@redwoodjs/project-config");
const config = new import_configstore.default("@redwoodjs/cli");
const RWFW_PATH = process.env.RWFW_PATH || process.env.RW_PATH || config.get("RWFW_PATH");
if (!RWFW_PATH) {
  console.error("Error: You must specify the path to Redwood Framework");
  console.error("Usage: `RWFW_PATH=~/gh/redwoodjs/redwood yarn rwfw <command>");
  process.exit(1);
}
if (!import_fs_extra.default.existsSync(RWFW_PATH)) {
  console.error(
    `Error: The specified path to Redwood Framework (${RWFW_PATH}) does not exist.`
  );
  console.error("Usage: `RWFW_PATH=~/gh/redwoodjs/redwood yarn rwfw <command>");
  process.exit(1);
}
const absRwFwPath = import_path.default.resolve(process.cwd(), RWFW_PATH);
config.set("RWFW_PATH", absRwFwPath);
const projectPath = import_path.default.dirname(
  (0, import_project_config.getConfigPath)(process.env.RWJS_CWD ?? process.cwd())
);
console.log(
  "Redwood Framework Tools Path:",
  (0, import_terminal_link.default)(absRwFwPath, absRwFwPath)
);
let command = process.argv.slice(2);
const helpCommands = ["help", "--help"];
if (!command.length || command.some((cmd) => helpCommands.includes(cmd))) {
  command = ["run"];
}
try {
  import_execa.default.sync("yarn", [...command], {
    stdio: "inherit",
    shell: true,
    cwd: absRwFwPath,
    env: {
      RWJS_CWD: projectPath
    }
  });
} catch (e) {
  console.log();
}
