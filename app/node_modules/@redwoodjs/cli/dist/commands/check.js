"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var check_exports = {};
__export(check_exports, {
  aliases: () => aliases,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(check_exports);
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../lib");
var import_colors = __toESM(require("../lib/colors"));
const command = "check";
const aliases = ["diagnostics"];
const description = "Get structural diagnostics for a Redwood project (experimental)";
const handler = () => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "check"
  });
  const {
    printDiagnostics,
    DiagnosticSeverity
  } = require("@redwoodjs/structure");
  printDiagnostics((0, import_lib.getPaths)().base, {
    getSeverityLabel: (severity) => {
      if (severity === DiagnosticSeverity.Error) {
        return import_colors.default.error("error");
      }
      if (severity === DiagnosticSeverity.Warning) {
        return import_colors.default.warning("warning");
      }
      return import_colors.default.info("info");
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  command,
  description,
  handler
});
