"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var auth_exports = {};
__export(auth_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description
});
module.exports = __toCommonJS(auth_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../lib/");
const command = "auth <provider>";
const description = "Set up an auth configuration";
async function builder(yargs) {
  yargs.demandCommand().epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#setup-auth"
    )}`
  ).command(...redirectCommand("ethereum")).command(...redirectCommand("goTrue")).command(...redirectCommand("magicLink")).command(...redirectCommand("nhost")).command(...redirectCommand("okta")).command(
    "auth0",
    "Set up auth for Auth0",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth auth0",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-auth0-setup");
      console.log();
      handler(args);
    }
  ).command(
    ["azure-active-directory", "azureActiveDirectory"],
    "Set up auth for Azure Active Directory",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth azure-active-directory",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler(
        "@redwoodjs/auth-azure-active-directory-setup"
      );
      console.log();
      handler(args);
    }
  ).command(
    "clerk",
    "Set up auth for Clerk",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth clerk",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-clerk-setup");
      console.log();
      handler(args);
    }
  ).command(
    "custom",
    "Set up a custom auth provider",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth custom",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-custom-setup");
      console.log();
      handler(args);
    }
  ).command(
    "dbAuth",
    "Set up auth for dbAuth",
    (yargs2) => {
      return (0, import_cli_helpers.standardAuthBuilder)(yargs2).option("webauthn", {
        alias: "w",
        default: null,
        description: "Include WebAuthn support (TouchID/FaceID)",
        type: "boolean"
      }).option("createUserModel", {
        alias: "u",
        default: null,
        description: "Create a User database model",
        type: "boolean"
      }).option("generateAuthPages", {
        alias: "g",
        default: null,
        description: "Generate auth pages (login, signup, etc.)",
        type: "boolean"
      });
    },
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth dbAuth",
        force: args.force,
        verbose: args.verbose,
        webauthn: args.webauthn
      });
      const handler = await getAuthHandler("@redwoodjs/auth-dbauth-setup");
      console.log();
      handler(args);
    }
  ).command(
    "firebase",
    "Set up auth for Firebase",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth firebase",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-firebase-setup");
      console.log();
      handler(args);
    }
  ).command(
    "netlify",
    "Set up auth for Netlify",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth netlify",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-netlify-setup");
      console.log();
      handler(args);
    }
  ).command(
    "supabase",
    "Set up auth for Supabase",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth supabase",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler("@redwoodjs/auth-supabase-setup");
      console.log();
      handler(args);
    }
  ).command(
    "supertokens",
    "Set up auth for SuperTokens",
    (yargs2) => (0, import_cli_helpers.standardAuthBuilder)(yargs2),
    async (args) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "setup auth supertokens",
        force: args.force,
        verbose: args.verbose
      });
      const handler = await getAuthHandler(
        "@redwoodjs/auth-supertokens-setup"
      );
      console.log();
      handler(args);
    }
  );
}
function redirectCommand(provider) {
  return [
    provider,
    false,
    () => {
    },
    () => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: `setup auth ${provider}`
      });
      console.log(getRedirectMessage(provider));
    }
  ];
}
function getRedirectMessage(provider) {
  return `${provider} is no longer supported out of the box. But you can still integrate it yourself with ${(0, import_terminal_link.default)(
    "Custom Auth",
    "https://redwoodjs.com/docs/canary/auth/custom"
  )}`;
}
async function getAuthHandler(module2) {
  const packageJsonPath = require.resolve("@redwoodjs/cli/package.json");
  let { version } = import_fs_extra.default.readJSONSync(packageJsonPath);
  if (!isInstalled(module2)) {
    if (version.includes("+")) {
      version = version.split("+")[0];
    }
    let packument;
    try {
      const packumentResponse = await fetch(
        `https://registry.npmjs.org/${module2}`
      );
      packument = await packumentResponse.json();
      if (packument.error) {
        throw new Error(packument.error);
      }
    } catch (error) {
      throw new Error(
        `Couldn't fetch packument for ${module2}: ${error.message}`
      );
    }
    const versionIsPublished = Object.keys(packument.versions).includes(version);
    if (!versionIsPublished) {
      version = "canary";
    }
    await import_execa.default.command(`yarn add -D ${module2}@${version}`, {
      stdio: "inherit",
      cwd: (0, import_lib.getPaths)().base
    });
  }
  const setupModule = await import(module2);
  return setupModule.default.handler;
}
function isInstalled(module2) {
  const { dependencies, devDependencies } = import_fs_extra.default.readJSONSync(
    import_path.default.join((0, import_lib.getPaths)().base, "package.json")
  );
  const deps = {
    ...dependencies,
    ...devDependencies
  };
  if (deps[module2]) {
    return true;
  }
  return require.resolve.paths(`${module2}/package.json`).some((requireResolvePath) => {
    return import_fs_extra.default.existsSync(import_path.default.join(requireResolvePath, module2));
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description
});
