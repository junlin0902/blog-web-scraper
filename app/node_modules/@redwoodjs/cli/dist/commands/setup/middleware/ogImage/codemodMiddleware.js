"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var codemodMiddleware_exports = {};
__export(codemodMiddleware_exports, {
  default: () => transform
});
module.exports = __toCommonJS(codemodMiddleware_exports);
function transform(file, api) {
  const j = api.jscodeshift;
  const ast = j(file.source);
  const needsImport = ast.find(j.ImportDeclaration, {
    specifiers: [
      {
        type: "ImportDefaultSpecifier",
        local: {
          name: "OgImageMiddleware"
        }
      }
    ],
    source: {
      value: "@redwoodjs/ogimage-gen/middleware",
      type: "StringLiteral"
    }
  }).length === 0;
  if (needsImport) {
    ast.find(j.ImportDeclaration).at(0).insertBefore(
      j.importDeclaration(
        [j.importDefaultSpecifier(j.identifier("OgImageMiddleware"))],
        j.stringLiteral("@redwoodjs/ogimage-gen/middleware")
      )
    );
  }
  const registerMiddleware = ast.find(j.ExportNamedDeclaration, {
    declaration(value) {
      if (!value) {
        return false;
      }
      if (value.type === "VariableDeclaration") {
        return value.declarations[0].type === "VariableDeclarator" && value.declarations[0].id.type === "Identifier" && value.declarations[0].id.name === "registerMiddleware";
      }
      if (value.type === "FunctionDeclaration") {
        return value.id?.type === "Identifier" && value.id?.name === "registerMiddleware";
      }
      return false;
    }
  });
  const appObjectProperty = j.objectProperty(
    j.identifier("App"),
    j.identifier("App")
  );
  appObjectProperty.shorthand = true;
  const documentObjectProperty = j.objectProperty(
    j.identifier("Document"),
    j.identifier("Document")
  );
  documentObjectProperty.shorthand = true;
  const ogMwDeclaration = j.variableDeclaration("const", [
    j.variableDeclarator(
      j.identifier("ogMw"),
      j.newExpression(j.identifier("OgImageMiddleware"), [
        j.objectExpression([appObjectProperty, documentObjectProperty])
      ])
    )
  ]);
  const arrowFunc = j.arrowFunctionExpression(
    [],
    j.blockStatement([
      ogMwDeclaration,
      j.returnStatement(j.arrayExpression([j.identifier("ogMw")]))
    ])
  );
  arrowFunc.async = true;
  const needsCompleteRegisterMiddleware = registerMiddleware.length === 0;
  if (needsCompleteRegisterMiddleware) {
    ast.find(j.ExportNamedDeclaration).at(-1).insertAfter(
      j.exportNamedDeclaration(
        j.variableDeclaration("const", [
          j.variableDeclarator(j.identifier("registerMiddleware"), arrowFunc)
        ])
      )
    );
  } else {
    const returnStatement = registerMiddleware.find(j.ReturnStatement, {
      argument: {
        type: "ArrayExpression"
      }
    });
    if (returnStatement.length === 0) {
      throw new Error(
        "Could not find the return statement in the existing registerMiddleware function"
      );
    }
    returnStatement.insertBefore(ogMwDeclaration);
    returnStatement.find(j.ArrayExpression).at(0).replaceWith((nodePath) => {
      const elements = nodePath.value.elements;
      elements.push(j.identifier("ogMw"));
      return nodePath.value;
    });
  }
  return ast.toSource();
}
