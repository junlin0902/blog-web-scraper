"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ogImageHandler_exports = {};
__export(ogImageHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(ogImageHandler_exports);
var import_node_path = __toESM(require("node:path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_prettier = require("prettier");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_runTransform = require("../../../../lib/runTransform");
async function handler({ force }) {
  const rwPaths = (0, import_project_config.getPaths)();
  const rootPkgJson = import_fs_extra.default.readJSONSync(import_node_path.default.join(rwPaths.base, "package.json"));
  const currentProjectVersion = rootPkgJson.devDependencies["@redwoodjs/core"];
  const notes = [""];
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Check prerequisites",
        skip: force,
        task: () => {
          if (!(0, import_project_config.getConfig)().experimental?.streamingSsr?.enabled) {
            throw new Error(
              "The Streaming SSR experimental feature must be enabled before you can setup middleware.\n\nRun this command to setup streaming ssr: \n  yarn rw exp setup-streaming-ssr\n"
            );
          }
        }
      },
      (0, import_cli_helpers.addWebPackages)([`@redwoodjs/ogimage-gen@${currentProjectVersion}`]),
      {
        title: "Add OG Image middleware ...",
        task: async () => {
          const serverEntryPath = rwPaths.web.entryServer;
          if (serverEntryPath === null) {
            throw new Error(
              "Could not find the server entry file. Is your project using the default structure?"
            );
          }
          const transformResult = await (0, import_runTransform.runTransform)({
            transformPath: import_node_path.default.join(__dirname, "codemodMiddleware.js"),
            targetPaths: [serverEntryPath]
          });
          if (transformResult.error) {
            throw new Error(transformResult.error);
          }
        }
      },
      {
        title: "Add OG Image vite plugin ...",
        task: async () => {
          const viteConfigPath = rwPaths.web.viteConfig;
          if (viteConfigPath === null) {
            throw new Error("Could not find the Vite config file");
          }
          const transformResult = await (0, import_runTransform.runTransform)({
            transformPath: import_node_path.default.join(__dirname, "codemodVitePlugin.js"),
            targetPaths: [viteConfigPath]
          });
          if (transformResult.error) {
            throw new Error(transformResult.error);
          }
        }
      },
      {
        title: "Prettifying changed files",
        task: async (_ctx, task) => {
          const prettifyPaths = [
            rwPaths.web.entryServer,
            rwPaths.web.viteConfig
          ];
          for (const prettifyPath of prettifyPaths) {
            if (prettifyPath === null) {
              throw new Error("Could not find the file to be prettified");
            }
            try {
              const source = import_fs_extra.default.readFileSync(prettifyPath, "utf-8");
              const prettierOptions = await (0, import_cli_helpers.getPrettierOptions)();
              const prettifiedApp = await (0, import_prettier.format)(source, {
                ...prettierOptions,
                parser: "babel-ts"
              });
              import_fs_extra.default.writeFileSync(prettifyPath, prettifiedApp, "utf-8");
            } catch {
              task.output = "Couldn't prettify the changes. Please reformat the files manually if needed.";
            }
          }
        }
      },
      {
        title: "One more thing...",
        task: () => {
          notes.push(
            "og:image generation is almost ready to go! You'll need to add playwright as a dependency to the web side and then install the headless browser packages:"
          );
          notes.push("");
          notes.push("  yarn workspace web add playwright");
          notes.push("  yarn workspace web playwright install");
          notes.push("");
          notes.push(
            "Depending on how your host is configured you may need to install additional dependencies first. If so, the `playwright install` step will error out and give you the command to run to install those deps."
          );
          notes.push("");
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
    console.log(notes.join("\n"));
  } catch (e) {
    console.error(e.message);
    process.exit(e?.exitCode || 1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
