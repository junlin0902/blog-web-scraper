"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var codemodVitePlugin_exports = {};
__export(codemodVitePlugin_exports, {
  default: () => transform
});
module.exports = __toCommonJS(codemodVitePlugin_exports);
function transform(file, api) {
  const j = api.jscodeshift;
  const ast = j(file.source);
  const needsImport = ast.find(j.ImportDeclaration, {
    specifiers: [
      {
        type: "ImportDefaultSpecifier",
        local: {
          name: "vitePluginOgImageGen"
        }
      }
    ],
    source: {
      value: "@redwoodjs/ogimage-gen/plugin",
      type: "StringLiteral"
    }
  }).length === 0;
  if (needsImport) {
    ast.find(j.ImportDeclaration).at(0).insertBefore(
      j.importDeclaration(
        [j.importDefaultSpecifier(j.identifier("vitePluginOgImageGen"))],
        j.stringLiteral("@redwoodjs/ogimage-gen/plugin")
      )
    );
  }
  const viteConfigVariable = ast.find(j.VariableDeclaration, {
    declarations(value) {
      if (value.length !== 1) {
        return false;
      }
      const declaration = value[0];
      if (declaration.type !== "VariableDeclarator") {
        return false;
      }
      return declaration.id.type === "Identifier" && declaration.id.name === "viteConfig";
    }
  });
  if (viteConfigVariable.length === 0) {
    throw new Error("Could not find the `viteConfig` variable");
  }
  const pluginsArray = viteConfigVariable.find(j.ObjectExpression, {
    properties(value) {
      if (!value) {
        return false;
      }
      return value.some(
        (property) => property.type === "ObjectProperty" && property.key.type === "Identifier" && property.key.name === "plugins"
      );
    }
  });
  if (pluginsArray.length === 0) {
    throw new Error(
      "Could not find the `plugins` array in the `viteConfig` variable"
    );
  }
  pluginsArray.find(j.ArrayExpression).at(0).replaceWith((nodePath) => {
    const elements = nodePath.value.elements;
    elements.push(j.callExpression(j.identifier("vitePluginOgImageGen"), []));
    return nodePath.value;
  });
  return ast.toSource();
}
