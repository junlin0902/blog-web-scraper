"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var tsconfigHandler_exports = {};
__export(tsconfigHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(tsconfigHandler_exports);
var import_path = __toESM(require("path"));
var import_listr2 = require("listr2");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
const handler = async ({ force }) => {
  const installedRwVersion = (0, import_lib.getInstalledRedwoodVersion)();
  const GITHUB_VERSION_TAG = installedRwVersion.match("canary") ? "main" : `v${installedRwVersion}`;
  const CRWA_TEMPLATE_URL = `https://raw.githubusercontent.com/redwoodjs/redwood/${GITHUB_VERSION_TAG}/packages/create-redwood-app/templates/ts`;
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Creating tsconfig in web",
        task: () => {
          const webConfigPath = import_path.default.join((0, import_lib.getPaths)().web.base, "tsconfig.json");
          const templateUrl = `${CRWA_TEMPLATE_URL}/web/tsconfig.json`;
          return (0, import_lib.saveRemoteFileToDisk)(templateUrl, webConfigPath, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Creating tsconfig in api",
        task: () => {
          const webConfigPath = import_path.default.join((0, import_lib.getPaths)().api.base, "tsconfig.json");
          const templateUrl = `${CRWA_TEMPLATE_URL}/api/tsconfig.json`;
          return (0, import_lib.saveRemoteFileToDisk)(templateUrl, webConfigPath, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "One more thing...",
        task: (_ctx, task) => {
          task.title = `One more thing...

          ${import_colors.default.tip("Quick link to the docs on configuring TypeScript")}
          ${import_colors.default.link("https://redwoodjs.com/docs/typescript")}
        `;
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
