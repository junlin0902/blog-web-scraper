"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mailerHandler_exports = {};
__export(mailerHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(mailerHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
const handler = async ({ force, skipExamples }) => {
  const projectIsTypescript = (0, import_project.isTypeScriptProject)();
  const redwoodVersion = require(import_path.default.join((0, import_lib.getPaths)().base, "package.json")).devDependencies["@redwoodjs/core"] ?? "latest";
  const tasks = new import_listr2.Listr(
    [
      {
        title: `Adding api/src/lib/mailer.${projectIsTypescript ? "ts" : "js"}...`,
        task: async () => {
          const templatePath = import_path.default.resolve(
            __dirname,
            "templates",
            "mailer.ts.template"
          );
          const templateContent = import_fs_extra.default.readFileSync(templatePath, {
            encoding: "utf8",
            flag: "r"
          });
          const mailerPath = import_path.default.join(
            (0, import_lib.getPaths)().api.lib,
            `mailer.${projectIsTypescript ? "ts" : "js"}`
          );
          const mailerContent = projectIsTypescript ? templateContent : await (0, import_lib.transformTSToJS)(mailerPath, templateContent);
          return (0, import_lib.writeFile)(mailerPath, mailerContent, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Adding api/src/mail directory...",
        task: () => {
          const mailDir = import_path.default.join((0, import_lib.getPaths)().api.mail);
          if (!import_fs_extra.default.existsSync(mailDir)) {
            import_fs_extra.default.mkdirSync(mailDir);
          }
        }
      },
      {
        title: `Adding example ReactEmail mail template`,
        skip: () => skipExamples,
        task: async () => {
          const templatePath = import_path.default.resolve(
            __dirname,
            "templates",
            "re-example.tsx.template"
          );
          const templateContent = import_fs_extra.default.readFileSync(templatePath, {
            encoding: "utf8",
            flag: "r"
          });
          const exampleTemplatePath = import_path.default.join(
            (0, import_lib.getPaths)().api.mail,
            "Example",
            `Example.${projectIsTypescript ? "tsx" : "jsx"}`
          );
          const exampleTemplateContent = projectIsTypescript ? templateContent : await (0, import_lib.transformTSToJS)(exampleTemplatePath, templateContent);
          return (0, import_lib.writeFile)(exampleTemplatePath, exampleTemplateContent, {
            overwriteExisting: force
          });
        }
      },
      {
        // Add production dependencies
        ...(0, import_cli_helpers.addApiPackages)([
          `@redwoodjs/mailer-core@${redwoodVersion}`,
          `@redwoodjs/mailer-handler-nodemailer@${redwoodVersion}`,
          `@redwoodjs/mailer-renderer-react-email@${redwoodVersion}`,
          `@react-email/components`
          // NOTE: Unpinned dependency here
        ]),
        title: "Adding production dependencies to your api side..."
      },
      {
        // Add development dependencies
        ...(0, import_cli_helpers.addApiPackages)([
          "-D",
          `@redwoodjs/mailer-handler-in-memory@${redwoodVersion}`,
          `@redwoodjs/mailer-handler-studio@${redwoodVersion}`
        ]),
        title: "Adding development dependencies to your api side..."
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false }
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
