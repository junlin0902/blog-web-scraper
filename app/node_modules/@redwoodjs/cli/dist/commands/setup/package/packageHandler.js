"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var packageHandler_exports = {};
__export(packageHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(packageHandler_exports);
var import_enquirer = __toESM(require("enquirer"));
var import_execa = __toESM(require("execa"));
var import_semver = __toESM(require("semver"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
async function handler({ npmPackage, force, _: _args }) {
  const isScoped = npmPackage.startsWith("@");
  const packageName = (isScoped ? "@" : "") + npmPackage.split("@")[isScoped ? 1 : 0];
  const packageVersion = npmPackage.split("@")[isScoped ? 2 : 1] ?? "latest";
  const additionalOptionsToForward = _args.slice(2) ?? [];
  if (force) {
    console.log(
      "No compatibility check will be performed because you used the --force flag."
    );
    if (import_semver.default.parse(packageVersion) !== null && import_semver.default.lt(packageVersion, "1.0.0")) {
      console.log(
        "Be aware that this package is under version 1.0.0 and so should be considered experimental."
      );
    }
    await runPackage(packageName, packageVersion, additionalOptionsToForward);
    return;
  }
  console.log("Checking compatibility...");
  let compatibilityData;
  try {
    compatibilityData = await (0, import_cli_helpers.getCompatibilityData)(packageName, packageVersion);
  } catch (error) {
    console.log("The following error occurred while checking compatibility:");
    const errorMessage = error.message ?? error;
    console.log(errorMessage);
    if (errorMessage.includes("does not have a tag") || errorMessage.includes("does not have a version")) {
      process.exit(1);
    }
    const decision2 = await promptWithChoices("What would you like to do?", [
      {
        name: "cancel",
        message: "Cancel"
      },
      {
        name: "continue",
        message: "Continue regardless of potential incompatibility"
      }
    ]);
    if (decision2 === "continue") {
      await runPackage(packageName, packageVersion, additionalOptionsToForward);
    }
    return;
  }
  const { preferred, compatible } = compatibilityData;
  const preferredVersionIsCompatible = preferred.version === compatible.version;
  if (preferredVersionIsCompatible) {
    await showExperimentalWarning(preferred.version);
    await runPackage(packageName, preferred.version, additionalOptionsToForward);
    return;
  }
  const preferredVersionText = `${preferred.version}${preferred.tag ? ` (${preferred.tag})` : ""}`;
  const latestCompatibleVersionText = `${compatible.version}${compatible.tag ? ` (${compatible.tag})` : ""}`;
  console.log(
    `The version ${preferredVersionText} of '${packageName}' is not compatible with your RedwoodJS project version.
The latest version compatible with your project is ${latestCompatibleVersionText}.`
  );
  const decision = await promptWithChoices("What would you like to do?", [
    {
      name: "useLatestCompatibleVersion",
      message: `Use the latest compatible version: ${latestCompatibleVersionText}`
    },
    {
      name: "usePreferredVersion",
      message: `Continue anyway with version: ${preferredVersionText}`
    },
    {
      name: "cancel",
      message: "Cancel"
    }
  ]);
  if (decision === "cancel") {
    process.exitCode = 1;
    return;
  }
  const versionToUse = decision === "useLatestCompatibleVersion" ? compatible.version : preferred.version;
  await showExperimentalWarning(versionToUse);
  await runPackage(packageName, versionToUse, additionalOptionsToForward);
}
async function showExperimentalWarning(version) {
  if (version === void 0 || import_semver.default.parse(version) === null || import_semver.default.gte(version, "1.0.0")) {
    return;
  }
  const decision = await promptWithChoices(
    "This package is under version 1.0.0 and so should be considered experimental. Would you like to continue?",
    [
      {
        name: "yes",
        message: "Yes"
      },
      {
        name: "no",
        message: "No"
      }
    ]
  );
  if (decision === "no") {
    process.exit();
  }
}
async function runPackage(packageName, version, options = []) {
  const versionString = version === void 0 ? "" : `@${version}`;
  console.log(`Running ${packageName}${versionString}...`);
  try {
    await (0, import_execa.default)("yarn", ["dlx", `${packageName}${versionString}`, ...options], {
      stdio: "inherit",
      cwd: (0, import_project_config.getPaths)().base
    });
  } catch (error) {
    process.exitCode = error.exitCode ?? 1;
  }
}
async function promptWithChoices(message, choices) {
  try {
    const prompt = new import_enquirer.default.Select({
      name: message.substring(0, 8).toLowerCase(),
      message,
      choices
    });
    return await prompt.run();
  } catch (error) {
    if (error) {
      throw error;
    }
  }
  return null;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
