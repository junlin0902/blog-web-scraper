"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var viteHandler_exports = {};
__export(viteHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(viteHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
const { version } = JSON.parse(
  import_fs_extra.default.readFileSync(import_path.default.resolve(__dirname, "../../../../package.json"), "utf-8")
);
const handler = async ({ force, verbose, addPackage }) => {
  const ts = (0, import_project.isTypeScriptProject)();
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Adding vite.config.js...",
        task: async () => {
          const viteConfigPath = `${(0, import_lib.getPaths)().web.base}/vite.config.${ts ? "ts" : "js"}`;
          const templateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(__dirname, "templates", "vite.config.ts.template"),
            "utf-8"
          );
          const viteConfigContent = ts ? templateContent : await (0, import_lib.transformTSToJS)(viteConfigPath, templateContent);
          return (0, import_lib.writeFile)(viteConfigPath, viteConfigContent, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Creating new entry point in `web/src/entry.client.{jsx,tsx}`...",
        task: () => {
          const entryPointFile = import_path.default.join(
            (0, import_lib.getPaths)().web.src,
            `entry.client.${ts ? "tsx" : "jsx"}`
          );
          const content = import_fs_extra.default.readFileSync(
            import_path.default.join(
              (0, import_lib.getPaths)().base,
              // NOTE we're copying over the index.js before babel transform
              "node_modules/@redwoodjs/web/src/entry/index.js"
            ),
            "utf-8"
          ).replace("~redwood-app-root", "./App");
          return (0, import_lib.writeFile)(entryPointFile, content, {
            overwriteExisting: force
          });
        }
      },
      {
        // @NOTE: make sure its added as a dev package.
        ...(0, import_cli_helpers.addWebPackages)(["-D", `@redwoodjs/vite@${version}`]),
        title: "Adding @redwoodjs/vite dev dependency to web side...",
        skip: () => {
          if (!addPackage) {
            return "Skipping package install, you will need to add @redwoodjs/vite manaually as a dev-dependency on the web workspace";
          }
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
