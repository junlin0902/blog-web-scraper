"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sentryHandler_exports = {};
__export(sentryHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(sentryHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
const rwPaths = (0, import_cli_helpers.getPaths)();
const handler = async ({ force }) => {
  const extension = (0, import_cli_helpers.isTypeScriptProject)() ? "ts" : "js";
  const notes = [];
  const tasks = new import_listr2.Listr([
    (0, import_cli_helpers.addApiPackages)(["@envelop/sentry@5", "@sentry/node@7"]),
    (0, import_cli_helpers.addWebPackages)(["@sentry/react@7", "@sentry/browser@7"]),
    (0, import_cli_helpers.addEnvVarTask)(
      "SENTRY_DSN",
      "",
      "https://docs.sentry.io/product/sentry-basics/dsn-explainer/"
    ),
    {
      title: "Setting up Sentry on the API and web sides",
      task: () => {
        return (0, import_cli_helpers.writeFilesTask)(
          {
            [import_path.default.join(rwPaths.api.lib, `sentry.${extension}`)]: import_fs_extra.default.readFileSync(
              import_path.default.join(__dirname, "templates/sentryApi.ts.template")
            ).toString(),
            [import_path.default.join(rwPaths.web.src, "lib", `sentry.${extension}`)]: import_fs_extra.default.readFileSync(
              import_path.default.join(__dirname, "templates/sentryWeb.ts.template")
            ).toString()
          },
          { existingFiles: force ? "OVERWRITE" : "SKIP" }
        );
      }
    },
    {
      title: "Implementing the Envelop plugin",
      task: async (ctx) => {
        const graphqlHandlerPath = import_path.default.join(
          rwPaths.api.functions,
          `graphql.${extension}`
        );
        const contentLines = import_fs_extra.default.readFileSync(graphqlHandlerPath).toString().split("\n");
        const handlerIndex = contentLines.findLastIndex(
          (line) => line.startsWith("export const handler = createGraphQLHandler({")
        );
        const pluginsIndex = contentLines.findLastIndex(
          (line) => line.includes("extraPlugins:")
        );
        if (handlerIndex === -1 || pluginsIndex !== -1) {
          ctx.addEnvelopPluginSkipped = true;
          return;
        }
        contentLines.splice(
          handlerIndex,
          1,
          "import 'src/lib/sentry'",
          "",
          "export const handler = createGraphQLHandler({",
          "extraPlugins: [useSentry({",
          "  includeRawResult: true,",
          "  includeResolverArgs: true,",
          "  includeExecuteVariables: true,",
          "})],"
        );
        contentLines.splice(0, 0, "import { useSentry } from '@envelop/sentry'");
        import_fs_extra.default.writeFileSync(
          graphqlHandlerPath,
          await (0, import_cli_helpers.prettify)("graphql.ts", contentLines.join("\n"))
        );
      }
    },
    {
      title: "Replacing Redwood's Error boundary",
      task: async () => {
        const contentLines = import_fs_extra.default.readFileSync(rwPaths.web.app).toString().split("\n");
        const webImportIndex = contentLines.findLastIndex(
          (line) => /^import { FatalErrorBoundary, RedwoodProvider } from '@redwoodjs\/web'$/.test(
            line
          )
        );
        contentLines.splice(
          webImportIndex,
          1,
          "import { RedwoodProvider } from '@redwoodjs/web'"
        );
        const boundaryOpenIndex = contentLines.findLastIndex(
          (line) => line.includes("<FatalErrorBoundary page={FatalErrorPage}>")
        );
        contentLines.splice(
          boundaryOpenIndex,
          1,
          "<Sentry.ErrorBoundary fallback={FatalErrorPage}>"
        );
        const boundaryCloseIndex = contentLines.findLastIndex(
          (line) => line.includes("</FatalErrorBoundary>")
        );
        contentLines.splice(boundaryCloseIndex, 1, "</Sentry.ErrorBoundary>");
        contentLines.splice(0, 0, "import Sentry from 'src/lib/sentry'");
        import_fs_extra.default.writeFileSync(
          rwPaths.web.app,
          await (0, import_cli_helpers.prettify)("App.tsx", contentLines.join("\n"))
        );
      }
    },
    {
      title: "One more thing...",
      task: (ctx) => {
        notes.push(
          import_cli_helpers.colors.important(
            "You will need to add `SENTRY_DSN` to `includeEnvironmentVariables` in redwood.toml."
          )
        );
        if (ctx.addEnvelopPluginSkipped) {
          notes.push(
            `${import_cli_helpers.colors.underline(
              "Make sure you implement the Sentry Envelop plugin:"
            )} https://redwoodjs.com/docs/cli-commands#sentry-envelop-plugin`
          );
        } else {
          notes.push(
            "Check out the RedwoodJS forums for more: https://community.redwoodjs.com/t/sentry-error-and-performance-monitoring-experimental/4880"
          );
        }
      }
    }
  ]);
  try {
    await tasks.run();
    console.log(notes.join("\n"));
  } catch (e) {
    if (isErrorWithMessage(e)) {
      (0, import_telemetry.errorTelemetry)(process.argv, e.message);
      console.error(import_cli_helpers.colors.error(e.message));
    }
    if (isErrorWithExitCode(e)) {
      process.exit(e.exitCode);
    }
    process.exit(1);
  }
};
function isErrorWithMessage(e) {
  return !!e && typeof e === "object" && "message" in e;
}
function isErrorWithExitCode(e) {
  return !!e && typeof e === "object" && "exitCode" in e && typeof e.exitCode === "number";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
