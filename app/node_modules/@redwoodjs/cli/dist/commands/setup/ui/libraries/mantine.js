"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mantine_exports = {};
__export(mantine_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(mantine_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
var import_configureStorybook = __toESM(require("../../../../lib/configureStorybook.js"));
var import_extendFile = require("../../../../lib/extendFile");
const command = "mantine";
const description = "Set up Mantine UI";
const ALL_KEYWORD = "all";
const ALL_MANTINE_PACKAGES = [
  "core",
  "dates",
  "dropzone",
  "form",
  "hooks",
  "modals",
  "notifications",
  "prism",
  "rte",
  "spotlight"
];
const MANTINE_THEME_AND_COMMENTS = `import { createTheme } from '@mantine/core'

/**
 * This object will be used to override Mantine theme defaults.
 * See https://mantine.dev/theming/mantine-provider/#theme-object for theming options
 * @type {import("@mantine/core").MantineThemeOverride}
 */
const theme = {}

export default createTheme(theme)
`;
function builder(yargs) {
  yargs.option("force", {
    alias: "f",
    default: false,
    description: "Overwrite existing configuration",
    type: "boolean"
  });
  yargs.option("install", {
    alias: "i",
    default: true,
    description: "Install packages",
    type: "boolean"
  });
  yargs.option("packages", {
    alias: "p",
    default: ["core", "hooks"],
    description: `Mantine packages to install. Specify '${ALL_KEYWORD}' to install all packages. Default: ['core', 'hooks']`,
    type: "array"
  });
}
async function handler({ force, install, packages }) {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup ui mantine",
    force,
    install,
    packages
  });
  const rwPaths = (0, import_lib.getPaths)();
  const configFilePath = import_path.default.join(rwPaths.web.config, "mantine.config.js");
  const installPackages = (packages.includes(ALL_KEYWORD) ? ALL_MANTINE_PACKAGES : packages).map((pack) => `@mantine/${pack}`).concat("postcss", "postcss-preset-mantine", "postcss-simple-vars");
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Installing packages...",
        skip: () => !install,
        task: () => {
          return new import_listr2.Listr(
            [
              {
                title: `Install ${installPackages.join(", ")}`,
                task: async () => {
                  await (0, import_execa.default)("yarn", [
                    "workspace",
                    "web",
                    "add",
                    "-D",
                    "@emotion/react",
                    ...installPackages
                  ]);
                }
              }
            ],
            { rendererOptions: { collapseSubtasks: false } }
          );
        }
      },
      {
        title: "Setting up Mantine...",
        skip: () => (0, import_extendFile.fileIncludes)(rwPaths.web.app, "MantineProvider"),
        task: () => (0, import_extendFile.extendJSXFile)(rwPaths.web.app, {
          insertComponent: {
            name: "MantineProvider",
            props: { theme: "theme" },
            within: "RedwoodProvider"
          },
          imports: [
            "import { MantineProvider } from '@mantine/core'",
            "import theme from 'config/mantine.config'",
            "import '@mantine/core/styles.css'"
          ]
        })
      },
      {
        title: "Configuring PostCSS...",
        task: () => {
          const postCSSConfigPath = rwPaths.web.postcss;
          if (!force && import_fs_extra.default.existsSync(postCSSConfigPath)) {
            throw new Error(
              "PostCSS config already exists.\nUse --force to override existing config."
            );
          } else {
            const postCSSConfig = import_fs_extra.default.readFileSync(
              import_path.default.join(
                __dirname,
                "../templates/mantine-postcss.config.js.template"
              ),
              "utf-8"
            );
            return import_fs_extra.default.outputFileSync(postCSSConfigPath, postCSSConfig);
          }
        }
      },
      {
        title: `Creating Theme File...`,
        task: () => {
          (0, import_lib.writeFile)(configFilePath, MANTINE_THEME_AND_COMMENTS, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Configure Storybook...",
        skip: () => (0, import_extendFile.fileIncludes)(rwPaths.web.storybookPreviewConfig, "withMantine"),
        task: async () => await (0, import_configureStorybook.default)(
          import_path.default.join(
            __dirname,
            "..",
            "templates",
            "mantine.storybook.preview.tsx.template"
          )
        )
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler
});
