"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var tailwindcss_exports = {};
__export(tailwindcss_exports, {
  aliases: () => aliases,
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(tailwindcss_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_fs_extra2 = require("fs-extra");
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
const command = "tailwindcss";
const aliases = ["tailwind", "tw"];
const description = "Set up tailwindcss and PostCSS";
const builder = (yargs) => {
  yargs.option("force", {
    alias: "f",
    default: false,
    description: "Overwrite existing configuration",
    type: "boolean"
  });
  yargs.option("install", {
    alias: "i",
    default: true,
    description: "Install packages",
    type: "boolean"
  });
};
const tailwindDirectives = [
  "@tailwind base;",
  "@tailwind components;",
  "@tailwind utilities;"
];
const tailwindDirectivesExist = (indexCSS) => tailwindDirectives.every(
  (tailwindDirective) => indexCSS.includes(tailwindDirective)
);
const tailwindImportsAndNotes = [
  "/**",
  " * START --- SETUP TAILWINDCSS EDIT",
  " *",
  " * `yarn rw setup ui tailwindcss` placed these directives here",
  " * to inject Tailwind's styles into your CSS.",
  " * For more information, see: https://tailwindcss.com/docs/installation",
  " */",
  ...tailwindDirectives,
  "/**",
  " * END --- SETUP TAILWINDCSS EDIT",
  " */\n"
];
const recommendedVSCodeExtensions = [
  "csstools.postcss",
  "bradlc.vscode-tailwindcss"
];
const recommendationTexts = {
  "csstools.postcss": (0, import_terminal_link.default)(
    "PostCSS Language Support",
    "https://marketplace.visualstudio.com/items?itemName=csstools.postcss"
  ),
  "bradlc.vscode-tailwindcss": (0, import_terminal_link.default)(
    "Tailwind CSS IntelliSense",
    "https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"
  )
};
async function recommendExtensionsToInstall() {
  if (!(0, import_lib.usingVSCode)()) {
    return;
  }
  let recommendations = [];
  try {
    const { stdout } = await (0, import_execa.default)("code", ["--list-extensions"]);
    const installedExtensions = stdout.split("\n").map((ext) => ext.trim());
    recommendations = recommendedVSCodeExtensions.filter(
      (ext) => !installedExtensions.includes(ext)
    );
  } catch {
    recommendations = recommendedVSCodeExtensions;
  }
  if (recommendations.length > 0) {
    console.log();
    console.log(
      import_colors.default.info(
        "For the best experience we recommend that you install the following " + (recommendations.length === 1 ? "extension:" : "extensions:")
      )
    );
    recommendations.forEach((extension) => {
      console.log(import_colors.default.info("  " + recommendationTexts[extension]));
    });
  }
}
const handler = async ({ force, install }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup ui tailwindcss",
    force,
    install
  });
  const rwPaths = (0, import_lib.getPaths)();
  const projectPackages = ["prettier-plugin-tailwindcss@^0.5.12"];
  const webWorkspacePackages = [
    "postcss",
    "postcss-loader",
    "tailwindcss",
    "autoprefixer"
  ];
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Installing project-wide packages...",
        skip: () => !install,
        task: () => {
          return new import_listr2.Listr(
            [
              {
                title: `Install ${projectPackages.join(", ")}`,
                task: async () => {
                  const yarnVersion = await (0, import_execa.default)("yarn", ["--version"]);
                  const isYarnV1 = yarnVersion.stdout.trim().startsWith("1");
                  await (0, import_execa.default)("yarn", [
                    "add",
                    "-D",
                    ...isYarnV1 ? ["-W"] : [],
                    ...projectPackages
                  ]);
                }
              }
            ],
            { rendererOptions: { collapseSubtasks: false } }
          );
        }
      },
      {
        title: "Installing web side packages...",
        skip: () => !install,
        task: () => {
          return new import_listr2.Listr(
            [
              {
                title: `Install ${webWorkspacePackages.join(", ")}`,
                task: async () => {
                  await (0, import_execa.default)("yarn", [
                    "workspace",
                    "web",
                    "add",
                    "-D",
                    ...webWorkspacePackages
                  ]);
                }
              }
            ],
            { rendererOptions: { collapseSubtasks: false } }
          );
        }
      },
      {
        title: "Configuring PostCSS...",
        task: () => {
          const postCSSConfigPath = rwPaths.web.postcss;
          if (!force && import_fs_extra.default.existsSync(postCSSConfigPath)) {
            throw new Error(
              "PostCSS config already exists.\nUse --force to override existing config."
            );
          } else {
            const postCSSConfig = import_fs_extra.default.readFileSync(
              import_path.default.join(__dirname, "../templates/postcss.config.js.template"),
              "utf-8"
            );
            return (0, import_fs_extra2.outputFileSync)(postCSSConfigPath, postCSSConfig);
          }
        }
      },
      {
        title: "Initializing Tailwind CSS...",
        task: async () => {
          const tailwindConfigPath = import_path.default.join(
            rwPaths.web.config,
            "tailwind.config.js"
          );
          if (import_fs_extra.default.existsSync(tailwindConfigPath)) {
            if (force) {
              import_fs_extra.default.unlinkSync(tailwindConfigPath);
            } else {
              throw new Error(
                "Tailwind CSS config already exists.\nUse --force to override existing config."
              );
            }
          }
          await (0, import_execa.default)("yarn", ["tailwindcss", "init", tailwindConfigPath], {
            cwd: rwPaths.web.base
          });
          const tailwindConfig = import_fs_extra.default.readFileSync(tailwindConfigPath, "utf-8");
          const newTailwindConfig = tailwindConfig.replace(
            "content: []",
            "content: ['src/**/*.{js,jsx,ts,tsx}']"
          );
          import_fs_extra.default.writeFileSync(tailwindConfigPath, newTailwindConfig);
        }
      },
      {
        title: "Adding directives to index.css...",
        task: (_ctx, task) => {
          const INDEX_CSS_PATH = import_path.default.join(rwPaths.web.src, "index.css");
          const indexCSS = import_fs_extra.default.readFileSync(INDEX_CSS_PATH, "utf-8");
          if (tailwindDirectivesExist(indexCSS)) {
            task.skip("Directives already exist in index.css");
          } else {
            const newIndexCSS = tailwindImportsAndNotes.join("\n") + indexCSS;
            import_fs_extra.default.writeFileSync(INDEX_CSS_PATH, newIndexCSS);
          }
        }
      },
      {
        title: "Updating 'scaffold.css' to use tailwind classes...",
        skip: () => {
          return !import_fs_extra.default.existsSync(import_path.default.join(rwPaths.web.src, "scaffold.css")) && "No 'scaffold.css' file to update";
        },
        task: async (_ctx, task) => {
          const overrideScaffoldCss = force || await task.prompt({
            type: "Confirm",
            message: "Do you want to override your 'scaffold.css' to use tailwind classes?"
          });
          if (!overrideScaffoldCss) {
            return task.skip("Skipping 'scaffold.css' update");
          }
          const tailwindScaffoldTemplate = import_fs_extra.default.readFileSync(
            import_path.default.join(
              __dirname,
              "..",
              "..",
              "..",
              "generate",
              "scaffold",
              "templates",
              "assets",
              "scaffold.tailwind.css.template"
            )
          );
          import_fs_extra.default.writeFileSync(
            import_path.default.join(rwPaths.web.src, "scaffold.css"),
            tailwindScaffoldTemplate
          );
        }
      },
      {
        title: "Adding recommended VS Code extensions to project settings...",
        skip: () => !(0, import_lib.usingVSCode)() && "Looks like you're not using VS Code",
        task: () => {
          const VS_CODE_EXTENSIONS_PATH = import_path.default.join(
            rwPaths.base,
            ".vscode/extensions.json"
          );
          let originalExtensionsJson = { recommendations: [] };
          if (import_fs_extra.default.existsSync(VS_CODE_EXTENSIONS_PATH)) {
            const originalExtensionsFile = import_fs_extra.default.readFileSync(
              VS_CODE_EXTENSIONS_PATH,
              "utf-8"
            );
            originalExtensionsJson = JSON.parse(originalExtensionsFile);
          }
          const newExtensionsJson = {
            ...originalExtensionsJson,
            recommendations: [
              ...originalExtensionsJson.recommendations,
              ...recommendedVSCodeExtensions
            ]
          };
          import_fs_extra.default.writeFileSync(
            VS_CODE_EXTENSIONS_PATH,
            JSON.stringify(newExtensionsJson, null, 2)
          );
        }
      },
      {
        title: "Adding tailwind intellisense plugin configuration to VS Code settings...",
        skip: () => !(0, import_lib.usingVSCode)() && "Looks like you're not using VS Code",
        task: () => {
          const VS_CODE_SETTINGS_PATH = import_path.default.join(
            rwPaths.base,
            ".vscode/settings.json"
          );
          const classAttributes = [
            "class",
            "className",
            "activeClassName",
            "errorClassName"
          ];
          let newSettingsJson = {
            ["tailwindCSS.classAttributes"]: classAttributes
          };
          if (import_fs_extra.default.existsSync(VS_CODE_SETTINGS_PATH)) {
            const originalSettingsFile = import_fs_extra.default.readFileSync(
              VS_CODE_SETTINGS_PATH,
              "utf-8"
            );
            const originalSettingsJson = JSON.parse(
              originalSettingsFile || "{}"
            );
            const originalTwClassAttributesJson = originalSettingsJson["tailwindCSS.classAttributes"] || [];
            const mergedClassAttributes = Array.from(
              /* @__PURE__ */ new Set([...classAttributes, ...originalTwClassAttributesJson])
            );
            newSettingsJson = {
              ...originalSettingsJson,
              ["tailwindCSS.classAttributes"]: mergedClassAttributes
            };
          }
          import_fs_extra.default.writeFileSync(
            VS_CODE_SETTINGS_PATH,
            JSON.stringify(newSettingsJson, null, 2) + "\n"
          );
        }
      },
      {
        title: "Adding tailwind config entry in prettier...",
        task: async (_ctx) => {
          const prettierConfigPath = import_path.default.join(
            rwPaths.base,
            "prettier.config.js"
          );
          const prettierConfig = import_fs_extra.default.readFileSync(prettierConfigPath, "utf-8");
          const tailwindConfigPath = import_path.default.relative(
            rwPaths.base,
            import_path.default.posix.join(rwPaths.web.config, "tailwind.config.js")
          ).replaceAll("\\", "/");
          let newPrettierConfig = prettierConfig;
          if (newPrettierConfig.includes("tailwindConfig: ")) {
            if (force) {
              newPrettierConfig = newPrettierConfig.replace(
                /tailwindConfig: .*(,)?/,
                `tailwindConfig: './${tailwindConfigPath}',`
              );
            } else {
              throw new Error(
                "tailwindConfig setting already exists in prettier configuration.\nUse --force to override existing config."
              );
            }
          } else {
            newPrettierConfig = newPrettierConfig.replace(
              /,(\n\s*)(\}\n?)$/,
              `,
  tailwindConfig: './${tailwindConfigPath}',$1$2`
            );
          }
          import_fs_extra.default.writeFileSync(prettierConfigPath, newPrettierConfig);
        }
      },
      {
        title: "Adding tailwind prettier plugin...",
        task: async (_ctx, task) => {
          const prettierConfigPath = import_path.default.join(
            rwPaths.base,
            "prettier.config.js"
          );
          const prettierConfig = import_fs_extra.default.readFileSync(prettierConfigPath, "utf-8");
          let newPrettierConfig = prettierConfig;
          if (newPrettierConfig.includes("plugins: [")) {
            const pluginsMatch = newPrettierConfig.match(
              /plugins: \[[\sa-z\(\)'\-,]*]/
            );
            const matched = pluginsMatch && pluginsMatch[0];
            if (matched && (matched.includes("'prettier-plugin-tailwindcss'") || matched.includes('"prettier-plugin-tailwindcss"'))) {
              task.skip(
                "tailwindcss-plugin-prettier already required in plugins"
              );
            } else {
              newPrettierConfig = newPrettierConfig.replace(
                /plugins: \[(\n\s+)*/,
                `plugins: [$'prettier-plugin-tailwindcss',$1`
              );
            }
          } else {
            newPrettierConfig = newPrettierConfig.replace(
              /,(\n\s*)(\}\n?)$/,
              `,
  plugins: ['prettier-plugin-tailwindcss'],$1$2`
            );
          }
          import_fs_extra.default.writeFileSync(prettierConfigPath, newPrettierConfig);
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
    await recommendExtensionsToInstall();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  builder,
  command,
  description,
  handler
});
