"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var uploadsHandler_exports = {};
__export(uploadsHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(uploadsHandler_exports);
var import_node_path = __toESM(require("node:path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_prettier = require("prettier");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
var import_runTransform = require("../../../lib/runTransform");
const handler = async ({ force }) => {
  const projectIsTypescript = (0, import_project.isTypeScriptProject)();
  const redwoodVersion = require(import_node_path.default.join((0, import_lib.getPaths)().base, "package.json")).devDependencies["@redwoodjs/core"] ?? "latest";
  const tasks = new import_listr2.Listr(
    [
      {
        title: `Adding api/src/lib/uploads.${projectIsTypescript ? "ts" : "js"}...`,
        task: async () => {
          const templatePath = import_node_path.default.resolve(
            __dirname,
            "templates",
            "srcLibUploads.ts.template"
          );
          const templateContent = import_fs_extra.default.readFileSync(templatePath, {
            encoding: "utf8",
            flag: "r"
          });
          const uploadsPath = import_node_path.default.join(
            (0, import_lib.getPaths)().api.lib,
            `uploads.${projectIsTypescript ? "ts" : "js"}`
          );
          const uploadsContent = projectIsTypescript ? templateContent : await (0, import_lib.transformTSToJS)(uploadsPath, templateContent);
          return (0, import_lib.writeFile)(uploadsPath, uploadsContent, {
            overwriteExisting: force
          });
        }
      },
      {
        title: `Adding signedUrl function...`,
        task: async () => {
          const templatePath = import_node_path.default.resolve(
            __dirname,
            "templates",
            "signedUrl.ts.template"
          );
          const templateContent = import_fs_extra.default.readFileSync(templatePath, {
            encoding: "utf8",
            flag: "r"
          });
          const uploadsPath = import_node_path.default.join(
            (0, import_lib.getPaths)().api.functions,
            `signedUrl.${projectIsTypescript ? "ts" : "js"}`
          );
          const uploadsContent = projectIsTypescript ? templateContent : await (0, import_lib.transformTSToJS)(uploadsPath, templateContent);
          return (0, import_lib.writeFile)(uploadsPath, uploadsContent, {
            overwriteExisting: force
          });
        }
      },
      {
        ...(0, import_cli_helpers.addApiPackages)([`@redwoodjs/storage@${redwoodVersion}`]),
        title: "Adding dependencies to your api side..."
      },
      {
        title: "Modifying api/src/lib/db to add uploads prisma extension..",
        task: async () => {
          const dbPath = import_node_path.default.join(
            (0, import_lib.getPaths)().api.lib,
            `db.${projectIsTypescript ? "ts" : "js"}`
          );
          const transformResult = await (0, import_runTransform.runTransform)({
            transformPath: import_node_path.default.join(__dirname, "dbCodemod.js"),
            targetPaths: [dbPath]
          });
          if (transformResult.error) {
            if (transformResult.error === "RW_CODEMOD_ERR_OLD_FORMAT") {
              throw new Error(
                "It looks like your src/lib/db file is using the old format. Please update it as per the v8 upgrade guide: https://redwoodjs.com/upgrade/v8#database-file-structure-change. And run again. \n\nYou can also manually modify your api/src/lib/db to include the prisma extension: https://docs.redwoodjs.com/docs/uploads/#attaching-the-prisma-extension"
              );
            }
            throw new Error(
              "Could not add the prisma extension. \n Please modify your api/src/lib/db to include the prisma extension: https://docs.redwoodjs.com/docs/uploads/#attaching-the-prisma-extension"
            );
          }
        }
      },
      {
        title: "Prettifying changed files",
        task: async (_ctx, task) => {
          const prettifyPaths = [
            import_node_path.default.join((0, import_lib.getPaths)().api.lib, "db.js"),
            import_node_path.default.join((0, import_lib.getPaths)().api.lib, "db.ts"),
            import_node_path.default.join((0, import_lib.getPaths)().api.lib, "uploads.js"),
            import_node_path.default.join((0, import_lib.getPaths)().api.lib, "uploads.ts")
          ];
          for (const prettifyPath of prettifyPaths) {
            try {
              if (!import_fs_extra.default.existsSync(prettifyPath)) {
                continue;
              }
              const source = import_fs_extra.default.readFileSync(prettifyPath, "utf-8");
              const prettierOptions = await (0, import_cli_helpers.getPrettierOptions)();
              const prettifiedApp = await (0, import_prettier.format)(source, {
                ...prettierOptions,
                parser: "babel-ts"
              });
              import_fs_extra.default.writeFileSync(prettifyPath, prettifiedApp, "utf-8");
            } catch {
              task.output = "Couldn't prettify the changes. Please reformat the files manually if needed.";
            }
          }
        }
      },
      {
        title: "One more thing...",
        task: (_ctx, task) => {
          task.title = `One more thing...

          ${import_colors.default.success("\nUploads and storage configured!\n")}

          Remember to add UPLOADS_SECRET to your .env file. You can generate one with ${import_colors.default.highlight("yarn rw generate secret")}


          Check out the docs for more info:
          ${import_colors.default.link("https://docs.redwoodjs.com/docs/uploads")}

        `;
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false }
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
