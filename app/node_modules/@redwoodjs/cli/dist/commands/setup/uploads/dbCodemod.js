"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_jscodeshift = __toESM(require("jscodeshift"));
module.exports = function transform(fileInfo) {
  const root = (0, import_jscodeshift.default)(fileInfo.source);
  const imports = root.find(import_jscodeshift.default.ImportDeclaration);
  imports.at(-1).insertAfter(
    import_jscodeshift.default.importDeclaration(
      [import_jscodeshift.default.importSpecifier(import_jscodeshift.default.identifier("storagePrismaExtension"))],
      import_jscodeshift.default.literal("./uploads")
    )
  );
  root.find(import_jscodeshift.default.VariableDeclaration, { declarations: [{ id: { name: "db" } }] }).forEach((path) => {
    const dbDeclaration = path.node.declarations[0];
    if (import_jscodeshift.default.VariableDeclarator.check(dbDeclaration) && import_jscodeshift.default.NewExpression.check(dbDeclaration.init)) {
      throw new Error("RW_CODEMOD_ERR_OLD_FORMAT");
    }
    if (import_jscodeshift.default.VariableDeclarator.check(dbDeclaration) && import_jscodeshift.default.Expression.check(dbDeclaration.init)) {
      const newInit = import_jscodeshift.default.callExpression(
        import_jscodeshift.default.memberExpression(dbDeclaration.init, import_jscodeshift.default.identifier("$extends")),
        [import_jscodeshift.default.identifier("storagePrismaExtension")]
      );
      dbDeclaration.init = newInit;
    }
  });
  return root.toSource();
};
