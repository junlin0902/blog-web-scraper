"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dockerHandler_exports = {};
__export(dockerHandler_exports, {
  getVersionOfRedwoodPackageToInstall: () => getVersionOfRedwoodPackageToInstall,
  handler: () => handler
});
module.exports = __toCommonJS(dockerHandler_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_colors = __toESM(require("../../../lib/colors"));
async function handler({ force }) {
  const TEMPLATE_DIR = import_path.default.join(__dirname, "templates");
  let dockerfileTemplateContent = import_fs_extra.default.readFileSync(
    import_path.default.resolve(TEMPLATE_DIR, "Dockerfile"),
    "utf-8"
  );
  const dockerComposeDevTemplateContent = import_fs_extra.default.readFileSync(
    import_path.default.resolve(TEMPLATE_DIR, "docker-compose.dev.yml"),
    "utf-8"
  );
  const dockerComposeProdTemplateContent = import_fs_extra.default.readFileSync(
    import_path.default.resolve(TEMPLATE_DIR, "docker-compose.prod.yml"),
    "utf-8"
  );
  const dockerignoreTemplateContent = import_fs_extra.default.readFileSync(
    import_path.default.resolve(TEMPLATE_DIR, "dockerignore"),
    "utf-8"
  );
  const dockerfilePath = import_path.default.join((0, import_project_config.getPaths)().base, "Dockerfile");
  const dockerComposeDevFilePath = import_path.default.join(
    (0, import_project_config.getPaths)().base,
    "docker-compose.dev.yml"
  );
  const dockerComposeProdFilePath = import_path.default.join(
    (0, import_project_config.getPaths)().base,
    "docker-compose.prod.yml"
  );
  const dockerignoreFilePath = import_path.default.join((0, import_project_config.getPaths)().base, ".dockerignore");
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Adding the official yarn workspace-tools plugin...",
        task: async (_ctx, task) => {
          const { stdout } = await import_execa.default.command("yarn plugin runtime --json", {
            cwd: (0, import_project_config.getPaths)().base
          });
          const hasWorkspaceToolsPlugin = stdout.trim().split("\n").map(JSON.parse).some(({ name }) => name === "@yarnpkg/plugin-workspace-tools");
          if (hasWorkspaceToolsPlugin) {
            task.skip(
              "The official yarn workspace-tools plugin is already installed"
            );
            return;
          }
          return import_execa.default.command("yarn plugin import workspace-tools", {
            cwd: (0, import_project_config.getPaths)().base
          }).stdout;
        }
      },
      {
        title: "Adding @redwoodjs/api-server and @redwoodjs/web-server...",
        task: async (_ctx, task) => {
          const apiServerPackageName = "@redwoodjs/api-server";
          const { dependencies: apiDependencies } = import_fs_extra.default.readJSONSync(
            import_path.default.join((0, import_project_config.getPaths)().api.base, "package.json")
          );
          const hasApiServerPackage = Object.keys(apiDependencies).includes(apiServerPackageName);
          const webServerPackageName = "@redwoodjs/web-server";
          const { dependencies: webDependencies } = import_fs_extra.default.readJSONSync(
            import_path.default.join((0, import_project_config.getPaths)().web.base, "package.json")
          );
          const hasWebServerPackage = Object.keys(webDependencies).includes(webServerPackageName);
          if (hasApiServerPackage && hasWebServerPackage) {
            task.skip(
              `${apiServerPackageName} and ${webServerPackageName} are already installed`
            );
            return;
          }
          if (!hasApiServerPackage) {
            const apiServerPackageVersion = await getVersionOfRedwoodPackageToInstall(apiServerPackageName);
            await import_execa.default.command(
              `yarn workspace api add ${apiServerPackageName}@${apiServerPackageVersion}`,
              {
                cwd: (0, import_project_config.getPaths)().base
              }
            );
          }
          if (!hasWebServerPackage) {
            const webServerPackageVersion = await getVersionOfRedwoodPackageToInstall(webServerPackageName);
            await import_execa.default.command(
              `yarn workspace web add ${webServerPackageName}@${webServerPackageVersion}`,
              {
                cwd: (0, import_project_config.getPaths)().base
              }
            );
          }
          return import_execa.default.command(`yarn dedupe`, {
            cwd: (0, import_project_config.getPaths)().base
          }).stdout;
        }
      },
      {
        title: "Adding the Dockerfile and compose files...",
        task: (_ctx, task) => {
          const shouldSkip = [
            dockerfilePath,
            dockerComposeDevFilePath,
            dockerComposeProdFilePath,
            dockerignoreFilePath
          ].every(import_fs_extra.default.existsSync);
          if (!force && shouldSkip) {
            task.skip("The Dockerfile and compose files already exist");
            return;
          }
          const config = (0, import_project_config.getConfig)();
          const { includeEnvironmentVariables } = config.web;
          if (includeEnvironmentVariables.length) {
            const webBuildWithPrerenderStageDelimeter = "FROM api_build as web_build_with_prerender\n";
            const webBuildStageDelimeter = "FROM base as web_build\n";
            const [
              beforeWebBuildWithPrerenderStageDelimeter,
              afterWebBuildWithPrerenderStageDelimeter
            ] = dockerfileTemplateContent.split(
              webBuildWithPrerenderStageDelimeter
            );
            const [beforeWebBuildStageDelimeter, afterWebBuildStageDelimeter] = afterWebBuildWithPrerenderStageDelimeter.split(
              webBuildStageDelimeter
            );
            dockerfileTemplateContent = [
              beforeWebBuildWithPrerenderStageDelimeter.trim(),
              webBuildWithPrerenderStageDelimeter,
              ...includeEnvironmentVariables.map((envVar) => `ARG ${envVar}`),
              "",
              beforeWebBuildStageDelimeter.trim(),
              webBuildStageDelimeter,
              ...includeEnvironmentVariables.map((envVar) => `ARG ${envVar}`),
              afterWebBuildStageDelimeter
            ].join("\n");
          }
          (0, import_cli_helpers.writeFile)(
            dockerfilePath,
            dockerfileTemplateContent,
            {
              existingFiles: force ? "OVERWRITE" : "SKIP"
            },
            task
          );
          (0, import_cli_helpers.writeFile)(
            dockerComposeDevFilePath,
            dockerComposeDevTemplateContent,
            {
              existingFiles: force ? "OVERWRITE" : "SKIP"
            },
            task
          );
          (0, import_cli_helpers.writeFile)(
            dockerComposeProdFilePath,
            dockerComposeProdTemplateContent,
            { existingFiles: force ? "OVERWRITE" : "SKIP" },
            task
          );
          (0, import_cli_helpers.writeFile)(
            dockerignoreFilePath,
            dockerignoreTemplateContent,
            {
              existingFiles: force ? "OVERWRITE" : "SKIP"
            },
            task
          );
        }
      },
      {
        title: "Adding postgres to .gitignore...",
        task: (_ctx, task) => {
          const gitignoreFilePath = import_path.default.join((0, import_project_config.getPaths)().base, ".gitignore");
          const gitignoreFileContent = import_fs_extra.default.readFileSync(
            gitignoreFilePath,
            "utf-8"
          );
          if (gitignoreFileContent.includes("postgres")) {
            task.skip("postgres is already ignored by git");
            return;
          }
          (0, import_cli_helpers.writeFile)(
            gitignoreFilePath,
            gitignoreFileContent.concat("\npostgres\n"),
            { existingFiles: "OVERWRITE" }
          );
        }
      },
      {
        title: "Adding config to redwood.toml...",
        task: () => {
          const redwoodTomlPath = (0, import_project_config.getConfigPath)();
          let configContent = import_fs_extra.default.readFileSync(redwoodTomlPath, "utf-8");
          const browserOpenRegExp = /open\s*=\s*true/;
          if (browserOpenRegExp.test(configContent)) {
            configContent = configContent.replace(
              /open\s*=\s*true/,
              "open = false"
            );
          }
          (0, import_cli_helpers.writeFile)(redwoodTomlPath, configContent, {
            existingFiles: "OVERWRITE"
          });
        }
      }
    ],
    {
      renderer: process.env.NODE_ENV === "test" ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
    console.log(
      [
        "",
        "We've written four files:",
        "",
        "- ./Dockerfile",
        "- ./.dockerignore",
        "- ./docker-compose.dev.yml",
        "- ./docker-compose.prod.yml",
        "",
        "To start the docker compose dev:",
        "",
        "  docker compose -f docker-compose.dev.yml up ",
        "",
        "Then, connect to the container and migrate your database:",
        "",
        "  docker compose -f ./docker-compose.dev.yml run --rm -it console /bin/bash",
        "  root@...:/home/node/app# yarn rw prisma migrate dev",
        "",
        "We assume you're using Postgres. If you're not, you'll need to make other changes to switch over.",
        "Lastly, ensure you have Docker. If you don't, see https://docs.docker.com/desktop/",
        "",
        "There's a lot in the Dockerfile and there's a reason for every line.",
        "Be sure to check out the docs: https://redwoodjs.com/docs/docker"
      ].join("\n")
    );
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}
async function getVersionOfRedwoodPackageToInstall(module2) {
  const packageJsonPath = require.resolve("@redwoodjs/cli/package.json", {
    paths: [(0, import_project_config.getPaths)().base]
  });
  let { version } = import_fs_extra.default.readJSONSync(packageJsonPath);
  const packumentP = await fetch(`https://registry.npmjs.org/${module2}`);
  const packument = await packumentP.json();
  if (version.includes("+")) {
    version = version.split("+")[0];
  }
  const versionIsPublished = Object.keys(packument.versions).includes(version);
  if (!versionIsPublished) {
    version = "canary";
  }
  return version;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getVersionOfRedwoodPackageToInstall,
  handler
});
