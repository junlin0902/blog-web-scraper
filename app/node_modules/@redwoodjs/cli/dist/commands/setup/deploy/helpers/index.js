"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var helpers_exports = {};
__export(helpers_exports, {
  addFilesTask: () => addFilesTask,
  addToDotEnvTask: () => addToDotEnvTask,
  addToGitIgnoreTask: () => addToGitIgnoreTask,
  preRequisiteCheckTask: () => preRequisiteCheckTask,
  updateApiURLTask: () => updateApiURLTask
});
module.exports = __toCommonJS(helpers_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_lib = require("../../../../lib");
const REDWOOD_TOML_PATH = import_path.default.join((0, import_lib.getPaths)().base, "redwood.toml");
const updateApiURLTask = (apiUrl) => {
  return {
    title: "Updating API URL in redwood.toml...",
    task: () => {
      const redwoodToml = import_fs_extra.default.readFileSync(REDWOOD_TOML_PATH).toString();
      let newRedwoodToml = redwoodToml;
      if (redwoodToml.match(/apiUrl/)) {
        newRedwoodToml = newRedwoodToml.replace(
          /apiUrl.*/g,
          `apiUrl = "${apiUrl}"`
        );
      } else if (redwoodToml.match(/\[web\]/)) {
        newRedwoodToml = newRedwoodToml.replace(
          /\[web\]/,
          `[web]
  apiUrl = "${apiUrl}"`
        );
      } else {
        newRedwoodToml += `[web]
  apiUrl = "${apiUrl}"`;
      }
      import_fs_extra.default.writeFileSync(REDWOOD_TOML_PATH, newRedwoodToml);
    }
  };
};
const preRequisiteCheckTask = (preRequisites) => {
  return {
    title: "Checking pre-requisites",
    task: () => new import_listr2.Listr(
      preRequisites.map((preReq) => {
        return {
          title: preReq.title,
          task: async () => {
            try {
              await (0, import_execa.default)(...preReq.command);
            } catch (error) {
              error.message = error.message + "\n" + preReq.errorMessage;
              throw error;
            }
          }
        };
      })
    )
  };
};
const addFilesTask = ({
  files,
  force = false,
  title = "Adding config"
}) => {
  return {
    title: `${title}...`,
    task: () => {
      let fileNameToContentMap = {};
      files.forEach((fileData) => {
        fileNameToContentMap[fileData.path] = fileData.content;
      });
      return (0, import_lib.writeFilesTask)(fileNameToContentMap, { overwriteExisting: force });
    }
  };
};
const addToGitIgnoreTask = ({ paths }) => {
  return {
    title: "Updating .gitignore...",
    skip: () => {
      if (!import_fs_extra.default.existsSync(import_path.default.resolve((0, import_lib.getPaths)().base, ".gitignore"))) {
        return "No gitignore present, skipping.";
      }
    },
    task: async (_ctx, task) => {
      const gitIgnore = import_path.default.resolve((0, import_lib.getPaths)().base, ".gitignore");
      const content = import_fs_extra.default.readFileSync(gitIgnore).toString();
      if (paths.every((item) => content.includes(item))) {
        task.skip(".gitignore already includes the additions.");
      }
      import_fs_extra.default.appendFileSync(gitIgnore, ["\n", "# Deployment", ...paths].join("\n"));
    }
  };
};
const addToDotEnvTask = ({ lines }) => {
  return {
    title: "Updating .env...",
    skip: () => {
      if (!import_fs_extra.default.existsSync(import_path.default.resolve((0, import_lib.getPaths)().base, ".env"))) {
        return "No .env present, skipping.";
      }
    },
    task: async (_ctx, task) => {
      const env = import_path.default.resolve((0, import_lib.getPaths)().base, ".env");
      const content = import_fs_extra.default.readFileSync(env).toString();
      if (lines.every((line) => content.includes(line.split("=")[0]))) {
        task.skip(".env already includes the additions.");
      }
      import_fs_extra.default.appendFileSync(env, lines.join("\n"));
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addFilesTask,
  addToDotEnvTask,
  addToGitIgnoreTask,
  preRequisiteCheckTask,
  updateApiURLTask
});
