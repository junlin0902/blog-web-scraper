"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var api_exports = {};
__export(api_exports, {
  PROJECT_NAME: () => PROJECT_NAME,
  SERVERLESS_API_YML: () => SERVERLESS_API_YML
});
module.exports = __toCommonJS(api_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_lib = require("../../../../../lib");
const PROJECT_NAME = import_path.default.basename((0, import_lib.getPaths)().base);
const SERVERLESS_API_YML = `# See the full yml reference at https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: ${PROJECT_NAME}-api

# Uncomment \`org\` and \`app\` and enter manually if you want to integrate your
# deployment with the Serverless dashboard, or run \`yarn serverless\` in ./api to be
# prompted to connect to an app and these will be filled in for you.
# See https://www.serverless.com/framework/docs/dashboard/ for more details.
# org: your-org
# app: your-app

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1 # AWS region where the service will be deployed, defaults to N. Virginia
  httpApi:          # HTTP API is used by default. To learn about the available options in API Gateway, see https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html
    cors:
      allowedOrigins:
        - '*' # This is the default value. You can remove this line if you want to restrict the CORS to a specific origin.
      # allowCredentials: true # allowCredentials should only be used when allowedOrigins doesn't include '*'
      allowedHeaders:
        - authorization
        - auth-provider
        - content-type
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
    payload: '1.0'
  stackTags:
    source: serverless
    name: Redwood Lambda API with HTTP API Gateway
  tags:
    name: Redwood Lambda API with HTTP API Gateway
  environment:
    # Add environment variables here, either in the form
    # VARIABLE_NAME: \${env:VARIABLE_NAME} for vars in your local environment, or
    # VARIABLE_NAME: \${param:VARIABLE_NAME} for vars from the Serverless dashboard

package:
  individually: true
  patterns:
    - "!node_modules/.prisma/client/libquery_engine-*"
    - "node_modules/.prisma/client/libquery_engine-rhel-*"
    - "!node_modules/prisma/libquery_engine-*"
    - "!node_modules/@prisma/engines/**"

${import_fs_extra.default.existsSync(import_path.default.resolve((0, import_lib.getPaths)().api.functions)) ? `functions:
  ${import_fs_extra.default.readdirSync(import_path.default.resolve((0, import_lib.getPaths)().api.functions)).map((file) => {
  const basename = import_path.default.parse(file).name;
  return `${basename}:
    description: ${basename} function deployed on AWS Lambda
    package:
      artifact: dist/zipball/${basename}.zip
    memorySize: 1024 # in megabytes
    timeout: 25      # seconds (max: 900 [15 minutes])
    tags:            # tags for this specific lambda function
      endpoint: /${basename}
    handler: ${basename}.handler
    events:
      - httpApi:     # if a function should be limited to only GET or POST you can remove one or the other here
          path: /${basename}
          method: GET
      - httpApi:
          path: /${basename}
          method: POST
`;
}).join("  ")}` : ""}
`;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PROJECT_NAME,
  SERVERLESS_API_YML
});
