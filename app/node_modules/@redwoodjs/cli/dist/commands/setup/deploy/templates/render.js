"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var render_exports = {};
__export(render_exports, {
  POSTGRES_YAML: () => POSTGRES_YAML,
  PROJECT_NAME: () => PROJECT_NAME,
  RENDER_HEALTH_CHECK: () => RENDER_HEALTH_CHECK,
  RENDER_YAML: () => RENDER_YAML,
  SQLITE_YAML: () => SQLITE_YAML
});
module.exports = __toCommonJS(render_exports);
var import_path = __toESM(require("path"));
var import_lib = require("../../../../lib");
const PROJECT_NAME = import_path.default.basename((0, import_lib.getPaths)().base);
const RENDER_YAML = (database) => {
  return `# Quick links to the docs:
# - Redwood on Render: https://render.com/docs/deploy-redwood
# - Render's Blueprint spec: https://render.com/docs/yaml-spec

services:
- name: ${PROJECT_NAME}-web
  type: web
  env: static
  buildCommand: corepack enable && yarn install && yarn rw deploy render web
  staticPublishPath: ./web/dist

  envVars:
  - key: SKIP_INSTALL_DEPS
    value: true

  routes:
  - type: rewrite
    source: /.redwood/functions/*
    # Replace \`destination\` here after your first deploy:
    #
    # \`\`\`
    # destination: https://my-redwood-project-api.onrender.com/*
    # \`\`\`
    destination: replace_with_api_url/*
  - type: rewrite
    source: /*
    destination: /200.html

- name: ${PROJECT_NAME}-api
  type: web
  plan: free
  env: node
  region: oregon
  buildCommand: corepack enable && yarn install && yarn rw build api
  startCommand: yarn rw deploy render api

  envVars:
${database}
`;
};
const POSTGRES_YAML = `  - key: DATABASE_URL
    fromDatabase:
      name: ${PROJECT_NAME}-db
      property: connectionString

databases:
  - name: ${PROJECT_NAME}-db
    region: oregon`;
const SQLITE_YAML = `  - key: DATABASE_URL
    value: file:./data/sqlite.db
  disk:
    name: sqlite-data
    mountPath: /opt/render/project/src/api/db/data
    sizeGB: 1`;
const RENDER_HEALTH_CHECK = `// render-health-check
export const handler = async () => {
  return {
    statusCode: 200,
  }
}
`;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  POSTGRES_YAML,
  PROJECT_NAME,
  RENDER_HEALTH_CHECK,
  RENDER_YAML,
  SQLITE_YAML
});
