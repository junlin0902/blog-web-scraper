"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var flightcontrol_exports = {};
__export(flightcontrol_exports, {
  alias: () => alias,
  builder: () => builder,
  command: () => command,
  description: () => description,
  getFlightcontrolJson: () => getFlightcontrolJson,
  handler: () => handler
});
module.exports = __toCommonJS(flightcontrol_exports);
var import_os = require("os");
var import_path = __toESM(require("path"));
var import_internals = require("@prisma/internals");
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
var import_helpers = require("../helpers");
var import_flightcontrol = require("../templates/flightcontrol");
const command = "flightcontrol";
const alias = "fc";
const description = "Setup Flightcontrol deploy";
const getFlightcontrolJson = async (database) => {
  if (database === "none") {
    return {
      path: import_path.default.join((0, import_lib.getPaths)().base, "flightcontrol.json"),
      content: import_flightcontrol.flightcontrolConfig
    };
  }
  if (!import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().base, "api/db/schema.prisma"))) {
    throw new Error("Could not find prisma schema at 'api/db/schema.prisma'");
  }
  const schema = await (0, import_internals.getSchema)(
    import_path.default.join((0, import_lib.getPaths)().base, "api/db/schema.prisma")
  );
  const config = await (0, import_internals.getConfig)({ datamodel: schema });
  const detectedDatabase = config.datasources[0].activeProvider;
  if (detectedDatabase === database) {
    let dbService;
    switch (database) {
      case "postgresql":
        dbService = import_flightcontrol.postgresDatabaseService;
        break;
      case "mysql":
        dbService = import_flightcontrol.mysqlDatabaseService;
        break;
      default:
        throw new Error(`
       Unexpected datasource provider found: ${database}`);
    }
    return {
      path: import_path.default.join((0, import_lib.getPaths)().base, "flightcontrol.json"),
      content: {
        ...import_flightcontrol.flightcontrolConfig,
        environments: [
          {
            ...import_flightcontrol.flightcontrolConfig.environments[0],
            services: [
              ...import_flightcontrol.flightcontrolConfig.environments[0].services.map((service) => {
                if (service.id === "redwood-api") {
                  return {
                    ...service,
                    envVariables: {
                      ...service.envVariables,
                      ...import_flightcontrol.databaseEnvVariables
                    }
                  };
                }
                return service;
              }),
              dbService
            ]
          }
        ]
      }
    };
  } else {
    throw new Error(`
    Prisma datasource provider is detected to be ${detectedDatabase}.

    Update your schema.prisma provider to be postgresql or mysql, then run
    yarn rw prisma migrate dev
    yarn rw setup deploy flightcontrol
    `);
  }
};
const updateGraphQLFunction = () => {
  return {
    title: "Adding CORS config to createGraphQLHandler...",
    task: (_ctx) => {
      const graphqlTsPath = import_path.default.join(
        (0, import_lib.getPaths)().base,
        "api/src/functions/graphql.ts"
      );
      const graphqlJsPath = import_path.default.join(
        (0, import_lib.getPaths)().base,
        "api/src/functions/graphql.js"
      );
      let graphqlFunctionsPath;
      if (import_fs_extra.default.existsSync(graphqlTsPath)) {
        graphqlFunctionsPath = graphqlTsPath;
      } else if (import_fs_extra.default.existsSync(graphqlJsPath)) {
        graphqlFunctionsPath = graphqlJsPath;
      } else {
        console.log(`
    Couldn't find graphql handler in api/src/functions/graphql.js.
    You'll have to add the following cors config manually:

      cors: { origin: process.env.REDWOOD_WEB_URL, credentials: true}
    `);
        return;
      }
      const graphqlContent = import_fs_extra.default.readFileSync(graphqlFunctionsPath, "utf8").split(import_os.EOL);
      const graphqlHanderIndex = graphqlContent.findIndex(
        (line) => line.includes("createGraphQLHandler({")
      );
      if (graphqlHanderIndex === -1) {
        console.log(`
    Couldn't find graphql handler in api/src/functions/graphql.js.
    You'll have to add the following cors config manually:

      cors: { origin: process.env.REDWOOD_WEB_URL, credentials: true}
    `);
        return;
      }
      graphqlContent.splice(
        graphqlHanderIndex + 1,
        0,
        "  cors: { origin: process.env.REDWOOD_WEB_URL, credentials: true },"
      );
      import_fs_extra.default.writeFileSync(graphqlFunctionsPath, graphqlContent.join(import_os.EOL));
    }
  };
};
const updateDbAuth = () => {
  return {
    title: "Updating dbAuth cookie config (if used)...",
    task: (_ctx) => {
      const authTsPath = import_path.default.join((0, import_lib.getPaths)().base, "api/src/functions/auth.ts");
      const authJsPath = import_path.default.join((0, import_lib.getPaths)().base, "api/src/functions/auth.js");
      let authFnPath;
      if (import_fs_extra.default.existsSync(authTsPath)) {
        authFnPath = authTsPath;
      } else if (import_fs_extra.default.existsSync(authJsPath)) {
        authFnPath = authJsPath;
      } else {
        console.log(`Skipping, did not detect api/src/functions/auth.js`);
        return;
      }
      const authContent = import_fs_extra.default.readFileSync(authFnPath, "utf8").split(import_os.EOL);
      const sameSiteLineIndex = authContent.findIndex(
        (line) => line.match(/SameSite:.*,/)
      );
      if (sameSiteLineIndex === -1) {
        console.log(`
    Couldn't find cookie SameSite config in api/src/functions/auth.js.

    You need to ensure SameSite is set to "None"
    `);
        return;
      }
      authContent[sameSiteLineIndex] = `      SameSite: process.env.NODE_ENV === 'development' ? 'Strict' : 'None',`;
      const dbHandlerIndex = authContent.findIndex(
        (line) => line.includes("new DbAuthHandler(")
      );
      if (dbHandlerIndex === -1) {
        console.log(`
    Couldn't find DbAuthHandler in api/src/functions/auth.js.
    You'll have to add the following cors config manually:

      cors: { origin: process.env.REDWOOD_WEB_URL, credentials: true}
    `);
        return;
      }
      authContent.splice(
        dbHandlerIndex + 1,
        0,
        "  cors: { origin: process.env.REDWOOD_WEB_URL, credentials: true },"
      );
      import_fs_extra.default.writeFileSync(authFnPath, authContent.join(import_os.EOL));
    }
  };
};
const updateApp = () => {
  return {
    title: "Updating App.jsx fetch config...",
    task: (_ctx) => {
      const appTsPath = import_path.default.join((0, import_lib.getPaths)().base, "web/src/App.tsx");
      const appJsPath = import_path.default.join((0, import_lib.getPaths)().base, "web/src/App.jsx");
      let appPath;
      if (import_fs_extra.default.existsSync(appTsPath)) {
        appPath = appTsPath;
      } else if (import_fs_extra.default.existsSync(appJsPath)) {
        appPath = appJsPath;
      } else {
        console.log(`Skipping, did not detect web/src/App.jsx|tsx`);
        return;
      }
      const appContent = import_fs_extra.default.readFileSync(appPath, "utf8").split(import_os.EOL);
      const authLineIndex = appContent.findIndex(
        (line) => line.includes("<AuthProvider")
      );
      if (authLineIndex === -1) {
        console.log(`
    Couldn't find <AuthProvider /> in web/src/App.js
    If (and when) you use *dbAuth*, you'll have to add the following fetch config to <AuthProvider />:

    config={{ fetchConfig: { credentials: 'include' } }}
    `);
      } else if (appContent.toString().match(/dbAuth/)) {
        appContent[authLineIndex] = `      <AuthProvider type="dbAuth" config={{ fetchConfig: { credentials: 'include' } }}>
`;
      }
      const gqlLineIndex = appContent.findIndex(
        (line) => line.includes("<RedwoodApolloProvider")
      );
      if (gqlLineIndex === -1) {
        console.log(`
    Couldn't find <RedwoodApolloProvider in web/src/App.js
    If (and when) you use *dbAuth*, you'll have to add the following fetch config manually:

    graphQLClientConfig={{ httpLinkConfig: { credentials: 'include' }}}
    `);
      } else if (appContent.toString().match(/dbAuth/)) {
        appContent[gqlLineIndex] = `        <RedwoodApolloProvider graphQLClientConfig={{ httpLinkConfig: { credentials: 'include' }}} >
`;
      }
      import_fs_extra.default.writeFileSync(appPath, appContent.join(import_os.EOL));
    }
  };
};
const addToDotEnvDefaultTask = () => {
  return {
    title: "Updating .env.defaults...",
    skip: () => {
      if (!import_fs_extra.default.existsSync(import_path.default.resolve((0, import_lib.getPaths)().base, ".env.defaults"))) {
        return `
        WARNING: could not update .env.defaults

        You'll have to add the following env var manually:

        REDWOOD_API_URL=/.redwood/functions
        `;
      }
    },
    task: async (_ctx) => {
      const env = import_path.default.resolve((0, import_lib.getPaths)().base, ".env.defaults");
      const line = "\n\nREDWOOD_API_URL=/.redwood/functions\n";
      import_fs_extra.default.appendFileSync(env, line);
    }
  };
};
const builder = (yargs) => yargs.option("database", {
  alias: "d",
  choices: ["none", "postgresql", "mysql"],
  description: "Database deployment for Flightcontrol only",
  default: "postgresql",
  type: "string"
});
const notes = [
  "You are ready to deploy to Flightcontrol!\n",
  "\u{1F449} Create your project at https://app.flightcontrol.dev/signup?ref=redwood\n",
  "Check out the deployment docs at https://app.flightcontrol.dev/docs for detailed instructions\n",
  "NOTE: If you are using yarn v1, remove the installCommand's from flightcontrol.json"
];
const handler = async ({ force, database }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup deploy flightcontrol",
    force,
    database
  });
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Adding flightcontrol.json",
        task: async () => {
          const fileData = await getFlightcontrolJson(database);
          let files = {};
          files[fileData.path] = JSON.stringify(fileData.content, null, 2);
          return (0, import_lib.writeFilesTask)(files, { overwriteExisting: force });
        }
      },
      updateGraphQLFunction(),
      updateDbAuth(),
      updateApp(),
      (0, import_helpers.updateApiURLTask)("${REDWOOD_API_URL}"),
      addToDotEnvDefaultTask(),
      (0, import_lib.printSetupNotes)(notes)
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  alias,
  builder,
  command,
  description,
  getFlightcontrolJson,
  handler
});
