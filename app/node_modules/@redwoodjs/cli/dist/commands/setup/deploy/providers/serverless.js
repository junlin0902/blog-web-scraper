"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serverless_exports = {};
__export(serverless_exports, {
  aliases: () => aliases,
  command: () => command,
  description: () => description,
  handler: () => handler,
  notes: () => notes
});
module.exports = __toCommonJS(serverless_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_colors = __toESM(require("../../../../lib/colors"));
var import_helpers = require("../helpers");
var import_api = require("../templates/serverless/api");
var import_web = require("../templates/serverless/web");
const command = "serverless";
const description = "[DEPRECATED]\nSetup Serverless Framework AWS deploy\nFor more information:\nhttps://redwoodjs.com/docs/deploy/serverless";
const aliases = ["aws-serverless"];
const notes = [
  import_colors.default.error("DEPRECATED option not officially supported"),
  "",
  "For more information:",
  "https://redwoodjs.com/docs/deploy/serverless",
  "",
  "",
  import_colors.default.success("You're almost ready to deploy using the Serverless framework!"),
  "",
  "\u2022 See https://redwoodjs.com/docs/deploy#serverless-deploy for more info. If you ",
  "  want to give it a shot, open your `.env` file and add your AWS credentials,",
  "  then run: ",
  "",
  "    yarn rw deploy serverless --first-run",
  "",
  "  For subsequent deploys you can just run `yarn rw deploy serverless`.",
  "",
  "\u2022 If you want to use the Serverless Dashboard to manage your app, plug in",
  "  the values for `org` and `app` in `web/serverless.yml` and `api/serverless.yml`",
  "",
  "\u2022 If you haven't already, familiarize yourself with the docs for your",
  "  preferred provider: https://www.serverless.com/framework/docs/providers"
];
const projectDevPackages = [
  "serverless",
  "serverless-lift",
  "@vercel/nft",
  "archiver",
  "fs-extra"
];
const files = [
  {
    path: import_path.default.join((0, import_lib.getPaths)().api.base, "serverless.yml"),
    content: import_api.SERVERLESS_API_YML
  },
  {
    path: import_path.default.join((0, import_lib.getPaths)().web.base, "serverless.yml"),
    content: import_web.SERVERLESS_WEB_YML
  }
];
const prismaBinaryTargetAdditions = () => {
  const content = import_fs_extra.default.readFileSync((0, import_lib.getPaths)().api.dbSchema).toString();
  if (!content.includes("rhel-openssl-1.0.x")) {
    const result = content.replace(
      /binaryTargets =.*\n/,
      `binaryTargets = ["native", "rhel-openssl-1.0.x"]
`
    );
    import_fs_extra.default.writeFileSync((0, import_lib.getPaths)().api.dbSchema, result);
  }
};
const updateRedwoodTomlTask = () => {
  return {
    title: "Updating redwood.toml apiUrl...",
    task: () => {
      const configPath = import_path.default.join((0, import_lib.getPaths)().base, "redwood.toml");
      const content = import_fs_extra.default.readFileSync(configPath).toString();
      const newContent = content.replace(
        /apiUrl.*?\n/m,
        'apiUrl = "${API_URL:/api}"       # Set API_URL in production to the Serverless deploy endpoint of your api service, see https://redwoodjs.com/docs/deploy/serverless-deploy\n'
      );
      import_fs_extra.default.writeFileSync(configPath, newContent);
    }
  };
};
const handler = async ({ force }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "setup deploy serverless",
    force
  });
  const [serverless, serverlessLift, ...rest] = projectDevPackages;
  const tasks = new import_listr2.Listr(
    [
      (0, import_lib.addPackagesTask)({
        packages: [serverless, ...rest],
        devDependency: true
      }),
      (0, import_lib.addPackagesTask)({
        packages: [serverless, serverlessLift],
        side: "web",
        devDependency: true
      }),
      (0, import_lib.addPackagesTask)({
        packages: [serverless],
        side: "api",
        devDependency: true
      }),
      (0, import_helpers.addFilesTask)({
        files,
        force
      }),
      updateRedwoodTomlTask(),
      (0, import_helpers.addToGitIgnoreTask)({
        paths: [".serverless"]
      }),
      (0, import_helpers.addToDotEnvTask)({
        lines: [
          "AWS_ACCESS_KEY_ID=<your-key-here>",
          "AWS_SECRET_ACCESS_KEY=<your-secret-key-here>"
        ]
      }),
      {
        title: "Adding necessary Prisma binaries...",
        task: () => prismaBinaryTargetAdditions()
      },
      (0, import_lib.printSetupNotes)(notes)
    ],
    {
      exitOnError: true,
      rendererOptions: { collapseSubtasks: false }
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  command,
  description,
  handler,
  notes
});
