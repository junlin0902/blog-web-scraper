"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var coherenceHandler_exports = {};
__export(coherenceHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(coherenceHandler_exports);
var import_path = __toESM(require("path"));
var import_internals = require("@prisma/internals");
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var toml = __toESM(require("smol-toml"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../../lib");
var import_project = require("../../../../lib/project");
var import_helpers = require("../helpers");
const redwoodProjectPaths = (0, import_cli_helpers.getPaths)();
const EXTENSION = import_cli_helpers.isTypeScriptProject ? "ts" : "js";
async function handler({ force }) {
  try {
    const addCoherenceFilesTask = await getAddCoherenceFilesTask(force);
    const tasks = new import_listr2.Listr(
      [
        addCoherenceFilesTask,
        updateRedwoodTOMLTask(),
        (0, import_lib.printSetupNotes)([
          "You're ready to deploy to Coherence! \u2728\n",
          "Go to https://app.withcoherence.com to create your account and setup your cloud or GitHub connections.",
          "Check out the deployment docs at https://docs.withcoherence.com for detailed instructions and more information.\n",
          "Reach out to redwood@withcoherence.com with any questions! We're here to support you."
        ])
      ],
      { rendererOptions: { collapse: false } }
    );
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_cli_helpers.colors.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}
async function getAddCoherenceFilesTask(force) {
  const files = [
    {
      path: import_path.default.join(redwoodProjectPaths.api.functions, `health.${EXTENSION}`),
      content: coherenceFiles.healthCheck
    }
  ];
  const coherenceConfigFile = {
    path: import_path.default.join(redwoodProjectPaths.base, "coherence.yml")
  };
  coherenceConfigFile.content = await getCoherenceConfigFileContent();
  files.push(coherenceConfigFile);
  return (0, import_helpers.addFilesTask)({
    title: `Adding coherence.yml and health.${EXTENSION}`,
    files,
    force
  });
}
async function getCoherenceConfigFileContent() {
  const prismaSchema = await (0, import_internals.getSchema)(redwoodProjectPaths.api.dbSchema);
  const prismaConfig = await (0, import_internals.getConfig)({ datamodel: prismaSchema });
  let db = prismaConfig.datasources[0].activeProvider;
  if (!SUPPORTED_DATABASES.includes(db)) {
    throw new Error(
      [
        `Coherence doesn't support the "${db}" provider in your Prisma schema.`,
        `To proceed, switch to one of the following: ${SUPPORTED_DATABASES.join(
          ", "
        )}.`
      ].join("\n")
    );
  }
  if (db === "postgresql") {
    db = "postgres";
  }
  const apiProdCommand = ["yarn", "rw", "build", "api", "&&"];
  if ((0, import_project.serverFileExists)()) {
    apiProdCommand.push(
      "yarn",
      "node",
      "api/dist/server.js",
      "--apiRootPath=/api"
    );
  } else {
    apiProdCommand.push("yarn", "rw", "serve", "api", "--apiRootPath=/api");
  }
  return coherenceFiles.yamlTemplate({
    db,
    apiProdCommand: `[${apiProdCommand.map((cmd) => `"${cmd}"`).join(", ")}]`
  });
}
const SUPPORTED_DATABASES = ["mysql", "postgresql"];
function updateRedwoodTOMLTask() {
  return {
    title: "Updating redwood.toml...",
    task: () => {
      const redwoodTOMLPath = import_path.default.join(
        redwoodProjectPaths.base,
        "redwood.toml"
      );
      let redwoodTOMLContent = import_fs_extra.default.readFileSync(redwoodTOMLPath, "utf-8");
      const redwoodTOMLObject = toml.parse(redwoodTOMLContent);
      if (!redwoodTOMLObject.web.host) {
        const [beforeWeb, afterWeb] = redwoodTOMLContent.split(/\[web\]\s/);
        redwoodTOMLContent = [
          beforeWeb,
          '[web]\n  host = "0.0.0.0"\n',
          afterWeb
        ].join("");
      }
      if (!redwoodTOMLObject.api.host) {
        const [beforeApi, afterApi] = redwoodTOMLContent.split(/\[api\]\s/);
        redwoodTOMLContent = [
          beforeApi,
          '[api]\n  host = "0.0.0.0"\n',
          afterApi
        ].join("");
      }
      redwoodTOMLContent = redwoodTOMLContent.replaceAll(
        HOST_REGEXP,
        (match, spaceBeforeAssign, spaceAfterAssign) => ["host", spaceBeforeAssign, "=", spaceAfterAssign, '"0.0.0.0"'].join(
          ""
        )
      );
      redwoodTOMLContent = redwoodTOMLContent.replace(
        API_URL_REGEXP,
        (match, spaceBeforeAssign, spaceAfterAssign) => ["apiUrl", spaceBeforeAssign, "=", spaceAfterAssign, '"/api"'].join(
          ""
        )
      );
      redwoodTOMLContent = redwoodTOMLContent.replaceAll(
        PORT_REGEXP,
        (_match, spaceBeforeAssign, spaceAfterAssign, port) => [
          "port",
          spaceBeforeAssign,
          "=",
          spaceAfterAssign,
          `"\${PORT:${port}}"`
        ].join("")
      );
      import_fs_extra.default.writeFileSync(redwoodTOMLPath, redwoodTOMLContent);
    }
  };
}
const HOST_REGEXP = /host(\s*)=(\s*)\".+\"/g;
const API_URL_REGEXP = /apiUrl(\s*)=(\s*)\".+\"/;
const PORT_REGEXP = /port(\s*)=(\s*)(?<port>\d{4})/g;
const coherenceFiles = {
  yamlTemplate({ db, apiProdCommand }) {
    return `api:
  type: backend
  url_path: "/api"
  prod:
    command: ${apiProdCommand}
  dev:
    command: ["yarn", "rw", "build", "api", "&&", "yarn", "rw", "dev", "api", "--apiRootPath=/api"]
  local_packages: ["node_modules"]

  system:
    cpu: 2
    memory: 2G
    health_check: "/api/health"

  resources:
    - name: ${import_path.default.basename(redwoodProjectPaths.base)}-db
      engine: ${db}
      version: 13
      type: database
      ${db === "postgres" ? "adapter: postgresql" : ""}

  # If you use data migrations, use the following instead:
  # migration: ["yarn", "rw", "prisma", "migrate", "deploy", "&&", "yarn", "rw", "data-migrate", "up"]
  migration: ["yarn", "rw", "prisma", "migrate", "deploy"]

web:
  type: frontend
  assets_path: "web/dist"
  prod:
    command: ["yarn", "rw", "serve", "web"]
  dev:
    command: ["yarn", "rw", "dev", "web", "--fwd=\\"--allowed-hosts all\\""]

  # Heads up: Redwood's prerender doesn't work with Coherence yet.
  # For current status and updates, see https://github.com/redwoodjs/redwood/issues/8333.
  build: ["yarn", "rw", "build", "web", "--no-prerender"]
  local_packages: ["node_modules"]

  system:
    cpu: 2
    memory: 2G
`;
  },
  healthCheck: `// Coherence health check
export const handler = async () => {
  return {
    statusCode: 200,
  }
}
`
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
