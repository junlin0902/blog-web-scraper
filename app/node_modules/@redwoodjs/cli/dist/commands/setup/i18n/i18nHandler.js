"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var i18nHandler_exports = {};
__export(i18nHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(i18nHandler_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_configureStorybook = __toESM(require("../../../lib/configureStorybook.js"));
var import_extendFile = require("../../../lib/extendFile");
const APP_JS_PATH = (0, import_lib.getPaths)().web.app;
const i18nImportExist = (appJS) => {
  let content = appJS.toString();
  const hasBaseImport = () => /import '.\/i18n'/.test(content);
  return hasBaseImport();
};
const addI18nImport = (appJS) => {
  var content = appJS.toString().split("\n").reverse();
  const index = content.findIndex((value) => /import/.test(value));
  content.splice(index, 0, "import './i18n'");
  return content.reverse().join(`
`);
};
const i18nConfigExists = () => {
  return import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().web.src, "i18n.js"));
};
const localesExists = (lng) => {
  return import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().web.src, "locales", lng + ".json"));
};
const handler = async ({ force }) => {
  const rwPaths = (0, import_lib.getPaths)();
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Installing packages...",
        task: async () => {
          return new import_listr2.Listr(
            [
              {
                title: "Install i18n, i18next, react-i18next and i18next-browser-languagedetector",
                task: async () => {
                  await (0, import_execa.default)("yarn", [
                    "workspace",
                    "web",
                    "add",
                    "i18n",
                    "i18next",
                    "react-i18next",
                    "i18next-browser-languagedetector"
                  ]);
                }
              }
            ],
            { rendererOptions: { collapseSubtasks: false } }
          );
        }
      },
      {
        title: "Configure i18n...",
        task: () => {
          if (!force && i18nConfigExists()) {
            throw new Error(
              "i18n config already exists.\nUse --force to override existing config."
            );
          } else {
            return (0, import_lib.writeFile)(
              import_path.default.join((0, import_lib.getPaths)().web.src, "i18n.js"),
              import_fs_extra.default.readFileSync(
                import_path.default.resolve(__dirname, "templates", "i18n.js.template")
              ).toString(),
              { overwriteExisting: force }
            );
          }
        }
      },
      {
        title: "Adding locale file for French...",
        task: () => {
          if (!force && localesExists("fr")) {
            throw new Error(
              "fr.json config already exists.\nUse --force to override existing config."
            );
          } else {
            return (0, import_lib.writeFile)(
              import_path.default.join((0, import_lib.getPaths)().web.src, "/locales/fr.json"),
              import_fs_extra.default.readFileSync(
                import_path.default.resolve(__dirname, "templates", "fr.json.template")
              ).toString(),
              { overwriteExisting: force }
            );
          }
        }
      },
      {
        title: "Adding locale file for English...",
        task: () => {
          if (!force && localesExists("en")) {
            throw new Error(
              "en.json already exists.\nUse --force to override existing config."
            );
          } else {
            return (0, import_lib.writeFile)(
              import_path.default.join((0, import_lib.getPaths)().web.src, "/locales/en.json"),
              import_fs_extra.default.readFileSync(
                import_path.default.resolve(__dirname, "templates", "en.json.template")
              ).toString(),
              { overwriteExisting: force }
            );
          }
        }
      },
      {
        title: "Adding import to App.{jsx,tsx}...",
        task: (_ctx, task) => {
          let appJS = import_fs_extra.default.readFileSync(APP_JS_PATH);
          if (i18nImportExist(appJS)) {
            task.skip("Import already exists in App.js");
          } else {
            import_fs_extra.default.writeFileSync(APP_JS_PATH, addI18nImport(appJS));
          }
        }
      },
      {
        title: "Configuring Storybook...",
        // skip this task if the user's storybook config already includes "withI18n"
        skip: () => (0, import_extendFile.fileIncludes)(rwPaths.web.storybookConfig, "withI18n"),
        task: async () => (0, import_configureStorybook.default)(
          import_path.default.join(__dirname, "templates", "storybook.preview.tsx.template")
        )
      },
      {
        title: "One more thing...",
        task: (_ctx, task) => {
          task.title = `One more thing...

          ${import_colors.default.tip("Quick link to the docs:")}

          ${import_colors.default.link("https://react.i18next.com/guides/quick-start/")}
        `;
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
