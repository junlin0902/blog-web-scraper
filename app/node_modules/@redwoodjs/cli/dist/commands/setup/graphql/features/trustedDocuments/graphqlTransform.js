"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var graphqlTransform_exports = {};
__export(graphqlTransform_exports, {
  default: () => transform
});
module.exports = __toCommonJS(graphqlTransform_exports);
function transform(file, api) {
  const j = api.jscodeshift;
  const root = j(file.source);
  const allImports = root.find(j.ImportDeclaration);
  const hasStoreImport = allImports.some((i) => {
    return i.get("source").value.value === "src/lib/trustedDocumentsStore";
  });
  if (!hasStoreImport) {
    allImports.at(-1).insertAfter(
      j.importDeclaration(
        [j.importSpecifier(j.identifier("store"))],
        j.literal("src/lib/trustedDocumentsStore")
      )
    );
  }
  const createGraphQLHandlerCalls = root.find(j.CallExpression, {
    callee: {
      name: "createGraphQLHandler"
    }
  });
  if (createGraphQLHandlerCalls.length === 0) {
    throw new Error(
      "Error updating your graphql handler function. You'll have to do it manually. (Couldn't find a call to `createGraphQLHandler`)"
    );
  }
  const existingTrustedDocumentsProperty = createGraphQLHandlerCalls.find(
    j.ObjectProperty,
    {
      key: {
        name: "trustedDocuments"
      }
    }
  );
  if (existingTrustedDocumentsProperty.length === 0) {
    const storeProperty = j.objectProperty(
      j.identifier("store"),
      j.identifier("store")
    );
    storeProperty.shorthand = true;
    createGraphQLHandlerCalls.get(0).node.arguments[0].properties.push(
      j.objectProperty(
        j.identifier("trustedDocuments"),
        j.objectExpression([storeProperty])
      )
    );
  }
  return root.toSource();
}
