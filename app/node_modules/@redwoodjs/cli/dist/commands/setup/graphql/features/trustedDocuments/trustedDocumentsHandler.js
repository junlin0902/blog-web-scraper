"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var trustedDocumentsHandler_exports = {};
__export(trustedDocumentsHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(trustedDocumentsHandler_exports);
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = __toESM(require("node:path"));
var import_execa = __toESM(require("execa"));
var import_listr2 = require("listr2");
var import_prettier = require("prettier");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_runTransform = require("../../../../../lib/runTransform");
async function handler({ force }) {
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Update Redwood Project Configuration to enable GraphQL Trusted Documents ...",
        skip: () => {
          if (force) {
            return false;
          }
          const config = (0, import_project_config.getConfig)();
          if (config.graphql.trustedDocuments) {
            return "GraphQL Trusted Documents are already enabled in your Redwood project.";
          }
          return false;
        },
        task: () => {
          (0, import_cli_helpers.setTomlSetting)("graphql", "trustedDocuments", true);
        }
      },
      {
        title: "Generating Trusted Documents store ...",
        task: () => {
          import_execa.default.commandSync("yarn redwood generate types", { stdio: "ignore" });
        }
      },
      {
        title: "Configuring the GraphQL Handler to use a Trusted Documents store ...",
        task: async () => {
          const graphqlPath = (0, import_project_config.resolveFile)(
            import_node_path.default.join((0, import_project_config.getPaths)().api.functions, "graphql")
          );
          if (!graphqlPath) {
            throw new Error("Could not find a GraphQL handler in your project.");
          }
          const transformResult = await (0, import_runTransform.runTransform)({
            transformPath: import_node_path.default.join(__dirname, "graphqlTransform.js"),
            targetPaths: [graphqlPath]
          });
          if (transformResult.error) {
            throw new Error(transformResult.error);
          }
          const source = import_node_fs.default.readFileSync(graphqlPath, "utf-8");
          const prettierOptions = await (0, import_cli_helpers.getPrettierOptions)();
          const prettifiedApp = await (0, import_prettier.format)(source, {
            ...prettierOptions,
            parser: "babel-ts"
          });
          import_node_fs.default.writeFileSync(graphqlPath, prettifiedApp, "utf-8");
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await tasks.run();
  } catch (e) {
    console.error(e.message);
    process.exit(e?.exitCode || 1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
