"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var appGqlConfigTransform_exports = {};
__export(appGqlConfigTransform_exports, {
  default: () => transform
});
module.exports = __toCommonJS(appGqlConfigTransform_exports);
function isJsxExpressionContainer(node) {
  return node.type === "JSXExpressionContainer";
}
function isObjectExpression(node) {
  return node.type === "ObjectExpression";
}
function isObjectProperty(node) {
  return node.type === "ObjectProperty";
}
function isIdentifier(node) {
  return node.type === "Identifier";
}
function isPropertyWithName(node, name) {
  return isObjectProperty(node) && node.key.type === "Identifier" && node.key.name === name;
}
function transform(file, api) {
  const j = api.jscodeshift;
  const root = j(file.source);
  const redwoodApolloProvider = root.findJSXElements("RedwoodApolloProvider");
  const graphQLClientConfigCollection = redwoodApolloProvider.find(
    j.JSXAttribute,
    {
      name: { name: "graphQLClientConfig" }
    }
  );
  let graphQLClientConfig;
  if (graphQLClientConfigCollection.length === 0) {
    graphQLClientConfig = j.jsxAttribute(
      j.jsxIdentifier("graphQLClientConfig"),
      j.jsxExpressionContainer(j.objectExpression([]))
    );
  } else {
    graphQLClientConfig = graphQLClientConfigCollection.get(0).node;
  }
  const graphQLClientConfigExpression = isJsxExpressionContainer(
    graphQLClientConfig.value
  ) ? graphQLClientConfig.value.expression : j.jsxEmptyExpression();
  let graphQLClientConfigVariableName = "";
  if (isIdentifier(graphQLClientConfigExpression)) {
    graphQLClientConfigVariableName = graphQLClientConfigExpression.name;
  }
  if (!graphQLClientConfigVariableName && !isObjectExpression(graphQLClientConfigExpression)) {
    throw new Error(
      "Error configuring possibleTypes. You'll have to do it manually. (Could not find a graphQLClientConfigExpression of the correct type, it's a " + graphQLClientConfigExpression.type + ")"
    );
  }
  if (isObjectExpression(graphQLClientConfigExpression)) {
    graphQLClientConfigVariableName = "graphQLClientConfig";
    root.find(j.VariableDeclaration, {
      declarations: [
        {
          type: "VariableDeclarator",
          id: { type: "Identifier", name: "App" }
        }
      ]
    }).insertBefore(
      j.variableDeclaration("const", [
        j.variableDeclarator(
          j.identifier(graphQLClientConfigVariableName),
          graphQLClientConfigExpression
        )
      ])
    );
  }
  const configVariableDeclarators = root.findVariableDeclarators(
    graphQLClientConfigVariableName
  );
  const configExpression = configVariableDeclarators.get(0)?.node.init;
  if (!isObjectExpression(configExpression)) {
    throw new Error(
      "Error configuring possibleTypes. You'll have to do it manually. (Could not find a graphQLClientConfig variable ObjectExpression)"
    );
  }
  let cacheConfig = configExpression.properties.find(
    (prop) => isPropertyWithName(prop, "cacheConfig")
  );
  if (!cacheConfig) {
    cacheConfig = j.objectProperty(
      j.identifier("cacheConfig"),
      j.objectExpression([])
    );
    configExpression.properties.push(cacheConfig);
  }
  if (!isObjectProperty(cacheConfig)) {
    throw new Error(
      "Error configuring possibleTypes. You'll have to do it manually. (cacheConfig is not an ObjectProperty)"
    );
  }
  const cacheConfigValue = cacheConfig.value;
  if (!isObjectExpression(cacheConfigValue)) {
    throw new Error(
      "Error configuring possibleTypes. You'll have to do it manually. (cacheConfigValue is not an ObjectExpression)"
    );
  }
  const possibleTypes = cacheConfigValue.properties.find(
    (prop) => isPropertyWithName(prop, "possibleTypes")
  );
  if (!possibleTypes) {
    const property = j.property(
      "init",
      j.identifier("possibleTypes"),
      j.identifier("possibleTypes.possibleTypes")
    );
    cacheConfigValue.properties.push(property);
  }
  graphQLClientConfigCollection.remove();
  redwoodApolloProvider.get(0).node.openingElement.attributes.push(
    j.jsxAttribute(
      j.jsxIdentifier("graphQLClientConfig"),
      j.jsxExpressionContainer(j.identifier(graphQLClientConfigVariableName))
    )
  );
  return root.toSource();
}
