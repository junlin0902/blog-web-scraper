"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var generatorHandler_exports = {};
__export(generatorHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(generatorHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
const SIDE_MAP = {
  web: ["cell", "component", "layout", "page", "scaffold"],
  api: ["function", "sdl", "service"]
};
const copyGenerator = (name, { force }) => {
  const side = SIDE_MAP["web"].includes(name) ? "web" : "api";
  const from = import_path.default.join(__dirname, "../../generate", name, "templates");
  const to = import_path.default.join((0, import_lib.getPaths)()[side].generators, name);
  import_fs_extra.default.copySync(from, to, { overwrite: force, errorOnExist: true });
  return to;
};
let destination;
const tasks = ({ name, force }) => {
  return new import_listr2.Listr(
    [
      {
        title: "Copying generator templates...",
        task: () => {
          destination = copyGenerator(name, { force });
        }
      },
      {
        title: "Destination:",
        task: (ctx, task) => {
          task.title = `  Wrote templates to ${destination.replace(
            (0, import_lib.getPaths)().base,
            ""
          )}`;
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false }, errorOnExist: true }
  );
};
const handler = async ({ name, force }) => {
  const t = tasks({ name, force });
  try {
    await t.run();
  } catch (e) {
    console.log(import_colors.default.error(e.message));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
