"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var realtimeHandler_exports = {};
__export(realtimeHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(realtimeHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_generate = require("@redwoodjs/internal/dist/generate/generate");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
var import_serverFileHandler = require("../server-file/serverFileHandler");
const { version } = JSON.parse(
  import_fs_extra.default.readFileSync(import_path.default.resolve(__dirname, "../../../../package.json"), "utf-8")
);
async function handler({ force, includeExamples, verbose }) {
  const redwoodPaths = (0, import_lib.getPaths)();
  const ts = (0, import_project.isTypeScriptProject)();
  const realtimeLibFilePath = import_path.default.join(
    redwoodPaths.api.lib,
    `realtime.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
  );
  const tasks = new import_listr2.Listr(
    [
      (0, import_cli_helpers.addApiPackages)(["ioredis@^5", `@redwoodjs/realtime@${version}`]),
      {
        title: "Adding the realtime api lib ...",
        task: async () => {
          const serverFileTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(__dirname, "templates", "realtime.ts.template"),
            "utf-8"
          );
          const setupScriptContent = ts ? serverFileTemplateContent : await (0, import_lib.transformTSToJS)(
            realtimeLibFilePath,
            serverFileTemplateContent
          );
          return [
            (0, import_lib.writeFile)(realtimeLibFilePath, setupScriptContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: "Adding Countdown example subscription ...",
        enabled: () => includeExamples,
        task: async () => {
          const exampleSubscriptionTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "subscriptions",
              "countdown",
              `countdown.ts.template`
            ),
            "utf-8"
          );
          const exampleFile = import_path.default.join(
            redwoodPaths.api.subscriptions,
            "countdown",
            `countdown.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const setupScriptContent = ts ? exampleSubscriptionTemplateContent : await (0, import_lib.transformTSToJS)(
            exampleFile,
            exampleSubscriptionTemplateContent
          );
          return [
            (0, import_lib.writeFile)(exampleFile, setupScriptContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: "Adding NewMessage example subscription ...",
        enabled: () => includeExamples,
        task: async () => {
          const exampleSdlTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "subscriptions",
              "newMessage",
              `rooms.sdl.ts.template`
            ),
            "utf-8"
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `rooms.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "subscriptions",
              "newMessage",
              `rooms.ts.template`
            ),
            "utf-8"
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            "rooms",
            `rooms.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          const exampleSubscriptionTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "subscriptions",
              "newMessage",
              `newMessage.ts.template`
            ),
            "utf-8"
          );
          const exampleFile = import_path.default.join(
            redwoodPaths.api.subscriptions,
            "newMessage",
            `newMessage.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const setupScriptContent = ts ? exampleSubscriptionTemplateContent : await (0, import_lib.transformTSToJS)(
            exampleFile,
            exampleSubscriptionTemplateContent
          );
          return [
            (0, import_lib.writeFile)(sdlFile, sdlContent, {
              overwriteExisting: force
            }),
            (0, import_lib.writeFile)(serviceFile, serviceContent, {
              overwriteExisting: force
            }),
            (0, import_lib.writeFile)(exampleFile, setupScriptContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: "Adding Auctions example live query ...",
        enabled: () => includeExamples,
        task: async () => {
          const exampleSdlTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "liveQueries",
              "auctions",
              `auctions.sdl.ts.template`
            ),
            "utf-8"
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `auctions.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "liveQueries",
              "auctions",
              `auctions.ts.template`
            ),
            "utf-8"
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            "auctions",
            `auctions.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          return [
            (0, import_lib.writeFile)(sdlFile, sdlContent, {
              overwriteExisting: force
            }),
            (0, import_lib.writeFile)(serviceFile, serviceContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: "Adding Defer example queries ...",
        enabled: () => includeExamples,
        task: async () => {
          const exampleSdlTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "defer",
              "fastAndSlowFields",
              `fastAndSlowFields.sdl.template`
            ),
            "utf-8"
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `fastAndSlowFields.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "defer",
              "fastAndSlowFields",
              `fastAndSlowFields.ts.template`
            ),
            "utf-8"
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            "fastAndSlowFields",
            `fastAndSlowFields.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          return [
            (0, import_lib.writeFile)(sdlFile, sdlContent, {
              overwriteExisting: force
            }),
            (0, import_lib.writeFile)(serviceFile, serviceContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: "Adding Stream example queries ...",
        enabled: () => includeExamples,
        task: async () => {
          const exampleSdlTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "stream",
              "alphabet",
              `alphabet.sdl.template`
            ),
            "utf-8"
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `alphabet.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "stream",
              "alphabet",
              `alphabet.ts.template`
            ),
            "utf-8"
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            "alphabet",
            `alphabet.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          return [
            (0, import_lib.writeFile)(sdlFile, sdlContent, {
              overwriteExisting: force
            }),
            (0, import_lib.writeFile)(serviceFile, serviceContent, {
              overwriteExisting: force
            })
          ];
        }
      },
      {
        title: `Generating types ...`,
        task: async () => {
          await (0, import_generate.generate)();
          console.log(
            "Note: You may need to manually restart GraphQL in VSCode to see the new types take effect.\n\n"
          );
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    if (!(0, import_project.serverFileExists)()) {
      tasks.add((0, import_serverFileHandler.setupServerFileTasks)({ force }));
    }
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
