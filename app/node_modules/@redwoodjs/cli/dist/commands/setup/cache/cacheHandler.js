"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cacheHandler_exports = {};
__export(cacheHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(cacheHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
const CLIENT_PACKAGE_MAP = {
  memcached: "memjs",
  redis: "redis"
};
const CLIENT_HOST_MAP = {
  memcached: "localhost:11211",
  redis: "redis://localhost:6379"
};
const handler = async ({ client, force }) => {
  const extension = import_project.isTypeScriptProject ? "ts" : "js";
  const tasks = new import_listr2.Listr([
    (0, import_lib.addPackagesTask)({
      packages: [CLIENT_PACKAGE_MAP[client]],
      side: "api"
    }),
    {
      title: `Writing api/src/lib/cache.js`,
      task: () => {
        const template = import_fs_extra.default.readFileSync(
          import_path.default.join(__dirname, "templates", `${client}.ts.template`)
        ).toString();
        return (0, import_lib.writeFile)(
          import_path.default.join((0, import_lib.getPaths)().api.lib, `cache.${extension}`),
          template,
          {
            overwriteExisting: force
          }
        );
      }
    },
    (0, import_cli_helpers.addEnvVarTask)(
      "CACHE_HOST",
      CLIENT_HOST_MAP[client],
      `Where your ${client} server lives for service caching`
    ),
    {
      title: "One more thing...",
      task: (_ctx, task) => {
        task.title = `One more thing...

          ${import_colors.default.tip("Check out the Service Cache docs for config and usage:")}
          ${import_colors.default.link("https://redwoodjs.com/docs/services#caching")}
        `;
      }
    }
  ]);
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
