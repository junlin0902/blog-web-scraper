"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var jobsHandler_exports = {};
__export(jobsHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(jobsHandler_exports);
var fs = __toESM(require("node:fs"));
var path = __toESM(require("node:path"));
var import_internals = require("@prisma/internals");
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
const MODEL_SCHEMA = `
model BackgroundJob {
  id        Int       @id @default(autoincrement())
  attempts  Int       @default(0)
  handler   String
  queue     String
  priority  Int
  runAt     DateTime?
  lockedAt  DateTime?
  lockedBy  String?
  lastError String?
  failedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
`;
const getModelNames = async () => {
  const schema = await (0, import_internals.getDMMF)({ datamodelPath: (0, import_lib.getPaths)().api.dbSchema });
  return schema.datamodel.models.map((model) => model.name);
};
const addDatabaseModel = () => {
  const schema = fs.readFileSync((0, import_lib.getPaths)().api.dbSchema, "utf-8");
  const schemaWithUser = schema + MODEL_SCHEMA;
  fs.writeFileSync((0, import_lib.getPaths)().api.dbSchema, schemaWithUser);
};
const tasks = async ({ force }) => {
  const modelExists = (await getModelNames()).includes("BackgroundJob");
  const packageJsonPath = path.join((0, import_lib.getPaths)().base, "package.json");
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
  const redwoodVersion = packageJson.devDependencies?.["@redwoodjs/core"] ?? "latest";
  const jobsPackage = `@redwoodjs/jobs@${redwoodVersion}`;
  return new import_listr2.Listr(
    [
      {
        title: "Creating job database model...",
        task: () => {
          addDatabaseModel();
        },
        skip: () => {
          if (modelExists) {
            return "BackgroundJob model exists, skipping";
          }
        }
      },
      {
        title: "Creating config file in api/src/lib...",
        task: async () => {
          const isTs = (0, import_project.isTypeScriptProject)();
          const outputExtension = isTs ? "ts" : "js";
          const outputPath = path.join(
            (0, import_lib.getPaths)().api.lib,
            `jobs.${outputExtension}`
          );
          let template = fs.readFileSync(
            path.resolve(__dirname, "templates", "jobs.ts.template")
          ).toString();
          if (!isTs) {
            template = await (0, import_lib.transformTSToJS)(outputPath, template);
          }
          (0, import_lib.writeFile)(outputPath, template, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Creating jobs dir at api/src/jobs...",
        task: () => {
          fs.mkdirSync((0, import_lib.getPaths)().api.jobs, { recursive: true });
          (0, import_lib.writeFile)(path.join((0, import_lib.getPaths)().api.jobs, ".keep"), "", {
            overwriteExisting: force
          });
        }
      },
      (0, import_cli_helpers.addApiPackages)([jobsPackage]),
      {
        title: "One more thing...",
        task: (_ctx, task) => {
          task.title = `One more thing...

          ${import_colors.default.success("\nBackground jobs configured!\n")}

          ${!modelExists ? "Migrate your database to finish setting up jobs:\n" : ""}
          ${!modelExists ? import_colors.default.highlight("\n\xA0\xA0yarn rw prisma migrate dev\n") : ""}

          Generate jobs with: ${import_colors.default.highlight("yarn rw g job <name>")}
          Execute jobs with:  ${import_colors.default.highlight("yarn rw jobs work\n")}

          Check out the docs for more info:
          ${import_colors.default.link("https://docs.redwoodjs.com/docs/background-jobs")}

        `;
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false }, errorOnExist: true }
  );
};
const handler = async ({ force }) => {
  const t = await tasks({ force });
  try {
    await t.run();
  } catch (e) {
    console.error(import_colors.default.error(e.message));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
