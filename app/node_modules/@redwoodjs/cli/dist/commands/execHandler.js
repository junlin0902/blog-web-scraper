"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var execHandler_exports = {};
__export(execHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(execHandler_exports);
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = __toESM(require("node:path"));
var import_api = require("@opentelemetry/api");
var import_core = require("@opentelemetry/core");
var import_listr2 = require("listr2");
var import_babel_config = require("@redwoodjs/babel-config");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_files = require("@redwoodjs/internal/dist/files");
var import_lib = require("../lib");
var import_colors = __toESM(require("../lib/colors"));
var import_exec = require("../lib/exec");
var import_generatePrismaClient = require("../lib/generatePrismaClient");
const printAvailableScriptsToConsole = () => {
  const scripts = (0, import_files.findScripts)((0, import_lib.getPaths)().scripts).reduce((acc, scriptPath) => {
    const relativePath = import_node_path.default.relative((0, import_lib.getPaths)().scripts, scriptPath);
    const ext = import_node_path.default.parse(relativePath).ext;
    const pathNoExt = relativePath.slice(0, -ext.length);
    acc[pathNoExt] ||= [];
    acc[pathNoExt].push(relativePath);
    return acc;
  }, {});
  console.log("Available scripts:");
  Object.entries(scripts).forEach(([name, paths]) => {
    if (paths.length > 1) {
      paths.forEach((scriptPath) => {
        console.log(import_colors.default.info(`- ${scriptPath}`));
      });
    } else {
      console.log(import_colors.default.info(`- ${name}`));
    }
  });
  console.log();
};
const handler = async (args) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "exec",
    prisma: args.prisma,
    list: args.list
  });
  const { name, prisma, list, ...scriptArgs } = args;
  if (list || !name) {
    printAvailableScriptsToConsole();
    return;
  }
  const {
    overrides: _overrides,
    plugins: webPlugins,
    ...otherWebConfig
  } = (0, import_babel_config.getWebSideDefaultBabelConfig)();
  (0, import_babel_config.registerApiSideBabelHook)({
    plugins: [
      [
        "babel-plugin-module-resolver",
        {
          alias: {
            $api: (0, import_lib.getPaths)().api.base,
            $web: (0, import_lib.getPaths)().web.base,
            api: (0, import_lib.getPaths)().api.base,
            web: (0, import_lib.getPaths)().web.base
          },
          loglevel: "silent"
          // to silence the unnecessary warnings
        },
        "exec-$side-module-resolver"
      ]
    ],
    overrides: [
      {
        test: ["./api/"],
        plugins: [
          [
            "babel-plugin-module-resolver",
            {
              alias: {
                src: (0, import_lib.getPaths)().api.src
              },
              loglevel: "silent"
            },
            "exec-api-src-module-resolver"
          ]
        ]
      },
      {
        test: ["./web/"],
        plugins: [
          ...webPlugins,
          [
            "babel-plugin-module-resolver",
            {
              alias: {
                src: (0, import_lib.getPaths)().web.src
              },
              loglevel: "silent"
            },
            "exec-web-src-module-resolver"
          ]
        ],
        ...otherWebConfig
      }
    ]
  });
  const scriptPath = resolveScriptPath(name);
  if (!scriptPath) {
    console.error(
      import_colors.default.error(`
No script called \`${name}\` in the ./scripts folder.
`)
    );
    printAvailableScriptsToConsole();
    process.exit(1);
  }
  const scriptTasks = [
    {
      title: "Generating Prisma client",
      enabled: () => prisma,
      task: () => (0, import_generatePrismaClient.generatePrismaClient)({ force: false })
    },
    {
      title: "Running script",
      task: async () => {
        try {
          await (0, import_exec.runScriptFunction)({
            path: scriptPath,
            functionName: "default",
            args: { args: scriptArgs }
          });
        } catch (e) {
          console.error(import_colors.default.error(`Error in script: ${e.message}`));
          throw e;
        }
      }
    }
  ];
  const tasks = new import_listr2.Listr(scriptTasks, {
    rendererOptions: { collapseSubtasks: false },
    renderer: args.silent ? "silent" : "verbose"
  });
  await import_api.context.with((0, import_core.suppressTracing)(import_api.context.active()), async () => {
    await tasks.run();
  });
};
function resolveScriptPath(name) {
  const scriptPath = import_node_path.default.join((0, import_lib.getPaths)().scripts, name);
  if (import_node_fs.default.existsSync(scriptPath)) {
    return scriptPath;
  }
  const extensions = [".js", ".jsx", ".ts", ".tsx"];
  const matches = [];
  for (const extension of extensions) {
    const p = scriptPath + extension;
    if (import_node_fs.default.existsSync(p)) {
      matches.push(p);
    }
  }
  if (matches.length === 1) {
    return matches[0];
  } else if (matches.length > 1) {
    console.error(
      import_colors.default.error(
        `
Multiple scripts found for \`${name}\`. Please specify the extension.`
      )
    );
    matches.forEach((match) => {
      console.log(import_colors.default.info(`- ${import_node_path.default.relative((0, import_lib.getPaths)().scripts, match)}`));
    });
    process.exit(1);
  }
  return null;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
