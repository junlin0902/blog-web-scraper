"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var lint_exports = {};
__export(lint_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(lint_exports);
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../lib");
const command = "lint [path..]";
const description = "Lint your files";
const builder = (yargs) => {
  yargs.positional("path", {
    description: "Specify file(s) or directory(ies) to lint relative to project root",
    type: "array"
  }).option("fix", {
    default: false,
    description: "Try to fix errors",
    type: "boolean"
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#lint"
    )}`
  );
};
const handler = async ({ path, fix }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "lint",
    fix
  });
  try {
    const pathString = path?.join(" ");
    const result = await (0, import_execa.default)(
      "yarn eslint",
      [
        fix && "--fix",
        !pathString && import_fs_extra.default.existsSync((0, import_lib.getPaths)().web.src) && "web/src",
        !pathString && import_fs_extra.default.existsSync((0, import_lib.getPaths)().web.config) && "web/config",
        !pathString && import_fs_extra.default.existsSync((0, import_lib.getPaths)().scripts) && "scripts",
        !pathString && import_fs_extra.default.existsSync((0, import_lib.getPaths)().api.src) && "api/src",
        pathString
      ].filter(Boolean),
      {
        cwd: (0, import_lib.getPaths)().base,
        shell: true,
        stdio: "inherit"
      }
    );
    process.exitCode = result.exitCode;
  } catch (error) {
    process.exitCode = error.exitCode ?? 1;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler
});
