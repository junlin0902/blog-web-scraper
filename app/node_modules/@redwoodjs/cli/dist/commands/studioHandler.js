"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var studioHandler_exports = {};
__export(studioHandler_exports, {
  assertRedwoodVersion: () => assertRedwoodVersion,
  handler: () => handler
});
module.exports = __toCommonJS(studioHandler_exports);
var import_node_path = __toESM(require("node:path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_semver = __toESM(require("semver"));
var import_project_config = require("@redwoodjs/project-config");
var import_packages = require("../lib/packages");
const handler = async (options) => {
  try {
    if (!(0, import_packages.isModuleInstalled)("@redwoodjs/studio")) {
      const minVersions = ["7.0.0-canary.889", "7.x", "8.0.0-0"];
      assertRedwoodVersion(minVersions);
      console.log(
        "The studio package is not installed, installing it for you, this may take a moment..."
      );
      await (0, import_packages.installModule)("@redwoodjs/studio", "12");
      console.log("Studio package installed successfully.");
      const installedRealtime = await (0, import_packages.installModule)("@redwoodjs/realtime");
      if (installedRealtime) {
        console.log(
          "Added @redwoodjs/realtime to your project, as it's used by Studio"
        );
      }
      const installedApiServer = await (0, import_packages.installModule)("@redwoodjs/api-server");
      if (installedApiServer) {
        console.log(
          "Added @redwoodjs/api-server to your project, as it's used by Studio"
        );
      }
    }
    const { serve } = await import("@redwoodjs/studio");
    await serve({ open: options.open, enableWeb: true });
  } catch (e) {
    console.log("Cannot start the development studio");
    console.log(e);
    process.exit(1);
  }
};
function assertRedwoodVersion(minVersions) {
  const rwVersion = getProjectRedwoodVersion();
  const coercedRwVersion = import_semver.default.coerce(rwVersion);
  if (minVersions.some((minVersion) => {
    const v = import_semver.default.valid(minVersion) || import_semver.default.coerce(minVersion);
    const coercedMin = import_semver.default.coerce(minVersion);
    return import_semver.default.gte(rwVersion, v) && (coercedRwVersion.major === coercedMin.major ? import_semver.default.prerelease(rwVersion)?.[0] === import_semver.default.prerelease(v)?.[0] : true);
  })) {
    return;
  }
  console.error(
    `The studio command requires Redwood version ${minVersions[0]} or greater, you are using ${rwVersion}.`
  );
  process.exit(1);
}
function getProjectRedwoodVersion() {
  const { devDependencies } = import_fs_extra.default.readJSONSync(
    import_node_path.default.join((0, import_project_config.getPaths)().base, "package.json")
  );
  return devDependencies["@redwoodjs/core"];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assertRedwoodVersion,
  handler
});
