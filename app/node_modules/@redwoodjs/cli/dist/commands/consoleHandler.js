"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var consoleHandler_exports = {};
__export(consoleHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(consoleHandler_exports);
var import_path = __toESM(require("path"));
var import_repl = __toESM(require("repl"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_babel_config = require("@redwoodjs/babel-config");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../lib");
const paths = (0, import_lib.getPaths)();
const loadPrismaClient = (replContext) => {
  const { db } = require(import_path.default.join(paths.api.lib, "db"));
  db[Symbol.for("nodejs.util.inspect.custom")] = "PrismaClient";
  replContext.db = db;
};
const consoleHistoryFile = import_path.default.join(paths.generated.base, "console_history");
const persistConsoleHistory = (r) => {
  import_fs_extra.default.appendFileSync(
    consoleHistoryFile,
    r.lines.filter((line) => line.trim()).join("\n") + "\n",
    "utf8"
  );
};
const loadConsoleHistory = async (r) => {
  try {
    const history = await import_fs_extra.default.promises.readFile(consoleHistoryFile, "utf8");
    history.split("\n").reverse().map((line) => r.history.push(line));
  } catch (e) {
  }
};
const handler = () => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "console"
  });
  (0, import_babel_config.registerApiSideBabelHook)({
    plugins: [
      [
        "babel-plugin-module-resolver",
        {
          alias: {
            src: paths.api.src
          }
        },
        "rwjs-console-module-resolver"
      ]
    ]
  });
  const r = import_repl.default.start();
  const defaultEval = r.eval;
  r.eval = (cmd, context, filename, callback) => {
    defaultEval(cmd, context, filename, async (err, result) => {
      if (err) {
        callback(err);
      } else {
        try {
          callback(null, await Promise.resolve(result));
        } catch (err2) {
          callback(err2);
        }
      }
    });
  };
  loadConsoleHistory(r);
  r.addListener("close", () => persistConsoleHistory(r));
  loadPrismaClient(r.context);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
