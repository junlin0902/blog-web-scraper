"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var generate_exports = {};
__export(generate_exports, {
  aliases: () => aliases,
  builder: () => builder,
  command: () => command,
  description: () => description
});
module.exports = __toCommonJS(generate_exports);
var import_execa = __toESM(require("execa"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
const command = "generate <type>";
const aliases = ["g"];
const description = "Generate boilerplate code and type definitions";
const builder = (yargs) => yargs.command("types", "Generate supplementary code", {}, () => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate types"
  });
  try {
    import_execa.default.sync("yarn rw-gen", { shell: true, stdio: "inherit" });
  } catch (error) {
    process.exitCode = error.exitCode ?? 1;
  }
}).commandDir("./generate", {
  recurse: true,
  // @NOTE This regex will ignore all commands nested more than two
  // levels deep.
  // e.g. /generate/hi.js & setup/hi/hi.js are picked up, but
  // generate/hi/hello/bazinga.js will be ignored
  // The [/\\] bit is for supporting both windows and unix style paths
  // Also take care to not trip up on paths that have "setup" earlier
  // in the path by eagerly matching in the start of the regexp
  exclude: /.*[/\\]generate[/\\].*[/\\].*[/\\]/
}).demandCommand().epilogue(
  `Also see the ${(0, import_terminal_link.default)(
    "Redwood CLI Reference",
    "https://redwoodjs.com/docs/cli-commands#generate-alias-g"
  )}`
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  builder,
  command,
  description
});
