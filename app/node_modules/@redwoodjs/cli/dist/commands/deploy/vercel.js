"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var vercel_exports = {};
__export(vercel_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(vercel_exports);
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_helpers = require("./helpers/helpers");
const command = "vercel [...commands]";
const description = "Build command for Vercel deploy";
const builder = (yargs) => (0, import_helpers.deployBuilder)(yargs);
const handler = (yargs) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "deploy vercel",
    build: yargs.build,
    prisma: yargs.prisma,
    dataMigrate: yargs.dataMigrate
  });
  (0, import_helpers.deployHandler)(yargs);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler
});
