"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var helpers_exports = {};
__export(helpers_exports, {
  deployBuilder: () => deployBuilder,
  deployHandler: () => deployHandler
});
module.exports = __toCommonJS(helpers_exports);
var import_execa = __toESM(require("execa"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_project_config = require("@redwoodjs/project-config");
var import_colors = __toESM(require("../../../lib/colors"));
const deployBuilder = (yargs) => {
  yargs.option("build", {
    description: "Build for production",
    type: "boolean",
    default: "true"
  }).option("prisma", {
    description: "Apply database migrations",
    type: "boolean",
    default: "true"
  }).option("data-migrate", {
    description: "Migrate the data in your database",
    type: "boolean",
    default: "true",
    alias: "dm"
  }).epilogue(
    `For more commands, options, and examples, see ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#deploy"
    )}`
  );
};
const deployHandler = async ({ build, prisma, dm: dataMigrate }) => {
  const paths = (0, import_project_config.getPaths)();
  let commandSet = [];
  if (build) {
    commandSet.push("yarn rw build --verbose");
  }
  if (prisma) {
    commandSet.push("yarn rw prisma migrate deploy");
  }
  if (dataMigrate) {
    commandSet.push("yarn rw data-migrate up");
  }
  const joinedCommands = commandSet.join(" && ");
  console.log(import_colors.default.note(`
Running:
`) + `${joinedCommands} 
`);
  return (0, import_execa.default)(joinedCommands, {
    shell: true,
    stdio: "inherit",
    cwd: paths.base,
    extendEnv: true,
    cleanup: true
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deployBuilder,
  deployHandler
});
