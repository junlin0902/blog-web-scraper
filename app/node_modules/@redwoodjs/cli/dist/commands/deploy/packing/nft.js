"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var nft_exports = {};
__export(nft_exports, {
  generateEntryFile: () => generateEntryFile,
  nftPack: () => nftPack,
  packageSingleFunction: () => packageSingleFunction,
  zipDirectory: () => zipDirectory
});
module.exports = __toCommonJS(nft_exports);
var import_path = __toESM(require("path"));
var import_nft = require("@vercel/nft");
var import_archiver = __toESM(require("archiver"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_files = require("@redwoodjs/internal/dist/files");
var import_project_config = require("@redwoodjs/project-config");
var nftPacker = __toESM(require("../packing/nft"));
const ZIPBALL_DIR = "./api/dist/zipball";
function zipDirectory(source, out) {
  const archive = (0, import_archiver.default)("zip", { zlib: { level: 5 } });
  const stream = import_fs_extra.default.createWriteStream(out);
  return new Promise((resolve, reject) => {
    archive.directory(source, false).on("error", (err) => reject(err)).pipe(stream);
    stream.on("close", () => resolve());
    archive.finalize();
  });
}
function generateEntryFile(functionAbsolutePath, name) {
  const relativeImport = (0, import_project_config.ensurePosixPath)(
    import_path.default.relative((0, import_project_config.getPaths)().base, functionAbsolutePath)
  );
  return [
    `${ZIPBALL_DIR}/${name}/${name}.js`,
    `module.exports = require('./${relativeImport}')`
  ];
}
async function packageSingleFunction(functionFile) {
  const { name: functionName } = import_path.default.parse(functionFile);
  const { fileList: functionDependencyFileList } = await (0, import_nft.nodeFileTrace)([
    functionFile
  ]);
  const copyPromises = [];
  for (const singleDependencyPath of functionDependencyFileList) {
    copyPromises.push(
      import_fs_extra.default.copy(
        "./" + singleDependencyPath,
        `${ZIPBALL_DIR}/${functionName}/${singleDependencyPath}`
      )
    );
  }
  const [entryFilePath, content] = generateEntryFile(functionFile, functionName);
  const functionEntryPromise = import_fs_extra.default.outputFile(entryFilePath, content);
  copyPromises.push(functionEntryPromise);
  await Promise.all(copyPromises);
  await zipDirectory(
    `${ZIPBALL_DIR}/${functionName}`,
    `${ZIPBALL_DIR}/${functionName}.zip`
  );
  await import_fs_extra.default.remove(`${ZIPBALL_DIR}/${functionName}`);
  return;
}
function nftPack() {
  const filesToBePacked = (0, import_files.findApiDistFunctions)();
  return Promise.all(filesToBePacked.map(nftPacker.packageSingleFunction));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateEntryFile,
  nftPack,
  packageSingleFunction,
  zipDirectory
});
