"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var render_exports = {};
__export(render_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(render_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
if (process.argv.slice(2).includes("api")) {
  process.env.REDWOOD_DISABLE_TELEMETRY = 1;
}
const command = "render <side>";
const description = "Build, migrate, and serve command for Render deploy";
const builder = (yargs) => {
  yargs.positional("side", {
    choices: ["api", "web"],
    description: "Side to deploy",
    type: "string"
  }).option("prisma", {
    description: "Apply database migrations",
    type: "boolean",
    default: true
  }).option("data-migrate", {
    description: "Apply data migrations",
    type: "boolean",
    default: true,
    alias: "dm"
  }).epilogue(
    `For more commands, options, and examples, see ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#deploy"
    )}`
  );
};
const handler = async ({ side, prisma, dataMigrate }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "deploy render",
    side,
    prisma,
    dataMigrate
  });
  const rwjsPaths = (0, import_project_config.getPaths)();
  const execaConfig = {
    cwd: rwjsPaths.base,
    shell: true,
    stdio: "inherit"
  };
  async function runApiCommands() {
    if (prisma) {
      console.log("Running database migrations...");
      import_execa.default.commandSync(
        `node_modules/.bin/prisma migrate deploy --schema "${rwjsPaths.api.dbSchema}"`,
        execaConfig
      );
    }
    if (dataMigrate) {
      console.log("Running data migrations...");
      const packageJson = import_fs_extra.default.readJsonSync(
        import_path.default.join(rwjsPaths.base, "package.json")
      );
      const hasDataMigratePackage = !!packageJson.devDependencies["@redwoodjs/cli-data-migrate"];
      if (!hasDataMigratePackage) {
        console.error(
          [
            "Skipping data migrations; your project doesn't have the `@redwoodjs/cli-data-migrate` package as a dev dependency.",
            "Without it installed, you're likely to run into memory issues during deploy.",
            "If you want to run data migrations, add the package to your project's root package.json and deploy again:",
            "",
            "```",
            "yarn add -D @redwoodjs/cli-data-migrate",
            "```"
          ].join("\n")
        );
      } else {
        import_execa.default.commandSync("yarn rw dataMigrate up", execaConfig);
      }
    }
    const serverFilePath = import_path.default.join(rwjsPaths.api.dist, "server.js");
    const hasServerFile = import_fs_extra.default.pathExistsSync(serverFilePath);
    if (hasServerFile) {
      (0, import_execa.default)(`yarn node ${serverFilePath}`, execaConfig);
    } else {
      const { handler: handler2 } = await import("@redwoodjs/api-server/dist/apiCLIConfigHandler.js");
      handler2();
    }
  }
  async function runWebCommands() {
    import_execa.default.commandSync("yarn install", execaConfig);
    import_execa.default.commandSync("yarn rw build web --verbose", execaConfig);
  }
  if (side === "api") {
    runApiCommands();
  } else if (side === "web") {
    runWebCommands();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler
});
