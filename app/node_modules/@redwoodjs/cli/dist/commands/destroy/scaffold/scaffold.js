"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var scaffold_exports = {};
__export(scaffold_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler,
  tasks: () => tasks
});
module.exports = __toCommonJS(scaffold_exports);
var import_listr2 = require("listr2");
var import_pascalcase = __toESM(require("pascalcase"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_rwPluralize = require("../../../lib/rwPluralize");
var import_schemaHelpers = require("../../../lib/schemaHelpers");
var import_scaffold = require("../../generate/scaffold/scaffold");
const command = "scaffold <model>";
const description = "Destroy pages, SDL, and Services files based on a given DB schema Model";
const removeRoutesWithSet = async ({ model, path, nestScaffoldByModel }) => {
  const routes = await (0, import_scaffold.routes)({ model, path, nestScaffoldByModel });
  const routeNames = routes.map(extractRouteName);
  const pluralPascalName = (0, import_pascalcase.default)((0, import_rwPluralize.pluralize)(model));
  const layoutName = `${pluralPascalName}Layout`;
  return (0, import_lib.removeRoutesFromRouterTask)(routeNames, layoutName);
};
const removeSetImport = () => {
  const routesPath = (0, import_lib.getPaths)().web.routes;
  const routesContent = (0, import_lib.readFile)(routesPath).toString();
  if (routesContent.match("<Set")) {
    return "Skipping removal of Set import in Routes.{jsx,tsx}";
  }
  const [redwoodRouterImport] = routesContent.match(
    /import {[^]*} from '@redwoodjs\/router'/
  );
  const removedSetImport = redwoodRouterImport.replace(/,*\s*Set,*/, "");
  const newRoutesContent = routesContent.replace(
    redwoodRouterImport,
    removedSetImport
  );
  (0, import_lib.writeFile)(routesPath, newRoutesContent, { overwriteExisting: true });
  return "Removed Set import in Routes.{jsx,tsx}";
};
const removeLayoutImport = ({ model: name, path: scaffoldPath = "" }) => {
  const pluralPascalName = (0, import_pascalcase.default)((0, import_rwPluralize.pluralize)(name));
  const pascalScaffoldPath = scaffoldPath === "" ? scaffoldPath : scaffoldPath.split("/").map(import_pascalcase.default).join("/") + "/";
  const layoutName = `${pluralPascalName}Layout`;
  const importLayout = `import ${pluralPascalName}Layout from 'src/layouts/${pascalScaffoldPath}${layoutName}'`;
  const routesPath = (0, import_lib.getPaths)().web.routes;
  const routesContent = (0, import_lib.readFile)(routesPath).toString();
  const newRoutesContent = routesContent.replace(
    new RegExp(`\\s*${importLayout}`),
    ""
  );
  (0, import_lib.writeFile)(routesPath, newRoutesContent, { overwriteExisting: true });
  return "Removed layout import from Routes.{jsx,tsx}";
};
const builder = (yargs) => {
  yargs.positional("model", {
    description: "Model to destroy the scaffold of",
    type: "string"
  });
};
const tasks = ({ model, path, tests, nestScaffoldByModel }) => new import_listr2.Listr(
  [
    {
      title: "Destroying scaffold files...",
      task: async () => {
        const f = await (0, import_scaffold.files)({
          model,
          path,
          tests,
          nestScaffoldByModel
        });
        return (0, import_lib.deleteFilesTask)(f);
      }
    },
    {
      title: "Cleaning up scaffold routes...",
      task: async () => removeRoutesWithSet({ model, path, nestScaffoldByModel })
    },
    {
      title: "Removing set import...",
      task: () => removeSetImport()
    },
    {
      title: "Removing layout import...",
      task: () => removeLayoutImport({ model, path })
    }
  ],
  { rendererOptions: { collapseSubtasks: false }, exitOnError: true }
);
const handler = async ({ model: modelArg }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "destory scaffold"
  });
  const { model, path } = (0, import_scaffold.splitPathAndModel)(modelArg);
  try {
    const { name } = await (0, import_schemaHelpers.verifyModelName)({ name: model, isDestroyer: true });
    await tasks({ model: name, path }).run();
  } catch (e) {
    console.log(import_colors.default.error(e.message));
  }
};
const extractRouteName = (route) => {
  const { groups } = route.match(/.*name="?(?<routeName>\w+)"?/);
  return groups.routeName;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler,
  tasks
});
