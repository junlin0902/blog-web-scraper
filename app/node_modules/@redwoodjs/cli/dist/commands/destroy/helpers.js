"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var helpers_exports = {};
__export(helpers_exports, {
  createYargsForComponentDestroy: () => createYargsForComponentDestroy
});
module.exports = __toCommonJS(helpers_exports);
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../lib");
const tasks = ({ componentName, filesFn, name }) => new import_listr2.Listr(
  [
    {
      title: `Destroying ${componentName} files...`,
      task: async () => {
        const f = await filesFn({ name, stories: true, tests: true });
        return (0, import_lib.deleteFilesTask)(f);
      }
    }
  ],
  { rendererOptions: { collapseSubtasks: false }, exitOnError: true }
);
const createYargsForComponentDestroy = ({
  componentName,
  preTasksFn = (options) => options,
  filesFn
}) => {
  return {
    command: `${componentName} <name>`,
    description: `Destroy a ${componentName} component`,
    builder: (yargs) => {
      yargs.positional("name", {
        description: `Name of the ${componentName}`,
        type: "string"
      });
    },
    handler: async (options) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: `destroy ${componentName}`
      });
      options = await preTasksFn({ ...options, isDestroyer: true });
      await tasks({ componentName, filesFn, name: options.name }).run();
    },
    tasks
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createYargsForComponentDestroy
});
