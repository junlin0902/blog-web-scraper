"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupInngestHandler_exports = {};
__export(setupInngestHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(setupInngestHandler_exports);
var import_execa = __toESM(require("execa"));
var import_listr2 = require("listr2");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../lib");
var import_colors = __toESM(require("../../lib/colors"));
var import_setupInngest = require("./setupInngest");
var import_util = require("./util");
const handler = async ({ force }) => {
  const tasks = new import_listr2.Listr([
    {
      title: `Adding Inngest setup packages for RedwoodJS ...`,
      task: async () => {
        await (0, import_execa.default)("yarn", ["add", "-D", "inngest-setup-redwoodjs"], {
          cwd: (0, import_lib.getPaths)().base
        });
      }
    },
    {
      task: async () => {
        const pluginCommands = ["inngest-setup-redwoodjs", "plugin"];
        if (force) {
          pluginCommands.push("--force");
        }
        await (0, import_execa.default)("yarn", [...pluginCommands], {
          stdout: "inherit",
          cwd: (0, import_lib.getPaths)().base
        });
      }
    },
    {
      task: () => {
        (0, import_util.printTaskEpilogue)(import_setupInngest.command, import_setupInngest.description, import_setupInngest.EXPERIMENTAL_TOPIC_ID);
      }
    }
  ]);
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
