"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupRscHandler_exports = {};
__export(setupRscHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(setupRscHandler_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../lib");
var import_colors = __toESM(require("../../lib/colors"));
var import_project = require("../../lib/project");
var import_setupRsc = require("./setupRsc");
var import_util = require("./util");
const handler = async ({ force, verbose }) => {
  const rwPaths = (0, import_lib.getPaths)();
  const redwoodTomlPath = (0, import_project_config.getConfigPath)();
  const configContent = import_fs_extra.default.readFileSync(redwoodTomlPath, "utf-8");
  const ext = import_path.default.extname(rwPaths.web.entryClient || "");
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Check prerequisites",
        task: () => {
          if (!rwPaths.web.entryClient || !rwPaths.web.viteConfig) {
            throw new Error("Vite needs to be setup before you can enable RSCs");
          }
          if (!(0, import_project_config.getConfig)().experimental?.streamingSsr?.enabled) {
            throw new Error(
              "The Streaming SSR experimental feature must be enabled before you can enable RSCs"
            );
          }
          if (!(0, import_project.isTypeScriptProject)()) {
            throw new Error(
              "RSCs are only supported in TypeScript projects at this time"
            );
          }
        }
      },
      {
        title: "Adding config to redwood.toml...",
        task: (_ctx, task) => {
          if (!configContent.includes("[experimental.rsc]")) {
            (0, import_lib.writeFile)(
              redwoodTomlPath,
              configContent.concat("\n[experimental.rsc]\n  enabled = true\n"),
              {
                overwriteExisting: true
                // redwood.toml always exists
              }
            );
          } else {
            if (force) {
              task.output = "Overwriting config in redwood.toml";
              (0, import_lib.writeFile)(
                redwoodTomlPath,
                configContent.replace(
                  // Enable if it's currently disabled
                  "\n[experimental.rsc]\n  enabled = false\n",
                  "\n[experimental.rsc]\n  enabled = true\n"
                ),
                {
                  overwriteExisting: true
                  // redwood.toml always exists
                }
              );
            } else {
              task.skip(
                "The [experimental.rsc] config block already exists in your `redwood.toml` file."
              );
            }
          }
        },
        options: { persistentOutput: true }
      },
      {
        title: `Overwriting entry.client${ext}...`,
        task: async () => {
          const entryClientTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "entry.client.tsx.template"
            ),
            "utf-8"
          );
          const entryClientContent = (0, import_project.isTypeScriptProject)() ? entryClientTemplate : await (0, import_lib.transformTSToJS)(
            rwPaths.web.entryClient,
            entryClientTemplate
          );
          (0, import_lib.writeFile)(rwPaths.web.entryClient, entryClientContent, {
            overwriteExisting: true
          });
        }
      },
      {
        title: `Overwriting entry.server${ext}...`,
        task: async () => {
          const entryServerTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "entry.server.tsx.template"
            ),
            "utf-8"
          );
          const entryServerPath = import_path.default.join(
            rwPaths.web.src,
            `entry.server${ext}`
          );
          const entryServerContent = (0, import_project.isTypeScriptProject)() ? entryServerTemplate : await (0, import_lib.transformTSToJS)(entryServerPath, entryServerTemplate);
          (0, import_lib.writeFile)(entryServerPath, entryServerContent, {
            overwriteExisting: true
          });
        }
      },
      {
        title: `Overwriting Document${ext}...`,
        task: async () => {
          const documentTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "Document.tsx.template"
            ),
            "utf-8"
          );
          const documentPath = import_path.default.join(rwPaths.web.src, `Document${ext}`);
          const documentContent = (0, import_project.isTypeScriptProject)() ? documentTemplate : await (0, import_lib.transformTSToJS)(documentPath, documentTemplate);
          (0, import_lib.writeFile)(documentPath, documentContent, {
            overwriteExisting: true
          });
        }
      },
      {
        title: "Adding Pages...",
        task: async () => {
          const homePageTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "HomePage.tsx.template"
            ),
            "utf-8"
          );
          const homePagePath = import_path.default.join(
            rwPaths.web.pages,
            "HomePage",
            "HomePage.tsx"
          );
          (0, import_lib.writeFile)(homePagePath, homePageTemplate, {
            overwriteExisting: force
          });
          const aboutPageTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "AboutPage.tsx.template"
            ),
            "utf-8"
          );
          const aboutPagePath = import_path.default.join(
            rwPaths.web.pages,
            "AboutPage",
            "AboutPage.tsx"
          );
          (0, import_lib.writeFile)(aboutPagePath, aboutPageTemplate, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Adding Counter.tsx...",
        task: async () => {
          const counterTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(__dirname, "templates", "rsc", "Counter.tsx.template"),
            "utf-8"
          );
          const counterPath = import_path.default.join(
            rwPaths.web.components,
            "Counter",
            "Counter.tsx"
          );
          (0, import_lib.writeFile)(counterPath, counterTemplate, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Adding AboutCounter.tsx...",
        task: async () => {
          const counterTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "AboutCounter.tsx.template"
            ),
            "utf-8"
          );
          const counterPath = import_path.default.join(
            rwPaths.web.components,
            "Counter",
            "AboutCounter.tsx"
          );
          (0, import_lib.writeFile)(counterPath, counterTemplate, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Adding CSS files...",
        task: async () => {
          const files = [
            {
              template: "Counter.css.template",
              path: ["components", "Counter", "Counter.css"]
            },
            {
              template: "Counter.module.css.template",
              path: ["components", "Counter", "Counter.module.css"]
            },
            {
              template: "HomePage.css.template",
              path: ["pages", "HomePage", "HomePage.css"]
            },
            {
              template: "HomePage.module.css.template",
              path: ["pages", "HomePage", "HomePage.module.css"]
            },
            {
              template: "AboutPage.css.template",
              path: ["pages", "AboutPage", "AboutPage.css"]
            }
          ];
          files.forEach((file) => {
            const template = import_fs_extra.default.readFileSync(
              import_path.default.resolve(__dirname, "templates", "rsc", file.template),
              "utf-8"
            );
            const filePath = import_path.default.join(rwPaths.web.src, ...file.path);
            (0, import_lib.writeFile)(filePath, template, {
              overwriteExisting: force
            });
          });
        }
      },
      {
        title: "Adding Layout...",
        task: async () => {
          const layoutTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "NavigationLayout.tsx.template"
            ),
            "utf-8"
          );
          const layoutPath = import_path.default.join(
            rwPaths.web.layouts,
            "NavigationLayout",
            "NavigationLayout.tsx"
          );
          (0, import_lib.writeFile)(layoutPath, layoutTemplate, { overwriteExisting: force });
          const cssTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "rsc",
              "NavigationLayout.css.template"
            ),
            "utf-8"
          );
          const cssPath = import_path.default.join(
            rwPaths.web.layouts,
            "NavigationLayout",
            "NavigationLayout.css"
          );
          (0, import_lib.writeFile)(cssPath, cssTemplate, { overwriteExisting: force });
        }
      },
      {
        title: "Overwriting index.css...",
        task: async () => {
          const template = import_fs_extra.default.readFileSync(
            import_path.default.resolve(__dirname, "templates", "rsc", "index.css.template"),
            "utf-8"
          );
          const filePath = import_path.default.join(rwPaths.web.src, "index.css");
          (0, import_lib.writeFile)(filePath, template, {
            overwriteExisting: true
          });
        }
      },
      {
        title: "Add React experimental types...",
        task: async () => {
          const tsconfigPath = import_path.default.join(rwPaths.web.base, "tsconfig.json");
          const tsconfig = JSON.parse(import_fs_extra.default.readFileSync(tsconfigPath, "utf-8"));
          if (tsconfig.compilerOptions.types.includes("react/experimental")) {
            return;
          }
          tsconfig.compilerOptions.types.push("react/experimental");
          (0, import_lib.writeFile)(
            tsconfigPath,
            await (0, import_cli_helpers.prettify)("tsconfig.json", JSON.stringify(tsconfig, null, 2)),
            {
              overwriteExisting: true
            }
          );
        }
      },
      {
        title: "Overwriting routes...",
        task: async () => {
          const routesTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(__dirname, "templates", "rsc", "Routes.tsx.template"),
            "utf-8"
          );
          (0, import_lib.writeFile)(rwPaths.web.routes, routesTemplate, {
            overwriteExisting: true
          });
        }
      },
      {
        title: "Updating React version...",
        task: async () => {
          const canaryWebPackageJsonUrl = "https://raw.githubusercontent.com/redwoodjs/redwood/main/packages/create-redwood-app/templates/ts/web/package.json";
          const response = await fetch(canaryWebPackageJsonUrl);
          const canaryPackageJson = await response.json();
          const currentRootPackageJsonPath = import_path.default.join(
            rwPaths.base,
            "package.json"
          );
          const currentRootPackageJson = JSON.parse(
            import_fs_extra.default.readFileSync(currentRootPackageJsonPath, "utf-8")
          );
          const currentWebPackageJsonPath = import_path.default.join(
            rwPaths.web.base,
            "package.json"
          );
          const currentWebPackageJson = JSON.parse(
            import_fs_extra.default.readFileSync(currentWebPackageJsonPath, "utf-8")
          );
          const packagesToUpdate = ["react", "react-dom"];
          for (const packageName of packagesToUpdate) {
            currentRootPackageJson.resolutions ||= {};
            currentRootPackageJson.resolutions[packageName] = canaryPackageJson.dependencies[packageName];
            currentWebPackageJson.dependencies[packageName] = canaryPackageJson.dependencies[packageName];
          }
          (0, import_lib.writeFile)(
            currentWebPackageJsonPath,
            JSON.stringify(currentWebPackageJson, null, 2),
            {
              overwriteExisting: true
            }
          );
          await (0, import_execa.default)("yarn", [], {
            cwd: (0, import_lib.getPaths)().web.base
          });
        }
      },
      {
        task: () => {
          (0, import_util.printTaskEpilogue)(import_setupRsc.command, import_setupRsc.description, import_setupRsc.EXPERIMENTAL_TOPIC_ID);
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
