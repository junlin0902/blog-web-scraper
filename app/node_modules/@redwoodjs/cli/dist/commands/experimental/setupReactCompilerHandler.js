"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupReactCompilerHandler_exports = {};
__export(setupReactCompilerHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(setupReactCompilerHandler_exports);
var import_node_path = __toESM(require("node:path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_semver = __toESM(require("semver"));
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../lib");
var import_colors = __toESM(require("../../lib/colors"));
var import_setupReactCompiler = require("./setupReactCompiler");
var import_util = require("./util");
const handler = async ({ force, verbose }) => {
  const rwPaths = (0, import_lib.getPaths)();
  const redwoodTomlPath = (0, import_project_config.getConfigPath)();
  const configContent = import_fs_extra.default.readFileSync(redwoodTomlPath, "utf-8");
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Check prerequisites",
        skip: force,
        task: () => {
          if (!rwPaths.web.entryClient || !rwPaths.web.viteConfig) {
            throw new Error(
              "Vite needs to be setup before you can enable React Compiler"
            );
          }
          const webPkgJson = import_fs_extra.default.readJSONSync(
            import_node_path.default.join(rwPaths.web.base, "package.json")
          );
          const reactVersion = webPkgJson["dependencies"]["react"];
          const coercedReactVersion = import_semver.default.coerce(reactVersion);
          if (!import_semver.default.gte(coercedReactVersion, "19.0.0")) {
            throw new Error(
              "You need to be using at least React version 19 to enable the React Compiler"
            );
          }
        }
      },
      {
        title: "Adding config to redwood.toml...",
        task: (_ctx, task) => {
          if (!configContent.includes("[experimental.reactCompiler]")) {
            (0, import_lib.writeFile)(
              redwoodTomlPath,
              configContent.concat(
                "\n[experimental.reactCompiler]\n  enabled = true\n  lintOnly = false\n"
              ),
              {
                overwriteExisting: true
                // redwood.toml always exists
              }
            );
          } else {
            if (force) {
              task.output = "Overwriting config in redwood.toml";
              (0, import_lib.writeFile)(
                redwoodTomlPath,
                configContent.replace(
                  // Enable if it's currently disabled
                  "\n[experimental.reactCompiler]\n  enabled = false\n",
                  "\n[experimental.reactCompiler]\n  enabled = true\n"
                ),
                {
                  overwriteExisting: true
                  // redwood.toml always exists
                }
              );
            } else {
              task.skip(
                "The [experimental.reactCompiler] config block already exists in your `redwood.toml` file."
              );
            }
          }
        },
        options: { persistentOutput: true }
      },
      // We are using two different yarn commands here which is fine because they're operating on different
      // workspaces - web and the root
      {
        title: "Installing eslint-plugin-react-compiler",
        task: async () => {
          await (0, import_execa.default)("yarn", ["add", "-D", "eslint-plugin-react-compiler"], {
            cwd: (0, import_lib.getPaths)().base
          });
        }
      },
      {
        title: "Installing babel-plugin-react-compiler",
        task: async () => {
          await (0, import_execa.default)(
            "yarn",
            ["web/", "add", "-D", "babel-plugin-react-compiler"],
            {
              cwd: (0, import_lib.getPaths)().base
            }
          );
        }
      },
      {
        task: () => {
          (0, import_util.printTaskEpilogue)(import_setupReactCompiler.command, import_setupReactCompiler.description, import_setupReactCompiler.EXPERIMENTAL_TOPIC_ID);
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
