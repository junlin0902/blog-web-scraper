"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var util_exports = {};
__export(util_exports, {
  getEpilogue: () => getEpilogue,
  isRealtimeSetup: () => isRealtimeSetup,
  isServerFileSetup: () => isServerFileSetup,
  printTaskEpilogue: () => printTaskEpilogue,
  realtimeExists: () => realtimeExists
});
module.exports = __toCommonJS(util_exports);
var import_path = __toESM(require("path"));
var import_chalk = __toESM(require("chalk"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_lib = require("../../lib");
var import_project = require("../../lib/project");
const link = (topicId, isTerminal = false) => {
  const communityLink = `https://community.redwoodjs.com/t/${topicId}`;
  if (isTerminal) {
    return (0, import_terminal_link.default)(communityLink, communityLink);
  } else {
    return communityLink;
  }
};
const getEpilogue = (command, description, topicId, isTerminal = false) => `This is an experimental feature to: ${description}.

Please find documentation and links to provide feedback for ${command} at:
 -> ${link(
  topicId,
  isTerminal
)}`;
const printTaskEpilogue = (command, description, topicId) => {
  console.log(
    `${import_chalk.default.hex("#ff845e")(
      `------------------------------------------------------------------
 \u{1F9EA} ${import_chalk.default.green(
        "Experimental Feature"
      )} \u{1F9EA}
------------------------------------------------------------------`
    )}`
  );
  console.log(getEpilogue(command, description, topicId, false));
  console.log(
    `${import_chalk.default.hex("#ff845e")(
      "------------------------------------------------------------------"
    )}
`
  );
};
const isServerFileSetup = () => {
  if (!(0, import_project.serverFileExists)()) {
    throw new Error(
      "RedwoodJS Realtime requires a serverful environment. Please run `yarn rw setup server-file` first."
    );
  }
  return true;
};
const realtimeExists = () => {
  const realtimePath = import_path.default.join(
    (0, import_lib.getPaths)().api.lib,
    `realtime.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
  );
  return import_fs_extra.default.existsSync(realtimePath);
};
const isRealtimeSetup = () => {
  if (!realtimeExists) {
    throw new Error(
      "Adding realtime events requires that RedwoodJS Realtime be setup. Please run `yarn setup realtime` first."
    );
  }
  return true;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getEpilogue,
  isRealtimeSetup,
  isServerFileSetup,
  printTaskEpilogue,
  realtimeExists
});
