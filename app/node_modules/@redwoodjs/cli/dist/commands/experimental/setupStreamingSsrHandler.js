"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupStreamingSsrHandler_exports = {};
__export(setupStreamingSsrHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(setupStreamingSsrHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../lib");
var import_colors = __toESM(require("../../lib/colors"));
var import_project = require("../../lib/project");
var import_setupStreamingSsr = require("./setupStreamingSsr");
var import_util = require("./util");
const handler = async ({ force, verbose }) => {
  const rwPaths = (0, import_lib.getPaths)();
  const redwoodTomlPath = (0, import_project_config.getConfigPath)();
  const configContent = import_fs_extra.default.readFileSync(redwoodTomlPath, "utf-8");
  const ts = (0, import_project.isTypeScriptProject)();
  const ext = import_path.default.extname(rwPaths.web.entryClient || "");
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Check prerequisites",
        task: () => {
          if (!rwPaths.web.entryClient || !rwPaths.web.viteConfig) {
            throw new Error(
              "Vite needs to be setup before you can enable Streaming SSR"
            );
          }
        }
      },
      {
        title: "Adding config to redwood.toml...",
        task: (_ctx, task) => {
          if (!configContent.includes("[experimental.streamingSsr]")) {
            (0, import_lib.writeFile)(
              redwoodTomlPath,
              configContent.concat(
                `
[experimental.streamingSsr]
  enabled = true
`
              ),
              {
                overwriteExisting: true
                // redwood.toml always exists
              }
            );
          } else {
            if (force) {
              task.output = "Overwriting config in redwood.toml";
              (0, import_lib.writeFile)(
                redwoodTomlPath,
                configContent.replace(
                  // Enable if it's currently disabled
                  `
[experimental.streamingSsr]
  enabled = false
`,
                  `
[experimental.streamingSsr]
  enabled = true
`
                ),
                {
                  overwriteExisting: true
                  // redwood.toml always exists
                }
              );
            } else {
              task.skip(
                `The [experimental.streamingSsr] config block already exists in your 'redwood.toml' file.`
              );
            }
          }
        },
        options: { persistentOutput: true }
      },
      {
        title: `Adding entry.client${ext}...`,
        task: async (_ctx, task) => {
          const entryClientTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "streamingSsr",
              "entry.client.tsx.template"
            ),
            "utf-8"
          );
          let entryClientPath = rwPaths.web.entryClient;
          const entryClientContent = ts ? entryClientTemplate : await (0, import_lib.transformTSToJS)(entryClientPath, entryClientTemplate);
          let overwriteExisting = force;
          if (!force) {
            overwriteExisting = await task.prompt({
              type: "Confirm",
              message: `Overwrite ${entryClientPath}?`
            });
            if (!overwriteExisting) {
              entryClientPath = entryClientPath.replace(ext, `.new${ext}`);
              task.output = `File will be written to ${entryClientPath}
You'll manually need to merge it with your existing entry.client${ext} file.`;
            }
          }
          (0, import_lib.writeFile)(entryClientPath, entryClientContent, { overwriteExisting });
        },
        options: { persistentOutput: true }
      },
      {
        title: `Adding entry.server${ext}...`,
        task: async () => {
          const entryServerTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "streamingSsr",
              "entry.server.tsx.template"
            ),
            "utf-8"
          );
          const entryServerPath = import_path.default.join(
            rwPaths.web.src,
            `entry.server${ext}`
          );
          const entryServerContent = ts ? entryServerTemplate : await (0, import_lib.transformTSToJS)(entryServerPath, entryServerTemplate);
          (0, import_lib.writeFile)(entryServerPath, entryServerContent, {
            overwriteExisting: force
          });
        }
      },
      {
        title: `Adding Document${ext}...`,
        task: async () => {
          const documentTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "streamingSsr",
              "Document.tsx.template"
            ),
            "utf-8"
          );
          const documentPath = import_path.default.join(rwPaths.web.src, `Document${ext}`);
          const documentContent = ts ? documentTemplate : await (0, import_lib.transformTSToJS)(documentPath, documentTemplate);
          (0, import_lib.writeFile)(documentPath, documentContent, {
            overwriteExisting: force
          });
        }
      },
      {
        title: `Update web/{ts,js}config.json...`,
        task: async () => {
          const tsconfigTemplate = import_fs_extra.default.readFileSync(
            import_path.default.resolve(
              __dirname,
              "templates",
              "streamingSsr",
              "tsconfig.json.template"
            ),
            "utf-8"
          );
          const tsconfigPath = import_path.default.join(
            rwPaths.web.base,
            ts ? "tsconfig.json" : "jsconfig.json"
          );
          (0, import_lib.writeFile)(tsconfigPath, tsconfigTemplate, {
            overwriteExisting: force
          });
        }
      },
      {
        title: 'Adding resolution for "@apollo/client-react-streaming/superjson"',
        task: () => {
          const pkgJsonPath = import_path.default.join(rwPaths.base, "package.json");
          const pkgJson = import_fs_extra.default.readJsonSync(pkgJsonPath);
          const resolutions = pkgJson.resolutions || {};
          resolutions["@apollo/client-react-streaming/superjson"] = "^1.12.2";
          pkgJson.resolutions = resolutions;
          import_fs_extra.default.writeJsonSync(pkgJsonPath, pkgJson, { spaces: 2 });
        }
      },
      (0, import_cli_helpers.addWebPackages)(["@apollo/client-react-streaming@0.10.0"]),
      {
        task: () => {
          (0, import_util.printTaskEpilogue)(import_setupStreamingSsr.command, import_setupStreamingSsr.description, import_setupStreamingSsr.EXPERIMENTAL_TOPIC_ID);
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
