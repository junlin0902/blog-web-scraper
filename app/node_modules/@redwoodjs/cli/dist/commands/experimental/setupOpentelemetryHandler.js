"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupOpentelemetryHandler_exports = {};
__export(setupOpentelemetryHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(setupOpentelemetryHandler_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../lib");
var import_colors = __toESM(require("../../lib/colors"));
var import_project = require("../../lib/project");
var import_setupOpentelemetry = require("./setupOpentelemetry");
var import_util = require("./util");
const handler = async ({ force, verbose }) => {
  const ts = (0, import_project.isTypeScriptProject)();
  const opentelemetryScriptPath = `${(0, import_lib.getPaths)().api.src}/opentelemetry.${ts ? "ts" : "js"}`;
  const opentelemetryPackages = [
    "@opentelemetry/api",
    "@opentelemetry/instrumentation",
    "@opentelemetry/exporter-trace-otlp-http",
    "@opentelemetry/resources",
    "@opentelemetry/sdk-node",
    "@opentelemetry/semantic-conventions",
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/instrumentation-fastify",
    "@prisma/instrumentation"
  ];
  const opentelemetryTasks = [
    {
      title: `Adding OpenTelemetry setup files...`,
      task: async () => {
        const setupTemplateContent = import_fs_extra.default.readFileSync(
          import_path.default.resolve(__dirname, "templates", "opentelemetry.ts.template"),
          "utf-8"
        );
        const setupScriptContent = ts ? setupTemplateContent : await (0, import_lib.transformTSToJS)(opentelemetryScriptPath, setupTemplateContent);
        return [
          (0, import_lib.writeFile)(opentelemetryScriptPath, setupScriptContent, {
            overwriteExisting: force
          })
        ];
      }
    },
    {
      title: "Adding config to redwood.toml...",
      task: (_ctx, task) => {
        const redwoodTomlPath = (0, import_project_config.getConfigPath)();
        const configContent = import_fs_extra.default.readFileSync(redwoodTomlPath, "utf-8");
        if (!configContent.includes("[experimental.opentelemetry]")) {
          (0, import_lib.writeFile)(
            redwoodTomlPath,
            configContent.concat(
              `
[experimental.opentelemetry]
	enabled = true
	wrapApi = true`
            ),
            {
              overwriteExisting: true
              // redwood.toml always exists
            }
          );
        } else {
          task.skip(
            `The [experimental.opentelemetry] config block already exists in your 'redwood.toml' file.`
          );
        }
      }
    },
    {
      title: "Notice: GraphQL function update...",
      enabled: () => {
        return import_fs_extra.default.existsSync(
          (0, import_project_config.resolveFile)(import_path.default.join((0, import_lib.getPaths)().api.functions, "graphql"))
        );
      },
      task: (_ctx, task) => {
        task.output = [
          "Please add the following to your 'createGraphQLHandler' function options to enable OTel for your graphql",
          "openTelemetryOptions: {",
          "  resolvers: true,",
          "  result: true,",
          "  variables: true,",
          "}",
          "",
          `Which can found at ${import_colors.default.info(
            import_path.default.join((0, import_lib.getPaths)().api.functions, "graphql")
          )}`
        ].join("\n");
      },
      options: { persistentOutput: true }
    },
    {
      title: "Notice: GraphQL function update (server file)...",
      enabled: () => {
        return import_fs_extra.default.existsSync(
          (0, import_project_config.resolveFile)(import_path.default.join((0, import_lib.getPaths)().api.src, "server"))
        );
      },
      task: (_ctx, task) => {
        task.output = [
          "Please add the following to your 'redwoodFastifyGraphQLServer' plugin options to enable OTel for your graphql",
          "openTelemetryOptions: {",
          "  resolvers: true,",
          "  result: true,",
          "  variables: true,",
          "}",
          "",
          `Which can found at ${import_colors.default.info(
            import_path.default.join((0, import_lib.getPaths)().api.src, "server")
          )}`
        ].join("\n");
      },
      options: { persistentOutput: true }
    },
    (0, import_cli_helpers.addApiPackages)(opentelemetryPackages)
  ];
  const prismaTasks = [
    {
      title: "Setup Prisma OpenTelemetry...",
      task: (_ctx, task) => {
        const schemaPath = import_path.default.join((0, import_lib.getPaths)().api.db, "schema.prisma");
        const schemaContent = import_fs_extra.default.readFileSync(schemaPath, {
          encoding: "utf-8",
          flag: "r"
        });
        const clientConfig = schemaContent.slice(
          schemaContent.indexOf("generator client") + "generator client".length,
          schemaContent.indexOf(
            "}",
            schemaContent.indexOf("generator client")
          ) + 1
        ).trim();
        const previewLineExists = clientConfig.includes("previewFeatures");
        let newSchemaContents = schemaContent;
        if (previewLineExists) {
          task.skip(
            'Please add "tracing" to your previewFeatures in prisma.schema'
          );
        } else {
          const newClientConfig = clientConfig.trim().split("\n");
          newClientConfig.splice(
            newClientConfig.length - 1,
            0,
            'previewFeatures = ["tracing"]'
          );
          newSchemaContents = newSchemaContents.replace(
            clientConfig,
            newClientConfig.join("\n")
          );
        }
        return (0, import_lib.writeFile)(schemaPath, newSchemaContents, {
          overwriteExisting: true
          // We'll likely always already have this file in the project
        });
      }
    },
    {
      title: "Regenerate the Prisma client...",
      task: (_ctx, _task) => {
        return (0, import_execa.default)(`yarn rw prisma generate`, {
          stdio: "inherit",
          shell: true,
          cwd: (0, import_lib.getPaths)().web.base
        });
      }
    }
  ];
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Confirmation",
        task: async (_ctx, task) => {
          const confirmation = await task.prompt({
            type: "Confirm",
            message: "OpenTelemetry support is experimental. Continue?"
          });
          if (!confirmation) {
            throw new Error("User aborted");
          }
        }
      },
      ...opentelemetryTasks,
      ...prismaTasks,
      {
        task: () => {
          (0, import_util.printTaskEpilogue)(import_setupOpentelemetry.command, import_setupOpentelemetry.description, import_setupOpentelemetry.EXPERIMENTAL_TOPIC_ID);
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
