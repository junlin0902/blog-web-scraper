"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var prismaHandler_exports = {};
__export(prismaHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(prismaHandler_exports);
var import_path = __toESM(require("path"));
var import_boxen = __toESM(require("boxen"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_colors = __toESM(require("../lib/colors"));
var import_lib = require("../lib/index");
const handler = async ({ _, $0, commands = [], ...options }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "prisma"
  });
  const rwjsPaths = (0, import_lib.getPaths)();
  const helpIndex = commands.indexOf("help");
  if (helpIndex !== -1) {
    options.help = true;
    commands.splice(helpIndex, 1);
  }
  const hasHelpOption = options.help || options.h;
  if (!hasHelpOption) {
    if (["generate", "introspect", "db", "migrate", "studio", "format"].includes(
      commands[0]
    )) {
      const schemaDir = import_path.default.dirname(rwjsPaths.api.dbSchema);
      if (!import_fs_extra.default.existsSync(rwjsPaths.api.dbSchema) && !import_fs_extra.default.existsSync(schemaDir)) {
        console.error();
        console.error(import_colors.default.error("No Prisma Schema found."));
        console.error(`Redwood searched here '${rwjsPaths.api.dbSchema}'`);
        console.error();
        process.exit(1);
      }
      options.schema = `${rwjsPaths.api.dbSchema}`;
      if (["seed", "diff"].includes(commands[1])) {
        delete options.schema;
      }
    }
  }
  const args = commands;
  for (const [name, value] of Object.entries(options)) {
    args.push(name.length > 1 ? `--${name}` : `-${name}`);
    if (typeof value !== "boolean") {
      value.split(" ").length > 1 ? args.push(`"${value}"`) : args.push(value);
    }
  }
  console.log();
  console.log(import_colors.default.note("Running Prisma CLI..."));
  console.log(import_colors.default.underline("$ yarn prisma " + args.join(" ")));
  console.log();
  try {
    import_execa.default.sync(
      `"${import_path.default.join(rwjsPaths.base, "node_modules/.bin/prisma")}"`,
      args,
      {
        shell: true,
        cwd: rwjsPaths.base,
        stdio: "inherit",
        cleanup: true
      }
    );
    if (hasHelpOption || commands.length === 0) {
      printWrapInfo();
    }
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, `Error generating prisma client: ${e.message}`);
    process.exit(e?.exitCode || 1);
  }
};
const printWrapInfo = () => {
  const message = [
    import_colors.default.bold("Redwood CLI wraps Prisma CLI"),
    "",
    "Use `yarn rw prisma` to automatically pass `--schema` and `--preview-feature` options.",
    "Use `yarn prisma` to skip Redwood CLI automatic options.",
    "",
    "Find more information in our docs:",
    import_colors.default.underline("https://redwoodjs.com/docs/cli-commands#prisma")
  ];
  console.log(
    (0, import_boxen.default)(message.join("\n"), {
      padding: { top: 0, bottom: 0, right: 1, left: 1 },
      margin: 1,
      borderColor: "gray"
    })
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
