"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serveBothHandler_exports = {};
__export(serveBothHandler_exports, {
  bothServerFileHandler: () => bothServerFileHandler,
  bothSsrRscServerHandler: () => bothSsrRscServerHandler
});
module.exports = __toCommonJS(serveBothHandler_exports);
var import_path = __toESM(require("path"));
var import_concurrently = __toESM(require("concurrently"));
var import_execa = __toESM(require("execa"));
var import_apiCLIConfigHandler = require("@redwoodjs/api-server/dist/apiCLIConfigHandler");
var import_cliHelpers = require("@redwoodjs/api-server/dist/cliHelpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_exit = require("../lib/exit");
const bothServerFileHandler = async (argv) => {
  if ((0, import_project_config.getConfig)().experimental?.rsc?.enabled || (0, import_project_config.getConfig)().experimental?.streamingSsr?.enabled) {
    logSkippingFastifyWebServer();
    await (0, import_execa.default)("yarn", ["rw-serve-fe"], {
      cwd: (0, import_project_config.getPaths)().web.base,
      stdio: "inherit",
      shell: true
    });
  } else {
    argv.apiPort ??= (0, import_cliHelpers.getAPIPort)();
    argv.apiHost ??= (0, import_cliHelpers.getAPIHost)();
    argv.webPort ??= (0, import_cliHelpers.getWebPort)();
    argv.webHost ??= (0, import_cliHelpers.getWebHost)();
    const apiProxyTarget = [
      "http://",
      argv.apiHost.includes(":") ? `[${argv.apiHost}]` : argv.apiHost,
      ":",
      argv.apiPort,
      argv.apiRootPath
    ].join("");
    const { result } = (0, import_concurrently.default)(
      [
        {
          name: "api",
          command: `yarn node ${import_path.default.join("dist", "server.js")} --apiPort ${argv.apiPort} --apiHost ${argv.apiHost} --apiRootPath ${argv.apiRootPath}`,
          cwd: (0, import_project_config.getPaths)().api.base,
          prefixColor: "cyan"
        },
        {
          name: "web",
          command: `yarn rw-web-server --port ${argv.webPort} --host ${argv.webHost} --api-proxy-target ${apiProxyTarget}`,
          cwd: (0, import_project_config.getPaths)().base,
          prefixColor: "blue"
        }
      ],
      {
        prefix: "{name} |",
        timestampFormat: "HH:mm:ss",
        handleInput: true
      }
    );
    try {
      await result;
    } catch (error) {
      if (typeof error?.message !== "undefined") {
        (0, import_telemetry.errorTelemetry)(
          process.argv,
          `Error concurrently starting sides: ${error.message}`
        );
        (0, import_exit.exitWithError)(error);
      }
    }
  }
};
const bothSsrRscServerHandler = async (argv, rscEnabled) => {
  const apiPromise = (0, import_apiCLIConfigHandler.handler)({
    apiRootPath: argv.apiRootPath,
    host: argv.apiHost,
    port: argv.apiPort
  });
  const fePromise = (0, import_execa.default)("yarn", ["rw-serve-fe"], {
    cwd: (0, import_project_config.getPaths)().web.base,
    stdio: "inherit",
    shell: true,
    env: rscEnabled ? {
      // TODO (RSC): Is this how we want to do it? If so, we need to find a way
      // to merge this with users' NODE_OPTIONS
      NODE_OPTIONS: "--conditions react-server"
    } : void 0
  });
  await Promise.all([apiPromise, fePromise]);
};
function logSkippingFastifyWebServer() {
  console.warn("");
  console.warn("\u26A0\uFE0F Skipping Fastify web server \u26A0\uFE0F");
  console.warn("\u26A0\uFE0F Using new RSC server instead \u26A0\uFE0F");
  console.warn("");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bothServerFileHandler,
  bothSsrRscServerHandler
});
