"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serve_exports = {};
__export(serve_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description
});
module.exports = __toCommonJS(serve_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_terminal_link = __toESM(require("terminal-link"));
var apiServerCLIConfig = __toESM(require("@redwoodjs/api-server/dist/apiCLIConfig"));
var bothServerCLIConfig = __toESM(require("@redwoodjs/api-server/dist/bothCLIConfig"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var webServerCLIConfig = __toESM(require("@redwoodjs/web-server"));
var import_lib = require("../lib");
var import_colors = __toESM(require("../lib/colors"));
var import_project = require("../lib/project.js");
var import_serveWebHandler = require("./serveWebHandler");
const command = "serve [side]";
const description = "Start a server for serving both the api and web sides";
const builder = async (yargs) => {
  const rscEnabled = (0, import_lib.getConfig)().experimental?.rsc?.enabled;
  const streamingEnabled = (0, import_lib.getConfig)().experimental?.streamingSsr?.enabled;
  yargs.command({
    command: "$0",
    description: bothServerCLIConfig.description,
    builder: bothServerCLIConfig.builder,
    handler: async (argv) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "serve",
        port: argv.port,
        host: argv.host,
        socket: argv.socket
      });
      if ((0, import_project.serverFileExists)()) {
        const { bothServerFileHandler } = await import("./serveBothHandler.js");
        await bothServerFileHandler(argv);
      } else if (rscEnabled || streamingEnabled) {
        const { bothSsrRscServerHandler } = await import("./serveBothHandler.js");
        await bothSsrRscServerHandler(argv, rscEnabled);
      } else {
        await bothServerCLIConfig.handler(argv);
      }
    }
  }).command({
    command: "api",
    description: apiServerCLIConfig.description,
    builder: apiServerCLIConfig.builder,
    handler: async (argv) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "serve",
        port: argv.port,
        host: argv.host,
        socket: argv.socket,
        apiRootPath: argv.apiRootPath
      });
      if ((0, import_project.serverFileExists)()) {
        const { apiServerFileHandler } = await import("./serveApiHandler.js");
        await apiServerFileHandler(argv);
      } else {
        await apiServerCLIConfig.handler(argv);
      }
    }
  }).command({
    command: "web",
    description: webServerCLIConfig.description,
    builder: webServerCLIConfig.builder,
    handler: async (argv) => {
      (0, import_cli_helpers.recordTelemetryAttributes)({
        command: "serve",
        port: argv.port,
        host: argv.host,
        socket: argv.socket,
        apiHost: argv.apiHost
      });
      if (streamingEnabled) {
        await (0, import_serveWebHandler.webSsrServerHandler)(rscEnabled);
      } else {
        await webServerCLIConfig.handler(argv);
      }
    }
  }).middleware((argv) => {
    (0, import_cli_helpers.recordTelemetryAttributes)({
      command: "serve"
    });
    const positionalArgs = argv._;
    if (positionalArgs.includes("web") && !import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().web.dist), "index.html")) {
      console.error(
        import_colors.default.error(
          "\n Please run `yarn rw build web` before trying to serve web. \n"
        )
      );
      process.exit(1);
    }
    const apiSideExists = import_fs_extra.default.existsSync((0, import_lib.getPaths)().api.base);
    if (positionalArgs.includes("api")) {
      if (!apiSideExists) {
        console.error(
          import_colors.default.error(
            "\n Unable to serve the api side as no `api` folder exists. \n"
          )
        );
        process.exit(1);
      }
      if (!import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().api.dist))) {
        console.error(
          import_colors.default.error(
            "\n Please run `yarn rw build api` before trying to serve api. \n"
          )
        );
        process.exit(1);
      }
    }
    if (positionalArgs.length === 1) {
      if (!apiSideExists && !rscEnabled) {
        console.error(
          import_colors.default.error(
            "\n Unable to serve the both sides as no `api` folder exists. Please use `yarn rw serve web` instead. \n"
          )
        );
        process.exit(1);
      }
      if (import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().api.base)) && !import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().api.dist)) || !import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().web.dist), "index.html")) {
        console.error(
          import_colors.default.error(
            "\n Please run `yarn rw build` before trying to serve your redwood app. \n"
          )
        );
        process.exit(1);
      }
    }
    if (!process.env.NODE_ENV) {
      process.env.NODE_ENV = "production";
    }
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#serve"
    )}`
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description
});
