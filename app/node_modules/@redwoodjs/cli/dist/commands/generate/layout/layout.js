"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var layout_exports = {};
__export(layout_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  files: () => files,
  handler: () => handler
});
module.exports = __toCommonJS(layout_exports);
var import_lib = require("../../../lib");
var import_helpers = require("../helpers");
var import_helpers2 = require("../helpers");
const COMPONENT_SUFFIX = "Layout";
const REDWOOD_WEB_PATH_NAME = "layouts";
const files = async ({ name, typescript = false, ...options }) => {
  const layoutName = (0, import_helpers2.removeGeneratorName)(name, "layout");
  const extension = typescript ? ".tsx" : ".jsx";
  const layoutFile = await (0, import_helpers2.templateForComponentFile)({
    name: layoutName,
    suffix: COMPONENT_SUFFIX,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    extension,
    generator: "layout",
    templatePath: options.skipLink ? "layout.tsx.a11y.template" : "layout.tsx.template"
  });
  const testFile = await (0, import_helpers2.templateForComponentFile)({
    name: layoutName,
    suffix: COMPONENT_SUFFIX,
    extension: `.test${extension}`,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: "layout",
    templatePath: "test.tsx.template"
  });
  const storyFile = await (0, import_helpers2.templateForComponentFile)({
    name: layoutName,
    suffix: COMPONENT_SUFFIX,
    extension: `.stories${extension}`,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: "layout",
    templatePath: "stories.tsx.template"
  });
  const files2 = [layoutFile];
  if (options.stories) {
    files2.push(storyFile);
  }
  if (options.tests) {
    files2.push(testFile);
  }
  return files2.reduce(async (accP, [outputPath, content]) => {
    const acc = await accP;
    const template = typescript ? content : await (0, import_lib.transformTSToJS)(outputPath, content);
    return {
      [outputPath]: template,
      ...acc
    };
  }, Promise.resolve({}));
};
const optionsObj = {
  skipLink: {
    default: false,
    description: "Generate with skip link",
    type: "boolean"
  },
  ...import_helpers.yargsDefaults
};
const { command, description, builder, handler } = (0, import_helpers2.createYargsForComponentGeneration)({
  componentName: "layout",
  filesFn: files,
  optionsObj
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  files,
  handler
});
