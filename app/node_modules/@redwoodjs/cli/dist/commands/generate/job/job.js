"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var job_exports = {};
__export(job_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  files: () => files,
  handler: () => handler
});
module.exports = __toCommonJS(job_exports);
var import_node_path = __toESM(require("node:path"));
var import_node_url = require("node:url");
var changeCase = __toESM(require("change-case"));
var import_execa = __toESM(require("execa"));
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
var import_rollback = require("../../../lib/rollback");
var import_helpers = require("../helpers");
var import_helpers2 = require("../helpers");
const normalizeName = (name) => {
  return changeCase.pascalCase(name).replace(/Job$/, "");
};
const files = async ({
  name,
  queueName,
  typescript: generateTypescript,
  tests: generateTests = true,
  ...rest
}) => {
  const extension = generateTypescript ? ".ts" : ".js";
  const outputFiles = [];
  const jobName = normalizeName(name);
  const jobFiles = await (0, import_helpers2.templateForComponentFile)({
    name: jobName,
    componentName: jobName,
    extension,
    apiPathSection: "jobs",
    generator: "job",
    templatePath: "job.ts.template",
    templateVars: { name: jobName, queueName, ...rest },
    outputPath: import_node_path.default.join(
      (0, import_lib.getPaths)().api.jobs,
      `${jobName}Job`,
      `${jobName}Job${extension}`
    )
  });
  outputFiles.push(jobFiles);
  if (generateTests) {
    const testFile = await (0, import_helpers2.templateForComponentFile)({
      name: jobName,
      componentName: jobName,
      extension,
      apiPathSection: "jobs",
      generator: "job",
      templatePath: "test.ts.template",
      templateVars: { ...rest },
      outputPath: import_node_path.default.join(
        (0, import_lib.getPaths)().api.jobs,
        `${jobName}Job`,
        `${jobName}Job.test${extension}`
      )
    });
    const scenarioFile = await (0, import_helpers2.templateForComponentFile)({
      name: jobName,
      componentName: jobName,
      extension,
      apiPathSection: "jobs",
      generator: "job",
      templatePath: "scenarios.ts.template",
      templateVars: { ...rest },
      outputPath: import_node_path.default.join(
        (0, import_lib.getPaths)().api.jobs,
        `${jobName}Job`,
        `${jobName}Job.scenarios${extension}`
      )
    });
    outputFiles.push(testFile);
    outputFiles.push(scenarioFile);
  }
  return outputFiles.reduce(async (accP, [outputPath, content]) => {
    const acc = await accP;
    const template = generateTypescript ? content : await (0, import_lib.transformTSToJS)(outputPath, content);
    return {
      [outputPath]: template,
      ...acc
    };
  }, Promise.resolve({}));
};
const command = "job <name>";
const description = "Generate a Background Job";
const builder = (yargs) => {
  yargs.positional("name", {
    description: "Name of the Job",
    type: "string"
  }).option("typescript", {
    alias: "ts",
    description: "Generate TypeScript files",
    type: "boolean",
    default: (0, import_project.isTypeScriptProject)()
  }).option("tests", {
    description: "Generate test files",
    type: "boolean",
    default: true
  }).option("rollback", {
    description: "Revert all generator actions if an error occurs",
    type: "boolean",
    default: true
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#generate-job"
    )}`
  );
  Object.entries(import_helpers.yargsDefaults).forEach(([option, config]) => {
    yargs.option(option, config);
  });
};
const handler = async ({ name, force, ...rest }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate job",
    force,
    rollback: rest.rollback
  });
  (0, import_helpers2.validateName)(name);
  let queueName = "default";
  try {
    const jobsManagerFile = (0, import_lib.getPaths)().api.distJobsConfig;
    const jobManager = await import((0, import_node_url.pathToFileURL)(jobsManagerFile).href);
    queueName = jobManager.jobs?.queues[0] ?? "default";
  } catch (_e) {
  }
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Generating job files...",
        task: async () => {
          const jobFiles = await files({ name, queueName, ...rest });
          return (0, import_lib.writeFilesTask)(jobFiles, { overwriteExisting: force });
        }
      },
      {
        title: "Cleaning up...",
        task: () => {
          import_execa.default.commandSync("yarn", [
            "eslint",
            "--fix",
            "--config",
            `${(0, import_lib.getPaths)().base}/node_modules/@redwoodjs/eslint-config/shared.js`,
            `${(0, import_lib.getPaths)().api.jobsConfig}`
          ]);
        }
      }
    ],
    { rendererOptions: { collapseSubtasks: false }, exitOnError: true }
  );
  try {
    if (rest.rollback && !force) {
      (0, import_rollback.prepareForRollback)(tasks);
    }
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  files,
  handler
});
