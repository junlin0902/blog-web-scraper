"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var secret_exports = {};
__export(secret_exports, {
  DEFAULT_LENGTH: () => DEFAULT_LENGTH,
  builder: () => builder,
  command: () => command,
  description: () => description,
  generateSecret: () => generateSecret,
  handler: () => handler
});
module.exports = __toCommonJS(secret_exports);
var import_node_crypto = __toESM(require("node:crypto"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
const DEFAULT_LENGTH = 32;
const generateSecret = (length = DEFAULT_LENGTH) => {
  return import_node_crypto.default.randomBytes(length).toString("base64");
};
const command = "secret";
const description = "Generates a secret key using a cryptographically-secure source of entropy";
const builder = (yargs) => yargs.option("length", {
  description: "Length of the generated secret",
  type: "integer",
  required: false,
  default: DEFAULT_LENGTH
}).option("raw", {
  description: "Prints just the raw secret",
  type: "boolean",
  required: false,
  default: false
}).epilogue(
  `Also see the ${(0, import_terminal_link.default)(
    "Redwood CLI Reference",
    "https://redwoodjs.com/docs/cli-commands#generate-secret"
  )}`
);
const handler = ({ length, raw }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate secret",
    length,
    raw
  });
  if (raw) {
    console.log(generateSecret(length));
    return;
  }
  console.info("");
  console.info(`  ${generateSecret(length)}`);
  console.info("");
  console.info(
    "If you're using this with dbAuth, set a SESSION_SECRET environment variable to this value."
  );
  console.info("");
  console.info("Keep it secret, keep it safe!");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_LENGTH,
  builder,
  command,
  description,
  generateSecret,
  handler
});
