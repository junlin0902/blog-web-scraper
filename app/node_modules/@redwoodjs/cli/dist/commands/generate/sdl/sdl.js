"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sdl_exports = {};
__export(sdl_exports, {
  builder: () => builder,
  command: () => command,
  defaults: () => defaults,
  description: () => description,
  files: () => files,
  handler: () => handler
});
module.exports = __toCommonJS(sdl_exports);
var import_path = __toESM(require("path"));
var import_boxen = __toESM(require("boxen"));
var import_camelcase = __toESM(require("camelcase"));
var import_chalk = __toESM(require("chalk"));
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_generate = require("@redwoodjs/internal/dist/generate/generate");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_rollback = require("../../../lib/rollback");
var import_rwPluralize = require("../../../lib/rwPluralize");
var import_schemaHelpers = require("../../../lib/schemaHelpers");
var import_helpers = require("../helpers");
var import_helpers2 = require("../helpers");
var import_service = require("../service/service");
const DEFAULT_IGNORE_FIELDS_FOR_INPUT = ["createdAt", "updatedAt"];
const missingIdConsoleMessage = () => {
  const line1 = import_chalk.default.bold.yellow("WARNING") + ": Cannot generate CRUD SDL without an `@id` database column.";
  const line2 = "If you are trying to generate for a many-to-many join table ";
  const line3 = "you'll need to update your schema definition to include";
  const line4 = "an `@id` column. Read more here: ";
  const line5 = import_chalk.default.underline.blue(
    "https://redwoodjs.com/docs/schema-relations"
  );
  console.error(
    (0, import_boxen.default)(line1 + "\n\n" + line2 + "\n" + line3 + "\n" + line4 + "\n" + line5, {
      padding: 1,
      margin: { top: 1, bottom: 3, right: 1, left: 2 },
      borderStyle: "single"
    })
  );
};
const addFieldGraphQLComment = (field, str) => {
  const description2 = field.documentation || `Description for ${field.name}.`;
  return `
  "${description2}"
  ${str}`;
};
const modelFieldToSDL = ({
  field,
  required = true,
  types = {},
  docs = false
}) => {
  if (Object.entries(types).length) {
    field.type = field.kind === "object" ? idType(types[field.type]) : field.type;
  }
  const prismaTypeToGraphqlType = {
    Json: "JSON",
    Decimal: "Float",
    Bytes: "Byte"
  };
  const fieldContent = `${field.name}: ${field.isList ? "[" : ""}${prismaTypeToGraphqlType[field.type] || field.type}${field.isList ? "]" : ""}${(field.isRequired && required) | field.isList ? "!" : ""}`;
  if (docs) {
    return addFieldGraphQLComment(field, fieldContent);
  } else {
    return fieldContent;
  }
};
const querySDL = (model, docs = false) => {
  return model.fields.map((field) => modelFieldToSDL({ field, docs }));
};
const inputSDL = (model, required, types = {}, docs = false) => {
  const ignoredFields = DEFAULT_IGNORE_FIELDS_FOR_INPUT;
  return model.fields.filter((field) => {
    const idField = model.fields.find((field2) => field2.isId);
    if (idField) {
      ignoredFields.push(idField.name);
    }
    return ignoredFields.indexOf(field.name) === -1 && field.kind !== "object";
  }).map((field) => modelFieldToSDL({ field, required, types, docs }));
};
const idInputSDL = (idType2, docs) => {
  if (!Array.isArray(idType2)) {
    return [];
  }
  return idType2.map(
    (field) => modelFieldToSDL({ field, required: true, types: {}, docs })
  );
};
const createInputSDL = (model, types = {}, docs = false) => {
  return inputSDL(model, true, types, docs);
};
const updateInputSDL = (model, types = {}, docs = false) => {
  return inputSDL(model, false, types, docs);
};
const idType = (model, crud) => {
  if (!crud) {
    return void 0;
  }
  if (model.primaryKey?.fields.length) {
    const { fields: fieldNames } = model.primaryKey;
    return fieldNames.map((name) => model.fields.find((f) => f.name === name));
  }
  const idField = model.fields.find((field) => field.isId);
  if (!idField) {
    missingIdConsoleMessage();
    throw new Error("Failed: Could not generate SDL");
  }
  return idField.type;
};
const idName = (model, crud) => {
  if (!crud) {
    return void 0;
  }
  const idField = model.fields.find((field) => field.isId);
  if (!idField) {
    missingIdConsoleMessage();
    throw new Error("Failed: Could not generate SDL");
  }
  return idField.name;
};
const sdlFromSchemaModel = async (name, crud, docs = false) => {
  const model = await (0, import_schemaHelpers.getSchema)(name);
  const types = (await Promise.all(
    model.fields.filter((field) => field.kind === "object").map(async (field) => {
      const model2 = await (0, import_schemaHelpers.getSchema)(field.type);
      return model2;
    })
  )).reduce((acc, cur) => ({ ...acc, [cur.name]: cur }), {});
  const enums = (await Promise.all(
    model.fields.filter((field) => field.kind === "enum").map(async (field) => {
      const enumDef = await (0, import_schemaHelpers.getEnum)(field.type);
      return enumDef;
    })
  )).reduce((acc, curr) => acc.concat(curr), []);
  const modelName = model.name;
  const modelDescription = model.documentation || `Representation of ${modelName}.`;
  const idTypeRes = idType(model, crud);
  return {
    modelName,
    modelDescription,
    query: querySDL(model, docs).join("\n    "),
    createInput: createInputSDL(model, types, docs).join("\n    "),
    updateInput: updateInputSDL(model, types, docs).join("\n    "),
    idInput: idInputSDL(idTypeRes, docs).join("\n    "),
    idType: idType(model, crud),
    idName: idName(model, crud),
    relations: (0, import_helpers2.relationsForModel)(model),
    enums
  };
};
const files = async ({
  name,
  crud = true,
  docs = false,
  tests,
  typescript
}) => {
  const {
    modelName,
    modelDescription,
    query,
    createInput,
    updateInput,
    idInput,
    idType: idType2,
    idName: idName2,
    relations,
    enums
  } = await sdlFromSchemaModel(name, crud, docs);
  const templatePath = (0, import_helpers2.customOrDefaultTemplatePath)({
    side: "api",
    generator: "sdl",
    templatePath: "sdl.ts.template"
  });
  let template = await (0, import_lib.generateTemplate)(templatePath, {
    docs,
    modelName,
    modelDescription,
    name,
    crud,
    query,
    createInput,
    updateInput,
    idInput,
    idType: idType2,
    idName: idName2,
    enums
  });
  const extension = typescript ? "ts" : "js";
  let outputPath = import_path.default.join(
    (0, import_lib.getPaths)().api.graphql,
    `${(0, import_camelcase.default)((0, import_rwPluralize.pluralize)(name))}.sdl.${extension}`
  );
  if (typescript) {
    template = await (0, import_lib.transformTSToJS)(outputPath, template);
  }
  return {
    [outputPath]: template,
    ...await (0, import_service.files)({
      name,
      crud,
      tests,
      relations,
      typescript
    })
  };
};
const defaults = {
  ...import_helpers.yargsDefaults,
  crud: {
    default: true,
    description: "Also generate mutations",
    type: "boolean"
  }
};
const command = "sdl <model>";
const description = "Generate a GraphQL schema and service component based on a given DB schema Model";
const builder = (yargs) => {
  yargs.positional("model", {
    description: "Model to generate the sdl for",
    type: "string"
  }).option("tests", {
    description: "Generate test files",
    type: "boolean"
    // don't give it a default value, it gets overwritten in first few lines
    // of the handler
  }).option("docs", {
    description: "Generate SDL and GraphQL comments to use in documentation",
    type: "boolean"
  }).option("rollback", {
    description: "Revert all generator actions if an error occurs",
    type: "boolean",
    default: true
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#generate-sdl"
    )}`
  );
  Object.entries(defaults).forEach(([option, config]) => {
    yargs.option(option, config);
  });
};
const handler = async ({
  model,
  crud,
  force,
  tests,
  typescript,
  docs,
  rollback
}) => {
  if (tests === void 0) {
    tests = (0, import_project_config.getConfig)().generate.tests;
  }
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate sdl",
    crud,
    force,
    tests,
    typescript,
    docs,
    rollback
  });
  try {
    const { name } = await (0, import_schemaHelpers.verifyModelName)({ name: model });
    const tasks = new import_listr2.Listr(
      [
        {
          title: "Generating SDL files...",
          task: async () => {
            const f = await files({ name, tests, crud, typescript, docs });
            return (0, import_lib.writeFilesTask)(f, { overwriteExisting: force });
          }
        },
        {
          title: `Generating types ...`,
          task: async () => {
            const { errors } = await (0, import_generate.generate)();
            for (const { message, error } of errors) {
              console.error(message);
              console.log();
              console.error(error);
              console.log();
            }
            (0, import_rollback.addFunctionToRollback)(import_generate.generate, true);
          }
        }
      ].filter(Boolean),
      {
        rendererOptions: { collapseSubtasks: false },
        exitOnError: true,
        silentRendererCondition: process.env.NODE_ENV === "test"
      }
    );
    if (rollback && !force) {
      (0, import_rollback.prepareForRollback)(tasks);
    }
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  defaults,
  description,
  files,
  handler
});
