"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var model_exports = {};
__export(model_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(model_exports);
var import_path = __toESM(require("path"));
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_rollback = require("../../../lib/rollback");
var import_schemaHelpers = require("../../../lib/schemaHelpers");
var import_helpers = require("../helpers");
const TEMPLATE_PATH = import_path.default.resolve(__dirname, "templates", "model.js.template");
const files = async ({ name, typescript = false }) => {
  const outputFilename = `${name}.${typescript ? "ts" : "js"}`;
  const outputPath = import_path.default.join((0, import_lib.getPaths)().api.models, outputFilename);
  return {
    [outputPath]: await (0, import_lib.generateTemplate)(TEMPLATE_PATH, { name })
  };
};
const command = "model <name>";
const description = "Generate a RedwoodRecord model";
const builder = (yargs) => {
  yargs.positional("name", {
    description: "Name of the model to create",
    type: "string"
  }).option("rollback", {
    description: "Revert all generator actions if an error occurs",
    type: "boolean",
    default: true
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "RedwoodRecord Reference",
      "https://redwoodjs.com/docs/redwoodrecord"
    )}`
  );
  Object.entries(import_helpers.yargsDefaults).forEach(([option, config]) => {
    yargs.option(option, config);
  });
};
const handler = async ({ force, ...args }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate model",
    force,
    rollback: args.rollback
  });
  (0, import_helpers.validateName)(args.name);
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Generating model file...",
        task: async () => {
          return (0, import_lib.writeFilesTask)(await files(args), { overwriteExisting: force });
        }
      },
      {
        title: "Parsing datamodel, generating api/src/models/index.js...",
        task: async () => {
          const redwoodRecordModule = await import("@redwoodjs/record");
          await redwoodRecordModule.default.parseDatamodel();
        }
      }
    ].filter(Boolean),
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    await (0, import_schemaHelpers.verifyModelName)({ name: args.name });
    if (args.rollback && !force) {
      (0, import_rollback.prepareForRollback)(tasks);
    }
    await tasks.run();
  } catch (e) {
    console.log(import_colors.default.error(e.message));
    process.exit(1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  handler
});
