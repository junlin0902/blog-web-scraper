"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  checkProjectForQueryField: () => checkProjectForQueryField,
  getCellOperationNames: () => getCellOperationNames,
  getIdName: () => getIdName,
  getIdType: () => getIdType,
  operationNameIsUnique: () => operationNameIsUnique,
  uniqueOperationName: () => uniqueOperationName
});
module.exports = __toCommonJS(utils_exports);
var import_pascalcase = __toESM(require("pascalcase"));
var import_gql = require("@redwoodjs/internal/dist/gql");
const getCellOperationNames = async () => {
  const { getProject } = await import("@redwoodjs/structure");
  return getProject().cells.map((x) => {
    return x.queryOperationName;
  }).filter(Boolean);
};
const uniqueOperationName = async (name, { index = 1, list = false }) => {
  let operationName = (0, import_pascalcase.default)(
    index <= 1 ? `find_${name}_query` : `find_${name}_query_${index}`
  );
  if (list) {
    operationName = index <= 1 ? `${(0, import_pascalcase.default)(name)}Query` : `${(0, import_pascalcase.default)(name)}Query_${index}`;
  }
  const cellOperationNames = await getCellOperationNames();
  if (!cellOperationNames.includes(operationName)) {
    return operationName;
  }
  return uniqueOperationName(name, { index: index + 1 });
};
const operationNameIsUnique = async (operationName) => {
  const cellOperationNames = await getCellOperationNames();
  return !cellOperationNames.includes(operationName);
};
const getIdType = (model) => {
  return model.fields.find((field) => field.isId)?.type;
};
const getIdName = (model) => {
  return model.fields.find((field) => field.isId)?.name;
};
const checkProjectForQueryField = async (queryFieldName) => {
  const queryFields = await (0, import_gql.listQueryTypeFieldsInProject)();
  return queryFields.includes(queryFieldName);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkProjectForQueryField,
  getCellOperationNames,
  getIdName,
  getIdType,
  operationNameIsUnique,
  uniqueOperationName
});
