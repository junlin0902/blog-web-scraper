"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var page_exports = {};
__export(page_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  files: () => files,
  handler: () => handler,
  paramVariants: () => paramVariants,
  routes: () => routes
});
module.exports = __toCommonJS(page_exports);
var import_child_process = require("child_process");
var import_camelcase = __toESM(require("camelcase"));
var import_listr2 = require("listr2");
var import_pascalcase = __toESM(require("pascalcase"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_generate = require("@redwoodjs/internal/dist/generate/generate");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_rollback = require("../../../lib/rollback");
var import_helpers = require("../helpers");
const COMPONENT_SUFFIX = "Page";
const REDWOOD_WEB_PATH_NAME = "pages";
const mapRouteParamTypeToDefaultValue = (paramType) => {
  switch (paramType) {
    case "Int":
      return 42;
    case "Float":
      return 42.1;
    case "Boolean":
      return true;
    default:
      return "42";
  }
};
const paramVariants = (path) => {
  const param = path?.match(/(\{[\w:]+\})/)?.[1];
  const paramName = param?.replace(/:[^}]+/, "").slice(1, -1);
  if (param === void 0) {
    return {
      propParam: "",
      propValueParam: "",
      argumentParam: "",
      paramName: "",
      paramValue: "",
      paramType: ""
    };
  }
  const routeParamType = param?.match(/:/) ? param?.replace(/[^:]+/, "").slice(1, -1) : "String";
  const defaultValue = mapRouteParamTypeToDefaultValue(routeParamType);
  const defaultValueAsProp = routeParamType === "String" ? `'${defaultValue}'` : defaultValue;
  return {
    propParam: `{ ${paramName} }`,
    propValueParam: `${paramName}={${defaultValueAsProp}}`,
    // used in story
    argumentParam: `{ ${paramName}: ${defaultValueAsProp} }`,
    paramName,
    paramValue: defaultValue,
    paramType: (0, import_helpers.mapRouteParamTypeToTsType)(routeParamType)
  };
};
const files = async ({ name, tests, stories, typescript, ...rest }) => {
  const extension = typescript ? ".tsx" : ".jsx";
  const pageFile = await (0, import_helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: "page",
    templatePath: "page.tsx.template",
    templateVars: {
      rscEnabled: (0, import_project_config.getConfig)().experimental?.rsc?.enabled,
      ...rest
    }
  });
  const testFile = await (0, import_helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension: `.test${extension}`,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: "page",
    templatePath: "test.tsx.template",
    templateVars: rest
  });
  const storiesFile = await (0, import_helpers.templateForComponentFile)({
    name,
    suffix: COMPONENT_SUFFIX,
    extension: `.stories${extension}`,
    webPathSection: REDWOOD_WEB_PATH_NAME,
    generator: "page",
    templatePath: rest.paramName !== "" ? "stories.tsx.parameters.template" : "stories.tsx.template",
    templateVars: rest
  });
  const files2 = [pageFile];
  if (tests) {
    files2.push(testFile);
  }
  if (stories) {
    files2.push(storiesFile);
  }
  return files2.reduce(async (accP, [outputPath, content]) => {
    const acc = await accP;
    const template = typescript ? content : await (0, import_lib.transformTSToJS)(outputPath, content);
    return {
      [outputPath]: template,
      ...acc
    };
  }, Promise.resolve({}));
};
const routes = ({ name, path }) => {
  return [
    `<Route path="${path}" page={${(0, import_pascalcase.default)(name)}Page} name="${(0, import_camelcase.default)(
      name
    )}" />`
  ];
};
const positionalsObj = {
  path: {
    description: "URL path to the page, or just {param}. Defaults to name",
    type: "string"
  }
};
const { command, description, builder } = (0, import_helpers.createYargsForComponentGeneration)({ componentName: "page", positionalsObj });
const handler = async ({
  name,
  path,
  force,
  tests,
  stories,
  typescript = false,
  rollback
}) => {
  const pageName = (0, import_helpers.removeGeneratorName)(name, "page");
  (0, import_helpers.validateName)(pageName);
  if (tests === void 0) {
    tests = (0, import_project_config.getConfig)().generate.tests;
  }
  if (stories === void 0) {
    stories = (0, import_project_config.getConfig)().generate.stories;
  }
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate page",
    force,
    tests,
    stories,
    typescript,
    rollback
  });
  if (process.platform === "win32") {
    try {
      const slashPath = (0, import_child_process.execSync)("cygpath -m /", {
        stdio: ["ignore", "pipe", "ignore"]
      }).toString().trim();
      path = path.replace(new RegExp(`^${slashPath}?`), "/");
    } catch {
    }
  }
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Generating page files...",
        task: async () => {
          path = (0, import_helpers.pathName)(path, pageName);
          const f = await files({
            name: pageName,
            path,
            tests,
            stories,
            typescript,
            ...paramVariants(path)
          });
          return (0, import_lib.writeFilesTask)(f, { overwriteExisting: force });
        }
      },
      {
        title: "Updating routes file...",
        task: async () => {
          (0, import_lib.addRoutesToRouterTask)(
            routes({ name: pageName, path: (0, import_helpers.pathName)(path, pageName) })
          );
        }
      },
      {
        title: `Generating types...`,
        task: async () => {
          const { errors } = await (0, import_generate.generate)();
          for (const { message, error } of errors) {
            console.error(message);
            console.log();
            console.error(error);
            console.log();
          }
          (0, import_rollback.addFunctionToRollback)(import_generate.generate, true);
        }
      },
      {
        title: "One more thing...",
        task: (ctx, task) => {
          task.title = `One more thing...

   ${import_colors.default.warning("Page created! A note about <Metadata>:")}

   At the top of your newly created page is a <Metadata> component,
   which contains the title and description for your page, essential
   to good SEO. Check out this page for best practices: 

   https://developers.google.com/search/docs/advanced/appearance/good-titles-snippets
`;
        }
      }
    ].filter(Boolean),
    { rendererOptions: { collapseSubtasks: false } }
  );
  try {
    if (rollback && !force) {
      (0, import_rollback.prepareForRollback)(tasks);
    }
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  files,
  handler,
  paramVariants,
  routes
});
