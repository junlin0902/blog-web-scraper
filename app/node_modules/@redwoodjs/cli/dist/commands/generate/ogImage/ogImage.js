"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ogImage_exports = {};
__export(ogImage_exports, {
  aliases: () => aliases,
  builder: () => builder,
  command: () => command,
  description: () => description,
  files: () => files,
  handler: () => handler,
  normalizedPath: () => normalizedPath,
  validatePath: () => validatePath
});
module.exports = __toCommonJS(ogImage_exports);
var import_node_fs = __toESM(require("node:fs"));
var import_node_path = __toESM(require("node:path"));
var import_fast_glob = __toESM(require("fast-glob"));
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_lib2 = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
var import_rollback = require("../../../lib/rollback");
var import_helpers = require("../helpers");
const files = async ({ pagePath, typescript = false }) => {
  const extension = typescript ? ".tsx" : ".jsx";
  const componentOutputPath = import_node_path.default.join(
    (0, import_lib2.getPaths)().web.pages,
    pagePath + ".og" + extension
  );
  const fullTemplatePath = (0, import_helpers.customOrDefaultTemplatePath)({
    generator: "ogImage",
    templatePath: "ogImage.og.tsx.template",
    side: "web"
  });
  const content = await (0, import_lib2.generateTemplate)(fullTemplatePath, {
    name: "ogImage",
    outputPath: (0, import_project_config.ensurePosixPath)(
      `./${import_node_path.default.relative((0, import_lib2.getPaths)().base, componentOutputPath)}`
    ),
    pageName: pagePath.split("/").pop()
  });
  const template = typescript ? content : await (0, import_lib.transformTSToJS)(componentOutputPath, content);
  return {
    [componentOutputPath]: template
  };
};
const normalizedPath = (pagePath) => {
  const parts = pagePath.split("/");
  if (parts[0] === "pages") {
    parts.shift();
  }
  if (parts.length === 1) {
    return [parts[0], parts[0]].join("/");
  }
  if (parts[parts.length - 1] === parts[parts.length - 2]) {
    return parts.join("/");
  } else {
    const dir = parts.pop();
    return [...parts, dir, dir].join("/");
  }
};
const validatePath = async (pagePath, extension, options) => {
  const finalPath = `${pagePath}.${extension}`;
  const pages = await (0, import_fast_glob.default)(finalPath, {
    cwd: (0, import_lib2.getPaths)().web.pages,
    fs: options?.fs || import_node_fs.default
  });
  if (!pages.length) {
    throw Error(`The page ${import_node_path.default.join(pagePath)}.${extension} does not exist`);
  }
  return true;
};
const description = "Generate an og:image component";
const command = "og-image <path>";
const aliases = ["ogImage", "ogimage"];
const builder = (yargs) => {
  yargs.positional("path", {
    description: `Path to the page to create the og:image component for (ex: \`Products/ProductPage\`)`,
    type: "string"
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      `https://redwoodjs.com/docs/cli-commands#generate-og-image`
    )}`
  ).option("typescript", {
    alias: "ts",
    description: "Generate TypeScript files",
    type: "boolean",
    default: (0, import_project.isTypeScriptProject)()
  }).option("force", {
    alias: "f",
    description: "Overwrite existing files",
    type: "boolean",
    default: false
  }).option("verbose", {
    description: "Print all logs",
    type: "boolean",
    default: false
  }).option("rollback", {
    description: "Revert all generator actions if an error occurs",
    type: "boolean",
    default: true
  });
};
const handler = async (options) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: `generate og-image`,
    verbose: options.verbose,
    rollback: options.rollback,
    force: options.force
  });
  const normalizedPagePath = normalizedPath(options.path);
  const extension = options.typescript ? "tsx" : "jsx";
  try {
    await validatePath(normalizedPagePath, extension);
    const tasks = new import_listr2.Listr(
      [
        {
          title: `Generating og:image component...`,
          task: async () => {
            const f = await files({
              pagePath: normalizedPagePath,
              typescript: options.typescript
            });
            return (0, import_lib2.writeFilesTask)(f, { overwriteExisting: options.force });
          }
        }
      ],
      {
        rendererOptions: { collapseSubtasks: false },
        exitOnError: true,
        renderer: options.verbose && "verbose"
      }
    );
    if (options.rollback && !options.force) {
      (0, import_rollback.prepareForRollback)(tasks);
    }
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  builder,
  command,
  description,
  files,
  handler,
  normalizedPath,
  validatePath
});
