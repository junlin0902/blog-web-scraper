"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var realtimeHandler_exports = {};
__export(realtimeHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(realtimeHandler_exports);
var import_path = __toESM(require("path"));
var import_camelcase = __toESM(require("camelcase"));
var import_listr2 = require("listr2");
var import_pascalcase = __toESM(require("pascalcase"));
var import_pluralize = __toESM(require("pluralize"));
var import_prompts = __toESM(require("prompts"));
var import_generate = require("@redwoodjs/internal/dist/generate/generate");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_project = require("../../../lib/project");
var import_util = require("../../experimental/util.js");
const templateVariables = (name) => {
  name = (0, import_pluralize.singular)(name.toLowerCase());
  return {
    name,
    collectionName: (0, import_pluralize.default)(name),
    pluralName: (0, import_pluralize.default)(name),
    pluralPascalName: (0, import_pascalcase.default)((0, import_pluralize.default)(name)),
    camelName: (0, import_camelcase.default)(name),
    functionName: (0, import_camelcase.default)(name),
    liveQueryName: `recent${(0, import_pascalcase.default)((0, import_pluralize.default)(name))}`,
    subscriptionQueryName: `recent${(0, import_pascalcase.default)((0, import_pluralize.default)(name))}`,
    subscriptionName: `listenTo${(0, import_pascalcase.default)(name)}Channel`,
    modelName: (0, import_pascalcase.default)(name),
    typeName: (0, import_pascalcase.default)(name),
    channelName: `${(0, import_pascalcase.default)(name)}Channel`,
    subscriptionInputType: `Publish${(0, import_pascalcase.default)(name)}Input`,
    subscriptionServiceResolver: `publishTo${(0, import_pascalcase.default)(name)}Channel`
  };
};
async function handler({ name, type, force, verbose }) {
  const redwoodPaths = (0, import_lib.getPaths)();
  const ts = (0, import_project.isTypeScriptProject)();
  name = (0, import_pluralize.singular)(name.toLowerCase());
  let functionType = type;
  if (!functionType) {
    const response = await (0, import_prompts.default)({
      type: "select",
      name: "functionType",
      choices: [
        {
          value: "liveQuery",
          title: "Live Query",
          description: "Create a Live Query to watch for changes in data"
        },
        {
          value: "subscription",
          title: "Subscription",
          description: "Create a Subscription to watch for events"
        }
      ],
      message: "What type of realtime event would you like to create?"
    });
    functionType = response.functionType;
  }
  const tasks = new import_listr2.Listr(
    [
      {
        title: "Checking for realtime environment prerequisites ...",
        task: () => {
          (0, import_util.isServerFileSetup)() && (0, import_util.isRealtimeSetup)();
        }
      },
      {
        title: `Adding ${name} example subscription ...`,
        enabled: () => functionType === "subscription",
        task: async () => {
          const exampleSdlTemplateContent = import_path.default.resolve(
            __dirname,
            "templates",
            "subscriptions",
            "blank",
            `blank.sdl.ts.template`
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `${name}.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_path.default.resolve(
            __dirname,
            "templates",
            "subscriptions",
            "blank",
            `blank.service.ts.template`
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            `${name}`,
            `${name}.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          const exampleSubscriptionTemplateContent = import_path.default.resolve(
            __dirname,
            "templates",
            "subscriptions",
            "blank",
            `blank.ts.template`
          );
          const exampleFile = import_path.default.join(
            redwoodPaths.api.subscriptions,
            `${name}`,
            `${name}.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const setupScriptContent = ts ? exampleSubscriptionTemplateContent : await (0, import_lib.transformTSToJS)(
            exampleFile,
            exampleSubscriptionTemplateContent
          );
          return [
            (0, import_lib.writeFile)(
              sdlFile,
              await (0, import_lib.generateTemplate)(sdlContent, templateVariables(name)),
              {
                overwriteExisting: force
              }
            ),
            (0, import_lib.writeFile)(
              serviceFile,
              await (0, import_lib.generateTemplate)(serviceContent, templateVariables(name)),
              {
                overwriteExisting: force
              }
            ),
            (0, import_lib.writeFile)(
              exampleFile,
              await (0, import_lib.generateTemplate)(
                setupScriptContent,
                templateVariables(name)
              ),
              {
                overwriteExisting: force
              }
            )
          ];
        }
      },
      {
        title: `Adding ${name} example live query ...`,
        enabled: () => functionType === "liveQuery",
        task: async () => {
          const exampleSdlTemplateContent = import_path.default.resolve(
            __dirname,
            "templates",
            "liveQueries",
            "blank",
            `blank.sdl.ts.template`
          );
          const sdlFile = import_path.default.join(
            redwoodPaths.api.graphql,
            `${name}.sdl.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const sdlContent = ts ? exampleSdlTemplateContent : await (0, import_lib.transformTSToJS)(sdlFile, exampleSdlTemplateContent);
          const exampleServiceTemplateContent = import_path.default.resolve(
            __dirname,
            "templates",
            "liveQueries",
            "blank",
            "blank.service.ts.template"
          );
          const serviceFile = import_path.default.join(
            redwoodPaths.api.services,
            `${name}`,
            `${name}.${(0, import_project.isTypeScriptProject)() ? "ts" : "js"}`
          );
          const serviceContent = ts ? exampleServiceTemplateContent : await (0, import_lib.transformTSToJS)(serviceFile, exampleServiceTemplateContent);
          return [
            (0, import_lib.writeFile)(
              sdlFile,
              await (0, import_lib.generateTemplate)(sdlContent, templateVariables(name)),
              {
                overwriteExisting: force
              }
            ),
            (0, import_lib.writeFile)(
              serviceFile,
              await (0, import_lib.generateTemplate)(serviceContent, templateVariables(name)),
              {
                overwriteExisting: force
              }
            )
          ];
        }
      },
      {
        title: `Generating types ...`,
        task: async () => {
          await (0, import_generate.generate)();
          console.log(
            "Note: You may need to manually restart GraphQL in VSCode to see the new types take effect.\n\n"
          );
        }
      }
    ],
    {
      rendererOptions: { collapseSubtasks: false, persistentOutput: true },
      renderer: verbose ? "verbose" : "default"
    }
  );
  try {
    await tasks.run();
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    console.error(import_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
