"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dbAuth_exports = {};
__export(dbAuth_exports, {
  builder: () => builder,
  command: () => command,
  description: () => description,
  files: () => files,
  handler: () => handler
});
module.exports = __toCommonJS(dbAuth_exports);
var import_path = __toESM(require("path"));
var import_camel_case = require("camel-case");
var import_enquirer = __toESM(require("enquirer"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_terminal_link = __toESM(require("terminal-link"));
var import_title_case = require("title-case");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_lib = require("../../../lib");
var import_colors = __toESM(require("../../../lib/colors"));
var import_rollback = require("../../../lib/rollback");
var import_helpers = require("../helpers");
var import_helpers2 = require("../helpers");
const ROUTES = [
  `<Route path="/login" page={LoginPage} name="login" />`,
  `<Route path="/signup" page={SignupPage} name="signup" />`,
  `<Route path="/forgot-password" page={ForgotPasswordPage} name="forgotPassword" />`,
  `<Route path="/reset-password" page={ResetPasswordPage} name="resetPassword" />`
];
function getPostInstallMessage(isDbAuthSetup2) {
  return [
    `   ${import_colors.default.warning("Pages created! But you're not done yet:")}
`,
    "   You'll need to tell your pages where to redirect after a user has logged in,",
    "   signed up, or reset their password. Look in LoginPage, SignupPage,",
    "   ForgotPasswordPage and ResetPasswordPage for these lines: \n",
    "     if (isAuthenticated) {",
    "       navigate(routes.home())",
    "     }\n",
    "   and change the route to where you want them to go if the user is already",
    "   logged in. Also take a look in the onSubmit() functions in ForgotPasswordPage",
    "   and ResetPasswordPage to change where the user redirects to after submitting",
    "   those forms.\n",
    !isDbAuthSetup2 && "   Oh, and if you haven't already, add the necessary dbAuth functions and\n   app setup by running:\n\n     yarn rw setup auth dbAuth\n",
    "   Happy authenticating!"
  ].filter(Boolean).join("\n");
}
function getPostInstallWebauthnMessage(isDbAuthSetup2) {
  return [
    `   ${import_colors.default.warning("Pages created! But you're not done yet:")}
`,
    "   You'll need to tell your pages where to redirect after a user has logged in,",
    "   signed up, or reset their password. In LoginPage, look for the `REDIRECT`",
    "   constant and change the route if it's something other than home().",
    "   In SignupPage, ForgotPasswordPage and ResetPasswordPage look for these lines:\n",
    "     if (isAuthenticated) {",
    "       navigate(routes.home())",
    "     }\n",
    "   and change the route to where you want them to go if the user is already",
    "   logged in. Also take a look in the onSubmit() functions in ForgotPasswordPage",
    "   and ResetPasswordPage to change where the user redirects to after submitting",
    "   those forms.\n",
    !isDbAuthSetup2 && "   Oh, and if you haven't already, add the necessary dbAuth functions and\n   app setup by running:\n\n     yarn rw setup auth dbAuth\n",
    "   Happy authenticating!"
  ].filter(Boolean).join("\n");
}
const command = "dbAuth";
const description = "Generate Login, Signup and Forgot Password pages for dbAuth";
const builder = (yargs) => {
  yargs.option("skip-forgot", {
    description: "Skip generating the Forgot Password page",
    type: "boolean",
    default: false
  }).option("skip-login", {
    description: "Skip generating the login page",
    type: "boolean",
    default: false
  }).option("skip-reset", {
    description: "Skip generating the Reset Password page",
    type: "boolean",
    default: false
  }).option("skip-signup", {
    description: "Skip generating the signup page",
    type: "boolean",
    default: false
  }).option("webauthn", {
    alias: "w",
    default: null,
    description: "Include WebAuthn support (TouchID/FaceID)",
    type: "boolean"
  }).option("username-label", {
    default: null,
    description: "Override default form label for username field",
    type: "string"
  }).option("password-label", {
    default: null,
    description: "Override default form label for password field",
    type: "string"
  }).option("rollback", {
    description: "Revert all generator actions if an error occurs",
    type: "boolean",
    default: true
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/authentication#self-hosted-auth-installation-and-setup"
    )}`
  );
  Object.entries(import_helpers.yargsDefaults).forEach(([option, config]) => {
    yargs.option(option, config);
  });
};
const files = async ({
  _tests,
  typescript,
  skipForgot,
  skipLogin,
  skipReset,
  skipSignup,
  webauthn,
  usernameLabel,
  passwordLabel
}) => {
  const files2 = [];
  usernameLabel = usernameLabel || "username";
  passwordLabel = passwordLabel || "password";
  const templateVars = {
    usernameLowerCase: usernameLabel.toLowerCase(),
    usernameCamelCase: (0, import_camel_case.camelCase)(usernameLabel),
    usernameTitleCase: (0, import_title_case.titleCase)(usernameLabel),
    passwordLowerCase: passwordLabel.toLowerCase(),
    passwordCamelCase: (0, import_camel_case.camelCase)(passwordLabel),
    passwordTitleCase: (0, import_title_case.titleCase)(passwordLabel)
  };
  if (!skipForgot) {
    files2.push(
      await (0, import_helpers2.templateForComponentFile)({
        name: "ForgotPassword",
        suffix: "Page",
        extension: typescript ? ".tsx" : ".jsx",
        webPathSection: "pages",
        generator: "dbAuth",
        templatePath: "forgotPassword.tsx.template",
        templateVars
      })
    );
  }
  if (!skipLogin) {
    files2.push(
      await (0, import_helpers2.templateForComponentFile)({
        name: "Login",
        suffix: "Page",
        extension: typescript ? ".tsx" : ".jsx",
        webPathSection: "pages",
        generator: "dbAuth",
        templatePath: webauthn ? "login.webAuthn.tsx.template" : "login.tsx.template",
        templateVars
      })
    );
  }
  if (!skipReset) {
    files2.push(
      await (0, import_helpers2.templateForComponentFile)({
        name: "ResetPassword",
        suffix: "Page",
        extension: typescript ? ".tsx" : ".jsx",
        webPathSection: "pages",
        generator: "dbAuth",
        templatePath: "resetPassword.tsx.template",
        templateVars
      })
    );
  }
  if (!skipSignup) {
    files2.push(
      await (0, import_helpers2.templateForComponentFile)({
        name: "Signup",
        suffix: "Page",
        extension: typescript ? ".tsx" : ".jsx",
        webPathSection: "pages",
        generator: "dbAuth",
        templatePath: "signup.tsx.template",
        templateVars
      })
    );
  }
  if (files2.length === 0) {
    console.info(import_colors.default.error("\nNo files to generate.\n"));
    process.exit(0);
  }
  const scaffoldOutputPath = import_path.default.join((0, import_lib.getPaths)().web.src, "scaffold.css");
  if (!import_fs_extra.default.existsSync(scaffoldOutputPath)) {
    const scaffoldTemplate = await (0, import_lib.generateTemplate)(
      import_path.default.join(
        __dirname,
        "../scaffold/templates/assets/scaffold.css.template"
      ),
      { name: "scaffold" }
    );
    files2.push([scaffoldOutputPath, scaffoldTemplate]);
  }
  return files2.reduce(async (accP, [outputPath, content]) => {
    const acc = await accP;
    let template = content;
    if (outputPath.match(/\.[jt]sx?/) && !typescript) {
      template = await (0, import_lib.transformTSToJS)(outputPath, content);
    }
    return {
      [outputPath]: template,
      ...acc
    };
  }, Promise.resolve({}));
};
const tasks = ({
  enquirer,
  listr2,
  force,
  tests,
  typescript,
  skipForgot,
  skipLogin,
  skipReset,
  skipSignup,
  webauthn,
  usernameLabel,
  passwordLabel
}) => {
  return new import_listr2.Listr(
    [
      {
        title: "Determining UI labels...",
        skip: () => {
          return usernameLabel && passwordLabel;
        },
        task: async (ctx, task) => {
          return task.newListr([
            {
              title: "Username label",
              task: async (subctx, subtask) => {
                if (usernameLabel) {
                  subtask.skip(
                    `Argument username-label is set, using: "${usernameLabel}"`
                  );
                  return;
                }
                usernameLabel = await subtask.prompt({
                  type: "input",
                  name: "username",
                  message: "What would you like the username label to be:",
                  default: "Username"
                });
                subtask.title = `Username label: "${usernameLabel}"`;
              }
            },
            {
              title: "Password label",
              task: async (subctx, subtask) => {
                if (passwordLabel) {
                  subtask.skip(
                    `Argument password-label passed, using: "${passwordLabel}"`
                  );
                  return;
                }
                passwordLabel = await subtask.prompt({
                  type: "input",
                  name: "password",
                  message: "What would you like the password label to be:",
                  default: "Password"
                });
                subtask.title = `Password label: "${passwordLabel}"`;
              }
            }
          ]);
        }
      },
      {
        title: "Querying WebAuthn addition...",
        task: async (ctx, task) => {
          if (webauthn != null) {
            ctx.webauthn = webauthn;
            task.skip(
              `Querying WebAuthn addition: argument webauthn passed, WebAuthn${webauthn ? "" : " not"} included`
            );
            return;
          }
          if (isDbAuthSetup()) {
            if (isWebAuthnEnabled()) {
              ctx.webauthn = webauthn = true;
              task.skip(
                "Querying WebAuthn addition: WebAuthn setup detected - support will be included in pages"
              );
            } else {
              ctx.webauthn = webauthn = false;
              task.skip(
                "Querying WebAuthn addition: No WebAuthn setup detected - support will not be included in pages"
              );
            }
            return;
          }
          const response = await task.prompt({
            type: "confirm",
            name: "answer",
            message: `Enable WebAuthn support (TouchID/FaceID) on LoginPage? See https://redwoodjs.com/docs/auth/dbAuth#webAuthn`,
            default: false
          });
          ctx.webauthn = webauthn = response;
          task.title = `Querying WebAuthn addition: WebAuthn addition${webauthn ? "" : " not"} included`;
        }
      },
      {
        title: "Creating pages...",
        task: async () => {
          const filesObj = await files({
            tests,
            typescript,
            skipForgot,
            skipLogin,
            skipReset,
            skipSignup,
            webauthn,
            usernameLabel,
            passwordLabel
          });
          return (0, import_lib.writeFilesTask)(filesObj, {
            overwriteExisting: force
          });
        }
      },
      {
        title: "Adding routes...",
        task: async () => {
          (0, import_lib.addRoutesToRouterTask)(ROUTES);
        }
      },
      {
        title: "Adding scaffold import...",
        task: () => (0, import_lib.addScaffoldImport)()
      },
      {
        title: "Generate types...",
        task: () => {
          import_execa.default.commandSync("yarn rw g types");
        }
      },
      {
        title: "One more thing...",
        task: () => {
        }
      }
    ],
    {
      silentRendererCondition: () => listr2?.silentRendererCondition,
      rendererOptions: { collapseSubtasks: false },
      injectWrapper: { enquirer: enquirer || new import_enquirer.default() },
      exitOnError: true
    }
  );
};
const handler = async (yargs) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "generate dbAuth",
    skipForgot: yargs.skipForgot,
    skipLogin: yargs.skipLogin,
    skipReset: yargs.skipReset,
    skipSignup: yargs.skipSignup,
    webauthn: yargs.webauthn,
    force: yargs.force,
    rollback: yargs.rollback
  });
  const t = tasks({ ...yargs });
  try {
    if (yargs.rollback && !yargs.force) {
      (0, import_rollback.prepareForRollback)(t);
    }
    await t.run();
    console.log("");
    console.log(
      yargs.webauthn || t.ctx.webauthn ? getPostInstallWebauthnMessage(isDbAuthSetup()) : getPostInstallMessage(isDbAuthSetup())
    );
  } catch (e) {
    console.log(import_colors.default.error(e.message));
  }
};
function isDbAuthSetup() {
  const extensions = ["ts", "js", "tsx", "jsx"];
  const webAuthExtension = extensions.find(
    (ext) => import_fs_extra.default.existsSync(import_path.default.join((0, import_lib.getPaths)().web.src, "auth." + ext))
  );
  if (webAuthExtension) {
    const webAuthPath = import_path.default.join(
      (0, import_lib.getPaths)().web.src,
      "auth." + webAuthExtension
    );
    return /^import (.*) from ['"]@redwoodjs\/auth-dbauth-web['"]/m.test(
      import_fs_extra.default.readFileSync(webAuthPath)
    );
  }
  return false;
}
function isWebAuthnEnabled() {
  const webPackageJson = import_fs_extra.default.readFileSync(
    import_path.default.join((0, import_lib.getPaths)().web.base, "package.json"),
    "utf-8"
  );
  return webPackageJson.includes('"@simplewebauthn/browser": ');
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  builder,
  command,
  description,
  files,
  handler
});
