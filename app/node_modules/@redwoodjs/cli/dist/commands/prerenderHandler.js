"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var prerenderHandler_exports = {};
__export(prerenderHandler_exports, {
  getTasks: () => getTasks,
  handler: () => handler
});
module.exports = __toCommonJS(prerenderHandler_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_prerender = require("@redwoodjs/prerender");
var import_detection = require("@redwoodjs/prerender/detection");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_colors = __toESM(require("../lib/colors"));
var import_exec = require("../lib/exec");
class PathParamError extends Error {
}
const mapRouterPathToHtml = (routerPath) => {
  if (routerPath === "/") {
    return "web/dist/index.html";
  } else {
    return `web/dist${routerPath}.html`;
  }
};
function getRouteHooksFilePath(routeFilePath) {
  const routeHooksFilePathTs = routeFilePath.replace(
    /\.[jt]sx?$/,
    ".routeHooks.ts"
  );
  if (import_fs_extra.default.existsSync(routeHooksFilePathTs)) {
    return routeHooksFilePathTs;
  }
  const routeHooksFilePathJs = routeFilePath.replace(
    /\.[jt]sx?$/,
    ".routeHooks.js"
  );
  if (import_fs_extra.default.existsSync(routeHooksFilePathJs)) {
    return routeHooksFilePathJs;
  }
  return void 0;
}
async function expandRouteParameters(route) {
  const routeHooksFilePath = getRouteHooksFilePath(route.filePath);
  if (!routeHooksFilePath) {
    return [route];
  }
  try {
    const routeParameters = await (0, import_exec.runScriptFunction)({
      path: routeHooksFilePath,
      functionName: "routeParameters",
      args: {
        name: route.name,
        path: route.path,
        routePath: route.routePath,
        filePath: route.filePath
      }
    });
    if (routeParameters) {
      return routeParameters.map((pathParamValues) => {
        let newPath = route.path;
        Object.entries(pathParamValues).forEach(([paramName, paramValue]) => {
          newPath = newPath.replace(
            new RegExp(`{${paramName}:?[^}]*}`),
            paramValue
          );
        });
        return { ...route, path: newPath };
      });
    }
  } catch (e) {
    console.error(import_colors.default.error(e.stack));
    return [route];
  }
  return [route];
}
const getTasks = async (dryrun, routerPathFilter = null) => {
  const prerenderRoutes = (0, import_detection.detectPrerenderRoutes)().filter((route) => route.path);
  const indexHtmlPath = import_path.default.join((0, import_project_config.getPaths)().web.dist, "index.html");
  if (prerenderRoutes.length === 0) {
    console.log("\nSkipping prerender...");
    console.log(
      import_colors.default.warning(
        "You have not marked any routes with a path as `prerender` in `Routes.{jsx,tsx}` \n"
      )
    );
    return [];
  }
  if (!import_fs_extra.default.existsSync(indexHtmlPath)) {
    console.error(
      "You must run `yarn rw build web` before trying to prerender."
    );
    process.exit(1);
  }
  (0, import_exec.configureBabel)();
  const expandedRouteParameters = await Promise.all(
    prerenderRoutes.map((route) => expandRouteParameters(route))
  );
  const listrTasks = expandedRouteParameters.flatMap((routesToPrerender) => {
    const queryCache = {};
    const shouldFold = routesToPrerender.length > 16;
    if (shouldFold) {
      const displayIncrement = Math.max(
        1,
        Math.floor(routesToPrerender.length / 100)
      );
      const title = (i) => `Prerendering ${routesToPrerender[0].name} (${i.toLocaleString()} of ${routesToPrerender.length.toLocaleString()})`;
      return [
        {
          title: title(0),
          task: async (_, task) => {
            for (let i = 0; i < routesToPrerender.length; i++) {
              const routeToPrerender = routesToPrerender[i];
              if (routerPathFilter && routeToPrerender.path !== routerPathFilter) {
                continue;
              }
              await prerenderRoute(
                queryCache,
                routeToPrerender,
                dryrun,
                mapRouterPathToHtml(routeToPrerender.path)
              );
              if (i % displayIncrement === 0) {
                task.title = title(i);
              }
            }
            task.title = title(routesToPrerender.length);
          }
        }
      ];
    }
    return routesToPrerender.map((routeToPrerender) => {
      if (routerPathFilter && routeToPrerender.path !== routerPathFilter) {
        return [];
      }
      const outputHtmlPath = mapRouterPathToHtml(routeToPrerender.path);
      return {
        title: `Prerendering ${routeToPrerender.path} -> ${outputHtmlPath}`,
        task: async () => {
          await prerenderRoute(
            queryCache,
            routeToPrerender,
            dryrun,
            outputHtmlPath
          );
        }
      };
    });
  });
  return listrTasks;
};
const diagnosticCheck = () => {
  const checks = [
    {
      message: "Duplicate React version found in web/node_modules",
      failure: import_fs_extra.default.existsSync(
        import_path.default.join((0, import_project_config.getPaths)().web.base, "node_modules/react")
      )
    },
    {
      message: "Duplicate react-dom version found in web/node_modules",
      failure: import_fs_extra.default.existsSync(
        import_path.default.join((0, import_project_config.getPaths)().web.base, "node_modules/react-dom")
      )
    },
    {
      message: "Duplicate core-js version found in web/node_modules",
      failure: import_fs_extra.default.existsSync(
        import_path.default.join((0, import_project_config.getPaths)().web.base, "node_modules/core-js")
      )
    },
    {
      message: "Duplicate @redwoodjs/web version found in web/node_modules",
      failure: import_fs_extra.default.existsSync(
        import_path.default.join((0, import_project_config.getPaths)().web.base, "node_modules/@redwoodjs/web")
      )
    }
  ];
  console.log("Running diagnostic checks");
  if (checks.some((checks2) => checks2.failure)) {
    console.error(import_colors.default.error("node_modules are being duplicated in `./web` \n"));
    console.log("\u26A0\uFE0F  Issues found: ");
    console.log("-".repeat(50));
    checks.filter((check) => check.failure).forEach((check, i) => {
      console.log(`${i + 1}. ${check.message}`);
    });
    console.log("-".repeat(50));
    console.log(
      "Diagnostic check found issues. See the Redwood Forum link below for help:"
    );
    console.log(
      import_colors.default.underline(
        "https://community.redwoodjs.com/search?q=duplicate%20package%20found"
      )
    );
    console.log();
    process.exit(1);
  } else {
    console.log("\u2714 Diagnostics checks passed \n");
  }
};
const prerenderRoute = async (queryCache, routeToPrerender, dryrun, outputHtmlPath) => {
  if (/\{.*}/.test(routeToPrerender.path)) {
    throw new PathParamError(
      `Could not retrieve route parameters for ${routeToPrerender.path}`
    );
  }
  try {
    const prerenderedHtml = await (0, import_prerender.runPrerender)({
      queryCache,
      renderPath: routeToPrerender.path
    });
    if (!dryrun) {
      (0, import_prerender.writePrerenderedHtmlFile)(outputHtmlPath, prerenderedHtml);
    }
  } catch (e) {
    console.log();
    console.log(import_colors.default.warning("You can use `yarn rw prerender --dry-run` to debug"));
    console.log();
    console.log(
      `${import_colors.default.info("-".repeat(10))} Error rendering path "${routeToPrerender.path}" ${import_colors.default.info("-".repeat(10))}`
    );
    (0, import_telemetry.errorTelemetry)(process.argv, `Error prerendering: ${e.message}`);
    console.error(import_colors.default.error(e.stack));
    console.log();
    throw new Error(`Failed to render "${routeToPrerender.filePath}"`);
  }
};
const handler = async ({ path: routerPath, dryRun, verbose }) => {
  if ((0, import_project_config.getConfig)().experimental?.streamingSsr?.enabled) {
    console.log(
      import_colors.default.warning(
        "Prerendering is not yet supported with Streaming SSR. Skipping prerender..."
      )
    );
    return;
  }
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "prerender",
    dryRun,
    verbose
  });
  const listrTasks = await getTasks(dryRun, routerPath);
  const tasks = new import_listr2.Listr(listrTasks, {
    renderer: verbose ? "verbose" : "default",
    rendererOptions: { collapseSubtasks: false },
    concurrent: false
  });
  try {
    if (dryRun) {
      console.log(import_colors.default.info("::: Dry run, not writing changes :::"));
    }
    await tasks.run();
  } catch (e) {
    console.log();
    await diagnosticCheck();
    console.log(import_colors.default.warning("Tips:"));
    if (e instanceof PathParamError) {
      console.log(
        import_colors.default.info(
          "- You most likely need to add or update a *.routeHooks.{js,ts} file next to the Page you're trying to prerender"
        )
      );
    } else {
      console.log(
        import_colors.default.info(
          `- This could mean that a library you're using does not support SSR.`
        )
      );
      console.log(
        import_colors.default.info(
          "- Avoid using `window` in the initial render path through your React components without checks. \n  See https://redwoodjs.com/docs/prerender#prerender-utils"
        )
      );
      console.log(
        import_colors.default.info(
          "- Avoid prerendering Cells with authenticated queries, by conditionally rendering them.\n  See https://redwoodjs.com/docs/prerender#common-warnings--errors"
        )
      );
    }
    console.log();
    process.exit(1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTasks,
  handler
});
