"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testHandler_exports = {};
__export(testHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(testHandler_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_project_config = require("@redwoodjs/project-config");
var import_telemetry = require("@redwoodjs/telemetry");
var import_lib = require("../lib");
var import_colors = __toESM(require("../lib/colors"));
var project = __toESM(require("../lib/project"));
function isInGitRepository() {
  try {
    import_execa.default.commandSync("git rev-parse --is-inside-work-tree");
    return true;
  } catch {
    return false;
  }
}
function isInMercurialRepository() {
  try {
    import_execa.default.commandSync("hg --cwd . root");
    return true;
  } catch {
    return false;
  }
}
function isJestConfigFile(sides) {
  for (let side of sides) {
    try {
      if (sides.includes(side)) {
        const jestConfigExists = import_fs_extra.default.existsSync(import_path.default.join(side, "jest.config.js")) || import_fs_extra.default.existsSync(import_path.default.join(side, "jest.config.ts"));
        if (!jestConfigExists) {
          console.error(
            import_colors.default.error(
              `
Error: Missing Jest config file ${side}/jest.config.js
To add this file, run \`npx @redwoodjs/codemods update-jest-config\`
`
            )
          );
          throw new Error(`Error: Jest config file not found in ${side} side`);
        }
      }
    } catch (e) {
      (0, import_telemetry.errorTelemetry)(process.argv, e.message);
      process.exit(e?.exitCode || 1);
    }
  }
}
const handler = async ({
  filter: filterParams = [],
  watch = true,
  collectCoverage = false,
  dbPush = true,
  ...others
}) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "test",
    watch,
    collectCoverage,
    dbPush
  });
  const rwjsPaths = (0, import_lib.getPaths)();
  const forwardJestFlags = Object.keys(others).flatMap((flagName) => {
    if (["watch", "collect-coverage", "db-push", "$0", "_"].includes(flagName)) {
      return [];
    } else {
      const flagValue = others[flagName];
      if (Array.isArray(flagValue)) {
        return flagValue.flatMap((val) => {
          return [flagName.length > 1 ? `--${flagName}` : `-${flagName}`, val];
        });
      } else {
        return [
          flagName.length > 1 ? `--${flagName}` : `-${flagName}`,
          flagValue
        ];
      }
    }
  });
  const sides = filterParams.filter(
    (filterString) => project.sides().includes(filterString)
  );
  const jestFilterArgs = [
    ...filterParams.filter(
      (filterString) => !project.sides().includes(filterString)
    )
  ];
  const jestArgs = [
    ...jestFilterArgs,
    ...forwardJestFlags,
    collectCoverage ? "--collectCoverage" : null,
    "--passWithNoTests"
  ].filter((flagOrValue) => flagOrValue !== null);
  if (watch && !process.env.CI && !collectCoverage) {
    const hasSourceControl = isInGitRepository() || isInMercurialRepository();
    jestArgs.push(hasSourceControl ? "--watch" : "--watchAll");
  }
  if (!sides.length) {
    project.sides().forEach((side) => sides.push(side));
  }
  if (sides.length > 0) {
    jestArgs.push("--projects", ...sides);
  }
  isJestConfigFile(sides);
  try {
    const cacheDirDb = `file:${(0, import_project_config.ensurePosixPath)(
      rwjsPaths.generated.base
    )}/test.db`;
    const DATABASE_URL = process.env.TEST_DATABASE_URL || cacheDirDb;
    if (sides.includes("api") && !dbPush) {
      process.env.SKIP_DB_PUSH = "1";
    }
    const runCommand = async () => {
      await (0, import_execa.default)("yarn jest", jestArgs, {
        cwd: rwjsPaths.base,
        shell: true,
        stdio: "inherit",
        env: { DATABASE_URL }
      });
    };
    if (watch) {
      await runCommand();
    } else {
      await (0, import_telemetry.timedTelemetry)(process.argv, { type: "test" }, async () => {
        await runCommand();
      });
    }
  } catch (e) {
    (0, import_telemetry.errorTelemetry)(process.argv, e.message);
    process.exit(e?.exitCode || 1);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
