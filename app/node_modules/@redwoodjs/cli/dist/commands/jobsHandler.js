"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var jobsHandler_exports = {};
__export(jobsHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(jobsHandler_exports);
var import_execa = __toESM(require("execa"));
var import_lib = require("../lib/index");
const handler = async ({
  _,
  $0: _rw,
  commands: _commands,
  ...options
}) => {
  const args = [_.pop()];
  for (const [name, value] of Object.entries(options)) {
    args.push(name.length > 1 ? `--${name}` : `-${name}`);
    args.push(value);
  }
  let command = `yarn rw-jobs ${args.join(" ")}`;
  const originalLogLevel = process.env.LOG_LEVEL;
  process.env.LOG_LEVEL = originalLogLevel || "warn";
  if (process.env.NODE_ENV !== "production") {
    command += " | yarn rw-log-formatter";
    process.env.LOG_LEVEL = originalLogLevel || "debug";
  }
  import_execa.default.commandSync(command, {
    shell: true,
    cwd: (0, import_lib.getPaths)().base,
    stdio: "inherit",
    cleanup: true
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
