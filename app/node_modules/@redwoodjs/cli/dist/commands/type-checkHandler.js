"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var type_checkHandler_exports = {};
__export(type_checkHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(type_checkHandler_exports);
var import_path = __toESM(require("path"));
var import_concurrently = __toESM(require("concurrently"));
var import_execa = __toESM(require("execa"));
var import_listr2 = require("listr2");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_upgrade = require("../commands/upgrade");
var import_lib = require("../lib");
var import_generatePrismaClient = require("../lib/generatePrismaClient");
const handler = async ({ sides, verbose, prisma, generate }) => {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "type-check",
    sides: JSON.stringify(sides),
    verbose,
    prisma,
    generate
  });
  const typeCheck = async () => {
    let conclusiveExitCode = 0;
    const yarnVersion = await (0, import_upgrade.getCmdMajorVersion)("yarn");
    const tscForAllSides = sides.map((side) => {
      const projectDir = import_path.default.join((0, import_lib.getPaths)().base, side);
      return {
        cwd: projectDir,
        command: `yarn ${yarnVersion > 1 ? "" : "-s"} tsc --noEmit --skipLibCheck`
      };
    });
    const { result } = (0, import_concurrently.default)(tscForAllSides, {
      group: true,
      raw: true
    });
    try {
      await result;
    } catch (err) {
      if (err.length) {
        const exitCodes = err.map((e) => e?.exitCode).filter(Boolean);
        conclusiveExitCode = Math.max(...exitCodes);
      }
    }
    return conclusiveExitCode;
  };
  if (generate && prisma) {
    await (0, import_generatePrismaClient.generatePrismaClient)({
      verbose,
      schema: (0, import_lib.getPaths)().api.dbSchema
    });
  }
  if (generate) {
    await new import_listr2.Listr(
      [
        {
          title: "Generating types",
          task: () => (0, import_execa.default)("yarn rw-gen", {
            shell: true,
            stdio: verbose ? "inherit" : "ignore"
          })
        }
      ],
      {
        renderer: verbose && "verbose",
        rendererOptions: { collapseSubtasks: false }
      }
    ).run();
  }
  const exitCode = await typeCheck();
  if (exitCode > 0) {
    process.exitCode = exitCode;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
