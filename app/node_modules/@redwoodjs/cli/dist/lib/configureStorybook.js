"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var configureStorybook_exports = {};
__export(configureStorybook_exports, {
  default: () => extendStorybookConfiguration
});
module.exports = __toCommonJS(configureStorybook_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_prettier = __toESM(require("prettier"));
var import_merge = require("./merge");
var import_strategy = require("./merge/strategy");
var import_project = require("./project");
var import__ = require(".");
async function extendStorybookConfiguration(newConfigPath = void 0) {
  const webPaths = (0, import__.getPaths)().web;
  const ts = (0, import_project.isTypeScriptProject)();
  const sbPreviewConfigPath = webPaths.storybookPreviewConfig ?? `${webPaths.config}/storybook.preview.${ts ? "tsx" : "js"}`;
  const read = (path2) => import_fs_extra.default.readFileSync(path2, { encoding: "utf-8" });
  if (!import_fs_extra.default.existsSync(sbPreviewConfigPath)) {
    const templateContent = read(
      import_path.default.resolve(__dirname, "templates", "storybook.preview.tsx.template")
    );
    const storybookPreviewContent2 = ts ? templateContent : await (0, import__.transformTSToJS)(sbPreviewConfigPath, templateContent);
    (0, import__.writeFile)(sbPreviewConfigPath, storybookPreviewContent2);
  }
  const storybookPreviewContent = read(sbPreviewConfigPath);
  if (newConfigPath) {
    const newConfigTemplate = read(newConfigPath);
    const newConfigContent = ts ? newConfigTemplate : await (0, import__.transformTSToJS)(newConfigPath, newConfigTemplate);
    const merged = await (0, import_merge.merge)(storybookPreviewContent, newConfigContent, {
      ImportDeclaration: import_strategy.interleave,
      ArrayExpression: import_strategy.concatUnique,
      ObjectExpression: import_strategy.concatUnique,
      ArrowFunctionExpression: import_strategy.keepBothStatementParents,
      FunctionDeclaration: import_strategy.keepBoth
    });
    const pConfig = await import_prettier.default.resolveConfig(sbPreviewConfigPath);
    const formatted = await import_prettier.default.format(merged, {
      parser: ts ? "babel-ts" : "babel",
      ...pConfig
    });
    (0, import__.writeFile)(sbPreviewConfigPath, formatted, { overwriteExisting: true });
  }
}
