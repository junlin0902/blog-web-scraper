"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var semanticIdentity_exports = {};
__export(semanticIdentity_exports, {
  semanticIdentity: () => semanticIdentity
});
module.exports = __toCommonJS(semanticIdentity_exports);
function semanticIdentity(path) {
  const identity = {
    get(path2) {
      return path2.type in this ? this[path2.type](path2) : [path2.type];
    },
    ObjectProperty: (path2) => [path2.node.key.name],
    VariableDeclarator: (path2) => [path2.node.id.name],
    ImportDeclaration: (path2) => [
      "ImportDeclaration",
      "source",
      path2.node.source.value
    ]
  };
  return path.getAncestry().reduce((acc, i) => [...identity.get(i), ...acc], []).join(".");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  semanticIdentity
});
