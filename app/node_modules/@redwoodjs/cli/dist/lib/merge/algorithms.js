"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var algorithms_exports = {};
__export(algorithms_exports, {
  forEachFunctionOn: () => forEachFunctionOn,
  nodeIs: () => nodeIs,
  sieve: () => sieve
});
module.exports = __toCommonJS(algorithms_exports);
var import_lodash = require("lodash");
const nodeIs = (type) => (node) => node.type === type;
function sieve(...listRulePairs) {
  const result = [[]];
  for (const [list, rule] of listRulePairs) {
    elementLoop: for (const element of list) {
      for (const arr of result) {
        const position = rule(arr);
        if (position !== -1) {
          arr.splice(position, 0, element);
          continue elementLoop;
        }
      }
      result.push([element]);
    }
  }
  return result;
}
function forEachFunctionOn(object, callback) {
  (0, import_lodash.forOwn)(object, (value, key) => {
    if (typeof value === "function") {
      callback(key, value);
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  forEachFunctionOn,
  nodeIs,
  sieve
});
