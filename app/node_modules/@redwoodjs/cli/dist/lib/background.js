"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var background_exports = {};
__export(background_exports, {
  spawnBackgroundProcess: () => spawnBackgroundProcess
});
module.exports = __toCommonJS(background_exports);
var import_child_process = require("child_process");
var import_os = __toESM(require("os"));
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_project_config = require("@redwoodjs/project-config");
function spawnBackgroundProcess(name, cmd, args) {
  const logDirectory = import_path.default.join((0, import_project_config.getPaths)().generated.base, "logs");
  import_fs_extra.default.ensureDirSync(logDirectory);
  const safeName = name.replace(/[^a-z0-9]/gi, "_").toLowerCase();
  const logHeader = [
    `Starting log:`,
    ` - Time: ${(/* @__PURE__ */ new Date()).toISOString()}`,
    ` - Name: ${name} (${safeName})`,
    ` - Command: ${cmd}`,
    ` - Arguments: ${args.join(" ")}`,
    "",
    ""
  ].join("\n");
  const stdout = import_fs_extra.default.openSync(
    import_path.default.join(logDirectory, `${safeName}.out.log`),
    "w"
  );
  import_fs_extra.default.writeSync(stdout, logHeader);
  const stderr = import_fs_extra.default.openSync(
    import_path.default.join(logDirectory, `${safeName}.err.log`),
    "w"
  );
  import_fs_extra.default.writeSync(stderr, logHeader);
  const spawnOptions = import_os.default.type() === "Windows_NT" ? {
    // The following options run the process in the background without a console window, even though they don't look like they would.
    // See https://github.com/nodejs/node/issues/21825#issuecomment-503766781 for information
    detached: false,
    windowsHide: false,
    shell: true,
    stdio: ["ignore", stdout, stderr]
  } : {
    detached: true,
    stdio: ["ignore", stdout, stderr]
  };
  const child = (0, import_child_process.spawn)(cmd, args, spawnOptions);
  child.unref();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  spawnBackgroundProcess
});
