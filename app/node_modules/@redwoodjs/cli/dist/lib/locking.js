"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var locking_exports = {};
__export(locking_exports, {
  clearLocks: () => clearLocks,
  isLockSet: () => isLockSet,
  setLock: () => setLock,
  unsetLock: () => unsetLock
});
module.exports = __toCommonJS(locking_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_index = require("./index");
function ensureLockDirectoryExists() {
  const locksPath = import_path.default.join((0, import_index.getPaths)().generated.base, "locks");
  if (!import_fs_extra.default.existsSync(locksPath)) {
    import_fs_extra.default.mkdirSync(locksPath, { recursive: true });
  }
}
function setLock(identifier) {
  ensureLockDirectoryExists();
  if (isLockSet(identifier)) {
    throw new Error(`Lock "${identifier}" is already set`);
  }
  import_fs_extra.default.writeFileSync(
    import_path.default.join((0, import_index.getPaths)().generated.base, "locks", identifier),
    ""
  );
}
function unsetLock(identifier) {
  try {
    import_fs_extra.default.rmSync(import_path.default.join((0, import_index.getPaths)().generated.base, "locks", identifier));
  } catch (error) {
    if (error.code !== "ENOENT") {
      throw error;
    }
  }
}
function isLockSet(identifier) {
  const lockfilePath = import_path.default.join((0, import_index.getPaths)().generated.base, "locks", identifier);
  const exists = import_fs_extra.default.existsSync(lockfilePath);
  if (!exists) {
    return false;
  }
  const createdAt = import_fs_extra.default.statSync(lockfilePath).birthtimeMs;
  if (Date.now() - createdAt > 36e5) {
    unsetLock(identifier);
    return false;
  }
  return true;
}
function clearLocks(identifiers = []) {
  ensureLockDirectoryExists();
  if (identifiers.length > 0) {
    for (const id of identifiers) {
      unsetLock(id);
    }
  } else {
    const locks = import_fs_extra.default.readdirSync(import_path.default.join((0, import_index.getPaths)().generated.base, "locks"));
    for (const lock of locks) {
      unsetLock(lock);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clearLocks,
  isLockSet,
  setLock,
  unsetLock
});
