"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var updateCheck_exports = {};
__export(updateCheck_exports, {
  CHECK_LOCK_IDENTIFIER: () => CHECK_LOCK_IDENTIFIER,
  DEFAULT_DATETIME_MS: () => DEFAULT_DATETIME_MS,
  EXCLUDED_COMMANDS: () => EXCLUDED_COMMANDS,
  SHOW_LOCK_IDENTIFIER: () => SHOW_LOCK_IDENTIFIER,
  check: () => check,
  isEnabled: () => isEnabled,
  readUpdateDataFile: () => readUpdateDataFile,
  shouldCheck: () => shouldCheck,
  shouldShow: () => shouldShow,
  showUpdateMessage: () => showUpdateMessage,
  updateCheckMiddleware: () => updateCheckMiddleware
});
module.exports = __toCommonJS(updateCheck_exports);
var import_path = __toESM(require("path"));
var import_boxen = __toESM(require("boxen"));
var import_chalk = __toESM(require("chalk"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_latest_version = __toESM(require("latest-version"));
var import_semver = __toESM(require("semver"));
var import_project_config = require("@redwoodjs/project-config");
var import_background = require("./background");
var import_locking = require("./locking");
var import_index = require("./index");
const CHECK_PERIOD = 24 * 60 * 6e4;
const SHOW_PERIOD = 24 * 60 * 6e4;
const DEFAULT_DATETIME_MS = 9466848e5;
const CHECK_LOCK_IDENTIFIER = "UPDATE_CHECK";
const SHOW_LOCK_IDENTIFIER = "UPDATE_CHECK_SHOW";
const EXCLUDED_COMMANDS = ["upgrade", "ts-to-js"];
let persistenceDirectory;
function getPersistenceDirectory() {
  if (persistenceDirectory) {
    return persistenceDirectory;
  }
  persistenceDirectory = import_path.default.join((0, import_index.getPaths)().generated.base, "updateCheck");
  return persistenceDirectory;
}
async function check() {
  try {
    console.time("Update Check");
    const packageJson = JSON.parse(
      import_fs_extra.default.readFileSync(import_path.default.join((0, import_index.getPaths)().base, "package.json"))
    );
    let localVersion = packageJson.devDependencies["@redwoodjs/core"];
    while (!/\d/.test(localVersion.charAt(0))) {
      localVersion = localVersion.substring(1);
    }
    console.log(`Detected the current version of RedwoodJS: '${localVersion}'`);
    const remoteVersions = /* @__PURE__ */ new Map();
    for (const tag of (0, import_project_config.getConfig)().notifications.versionUpdates) {
      console.log(`Checking for new versions for npm tag: '${tag}'`);
      try {
        remoteVersions.set(
          tag,
          await (0, import_latest_version.default)("@redwoodjs/core", { version: tag })
        );
      } catch (error) {
        console.error(`Couldn't find a version for tag: '${tag}'`);
        console.error(error);
      }
    }
    console.log(`Detected the latest versions of RedwoodJS as:`);
    console.log(JSON.stringify([...remoteVersions.entries()], void 0, 2));
    console.log("Saving updated version information for future checks...");
    updateUpdateDataFile({
      localVersion,
      remoteVersions,
      checkedAt: (/* @__PURE__ */ new Date()).getTime()
    });
  } finally {
    (0, import_locking.unsetLock)(CHECK_LOCK_IDENTIFIER);
    console.timeEnd("Update Check");
  }
}
function isEnabled() {
  return (0, import_project_config.getConfig)().notifications.versionUpdates.length > 0;
}
function shouldCheck() {
  if ((0, import_locking.isLockSet)(CHECK_LOCK_IDENTIFIER)) {
    return false;
  }
  const data = readUpdateDataFile();
  return data.checkedAt < (/* @__PURE__ */ new Date()).getTime() - CHECK_PERIOD;
}
function shouldShow() {
  if ((0, import_locking.isLockSet)(SHOW_LOCK_IDENTIFIER)) {
    return false;
  }
  const data = readUpdateDataFile();
  let newerVersion = false;
  data.remoteVersions.forEach((version) => {
    newerVersion ||= import_semver.default.gt(version, data.localVersion);
  });
  return data.shownAt < (/* @__PURE__ */ new Date()).getTime() - SHOW_PERIOD && newerVersion;
}
function showUpdateMessage() {
  console.log(getUpdateMessage());
  updateUpdateDataFile({ shownAt: (/* @__PURE__ */ new Date()).getTime() });
}
function getUpdateMessage() {
  const data = readUpdateDataFile();
  const localTag = extractTagFromVersion(data.localVersion) || "latest";
  let updateCount = 0;
  let message = " New updates to Redwood are available via `yarn rw upgrade#REPLACEME#` ";
  data.remoteVersions.forEach((version, tag) => {
    if (import_semver.default.gt(version, data.localVersion)) {
      updateCount += 1;
      if (tag === localTag) {
        message += `

 \u2756  ${import_chalk.default.underline(import_chalk.default.bold(tag))}:
     v${data.localVersion} -> v${version} `;
      } else {
        message += `

 \u2756  ${tag}:
     v${version} `;
      }
    }
  });
  message += "\n\n See release notes at: https://github.com/redwoodjs/redwood/releases ";
  message = message.replace("#REPLACEME#", updateCount > 1 ? " -t [tag]" : "");
  return (0, import_boxen.default)(message, {
    padding: 0,
    margin: 1,
    title: `Redwood Update${updateCount > 1 ? "s " : " "}available \u{1F389}`,
    borderColor: "#0b8379",
    // The RedwoodJS colour
    borderStyle: "round"
  });
}
function readUpdateDataFile() {
  try {
    if (!import_fs_extra.default.existsSync(getPersistenceDirectory())) {
      import_fs_extra.default.mkdirSync(getPersistenceDirectory(), { recursive: true });
    }
    const persistedData = JSON.parse(
      import_fs_extra.default.readFileSync(import_path.default.join(getPersistenceDirectory(), "data.json"))
    );
    persistedData.remoteVersions = new Map(
      Object.entries(persistedData.remoteVersions)
    );
    return persistedData;
  } catch (error) {
    if (error.code === "ENOENT") {
      return {
        localVersion: "0.0.0",
        remoteVersions: /* @__PURE__ */ new Map(),
        checkedAt: DEFAULT_DATETIME_MS,
        shownAt: DEFAULT_DATETIME_MS
      };
    }
    throw error;
  }
}
function updateUpdateDataFile({
  localVersion,
  remoteVersions,
  checkedAt,
  shownAt
} = {}) {
  const existingData = readUpdateDataFile();
  const updatedData = {
    localVersion: localVersion ?? existingData.localVersion,
    remoteVersions: Object.fromEntries(
      remoteVersions ?? existingData.remoteVersions
    ),
    checkedAt: checkedAt ?? existingData.checkedAt,
    shownAt: shownAt ?? existingData.shownAt
  };
  import_fs_extra.default.writeFileSync(
    import_path.default.join(getPersistenceDirectory(), "data.json"),
    JSON.stringify(updatedData, null, 2)
  );
}
function extractTagFromVersion(version) {
  const tagIndex = version.indexOf("-");
  if (tagIndex === -1) {
    return "";
  }
  const tag = version.substring(tagIndex + 1).trim();
  return tag.includes(".") ? tag.split(".")[0] : tag;
}
function updateCheckMiddleware(argv) {
  if (EXCLUDED_COMMANDS.includes(argv._[0])) {
    return;
  }
  if (shouldShow()) {
    (0, import_locking.setLock)(SHOW_LOCK_IDENTIFIER);
    process.on("exit", () => {
      showUpdateMessage();
      (0, import_locking.unsetLock)(SHOW_LOCK_IDENTIFIER);
    });
  }
  if (shouldCheck()) {
    (0, import_locking.setLock)(CHECK_LOCK_IDENTIFIER);
    (0, import_background.spawnBackgroundProcess)("updateCheck", "yarn", [
      "node",
      import_path.default.join(__dirname, "updateCheckExecute.js")
    ]);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CHECK_LOCK_IDENTIFIER,
  DEFAULT_DATETIME_MS,
  EXCLUDED_COMMANDS,
  SHOW_LOCK_IDENTIFIER,
  check,
  isEnabled,
  readUpdateDataFile,
  shouldCheck,
  shouldShow,
  showUpdateMessage,
  updateCheckMiddleware
});
