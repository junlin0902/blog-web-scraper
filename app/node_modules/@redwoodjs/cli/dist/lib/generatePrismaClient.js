"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var generatePrismaClient_exports = {};
__export(generatePrismaClient_exports, {
  generatePrismaClient: () => generatePrismaClient,
  generatePrismaCommand: () => generatePrismaCommand
});
module.exports = __toCommonJS(generatePrismaClient_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_lib = require("../lib");
const skipTask = (schema = (0, import_lib.getPaths)().api.dbSchema) => {
  if (!import_fs_extra.default.existsSync(schema)) {
    console.log(
      `Skipping database and Prisma client generation, no \`schema.prisma\` file found: \`${schema}\``
    );
    return true;
  }
  return false;
};
const generatePrismaCommand = (schema) => {
  if (skipTask(schema)) {
    return {};
  }
  return {
    cmd: `node "${require.resolve("prisma/build/index.js")}"`,
    args: ["generate", schema && `--schema="${schema}"`]
  };
};
const generatePrismaClient = async ({
  verbose = true,
  force = true,
  schema = (0, import_lib.getPaths)().api.dbSchema
}) => {
  if (skipTask(schema)) {
    return;
  }
  if (!force) {
    try {
      const { PrismaClient } = require(import_path.default.join((0, import_lib.getPaths)().base, "node_modules/.prisma/client"));
      new PrismaClient();
      return;
    } catch (e) {
    }
  }
  return await (0, import_lib.runCommandTask)(
    [
      {
        title: "Generating the Prisma client...",
        ...generatePrismaCommand(schema)
      }
    ],
    {
      verbose
    }
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generatePrismaClient,
  generatePrismaCommand
});
