"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var extendFile_exports = {};
__export(extendFile_exports, {
  extendJSXFile: () => extendJSXFile,
  fileIncludes: () => fileIncludes,
  objectToComponentProps: () => objectToComponentProps
});
module.exports = __toCommonJS(extendFile_exports);
var import_fs_extra = __toESM(require("fs-extra"));
function fileIncludes(path, str) {
  return import_fs_extra.default.existsSync(path) && import_fs_extra.default.readFileSync(path).toString().includes(str);
}
function extendJSXFile(path, {
  insertComponent: {
    name = void 0,
    props = void 0,
    around = void 0,
    within = void 0,
    insertBefore = void 0,
    insertAfter = void 0
  },
  imports = [],
  moduleScopeLines = []
}) {
  const content = import_fs_extra.default.readFileSync(path).toString().split("\n");
  if (moduleScopeLines?.length) {
    content.splice(
      content.findLastIndex((l) => l.trimStart().startsWith("import")) + 1,
      0,
      "",
      ...moduleScopeLines
    );
  }
  if (imports?.length) {
    content.splice(
      content.findLastIndex((l) => l.includes("@redwoodjs")) + 1,
      0,
      "",
      ...imports
    );
  }
  if (name) {
    insertComponent(content, {
      component: name,
      props,
      around,
      within,
      insertBefore,
      insertAfter
    });
  }
  import_fs_extra.default.writeFileSync(path, content.filter((e) => e !== void 0).join("\n"));
}
function insertComponent(content, { component, props, around, within, insertBefore, insertAfter }) {
  if (around && within || !(around || within)) {
    throw new Error(
      "Exactly one of (around | within) must be defined. Choose one."
    );
  }
  const target = around ?? within;
  const findTagIndex = (regex) => content.findIndex((line) => regex.test(line));
  let open = findTagIndex(new RegExp(`([^\\S\r
]*)<${target}\\s*(.*)\\s*>`));
  let close = findTagIndex(new RegExp(`([^\\S\r
]*)</${target}>`)) + 1;
  if (open === -1 || close === -1) {
    throw new Error(`Could not find tags for ${target}`);
  }
  if (within) {
    open++;
    close--;
  }
  const [, componentDepth] = content[open].match(/([^\S\r\n]*).*/);
  content.splice(
    open,
    close - open,
    // "Delete" the wrapped component contents. We put it back below.
    insertBefore && componentDepth + insertBefore,
    componentDepth + buildOpeningTag(component, props),
    ...content.slice(open, close).map((line) => "  " + line),
    componentDepth + `</${component}>`,
    insertAfter && componentDepth + insertAfter
  );
}
function buildOpeningTag(componentName, props) {
  const propsString = (() => {
    switch (typeof props) {
      case "undefined":
        return "";
      case "object":
        return objectToComponentProps(props, { raw: true }).join(" ");
      case "string":
        return props;
      default:
        throw new Error(
          `Illegal argument passed for 'props'. Required: {Object | string | undefined}, got ${typeof props}`
        );
    }
  })();
  const possibleSpace = propsString.length ? " " : "";
  return `<${componentName}${possibleSpace}${propsString}>`;
}
function objectToComponentProps(obj, options = { exclude: [], raw: false }) {
  const props = [];
  const doRaw = (key) => options.raw === true || Array.isArray(options.raw) && options.raw.includes(key);
  for (const [key, value] of Object.entries(obj)) {
    if (options.exclude && options.exclude.includes(key)) {
      continue;
    }
    if (doRaw(key)) {
      props.push(`${key}={${value}}`);
    } else {
      props.push(`${key}="${value}"`);
    }
  }
  return props;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extendJSXFile,
  fileIncludes,
  objectToComponentProps
});
