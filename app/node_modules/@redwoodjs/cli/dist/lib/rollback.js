"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rollback_exports = {};
__export(rollback_exports, {
  addFileToRollback: () => addFileToRollback,
  addFunctionToRollback: () => addFunctionToRollback,
  executeRollback: () => executeRollback,
  prepareForRollback: () => prepareForRollback,
  resetRollback: () => resetRollback
});
module.exports = __toCommonJS(rollback_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
let rollback = [];
function addFunctionToRollback(func, atEnd = false) {
  const step = { type: "func", func };
  if (atEnd) {
    rollback.unshift(step);
  } else {
    rollback.push(step);
  }
}
function addFileToRollback(path2, atEnd = false) {
  const step = {
    type: "file",
    path: path2,
    content: import_fs_extra.default.existsSync(path2) ? import_fs_extra.default.readFileSync(path2) : null
  };
  if (atEnd) {
    rollback.unshift(step);
  } else {
    rollback.push(step);
  }
}
async function executeRollback(_ = null, task = null) {
  if (task) {
    task.title = "Reverting generator actions...";
  }
  while (rollback.length > 0) {
    const step = rollback.pop();
    switch (step.type) {
      case "func":
        await step.func();
        break;
      case "file":
        if (step.content === null) {
          import_fs_extra.default.unlinkSync(step.path);
          let parent = import_path.default.dirname(step.path);
          if (parent !== "." && import_fs_extra.default.readdirSync(parent).length === 0) {
            import_fs_extra.default.rmdirSync(parent);
          }
          parent = import_path.default.dirname(parent);
          if (parent !== "." && import_fs_extra.default.readdirSync(parent).length === 0) {
            import_fs_extra.default.rmdirSync(parent);
          }
        } else {
          import_fs_extra.default.writeFileSync(step.path, step.content);
        }
        break;
      default:
        break;
    }
  }
  if (task) {
    task.title = `Reverted because: ${task.task.message.error}`;
  }
}
function resetRollback() {
  rollback.length = 0;
}
function prepareForRollback(tasks) {
  resetRollback();
  tasks.tasks?.forEach((task) => {
    task.task.rollback = executeRollback;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addFileToRollback,
  addFunctionToRollback,
  executeRollback,
  prepareForRollback,
  resetRollback
});
