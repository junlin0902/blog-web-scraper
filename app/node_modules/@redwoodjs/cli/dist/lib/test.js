"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var test_exports = {};
__export(test_exports, {
  generatorsRootPath: () => generatorsRootPath,
  loadFixture: () => loadFixture,
  loadGeneratorFixture: () => loadGeneratorFixture
});
module.exports = __toCommonJS(test_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_vitest = require("vitest");
var import_mockTelemetry = require("./mockTelemetry");
import_vitest.vi.mock("@redwoodjs/internal/dist/generate/generate", () => {
  return {
    generate: () => {
      return { errors: [] };
    }
  };
});
import_vitest.vi.mock("@redwoodjs/project-config", async (importOriginal) => {
  const path2 = require("path");
  const originalProjectConfig = await importOriginal();
  return {
    ...originalProjectConfig,
    getPaths: () => {
      const BASE_PATH = "/path/to/project";
      return {
        base: BASE_PATH,
        api: {
          dataMigrations: path2.join(BASE_PATH, "./api/prisma/dataMigrations"),
          db: path2.join(globalThis.__dirname, "fixtures"),
          // this folder
          dbSchema: path2.join(
            globalThis.__dirname,
            "fixtures",
            "schema.prisma"
          ),
          // this folder
          generators: path2.join(BASE_PATH, "./api/generators"),
          src: path2.join(BASE_PATH, "./api/src"),
          jobs: path2.join(BASE_PATH, "./api/src/jobs"),
          services: path2.join(BASE_PATH, "./api/src/services"),
          directives: path2.join(BASE_PATH, "./api/src/directives"),
          graphql: path2.join(BASE_PATH, "./api/src/graphql"),
          functions: path2.join(BASE_PATH, "./api/src/functions")
        },
        web: {
          base: path2.join(BASE_PATH, "./web"),
          config: path2.join(BASE_PATH, "./web/config"),
          src: path2.join(BASE_PATH, "./web/src"),
          generators: path2.join(BASE_PATH, "./web/generators"),
          routes: path2.join(BASE_PATH, "web/src/Routes.js"),
          components: path2.join(BASE_PATH, "/web/src/components"),
          layouts: path2.join(BASE_PATH, "/web/src/layouts"),
          pages: path2.join(BASE_PATH, "/web/src/pages"),
          app: path2.join(BASE_PATH, "/web/src/App.js")
        },
        scripts: path2.join(BASE_PATH, "scripts"),
        generated: {
          base: path2.join(BASE_PATH, ".redwood"),
          schema: path2.join(BASE_PATH, ".redwood/schema.graphql"),
          types: {
            includes: path2.join(BASE_PATH, ".redwood/types/includes"),
            mirror: path2.join(BASE_PATH, ".redwood/types/mirror")
          }
        }
      };
    }
  };
});
import_vitest.vi.mock("@redwoodjs/cli-helpers", async (importOriginal) => {
  const originalCliHelpers = await importOriginal();
  return {
    ...originalCliHelpers,
    isTypeScriptProject: () => false
  };
});
import_vitest.vi.mock("./project", () => ({
  isTypeScriptProject: () => false,
  sides: () => ["web", "api"]
}));
globalThis.__prettierPath = import_path.default.resolve(
  __dirname,
  "./__tests__/fixtures/prettier.config.js"
);
import_vitest.vi.spyOn(Math, "random").mockReturnValue(0.123456789);
const generatorsRootPath = import_path.default.join(
  __dirname,
  "..",
  "commands",
  "generate"
);
const loadGeneratorFixture = (generator, name) => {
  return loadFixture(
    import_path.default.join(
      __dirname,
      "..",
      "commands",
      "generate",
      generator,
      "__tests__",
      "fixtures",
      name
    )
  );
};
const loadFixture = (filepath) => {
  return import_fs_extra.default.readFileSync(filepath).toString();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generatorsRootPath,
  loadFixture,
  loadGeneratorFixture
});
