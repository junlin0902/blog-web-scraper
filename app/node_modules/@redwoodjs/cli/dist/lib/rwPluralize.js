"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rwPluralize_exports = {};
__export(rwPluralize_exports, {
  addSingularPlural: () => addSingularPlural,
  isPlural: () => isPlural,
  isSingular: () => isSingular,
  pluralize: () => pluralize,
  singularize: () => singularize
});
module.exports = __toCommonJS(rwPluralize_exports);
var plurals = __toESM(require("pluralize"));
const mappings = {
  toSingular: {},
  toPlural: {}
};
function lastWord(str) {
  const capitals = str.match(/[A-Z]/g);
  const lastIndex = str.lastIndexOf(capitals?.slice(-1)[0]);
  return lastIndex >= 0 ? str.slice(lastIndex) : str;
}
function pluralize(word) {
  if (mappings.toPlural[word]) {
    return mappings.toPlural[word];
  }
  const singular = lastWord(word);
  const base = word.slice(0, word.length - singular.length);
  if (mappings.toPlural[singular]) {
    return base + mappings.toPlural[singular];
  }
  return base + plurals.plural(singular);
}
function singularize(word) {
  if (mappings.toSingular[word]) {
    return mappings.toSingular[word];
  }
  const plural = lastWord(word);
  const base = word.slice(0, word.length - plural.length);
  if (mappings.toSingular[plural]) {
    return base + mappings.toSingular[plural];
  }
  return base + plurals.singular(plural);
}
function isPlural(word) {
  return plurals.isPlural(lastWord(word));
}
function isSingular(word) {
  return plurals.isSingular(lastWord(word));
}
function addSingularPlural(singular, plural) {
  const existingPlural = Object.keys(mappings.toSingular).find(
    (key) => mappings.toSingular[key] === singular
  );
  delete mappings.toSingular[existingPlural];
  delete mappings.toPlural[existingPlural];
  mappings.toPlural[singular] = plural;
  mappings.toPlural[plural] = plural;
  mappings.toSingular[plural] = singular;
  mappings.toSingular[singular] = singular;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addSingularPlural,
  isPlural,
  isSingular,
  pluralize,
  singularize
});
