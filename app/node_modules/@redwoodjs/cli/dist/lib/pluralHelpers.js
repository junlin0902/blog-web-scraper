"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var pluralHelpers_exports = {};
__export(pluralHelpers_exports, {
  ensureUniquePlural: () => ensureUniquePlural,
  isWordPluralizable: () => isWordPluralizable,
  validatePlural: () => validatePlural
});
module.exports = __toCommonJS(pluralHelpers_exports);
var import_prompts = __toESM(require("prompts"));
var import_rwPluralize = require("./rwPluralize");
const isWordPluralizable = (word) => {
  return (0, import_rwPluralize.isPlural)(word) !== (0, import_rwPluralize.isSingular)(word);
};
const validatePlural = (plural, singular) => {
  const trimmedPlural = plural.trim();
  if (trimmedPlural === singular) {
    return "Plural can not be same as singular.";
  }
  if (trimmedPlural.match(/[\n\r\s]+/)) {
    return "Only one word please!";
  }
  if (trimmedPlural.match(/^[\n\r\s\u0017]*$/)) {
    return "Plural can not be empty.";
  }
  return true;
};
const ensureUniquePlural = async ({
  model,
  isDestroyer = false,
  forcePrompt = false
}) => {
  if (!forcePrompt && isWordPluralizable(model)) {
    return;
  }
  const generateMessage = `Cannot determine the plural of "${model}". 
To continue, the generator requires a unique plural form:`;
  const destroyMessage = `Cannot determine the plural of "${model}" originally used to generate the files. 
To continue, the destroy command requires the plural form:`;
  const promptMessage = isDestroyer ? destroyMessage : generateMessage;
  const initialPlural = model.slice(-1) === "s" ? `${model}es` : `${model}s`;
  const promptResult = await (0, import_prompts.default)({
    type: "text",
    name: "plural",
    message: promptMessage,
    initial: initialPlural,
    validate: (pluralInput) => validatePlural(pluralInput, model)
  });
  const pluralToUse = promptResult.plural?.trim().replace(/\u0017/g, "");
  if (!pluralToUse) {
    throw Error("Plural name must not be empty");
  }
  (0, import_rwPluralize.addSingularPlural)(model, pluralToUse);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ensureUniquePlural,
  isWordPluralizable,
  validatePlural
});
