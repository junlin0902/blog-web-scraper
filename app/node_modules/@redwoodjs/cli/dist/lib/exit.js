"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var exit_exports = {};
__export(exit_exports, {
  exitWithError: () => exitWithError
});
module.exports = __toCommonJS(exit_exports);
var import_chalk = __toESM(require("chalk"));
var import_terminal_link = __toESM(require("terminal-link"));
var import_uuid = require("uuid");
var import_cli_helpers = require("@redwoodjs/cli-helpers");
const DEFAULT_ERROR_EPILOGUE = [
  "Need help?",
  ` - Not sure about something or need advice? Reach out on our ${(0, import_terminal_link.default)(
    "Forum",
    "https://community.redwoodjs.com/"
  )}`,
  ` - Think you've found a bug? Open an issue on our ${(0, import_terminal_link.default)(
    "GitHub",
    "https://github.com/redwoodjs/redwood"
  )}`
].join("\n");
function exitWithError(error, { exitCode, message, epilogue, includeEpilogue, includeReferenceCode } = {}) {
  exitCode ??= error?.exitCode ?? 1;
  epilogue ??= DEFAULT_ERROR_EPILOGUE;
  includeEpilogue ??= true;
  includeReferenceCode ??= true;
  message ??= error.stack ?? (error.toString() || "Unknown error");
  const errorReferenceCode = (0, import_uuid.v4)();
  const line = import_chalk.default.red("-".repeat(process.stderr.columns));
  const content = !includeEpilogue ? message : [
    "",
    line,
    message,
    `
${line}`,
    epilogue,
    includeReferenceCode && ` - Here's your unique error reference to quote: '${errorReferenceCode}'`,
    line
  ].filter(Boolean).join("\n");
  console.error(content);
  (0, import_cli_helpers.recordTelemetryError)(error ?? new Error(message));
  (0, import_cli_helpers.recordTelemetryAttributes)({ errorReferenceCode });
  process.exit(exitCode);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  exitWithError
});
