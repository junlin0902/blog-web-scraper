"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var packages_exports = {};
__export(packages_exports, {
  installModule: () => installModule,
  installRedwoodModule: () => installRedwoodModule,
  isModuleInstalled: () => isModuleInstalled
});
module.exports = __toCommonJS(packages_exports);
var import_path = __toESM(require("path"));
var import_execa = __toESM(require("execa"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_index = require("./index");
async function installModule(name, version = void 0) {
  if (isModuleInstalled(name)) {
    return false;
  }
  if (version === void 0) {
    return installRedwoodModule(name);
  } else {
    await import_execa.default.command(`yarn add -D ${name}@${version}`, {
      stdio: "inherit",
      cwd: (0, import_index.getPaths)().base
    });
  }
  return true;
}
async function installRedwoodModule(module2) {
  const packageJsonPath = require.resolve("@redwoodjs/cli/package.json");
  let { version } = import_fs_extra.default.readJSONSync(packageJsonPath);
  if (!isModuleInstalled(module2)) {
    if (version.includes("+")) {
      version = version.split("+")[0];
    }
    let packument;
    try {
      const packumentResponse = await fetch(
        `https://registry.npmjs.org/${module2}`
      );
      packument = await packumentResponse.json();
      if (packument.error) {
        throw new Error(packument.error);
      }
    } catch (error) {
      throw new Error(
        `Couldn't fetch packument for ${module2}: ${error.message}`
      );
    }
    const versionIsPublished = Object.keys(packument.versions).includes(version);
    if (!versionIsPublished) {
      version = "canary";
    }
    await import_execa.default.command(`yarn add -D ${module2}@${version}`, {
      stdio: "inherit",
      cwd: (0, import_index.getPaths)().base
    });
    await import_execa.default.command(`yarn dedupe`, {
      stdio: "inherit",
      cwd: (0, import_index.getPaths)().base
    });
    return true;
  }
  return false;
}
function isModuleInstalled(module2) {
  const { dependencies, devDependencies } = import_fs_extra.default.readJSONSync(
    import_path.default.join((0, import_index.getPaths)().base, "package.json")
  );
  const deps = {
    ...dependencies,
    ...devDependencies
  };
  if (deps[module2]) {
    return true;
  }
  return require.resolve.paths(`${module2}/package.json`).some((requireResolvePath) => {
    return import_fs_extra.default.existsSync(import_path.default.join(requireResolvePath, module2));
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  installModule,
  installRedwoodModule,
  isModuleInstalled
});
