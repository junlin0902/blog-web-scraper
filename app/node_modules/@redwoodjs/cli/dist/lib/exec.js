"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var exec_exports = {};
__export(exec_exports, {
  configureBabel: () => configureBabel,
  runScriptFunction: () => runScriptFunction
});
module.exports = __toCommonJS(exec_exports);
var import_path = __toESM(require("path"));
var import_babel_config = require("@redwoodjs/babel-config");
var import_project_config = require("@redwoodjs/project-config");
async function runScriptFunction({
  path: scriptPath,
  functionName,
  args
}) {
  const script = require(scriptPath);
  const returnValue = await script[functionName](args);
  try {
    const { db } = require(import_path.default.join((0, import_project_config.getPaths)().api.lib, "db"));
    db.$disconnect();
  } catch (e) {
  }
  return returnValue;
}
async function configureBabel() {
  const {
    overrides: _overrides,
    plugins: webPlugins,
    ...otherWebConfig
  } = (0, import_babel_config.getWebSideDefaultBabelConfig)();
  (0, import_babel_config.registerApiSideBabelHook)({
    plugins: [
      [
        "babel-plugin-module-resolver",
        {
          alias: {
            $api: (0, import_project_config.getPaths)().api.base,
            $web: (0, import_project_config.getPaths)().web.base,
            api: (0, import_project_config.getPaths)().api.base,
            web: (0, import_project_config.getPaths)().web.base
          },
          loglevel: "silent"
          // to silence the unnecessary warnings
        },
        "exec-$side-module-resolver"
      ]
    ],
    overrides: [
      {
        test: ["./api/"],
        plugins: [
          [
            "babel-plugin-module-resolver",
            {
              alias: {
                src: (0, import_project_config.getPaths)().api.src
              },
              loglevel: "silent"
            },
            "exec-api-src-module-resolver"
          ]
        ]
      },
      {
        test: ["./web/"],
        plugins: [
          ...webPlugins,
          [
            "babel-plugin-module-resolver",
            {
              alias: {
                src: (0, import_project_config.getPaths)().web.src
              },
              loglevel: "silent"
            },
            "exec-web-src-module-resolver"
          ]
        ],
        ...otherWebConfig
      }
    ]
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  configureBabel,
  runScriptFunction
});
