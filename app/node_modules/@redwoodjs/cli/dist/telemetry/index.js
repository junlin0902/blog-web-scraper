"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var telemetry_exports = {};
__export(telemetry_exports, {
  shutdownTelemetry: () => shutdownTelemetry,
  startTelemetry: () => startTelemetry
});
module.exports = __toCommonJS(telemetry_exports);
var import_path = __toESM(require("path"));
var import_api = require("@opentelemetry/api");
var import_api2 = __toESM(require("@opentelemetry/api"));
var import_sdk_trace_node = require("@opentelemetry/sdk-trace-node");
var import_helpers = require("yargs/helpers");
var import_background = require("../lib/background");
var import_exporter = require("./exporter");
let traceProvider;
let traceProcessor;
let traceExporter;
let isStarted = false;
let isShutdown = false;
async function startTelemetry() {
  if (isStarted) {
    return;
  }
  isStarted = true;
  try {
    import_api.diag.setLogger(new import_api.DiagConsoleLogger(), import_api.DiagLogLevel.ERROR);
    traceProvider = new import_sdk_trace_node.NodeTracerProvider({
      sampler: {
        shouldSample: () => {
          return {
            decision: isShutdown ? import_sdk_trace_node.SamplingDecision.NOT_RECORD : import_sdk_trace_node.SamplingDecision.RECORD_AND_SAMPLED
          };
        },
        toString: () => {
          return "AlwaysSampleWhenNotShutdown";
        }
      }
    });
    traceExporter = new import_exporter.CustomFileExporter();
    traceProcessor = new import_sdk_trace_node.SimpleSpanProcessor(traceExporter);
    traceProvider.addSpanProcessor(traceProcessor);
    traceProvider.register();
    const cleanArgv = (0, import_helpers.hideBin)(process.argv);
    if (!cleanArgv.includes("sb") && !cleanArgv.includes("storybook")) {
      for (const signal of ["SIGTERM", "SIGINT", "SIGHUP"]) {
        process.on(signal, () => {
          if (process.listenerCount(signal) === 1) {
            process.exit();
          }
        });
      }
    } else {
      process.on("shutdown-telemetry", () => {
        shutdownTelemetry();
      });
    }
    process.on("exit", () => {
      shutdownTelemetry();
    });
  } catch (error) {
    console.error("Telemetry error");
    console.error(error);
  }
}
function shutdownTelemetry() {
  if (isShutdown || !isStarted) {
    return;
  }
  isShutdown = true;
  try {
    while (import_api2.default.trace.getActiveSpan()?.isRecording()) {
      import_api2.default.trace.getActiveSpan()?.end();
    }
    traceExporter?.shutdown();
    (0, import_background.spawnBackgroundProcess)("telemetry", "yarn", [
      "node",
      import_path.default.join(__dirname, "send.js")
    ]);
  } catch (error) {
    console.error("Telemetry error");
    console.error(error);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  shutdownTelemetry,
  startTelemetry
});
