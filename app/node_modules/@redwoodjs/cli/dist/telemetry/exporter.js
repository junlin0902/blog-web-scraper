"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var exporter_exports = {};
__export(exporter_exports, {
  CustomFileExporter: () => CustomFileExporter
});
module.exports = __toCommonJS(exporter_exports);
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_project_config = require("@redwoodjs/project-config");
class CustomFileExporter {
  /**
   * @type string
   * @private
   */
  #storageFileName;
  /**
   * @type string
   * @private
   */
  #storageFilePath;
  /**
   * @type boolean
   * @private
   */
  #isShutdown = false;
  constructor() {
    this.#storageFileName = `${Date.now()}.json`;
    this.#storageFilePath = import_path.default.join(
      (0, import_project_config.getPaths)().generated.base,
      "telemetry",
      this.#storageFileName
    );
    import_fs_extra.default.ensureDirSync(import_path.default.dirname(this.#storageFilePath));
    import_fs_extra.default.writeFileSync(this.#storageFilePath, "[");
  }
  /**
   * Called to export sampled {@link ReadableSpan}s.
   * @param spans the list of sampled Spans to be exported.
   */
  export(spans, resultCallback) {
    for (let i = 0; i < spans.length; i++) {
      const span = spans[i];
      delete span["_spanProcessor"];
      import_fs_extra.default.appendFileSync(
        this.#storageFilePath,
        JSON.stringify(span, void 0, 2)
      );
      import_fs_extra.default.appendFileSync(this.#storageFilePath, ",");
    }
    resultCallback({ code: 0 });
  }
  /** Stops the exporter. */
  shutdown() {
    if (!this.#isShutdown) {
      import_fs_extra.default.truncateSync(
        this.#storageFilePath,
        import_fs_extra.default.statSync(this.#storageFilePath).size - 1
      );
      import_fs_extra.default.appendFileSync(this.#storageFilePath, "]");
      this.#isShutdown = true;
    }
  }
  /** Immediately export all spans */
  forceFlush() {
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CustomFileExporter
});
