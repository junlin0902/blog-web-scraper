"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var resource_exports = {};
__export(resource_exports, {
  getResources: () => getResources
});
module.exports = __toCommonJS(resource_exports);
var import_path = __toESM(require("path"));
var import_semantic_conventions = require("@opentelemetry/semantic-conventions");
var import_ci_info = __toESM(require("ci-info"));
var import_envinfo = __toESM(require("envinfo"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_systeminformation = __toESM(require("systeminformation"));
var import_uuid = require("uuid");
var import_project_config = require("@redwoodjs/project-config");
var import_hosts = require("@redwoodjs/structure/dist/hosts");
var import_RWProject = require("@redwoodjs/structure/dist/model/RWProject");
var import_package = require("../../package");
async function getResources() {
  let UID = (0, import_uuid.v4)();
  try {
    const telemetryFile = import_path.default.join((0, import_project_config.getPaths)().generated.base, "telemetry.txt");
    if (!import_fs_extra.default.existsSync(telemetryFile)) {
      import_fs_extra.default.ensureFileSync(telemetryFile);
    }
    if (import_fs_extra.default.statSync(telemetryFile).mtimeMs < Date.now() - 864e5) {
      import_fs_extra.default.writeFileSync(telemetryFile, UID);
    } else {
      const storedUID = import_fs_extra.default.readFileSync(telemetryFile, { encoding: "utf8" });
      if (storedUID && (0, import_uuid.validate)(storedUID)) {
        UID = storedUID;
      } else {
        import_fs_extra.default.writeFileSync(telemetryFile, UID);
      }
    }
  } catch (_error) {
  }
  const info = JSON.parse(
    await import_envinfo.default.run(
      {
        System: ["OS", "Shell"],
        Binaries: ["Node", "Yarn", "npm"],
        npmPackages: "@redwoodjs/*",
        IDEs: ["VSCode"]
      },
      { json: true }
    )
  );
  const shell = info.System?.Shell;
  if (shell?.path?.match("/")) {
    info.System.Shell.name = info.System.Shell.path.split("/").pop();
  } else if (shell?.path.match("\\")) {
    info.System.Shell.name = info.System.Shell.path.split("\\").pop();
  }
  const cpu = await import_systeminformation.default.cpu();
  const mem = await import_systeminformation.default.mem();
  let developmentEnvironment = void 0;
  if (Object.keys(process.env).some((key) => key.startsWith("GITPOD_"))) {
    developmentEnvironment = "gitpod";
  }
  const experiments = Object.keys((0, import_project_config.getRawConfig)()["experimental"] || {});
  const project = new import_RWProject.RWProject({
    host: new import_hosts.DefaultHost(),
    projectRoot: (0, import_project_config.getPaths)().base
  });
  const routes = project.getRouter().routes;
  const prerenderedRoutes = routes.filter((route) => route.hasPrerender);
  const complexity = [
    routes.length,
    prerenderedRoutes.length,
    project.services.length,
    project.cells.length,
    project.pages.length
  ].join(".");
  const sides = project.sides.join(",");
  return {
    [import_semantic_conventions.SemanticResourceAttributes.SERVICE_NAME]: import_package.name,
    [import_semantic_conventions.SemanticResourceAttributes.SERVICE_VERSION]: import_package.version,
    [import_semantic_conventions.SemanticResourceAttributes.OS_TYPE]: info.System?.OS?.split(" ")[0],
    [import_semantic_conventions.SemanticResourceAttributes.OS_VERSION]: info.System?.OS?.split(" ")[1],
    "shell.name": info.System?.Shell?.name,
    "node.version": info.Binaries?.Node?.version,
    "yarn.version": info.Binaries?.Yarn?.version,
    "npm.version": info.Binaries?.npm?.version,
    "vscode.version": info.IDEs?.VSCode?.version,
    "cpu.count": cpu.physicalCores,
    "memory.gb": Math.round(mem.total / 1073741824),
    "env.node_env": process.env.NODE_ENV || null,
    "ci.redwood": !!process.env.REDWOOD_CI,
    "ci.isci": import_ci_info.default.isCI,
    "dev.environment": developmentEnvironment,
    complexity,
    sides,
    experiments: JSON.stringify(experiments),
    webBundler: "vite",
    // Hardcoded because this is now the only supported bundler
    uid: UID
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getResources
});
