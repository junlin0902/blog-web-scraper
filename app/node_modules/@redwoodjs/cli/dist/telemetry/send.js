"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_path = __toESM(require("path"));
var import_exporter_trace_otlp_http = require("@opentelemetry/exporter-trace-otlp-http");
var import_resources = require("@opentelemetry/resources");
var import_fs_extra = __toESM(require("fs-extra"));
var import_project_config = require("@redwoodjs/project-config");
var import_resource = require("./resource");
async function main() {
  console.log(
    "You can disable telemetry by:\n - setting the 'REDWOOD_DISABLE_TELEMETRY' environment variable\n - passing the '--no-telemetry' flag when using the CLI"
  );
  console.log(
    "Information about Redwood telemetry can be found at:\n - https://telemetry.redwoodjs.com\n"
  );
  const telemetryDir = import_path.default.join((0, import_project_config.getPaths)().generated.base, "telemetry");
  import_fs_extra.default.ensureDirSync(telemetryDir);
  const telemetryFiles = import_fs_extra.default.readdirSync(
    import_path.default.join((0, import_project_config.getPaths)().generated.base, "telemetry")
  );
  console.time("Computed resource information");
  const customResourceData = await (0, import_resource.getResources)();
  console.timeEnd("Computed resource information");
  const resource = import_resources.Resource.default().merge(new import_resources.Resource(customResourceData));
  const url = process.env.REDWOOD_REDIRECT_TELEMETRY || "https://quark.quantumparticle.io/v1/traces";
  const traceExporter = new import_exporter_trace_otlp_http.OTLPTraceExporter({
    url
  });
  console.log(`Sending telemetry data to '${url}'`);
  for (const [index, file] of telemetryFiles.entries()) {
    if (file.startsWith("_")) {
      continue;
    }
    console.log(`Sending data from telemetry file '${file}'`);
    let spans = [];
    try {
      spans = import_fs_extra.default.readJSONSync(import_path.default.join(telemetryDir, file));
    } catch (error) {
      console.error(`Error reading telemetry file '${file}'`);
      console.error(error);
      console.error("Deleting this file to prevent further errors");
      import_fs_extra.default.unlinkSync(import_path.default.join(telemetryDir, file));
      continue;
    }
    if (!Array.isArray(spans)) {
      console.error(
        `Telemetry file '${file}' does not contain an array of spans. Deleting this file to prevent further errors.`
      );
      import_fs_extra.default.unlinkSync(import_path.default.join(telemetryDir, file));
      continue;
    }
    for (const span of spans) {
      span.resource = resource;
      span.attributes ??= span._attributes ?? {};
      span.spanContext = () => span._spanContext;
      span.events = [];
    }
    traceExporter.export(spans, ({ code, error }) => {
      if (code !== 0) {
        console.error("Encountered:");
        console.error(error);
        console.error("while exporting the following spans:");
        console.error(spans);
      }
    });
    import_fs_extra.default.writeJSONSync(import_path.default.join(telemetryDir, `_${file}`), spans, { spaces: 2 });
    import_fs_extra.default.unlinkSync(import_path.default.join(telemetryDir, file));
    telemetryFiles[index] = `_${file}`;
  }
  traceExporter.shutdown();
  console.log(
    "Keeping the lastest 8 telemetry files for visibility/transparency."
  );
  const sortedTelemetryFiles = telemetryFiles.sort((a, b) => {
    return parseInt(b.split(".")[0].replace("_", "")) - parseInt(a.split(".")[0].replace("_", ""));
  });
  for (let i = 8; i < sortedTelemetryFiles.length; i++) {
    console.log(`Removing telemetry file '${sortedTelemetryFiles[i]}'`);
    import_fs_extra.default.unlinkSync(import_path.default.join(telemetryDir, sortedTelemetryFiles[i]));
  }
}
main();
