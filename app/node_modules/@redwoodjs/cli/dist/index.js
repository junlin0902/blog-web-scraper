#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_path = __toESM(require("path"));
var import_api = require("@opentelemetry/api");
var import_fs_extra = __toESM(require("fs-extra"));
var import_helpers = require("yargs/helpers");
var import_yargs = __toESM(require("yargs/yargs"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
var import_telemetry = require("@redwoodjs/telemetry");
var buildCommand = __toESM(require("./commands/build"));
var checkCommand = __toESM(require("./commands/check"));
var consoleCommand = __toESM(require("./commands/console"));
var deployCommand = __toESM(require("./commands/deploy"));
var destroyCommand = __toESM(require("./commands/destroy"));
var devCommand = __toESM(require("./commands/dev"));
var execCommand = __toESM(require("./commands/exec"));
var experimentalCommand = __toESM(require("./commands/experimental"));
var generateCommand = __toESM(require("./commands/generate"));
var infoCommand = __toESM(require("./commands/info"));
var jobsCommand = __toESM(require("./commands/jobs"));
var lintCommand = __toESM(require("./commands/lint"));
var prerenderCommand = __toESM(require("./commands/prerender"));
var prismaCommand = __toESM(require("./commands/prisma"));
var recordCommand = __toESM(require("./commands/record"));
var serveCommand = __toESM(require("./commands/serve"));
var setupCommand = __toESM(require("./commands/setup"));
var studioCommand = __toESM(require("./commands/studio"));
var testCommand = __toESM(require("./commands/test"));
var tstojsCommand = __toESM(require("./commands/ts-to-js"));
var typeCheckCommand = __toESM(require("./commands/type-check"));
var upgradeCommand = __toESM(require("./commands/upgrade"));
var import_lib = require("./lib");
var import_exit = require("./lib/exit");
var import_loadEnvFiles = require("./lib/loadEnvFiles");
var updateCheck = __toESM(require("./lib/updateCheck"));
var import_plugin = require("./plugin");
var import_telemetry2 = require("./telemetry/index");
let { cwd, telemetry, help, version } = (0, import_helpers.Parser)((0, import_helpers.hideBin)(process.argv), {
  // Telemetry is enabled by default, but can be disabled in two ways
  // - by passing a `--telemetry false` option
  // - by setting a `REDWOOD_DISABLE_TELEMETRY` env var
  boolean: ["telemetry"],
  default: {
    telemetry: process.env.REDWOOD_DISABLE_TELEMETRY === void 0 || process.env.REDWOOD_DISABLE_TELEMETRY === ""
  }
});
cwd ??= process.env.RWJS_CWD;
try {
  if (cwd) {
    if (!import_fs_extra.default.existsSync(import_path.default.join(cwd, "redwood.toml"))) {
      throw new Error(`Couldn't find a "redwood.toml" file in ${cwd}`);
    }
  } else {
    const redwoodTOMLPath = (0, import_lib.findUp)("redwood.toml");
    if (!redwoodTOMLPath) {
      throw new Error(
        `Couldn't find up a "redwood.toml" file from ${process.cwd()}`
      );
    }
    cwd = import_path.default.dirname(redwoodTOMLPath);
  }
} catch (error) {
  console.error(error.message);
  process.exit(1);
}
process.env.RWJS_CWD = cwd;
(0, import_loadEnvFiles.loadEnvFiles)();
async function main() {
  if (telemetry) {
    (0, import_telemetry2.startTelemetry)();
  }
  const tracer = import_api.trace.getTracer("redwoodjs");
  await tracer.startActiveSpan("cli", async (span) => {
    const telemetryTimeoutTimer = setTimeout(() => {
      (0, import_telemetry2.shutdownTelemetry)();
    }, 5 * 6e4);
    if (version) {
      (0, import_cli_helpers.recordTelemetryAttributes)({ command: "--version" });
    }
    if (help) {
      (0, import_cli_helpers.recordTelemetryAttributes)({ command: "--help" });
    }
    try {
      await runYargs();
    } catch (error) {
      (0, import_exit.exitWithError)(error);
    }
    if (span?.isRecording()) {
      span?.setStatus({ code: import_api.SpanStatusCode.OK });
      span?.end();
    }
    clearTimeout(telemetryTimeoutTimer);
  });
  if (telemetry) {
    (0, import_telemetry2.shutdownTelemetry)();
  }
}
async function runYargs() {
  const yarg = (0, import_yargs.default)((0, import_helpers.hideBin)(process.argv)).scriptName("rw").middleware(
    [
      // We've already handled `cwd` above, but it may still be in `argv`.
      // We don't need it anymore so let's get rid of it.
      // Likewise for `telemetry`.
      (argv) => {
        delete argv.cwd;
        delete argv.addEnvFiles;
        delete argv["load-env-files"];
        delete argv.telemetry;
      },
      telemetry && import_telemetry.telemetryMiddleware,
      updateCheck.isEnabled() && updateCheck.updateCheckMiddleware
    ].filter(Boolean)
  ).option("cwd", {
    describe: "Working directory to use (where `redwood.toml` is located)"
  }).option("load-env-files", {
    describe: "Load additional .env files. Values defined in files specified later override earlier ones.",
    array: true
  }).example(
    "yarn rw exec migrateUsers --load-env-files stripe nakama",
    "Run a script, also loading env vars from '.env.stripe' and '.env.nakama'"
  ).option("telemetry", {
    describe: "Whether to send anonymous usage telemetry to RedwoodJS",
    boolean: true
    // hidden: true,
  }).example(
    "yarn rw g page home /",
    "Create a page component named 'Home' at path '/'"
  ).demandCommand().strict().exitProcess(false).alias("h", "help").command(buildCommand).command(checkCommand).command(consoleCommand).command(deployCommand).command(destroyCommand).command(devCommand).command(execCommand).command(experimentalCommand).command(generateCommand).command(infoCommand).command(jobsCommand).command(lintCommand).command(prerenderCommand).command(prismaCommand).command(recordCommand).command(serveCommand).command(setupCommand).command(studioCommand).command(testCommand).command(tstojsCommand).command(typeCheckCommand).command(upgradeCommand);
  await (0, import_plugin.loadPlugins)(yarg);
  const pkgJson = require("../package.json");
  yarg.version(pkgJson["version"]);
  await yarg.parse(process.argv.slice(2), {}, (err, _argv, output) => {
    if (err) {
      process.exitCode = 1;
    }
    if (output) {
      if (err) {
        console.error(output);
      } else {
        console.log(output);
      }
    }
  });
}
main();
