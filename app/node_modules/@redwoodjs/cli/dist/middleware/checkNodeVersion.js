"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var checkNodeVersion_exports = {};
__export(checkNodeVersion_exports, {
  checkNodeVersion: () => checkNodeVersion
});
module.exports = __toCommonJS(checkNodeVersion_exports);
var import_semver = __toESM(require("semver"));
var import_colors = __toESM(require("../lib/colors"));
function checkNodeVersion() {
  const checks = { ok: true };
  const pVersion = process.version;
  const pVersionC = import_semver.default.clean(pVersion);
  const LOWER_BOUND = "v20.0.0";
  const LOWER_BOUND_C = import_semver.default.clean(LOWER_BOUND);
  if (import_semver.default.gt(pVersionC, LOWER_BOUND_C)) {
    return checks;
  }
  checks.ok = false;
  checks.message = [
    `Your Node.js version is ${import_colors.default.warning(
      pVersion
    )}, but Redwood requires ${import_colors.default.important(`>=${LOWER_BOUND}`)}.`,
    "Upgrade your Node.js version using `nvm` or a similar tool. See https://redwoodjs.com/docs/how-to/using-nvm."
  ].join("\n");
  return checks;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  checkNodeVersion
});
