"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_react = __toESM(require("react"), 1);
var import_client = require("react-dom/client");
var import_redwood_app_root = __toESM(require("~redwood-app-root"), 1);
var import_redwood_app_routes = __toESM(require("~redwood-app-routes"), 1);
const redwoodAppElement = document.getElementById("redwood-app");
if (redwoodAppElement.children?.length > 0) {
  (0, import_client.hydrateRoot)(
    redwoodAppElement,
    /* @__PURE__ */ import_react.default.createElement(import_redwood_app_root.default, null, /* @__PURE__ */ import_react.default.createElement(import_redwood_app_routes.default, null))
  );
} else {
  const root = (0, import_client.createRoot)(redwoodAppElement);
  root.render(
    /* @__PURE__ */ import_react.default.createElement(import_redwood_app_root.default, null, /* @__PURE__ */ import_react.default.createElement(import_redwood_app_routes.default, null))
  );
}
