"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sseLink_exports = {};
__export(sseLink_exports, {
  SSELink: () => SSELink,
  isLiveQuery: () => isLiveQuery,
  isSubscription: () => isSubscription
});
module.exports = __toCommonJS(sseLink_exports);
var import_core = require("@apollo/client/link/core/core.cjs");
var import_utilities = require("@apollo/client/utilities/utilities.cjs");
var import_graphql = require("graphql");
var import_graphql_sse = require("graphql-sse");
const mapCredentialsHeader = (httpLinkCredentials) => {
  if (!httpLinkCredentials) {
    return void 0;
  }
  switch (httpLinkCredentials) {
    case "omit":
    case "same-origin":
    case "include":
      return httpLinkCredentials;
    default:
      return void 0;
  }
};
const mapReferrerPolicyHeader = (referrerPolicy) => {
  if (!referrerPolicy) {
    return void 0;
  }
  switch (referrerPolicy) {
    case "no-referrer":
    case "no-referrer-when-downgrade":
    case "same-origin":
    case "origin":
    case "strict-origin":
    case "origin-when-cross-origin":
    case "strict-origin-when-cross-origin":
    case "unsafe-url":
      return referrerPolicy;
    default:
      return void 0;
  }
};
const hasTrustedDocument = (operation) => {
  return operation.extensions?.persistedQuery?.sha256Hash;
};
const isSubscription = (definition) => {
  return definition.kind === import_graphql.Kind.OPERATION_DEFINITION && definition.operation === import_graphql.OperationTypeNode.SUBSCRIPTION;
};
const isLiveQuery = (definition) => {
  if (definition.kind !== import_graphql.Kind.OPERATION_DEFINITION || definition.operation !== import_graphql.OperationTypeNode.QUERY) {
    return false;
  }
  return !!definition.directives?.find((d) => d.name.value === "live");
};
class SSELink extends import_core.ApolloLink {
  client;
  constructor(options) {
    super();
    const { url, auth, headers, httpLinkConfig } = options;
    const { credentials, referrer, referrerPolicy } = httpLinkConfig?.headers || {};
    this.client = (0, import_graphql_sse.createClient)({
      url,
      headers: async () => {
        const token = await auth.tokenFn();
        if (!token) {
          return { ...headers };
        }
        return {
          Authorization: `Bearer ${token}`,
          "auth-provider": auth.authProviderType,
          ...headers
        };
      },
      credentials: mapCredentialsHeader(credentials),
      referrer,
      referrerPolicy: mapReferrerPolicyHeader(referrerPolicy)
    });
  }
  request(operation) {
    return new import_utilities.Observable((sink) => {
      let request;
      if (hasTrustedDocument(operation)) {
        delete operation.query;
        request = { ...operation };
      } else {
        request = {
          ...operation,
          query: (0, import_graphql.print)(operation.query)
        };
      }
      return this.client.subscribe(request, {
        next: sink.next.bind(sink),
        complete: sink.complete.bind(sink),
        error: sink.error.bind(sink)
      });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SSELink,
  isLiveQuery,
  isSubscription
});
