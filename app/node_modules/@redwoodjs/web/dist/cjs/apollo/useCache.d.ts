import type { ApolloCache, Reference, StoreObject } from '@apollo/client';
import type { NormalizedCacheObject } from '@apollo/client/cache/inmemory/types.js';
import type { ApolloQueryResult } from '@apollo/client/core';
type useCacheType = {
    cache: ApolloCache<object>;
    evict: (object: StoreObject | Reference) => boolean;
    extract: (optimistic?: boolean) => NormalizedCacheObject;
    identify: (object: StoreObject | Reference) => {
        id: string | undefined;
    };
    modify: (object: StoreObject | Reference, fields: Record<string, any>) => boolean;
    resetStore: () => Promise<ApolloQueryResult<any>[] | null>;
    clearStore: () => Promise<ApolloQueryResult<any>[] | null>;
};
/**
 * Apollo Client stores the results of your GraphQL queries in a local, normalized, in-memory cache.
 *
 * useCache is a custom hook that returns the cache object and some useful methods to interact with the cache.
 */
export declare const useCache: () => useCacheType;
export {};
//# sourceMappingURL=useCache.d.ts.map