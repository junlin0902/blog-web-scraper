"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useCache_exports = {};
__export(useCache_exports, {
  useCache: () => useCache
});
module.exports = __toCommonJS(useCache_exports);
var import_hooks = require("@apollo/client/react/hooks/hooks.cjs");
const useCache = () => {
  const client = (0, import_hooks.useApolloClient)();
  const cache = client.cache;
  const extract = (optimistic = false) => cache.extract(optimistic);
  const identify = (object) => {
    return { id: cache.identify(object) };
  };
  const modify = (object, fields) => {
    return cache.modify({ ...identify(object), fields });
  };
  const evict = (object) => {
    return cache.evict(identify(object));
  };
  const resetStore = () => {
    return client.resetStore();
  };
  const clearStore = () => {
    return client.clearStore();
  };
  return { cache, evict, extract, identify, modify, resetStore, clearStore };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useCache
});
