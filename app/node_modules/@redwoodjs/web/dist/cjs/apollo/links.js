"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var links_exports = {};
__export(links_exports, {
  createAuthApolloLink: () => createAuthApolloLink,
  createFinalLink: () => createFinalLink,
  createHttpLink: () => createHttpLink,
  createTokenLink: () => createTokenLink,
  createUpdateDataLink: () => createUpdateDataLink
});
module.exports = __toCommonJS(links_exports);
var import_core = require("@apollo/client/core/index.js");
var import_context = require("@apollo/client/link/context/index.js");
var import_core2 = require("@apollo/client/link/core/index.js");
var import_http = require("@apollo/client/link/http/index.js");
var import_printer = require("graphql/language/printer.js");
function createHttpLink(uri, httpLinkConfig, cookieHeader) {
  const headers = {};
  if (cookieHeader) {
    headers.cookie = cookieHeader;
  }
  return new import_http.HttpLink({
    uri,
    credentials: "include",
    ...httpLinkConfig,
    headers
  });
}
function enhanceError(operation, error) {
  const { operationName, query, variables } = operation;
  error.__RedwoodEnhancedError = {
    operationName,
    operationKind: query?.kind.toString(),
    variables,
    query: query && (0, import_printer.print)(query)
  };
  return error;
}
function createUpdateDataLink() {
  return new import_core2.ApolloLink((operation, forward) => {
    return new import_core.Observable((observer) => {
      forward(operation).subscribe({
        next(result) {
          if (result.errors) {
            result.errors.forEach((error) => {
              enhanceError(operation, error);
            });
          }
          observer.next(result);
        },
        error(error) {
          observer.error(enhanceError(operation, error));
        },
        complete: observer.complete.bind(observer)
      });
    });
  });
}
function createAuthApolloLink(authProviderType, headersFromFetchProvider) {
  return new import_core2.ApolloLink((operation, forward) => {
    const { token } = operation.getContext();
    const authHeaders = token ? {
      "auth-provider": authProviderType,
      authorization: `Bearer ${token}`
    } : {};
    if (!token) {
      delete headersFromFetchProvider?.["auth-provider"];
    }
    operation.setContext(() => ({
      headers: {
        ...operation.getContext().headers,
        ...headersFromFetchProvider,
        // Duped auth headers, because we may remove the `FetchConfigProvider` at a later date.
        ...authHeaders
      }
    }));
    return forward(operation);
  });
}
function createTokenLink(getToken) {
  return (0, import_context.setContext)(async () => {
    const token = await getToken();
    return { token };
  });
}
function createFinalLink({
  userConfiguredLink,
  defaultLinks
}) {
  if (userConfiguredLink) {
    if (typeof userConfiguredLink === "function") {
      return userConfiguredLink(defaultLinks);
    } else {
      return userConfiguredLink;
    }
  }
  return import_core2.ApolloLink.from(defaultLinks.map((l) => l.link));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAuthApolloLink,
  createFinalLink,
  createHttpLink,
  createTokenLink,
  createUpdateDataLink
});
