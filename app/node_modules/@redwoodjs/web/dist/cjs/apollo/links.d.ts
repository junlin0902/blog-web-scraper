import type { HttpOptions } from '@apollo/client';
import { ApolloLink } from '@apollo/client/link/core/index.js';
import { HttpLink } from '@apollo/client/link/http/index.js';
export declare function createHttpLink(uri: string, httpLinkConfig: HttpOptions | undefined, cookieHeader?: string | null): HttpLink;
export declare function createUpdateDataLink(): ApolloLink;
export declare function createAuthApolloLink(authProviderType: string, headersFromFetchProvider: {
    'auth-provider'?: string | undefined;
    authorization?: string | undefined;
} | undefined): ApolloLink;
export declare function createTokenLink(getToken: () => Promise<string | null>): ApolloLink;
export declare function createFinalLink({ userConfiguredLink, defaultLinks, }: {
    userConfiguredLink?: ApolloLink | RedwoodApolloLinkFactory;
    defaultLinks: RedwoodApolloLinks;
}): ApolloLink;
export type RedwoodApolloLink<Name extends RedwoodApolloLinkName, Link extends ApolloLink = ApolloLink> = {
    name: Name;
    link: Link;
};
export type RedwoodApolloLinks = (RedwoodApolloLink<'withToken'> | RedwoodApolloLink<'authMiddleware'> | RedwoodApolloLink<'enhanceErrorLink'> | RedwoodApolloLink<'httpLink', HttpLink>)[];
type DummyLink<T extends string> = {
    name: T;
};
type InferredLinkName<T> = T extends DummyLink<infer Name>[] ? Name : never;
export type RedwoodApolloLinkName = InferredLinkName<RedwoodApolloLinks>;
export type RedwoodApolloLinkFactory = (links: RedwoodApolloLinks) => ApolloLink;
export {};
//# sourceMappingURL=links.d.ts.map