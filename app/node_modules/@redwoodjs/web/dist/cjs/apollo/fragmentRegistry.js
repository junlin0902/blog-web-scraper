"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var fragmentRegistry_exports = {};
__export(fragmentRegistry_exports, {
  fragmentRegistry: () => fragmentRegistry,
  registerFragment: () => registerFragment,
  registerFragments: () => registerFragments
});
module.exports = __toCommonJS(fragmentRegistry_exports);
var apolloClient = __toESM(require("@apollo/client"), 1);
var import_cache = require("@apollo/client/cache/cache.cjs");
var import_utilities = require("@apollo/client/utilities/utilities.cjs");
const getTypenameFromFragment = (fragment) => {
  const [definition] = (0, import_utilities.getFragmentDefinitions)(fragment);
  return definition.typeCondition.name.value;
};
const useRegisteredFragmentHook = (fragment, id) => {
  const from = { __typename: getTypenameFromFragment(fragment), id };
  return apolloClient.useFragment({
    fragment,
    from
  });
};
const fragmentRegistry = (0, import_cache.createFragmentRegistry)();
const registerFragments = (fragments) => {
  return fragments.map(registerFragment);
};
const registerFragment = (fragment) => {
  fragmentRegistry.register(fragment);
  const typename = getTypenameFromFragment(fragment);
  const getCacheKey = (id) => {
    return { __typename: typename, id };
  };
  const useRegisteredFragment = (id) => {
    return useRegisteredFragmentHook(fragment, id);
  };
  return {
    fragment,
    typename,
    getCacheKey,
    useRegisteredFragment
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fragmentRegistry,
  registerFragment,
  registerFragments
});
