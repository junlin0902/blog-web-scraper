"use strict";
"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var suspense_exports = {};
__export(suspense_exports, {
  RedwoodApolloProvider: () => RedwoodApolloProvider
});
module.exports = __toCommonJS(suspense_exports);
var import_react = __toESM(require("react"), 1);
var import_core = require("@apollo/client/core/index.js");
var import_hooks = require("@apollo/client/react/hooks/index.js");
var import_client_react_streaming = require("@apollo/client-react-streaming");
var import_manual_transport = require("@apollo/client-react-streaming/manual-transport");
var import_auth = require("@redwoodjs/auth");
var import_ServerAuthProvider = require("@redwoodjs/auth/dist/AuthProvider/ServerAuthProvider.js");
var import_typeOverride = require("./typeOverride.js");
var import_FetchConfigProvider = require("../components/FetchConfigProvider.js");
var import_GraphQLHooksProvider = require("../components/GraphQLHooksProvider.js");
var import_ServerInject = require("../components/ServerInject.js");
var import_links = require("./links.js");
const WrappedApolloProvider = (0, import_client_react_streaming.WrapApolloProvider)(
  (0, import_manual_transport.buildManualDataTransport)({
    useInsertHtml() {
      return import_react.default.useContext(import_ServerInject.ServerHtmlContext);
    }
  })
);
const ApolloProviderWithFetchConfig = ({ config, children, logLevel, useAuth = import_auth.useNoAuth }) => {
  (0, import_core.setLogVerbosity)(logLevel);
  const { uri, headers } = (0, import_FetchConfigProvider.useFetchConfig)();
  const { getToken, type: authProviderType } = useAuth();
  const isDev = process.env.NODE_ENV === "development";
  const serverAuthState = (0, import_react.useContext)(import_ServerAuthProvider.ServerAuthContext);
  const getGraphqlUrl = () => {
    return typeof window === "undefined" ? RWJS_ENV.RWJS_EXP_SSR_GRAPHQL_ENDPOINT : uri;
  };
  const { httpLinkConfig, link: userPassedLink, ...otherConfig } = config ?? {};
  const redwoodApolloLinks = [
    // @MARK REMOVE: We will not need these for cookie based auth ~~~~
    { name: "withToken", link: (0, import_links.createTokenLink)(getToken) },
    {
      name: "authMiddleware",
      link: (0, import_links.createAuthApolloLink)(authProviderType, headers)
    },
    // ~~~~ @END REMOVE ~~~~
    isDev && { name: "enhanceErrorLink", link: (0, import_links.createUpdateDataLink)() },
    {
      name: "httpLink",
      link: (0, import_links.createHttpLink)(
        getGraphqlUrl(),
        httpLinkConfig,
        serverAuthState?.cookieHeader
      )
    }
  ].filter((link) => !!link);
  function makeClient() {
    return new import_client_react_streaming.ApolloClient({
      link: (0, import_links.createFinalLink)({
        userConfiguredLink: userPassedLink,
        defaultLinks: redwoodApolloLinks
      }),
      ...otherConfig
    });
  }
  return /* @__PURE__ */ import_react.default.createElement(WrappedApolloProvider, { makeClient }, children);
};
const RedwoodApolloProvider = ({
  graphQLClientConfig,
  useAuth = import_auth.useNoAuth,
  logLevel = "debug",
  children
}) => {
  const { cacheConfig, ...config } = graphQLClientConfig ?? {};
  const cache = new import_client_react_streaming.InMemoryCache(cacheConfig).restore(
    globalThis?.__REDWOOD__APOLLO_STATE ?? {}
  );
  return /* @__PURE__ */ import_react.default.createElement(import_FetchConfigProvider.FetchConfigProvider, { useAuth }, /* @__PURE__ */ import_react.default.createElement(
    ApolloProviderWithFetchConfig,
    {
      config: { cache, ...config },
      useAuth,
      logLevel
    },
    /* @__PURE__ */ import_react.default.createElement(
      import_GraphQLHooksProvider.GraphQLHooksProvider,
      {
        useQuery: import_hooks.useQuery,
        useMutation: import_hooks.useMutation,
        useSubscription: import_hooks.useSubscription,
        useSuspenseQuery: import_hooks.useSuspenseQuery,
        useBackgroundQuery: import_hooks.useBackgroundQuery,
        useReadQuery: import_hooks.useReadQuery
      },
      children
    )
  ));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RedwoodApolloProvider
});
