"use strict";
"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Metadata_exports = {};
__export(Metadata_exports, {
  Metadata: () => Metadata
});
module.exports = __toCommonJS(Metadata_exports);
var import_react = __toESM(require("react"), 1);
var helmetPkg = __toESM(require("react-helmet-async"), 1);
var import_PortalHead = __toESM(require("./PortalHead.js"), 1);
const { Helmet: HelmetHead } = helmetPkg;
const EXCLUDE_PROPS = ["charSet"];
const propToMetaTag = (parentKey, parentValue, options) => {
  if (Array.isArray(parentValue)) {
    return parentValue.flatMap((value) => {
      return propToMetaTag(parentKey, value, options);
    });
  } else if (typeof parentValue === "object") {
    return Object.entries(parentValue).filter(([_, v]) => v !== null).flatMap(([key, value]) => {
      return propToMetaTag(`${parentKey}:${key}`, value, { attr: "property" });
    });
  } else {
    const attributes = {
      [options["attr"]]: parentKey,
      content: parentValue
    };
    return /* @__PURE__ */ import_react.default.createElement("meta", { ...attributes });
  }
};
const Metadata = (props) => {
  const { children, ...metaProps } = props;
  let Head = HelmetHead;
  if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
    Head = import_PortalHead.default;
  }
  const tags = Object.entries(metaProps).filter(
    ([key, value]) => !EXCLUDE_PROPS.includes(key) && value !== null && (key !== "og" || value !== true)
  ).flatMap(([key, value]) => {
    return propToMetaTag(key, value, { attr: "name" });
  }).filter((tag) => !!tag);
  if (metaProps.title) {
    ;
    [metaProps.title].flat().reverse().map((title) => {
      tags.unshift(/* @__PURE__ */ import_react.default.createElement("title", null, title));
    });
  }
  if (metaProps.charSet) {
    tags.push(/* @__PURE__ */ import_react.default.createElement("meta", { charSet: metaProps.charSet }));
  }
  if (metaProps.og) {
    if (metaProps.title && !metaProps.og.title && metaProps.og.title !== null) {
      tags.push(/* @__PURE__ */ import_react.default.createElement("meta", { property: "og:title", content: metaProps.title }));
    }
    if (metaProps.description && !metaProps.og.description && metaProps.og.description !== null) {
      tags.push(
        /* @__PURE__ */ import_react.default.createElement("meta", { property: "og:description", content: metaProps.description })
      );
    }
    if (!metaProps.og.type && metaProps.og.type !== null) {
      tags.push(/* @__PURE__ */ import_react.default.createElement("meta", { property: "og:type", content: "website" }));
    }
  }
  return /* @__PURE__ */ import_react.default.createElement(Head, null, tags.map((tag, i) => import_react.default.cloneElement(tag, { key: i })), children);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Metadata
});
