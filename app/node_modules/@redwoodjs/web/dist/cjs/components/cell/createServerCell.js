"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createServerCell_exports = {};
__export(createServerCell_exports, {
  createServerCell: () => createServerCell
});
module.exports = __toCommonJS(createServerCell_exports);
var import_react = __toESM(require("react"), 1);
var import_isCellEmpty = require("./isCellEmpty.js");
function createServerCell(createCellProps) {
  const {
    data: dataFn,
    isEmpty = import_isCellEmpty.isDataEmpty,
    Loading,
    Failure,
    Empty,
    Success,
    displayName = "Cell"
  } = createCellProps;
  async function SuspendingSuccess(props) {
    const { children: _, ...variables } = props;
    const FailureComponent = ({ error }) => {
      if (!Failure) {
        throw error;
      }
      const queryResultWithRefetch = {
        refetch: (variables2) => {
          return dataFn(variables2);
        }
      };
      return /* @__PURE__ */ import_react.default.createElement(Failure, { error, queryResult: queryResultWithRefetch });
    };
    try {
      const data = await dataFn(variables);
      if (isEmpty(data, { isDataEmpty: import_isCellEmpty.isDataEmpty }) && Empty) {
        return /* @__PURE__ */ import_react.default.createElement(Empty, { ...props, ...data });
      }
      return /* @__PURE__ */ import_react.default.createElement(Success, { ...data, ...props });
    } catch (error) {
      return /* @__PURE__ */ import_react.default.createElement(FailureComponent, { error });
    }
  }
  SuspendingSuccess.displayName = displayName;
  return (props) => {
    const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
      if (!LoadingComponent) {
        return suspendingSuccessElement;
      }
      return /* @__PURE__ */ import_react.default.createElement(import_react.Suspense, { fallback: /* @__PURE__ */ import_react.default.createElement(LoadingComponent, { ...props }) }, suspendingSuccessElement);
    };
    return (
      // TODO(RSC): Do we always want a client side error boundary? If so, this
      // is where we'd add it
      // <CellErrorBoundary renderFallback={FailureComponent}>
      /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, wrapInSuspenseIfLoadingPresent(
        /* @__PURE__ */ import_react.default.createElement(SuspendingSuccess, { ...props }),
        Loading
      ))
    );
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createServerCell
});
