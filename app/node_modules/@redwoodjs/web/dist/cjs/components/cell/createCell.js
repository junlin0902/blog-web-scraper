"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createCell_exports = {};
__export(createCell_exports, {
  createCell: () => createCell
});
module.exports = __toCommonJS(createCell_exports);
var import_react = __toESM(require("react"), 1);
var import_fragmentRegistry = require("../../apollo/fragmentRegistry.js");
var import_graphql = require("../../graphql.js");
var import_GraphQLHooksProvider = require("../GraphQLHooksProvider.js");
var import_CellCacheContext = require("./CellCacheContext.js");
var import_createSuspendingCell = require("./createSuspendingCell.js");
var import_isCellEmpty = require("./isCellEmpty.js");
const createCell = RWJS_ENV.RWJS_EXP_STREAMING_SSR ? import_createSuspendingCell.createSuspendingCell : createNonSuspendingCell;
function createNonSuspendingCell({
  QUERY,
  beforeQuery = (props) => ({
    // By default, we assume that the props are the gql-variables.
    variables: props,
    /**
     * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
     * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
     *
     * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
     */
    fetchPolicy: "cache-and-network",
    notifyOnNetworkStatusChange: true
  }),
  afterQuery = (data) => ({ ...data }),
  isEmpty = import_isCellEmpty.isDataEmpty,
  Loading = () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Loading..."),
  Failure,
  Empty,
  Success,
  displayName = "Cell"
}) {
  function NamedCell(props) {
    const { children: _, ...variables } = props;
    const options = beforeQuery(variables);
    const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
    let {
      // eslint-disable-next-line prefer-const
      error,
      loading,
      data,
      ...queryResult
    } = (0, import_GraphQLHooksProvider.useQuery)(query, options);
    if (globalThis.__REDWOOD__PRERENDERING) {
      const { queryCache } = (0, import_CellCacheContext.useCellCacheContext)();
      const operationName = (0, import_graphql.getOperationName)(query);
      const transformedQuery = import_fragmentRegistry.fragmentRegistry.transform(query);
      let cacheKey;
      if (operationName) {
        cacheKey = operationName + "_" + JSON.stringify(variables);
      } else {
        const cellName = displayName === "Cell" ? "the cell" : displayName;
        throw new Error(
          `The gql query in ${cellName} is missing an operation name. Something like FindBlogPostQuery in \`query FindBlogPostQuery($id: Int!)\``
        );
      }
      const queryInfo = queryCache[cacheKey];
      if (queryInfo?.renderLoading) {
        loading = true;
      } else {
        if (queryInfo?.hasProcessed) {
          loading = false;
          data = queryInfo.data;
          queryResult = { variables };
        } else {
          queryCache[cacheKey] ||= {
            query: transformedQuery,
            variables: options.variables,
            hasProcessed: false
          };
        }
      }
    }
    if (error) {
      if (Failure) {
        return /* @__PURE__ */ import_react.default.createElement(
          Failure,
          {
            error,
            errorCode: (
              // Use the ad-hoc QueryResultWithErrorCode type to access the errorCode
              queryResult.errorCode ?? error.graphQLErrors?.[0]?.extensions?.["code"]
            ),
            ...props,
            updating: loading,
            queryResult
          }
        );
      } else {
        throw error;
      }
    } else if (data) {
      const afterQueryData = afterQuery(data);
      if (isEmpty(data, { isDataEmpty: import_isCellEmpty.isDataEmpty }) && Empty) {
        return /* @__PURE__ */ import_react.default.createElement(
          Empty,
          {
            ...props,
            ...afterQueryData,
            updating: loading,
            queryResult
          }
        );
      } else {
        return /* @__PURE__ */ import_react.default.createElement(
          Success,
          {
            ...props,
            ...afterQueryData,
            updating: loading,
            queryResult
          }
        );
      }
    } else if (loading) {
      return /* @__PURE__ */ import_react.default.createElement(Loading, { ...props, queryResult });
    } else {
      console.warn(
        `If you're using Apollo Client, check for its debug logs here in the console, which may help explain the error.`
      );
      throw new Error(
        "Cannot render Cell: reached an unexpected state where the query succeeded but `data` is `null`. If this happened in Storybook, your query could be missing fields; otherwise this is most likely a GraphQL caching bug. Note that adding an `id` field to all the fields on your query may fix the issue."
      );
    }
  }
  NamedCell.displayName = displayName;
  return (props) => {
    return /* @__PURE__ */ import_react.default.createElement(NamedCell, { ...props });
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createCell
});
