"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_react = __toESM(require("react"), 1);
var import_dev = require("@apollo/client/dev");
var import_react2 = require("@testing-library/react");
var import_vitest = require("vitest");
var import_GraphQLHooksProvider = require("../GraphQLHooksProvider.js");
var import_createSuspendingCell = require("./createSuspendingCell.js");
import_vitest.vi.mock("@apollo/client/react/hooks/hooks.cjs", () => {
  return {
    useApolloClient: import_vitest.vi.fn()
  };
});
(0, import_vitest.describe)("createSuspendingCell", () => {
  (0, import_vitest.beforeAll)(() => {
    globalThis.RWJS_ENV = {
      RWJS_EXP_STREAMING_SSR: true
    };
    (0, import_dev.loadDevMessages)();
    (0, import_dev.loadErrorMessages)();
  });
  const mockedUseBgQuery = () => {
    return ["mocked-query-ref", { refetch: import_vitest.vi.fn(), fetchMore: import_vitest.vi.fn() }];
  };
  const mockedQueryHook = () => ({ data: {} });
  (0, import_vitest.test)("Renders a static Success component", () => {
    const TestCell = (0, import_createSuspendingCell.createSuspendingCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!")
    });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(
        import_GraphQLHooksProvider.GraphQLHooksProvider,
        {
          useBackgroundQuery: mockedUseBgQuery,
          useReadQuery: mockedQueryHook
        },
        /* @__PURE__ */ import_react.default.createElement(TestCell, null)
      )
    );
    import_react2.screen.getByText(/^Great success!$/);
  });
  (0, import_vitest.test)("Renders Success with data", () => {
    const TestCell = (0, import_createSuspendingCell.createSuspendingCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: ({ answer }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("dl", null, /* @__PURE__ */ import_react.default.createElement("dt", null, "What's the meaning of life?"), /* @__PURE__ */ import_react.default.createElement("dd", null, answer)))
    });
    const myUseQueryHook = () => {
      return { data: { answer: 42 } };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(
        import_GraphQLHooksProvider.GraphQLHooksProvider,
        {
          useReadQuery: myUseQueryHook,
          useBackgroundQuery: mockedUseBgQuery
        },
        /* @__PURE__ */ import_react.default.createElement(TestCell, null)
      )
    );
    import_react2.screen.getByText(/^What's the meaning of life\?$/);
    import_react2.screen.getByText(/^42$/);
  });
  (0, import_vitest.test)("Renders Success if any of the fields have data (i.e. not just the first)", () => {
    const TestCell = (0, import_createSuspendingCell.createSuspendingCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { users { name } posts { title } }",
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "No users or posts"),
      Success: ({ users, posts }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("div", null, users.length > 0 ? /* @__PURE__ */ import_react.default.createElement("ul", null, users.map(({ name }) => /* @__PURE__ */ import_react.default.createElement("li", { key: name }, name))) : "no users"), /* @__PURE__ */ import_react.default.createElement("div", null, posts.length > 0 ? /* @__PURE__ */ import_react.default.createElement("ul", null, posts.map(({ title }) => /* @__PURE__ */ import_react.default.createElement("li", { key: title }, title))) : "no posts"))
    });
    const myReadQueryHook = () => {
      return {
        data: {
          users: [],
          posts: [{ title: "bazinga" }, { title: "kittens" }]
        }
      };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(
        import_GraphQLHooksProvider.GraphQLHooksProvider,
        {
          useReadQuery: myReadQueryHook,
          useBackgroundQuery: mockedUseBgQuery
        },
        /* @__PURE__ */ import_react.default.createElement(TestCell, null)
      )
    );
    import_react2.screen.getByText(/bazinga/);
    import_react2.screen.getByText(/kittens/);
  });
});
