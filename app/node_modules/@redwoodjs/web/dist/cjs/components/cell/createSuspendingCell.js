"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createSuspendingCell_exports = {};
__export(createSuspendingCell_exports, {
  createSuspendingCell: () => createSuspendingCell
});
module.exports = __toCommonJS(createSuspendingCell_exports);
var import_react = __toESM(require("react"), 1);
var import_hooks = require("@apollo/client/react/hooks/hooks.cjs");
var import_GraphQLHooksProvider = require("../GraphQLHooksProvider.js");
var import_CellErrorBoundary = require("./CellErrorBoundary.js");
var import_isCellEmpty = require("./isCellEmpty.js");
function createSuspendingCell(createCellProps) {
  const {
    QUERY,
    beforeQuery = (props) => ({
      // By default, we assume that the props are the gql-variables.
      variables: props,
      /**
       * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
       * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
       *
       * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
       */
      fetchPolicy: "cache-and-network",
      notifyOnNetworkStatusChange: true
    }),
    afterQuery = (data) => ({ ...data }),
    isEmpty = import_isCellEmpty.isDataEmpty,
    Loading,
    Failure,
    Empty,
    Success,
    displayName = "Cell"
  } = createCellProps;
  function SuspendingSuccess(props) {
    const { queryRef, suspenseQueryResult, userProps } = props;
    const { data, networkStatus } = (0, import_GraphQLHooksProvider.useReadQuery)(queryRef);
    const afterQueryData = afterQuery(data);
    const queryResultWithNetworkStatus = {
      ...suspenseQueryResult,
      networkStatus
    };
    if (isEmpty(data, { isDataEmpty: import_isCellEmpty.isDataEmpty }) && Empty) {
      return /* @__PURE__ */ import_react.default.createElement(
        Empty,
        {
          ...userProps,
          ...afterQueryData,
          queryResult: queryResultWithNetworkStatus
        }
      );
    }
    return /* @__PURE__ */ import_react.default.createElement(
      Success,
      {
        ...afterQueryData,
        ...userProps,
        queryResult: queryResultWithNetworkStatus
      }
    );
  }
  SuspendingSuccess.displayName = displayName;
  return (props) => {
    const { children: _, ...variables } = props;
    const options = beforeQuery(variables);
    const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
    const [queryRef, other] = (0, import_GraphQLHooksProvider.useBackgroundQuery)(query, options);
    const client = (0, import_hooks.useApolloClient)();
    const suspenseQueryResult = {
      client,
      ...other,
      called: !!queryRef
    };
    const FailureComponent = ({ error, resetErrorBoundary }) => {
      if (!Failure) {
        if (error) {
          throw error;
        }
        throw new Error("Unreachable code: FailureComponent without a Failure");
      }
      const queryResultWithErrorReset = {
        ...suspenseQueryResult,
        refetch: (variables2) => {
          resetErrorBoundary();
          return suspenseQueryResult.refetch?.(variables2);
        }
      };
      return /* @__PURE__ */ import_react.default.createElement(
        Failure,
        {
          error,
          errorCode: error?.graphQLErrors?.[0]?.extensions?.["code"],
          queryResult: queryResultWithErrorReset
        }
      );
    };
    const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
      if (!LoadingComponent) {
        return suspendingSuccessElement;
      }
      return /* @__PURE__ */ import_react.default.createElement(
        import_react.Suspense,
        {
          fallback: /* @__PURE__ */ import_react.default.createElement(LoadingComponent, { ...props, queryResult: suspenseQueryResult })
        },
        suspendingSuccessElement
      );
    };
    return /* @__PURE__ */ import_react.default.createElement(import_CellErrorBoundary.CellErrorBoundary, { renderFallback: FailureComponent }, wrapInSuspenseIfLoadingPresent(
      /* @__PURE__ */ import_react.default.createElement(
        SuspendingSuccess,
        {
          userProps: props,
          queryRef,
          suspenseQueryResult
        }
      ),
      Loading
    ));
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSuspendingCell
});
