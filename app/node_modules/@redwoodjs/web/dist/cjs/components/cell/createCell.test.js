"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_react = __toESM(require("react"), 1);
var import_react2 = require("@testing-library/react");
var import_vitest = require("vitest");
var import_GraphQLHooksProvider = require("../GraphQLHooksProvider.js");
var import_createCell = require("./createCell.js");
(0, import_vitest.describe)("createCell", () => {
  (0, import_vitest.beforeAll)(() => {
    globalThis.RWJS_ENV = {
      RWJS_EXP_STREAMING_SSR: false
    };
  });
  (0, import_vitest.test)("Renders a static Success component", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!")
    });
    const myUseQueryHook = () => ({ data: {} });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Great success!$/);
  });
  (0, import_vitest.test)("Renders Success with data", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: ({ answer }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("dl", null, /* @__PURE__ */ import_react.default.createElement("dt", null, "What's the meaning of life?"), /* @__PURE__ */ import_react.default.createElement("dd", null, answer)))
    });
    const myUseQueryHook = () => {
      return { data: { answer: 42 } };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^What's the meaning of life\?$/);
    import_react2.screen.getByText(/^42$/);
  });
  (0, import_vitest.test)("Renders Success if any of the fields have data (i.e. not just the first)", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { users { name } posts { title } }",
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "No users or posts"),
      Success: ({ users, posts }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("div", null, users.length > 0 ? /* @__PURE__ */ import_react.default.createElement("ul", null, users.map(({ name }) => /* @__PURE__ */ import_react.default.createElement("li", { key: name }, name))) : "no users"), /* @__PURE__ */ import_react.default.createElement("div", null, posts.length > 0 ? /* @__PURE__ */ import_react.default.createElement("ul", null, posts.map(({ title }) => /* @__PURE__ */ import_react.default.createElement("li", { key: title }, title))) : "no posts"))
    });
    const myUseQueryHook = () => {
      return {
        data: {
          users: [],
          posts: [{ title: "bazinga" }, { title: "kittens" }]
        }
      };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/bazinga/);
    import_react2.screen.getByText(/kittens/);
  });
  (0, import_vitest.test)("Renders default Loading when there is no data", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!")
    });
    const myUseQueryHook = () => ({ loading: true });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Loading...$/);
  });
  (0, import_vitest.test)("Renders custom Loading when there is no data", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({ loading: true });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Fetching answer...$/);
  });
  (0, import_vitest.test)("Renders Success even when `loading` is true if there is data", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({ loading: true, data: {} });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Great success!$/);
  });
  (0, import_vitest.test)("Renders Empty if available, and data field is null", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "No one knows")
    });
    const myUseQueryHook = () => ({ loading: true, data: { answer: null } });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^No one knows$/);
  });
  (0, import_vitest.test)("Renders Empty if available, and data field is an empty array", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answers }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "No one knows")
    });
    const myUseQueryHook = () => ({ loading: true, data: { answers: [] } });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^No one knows$/);
  });
  (0, import_vitest.test)("Renders Success even if data is empty when no Empty is available", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Empty success")
    });
    const myUseQueryHook = () => ({ loading: true, data: { answer: null } });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Empty success$/);
  });
  (0, import_vitest.test)("Allows passing children to Success", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: ({ children }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Look at my beautiful ", children)
    });
    const myUseQueryHook = () => ({ data: {} });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null, /* @__PURE__ */ import_react.default.createElement("div", null, "\u{1F986}")))
    );
    import_react2.screen.getByText(/^Look at my beautiful$/);
    import_react2.screen.getByText(/^🦆$/);
  });
  (0, import_vitest.test)("Cell props are passed to the query as variables", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: `query Greet($name: String!) {
        greet(name: $name) {
          greeting
        }
      }`,
      Success: ({ greeting }) => /* @__PURE__ */ import_react.default.createElement("p", null, greeting)
    });
    const myUseQueryHook = (_query, options) => {
      return { data: { greeting: `Hello ${options.variables.name}!` } };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, { name: "Bob" }))
    );
    import_react2.screen.getByText(/^Hello Bob!$/);
  });
  (0, import_vitest.test)("Allows QUERY to be a function", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: ({ variables }) => {
        if (variables.character === "BEAST") {
          return "query BeastQuery { name }";
        }
        return "query HeroQuery { name }";
      },
      Success: ({ name }) => /* @__PURE__ */ import_react.default.createElement("p", null, "Call me ", name)
    });
    const myUseQueryHook = (query) => {
      if (query.includes("BeastQuery")) {
        return { data: { name: "Boogeyman" } };
      } else if (query.includes("HeroQuery")) {
        return { data: { name: "Lara Croft" } };
      }
      return { data: { name: "John Doe" } };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, { character: "BEAST" }), /* @__PURE__ */ import_react.default.createElement(TestCell, { character: "HERO" }))
    );
    import_react2.screen.getByText(/^Call me Boogeyman$/);
    import_react2.screen.getByText(/^Call me Lara Croft$/);
  });
  (0, import_vitest.test)("Renders Failure when there is an error", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Failure: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Sad face :("),
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({ error: true });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Sad face :\($/);
  });
  (0, import_vitest.test)("Passes error to Failure component", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Failure: ({ error }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, JSON.stringify(error)),
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({ error: { msg: "System malfunction" } });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^{"msg":"System malfunction"}$/);
  });
  (0, import_vitest.test)("Passes error and errorCode to Failure component", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Failure: ({ error, errorCode }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, JSON.stringify(error), ",code:", errorCode),
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({
      error: { msg: "System malfunction" },
      errorCode: "SIMON_SAYS_NO"
    });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^{"msg":"System malfunction"},code:SIMON_SAYS_NO$/);
  });
  (0, import_vitest.test)("Passes children to Failure", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Failure: ({ children }) => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "I'm a failure ", children)
    });
    const myUseQueryHook = () => ({ error: {} });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null, /* @__PURE__ */ import_react.default.createElement("div", null, "Child")))
    );
    import_react2.screen.getByText(/^I'm a failure$/);
    import_react2.screen.getByText(/^Child$/);
  });
  (0, import_vitest.test)("Throws an error when there is an error if no Failure component exists", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Loading: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Fetching answer...")
    });
    const myUseQueryHook = () => ({ error: { message: "200 GraphQL" } });
    const err = console.error;
    console.error = import_vitest.vi.fn();
    let error;
    try {
      (0, import_react2.render)(
        /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
      );
    } catch (e) {
      error = e;
    }
    (0, import_vitest.expect)(error.message).toEqual("200 GraphQL");
    console.error = err;
  });
  (0, import_vitest.test)("Allows overriding of default isDataEmpty", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Got nothing"),
      isEmpty: () => true
    });
    const myUseQueryHook = () => ({
      data: {},
      loading: false
    });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Got nothing$/);
  });
  (0, import_vitest.test)("Allows mixing isDataEmpty with custom logic", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Great success!"),
      Empty: () => /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, "Got nothing"),
      isEmpty: (data, { isDataEmpty }) => isDataEmpty(data) || data.answer === "0"
    });
    const myUseQueryHook = () => ({
      data: { answer: "0" },
      loading: false
    });
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Got nothing$/);
  });
  (0, import_vitest.test)("Allows overriding variables in beforeQuery", () => {
    const TestCell = (0, import_createCell.createCell)({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: `query Greet($name: String!) {
        greet(name: $name) {
          greeting
        }
      }`,
      Success: ({ greeting }) => /* @__PURE__ */ import_react.default.createElement("p", null, greeting),
      beforeQuery: () => ({
        variables: {
          name: "Bob"
        }
      })
    });
    const myUseQueryHook = (_query, options) => {
      return { data: { greeting: `Hello ${options.variables.name}!` } };
    };
    (0, import_react2.render)(
      /* @__PURE__ */ import_react.default.createElement(import_GraphQLHooksProvider.GraphQLHooksProvider, { useQuery: myUseQueryHook, useMutation: null }, /* @__PURE__ */ import_react.default.createElement(TestCell, null))
    );
    import_react2.screen.getByText(/^Hello Bob!$/);
  });
});
