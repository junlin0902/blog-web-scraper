"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ServerInject_exports = {};
__export(ServerInject_exports, {
  ServerHtmlContext: () => ServerHtmlContext,
  ServerHtmlProvider: () => ServerHtmlProvider,
  ServerInjectedHtml: () => ServerInjectedHtml,
  createInjector: () => createInjector,
  useServerInsertedHTML: () => useServerInsertedHTML
});
module.exports = __toCommonJS(ServerInject_exports);
var import_react = __toESM(require("react"), 1);
const ServerHtmlContext = (0, import_react.createContext)(() => {
});
const createInjector = () => {
  const injectionState = /* @__PURE__ */ new Set([]);
  const injectToPage = (renderCallback) => {
    injectionState.add(renderCallback);
  };
  return { injectToPage, injectionState };
};
const ServerHtmlProvider = ServerHtmlContext.Provider;
const ServerInjectedHtml = ({
  injectionState
}) => {
  const serverInsertedHtml = [];
  for (const callback of injectionState) {
    serverInsertedHtml.push(callback());
    injectionState.delete(callback);
  }
  const fragmentId = (0, import_react.useId)();
  return serverInsertedHtml.map((html, i) => {
    return /* @__PURE__ */ import_react.default.createElement(import_react.Fragment, { key: `rw-server-inserted-${fragmentId}-${i}` }, html);
  });
};
function useServerInsertedHTML(callback) {
  const addInsertedServerHTMLCallback = (0, import_react.useContext)(ServerHtmlContext);
  if (addInsertedServerHTMLCallback) {
    addInsertedServerHTMLCallback(callback);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ServerHtmlContext,
  ServerHtmlProvider,
  ServerInjectedHtml,
  createInjector,
  useServerInsertedHTML
});
