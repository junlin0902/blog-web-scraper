"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GraphQLHooksProvider_exports = {};
__export(GraphQLHooksProvider_exports, {
  GraphQLHooksContext: () => GraphQLHooksContext,
  GraphQLHooksProvider: () => GraphQLHooksProvider,
  useBackgroundQuery: () => useBackgroundQuery,
  useMutation: () => useMutation,
  useQuery: () => useQuery,
  useReadQuery: () => useReadQuery,
  useSubscription: () => useSubscription,
  useSuspenseQuery: () => useSuspenseQuery
});
module.exports = __toCommonJS(GraphQLHooksProvider_exports);
var import_react = __toESM(require("react"), 1);
const GraphQLHooksContext = import_react.default.createContext({
  useQuery: () => {
    throw new Error(
      "You must register a useQuery hook via the `GraphQLHooksProvider`"
    );
  },
  useMutation: () => {
    throw new Error(
      "You must register a useMutation hook via the `GraphQLHooksProvider`"
    );
  },
  useSubscription: () => {
    throw new Error(
      "You must register a useSubscription hook via the `GraphQLHooksProvider`"
    );
  },
  useSuspenseQuery: () => {
    throw new Error(
      "You must register a useSuspenseQuery hook via the `GraphQLHooksProvider`."
    );
  },
  //  These are apollo specific hooks!
  useBackgroundQuery: () => {
    throw new Error(
      "You must register a useBackgroundQuery hook via the `GraphQLHooksProvider`."
    );
  },
  useReadQuery: () => {
    throw new Error(
      "You must register a useReadQuery hook via the `GraphQLHooksProvider`."
    );
  }
});
const GraphQLHooksProvider = ({
  useQuery: useQuery2,
  useMutation: useMutation2,
  useSubscription: useSubscription2,
  useSuspenseQuery: useSuspenseQuery2,
  useBackgroundQuery: useBackgroundQuery2,
  useReadQuery: useReadQuery2,
  children
}) => {
  return /* @__PURE__ */ import_react.default.createElement(
    GraphQLHooksContext.Provider,
    {
      value: {
        useQuery: useQuery2,
        useMutation: useMutation2,
        useSubscription: useSubscription2,
        useSuspenseQuery: useSuspenseQuery2,
        useBackgroundQuery: useBackgroundQuery2,
        useReadQuery: useReadQuery2
      }
    },
    children
  );
};
function useQuery(query, options) {
  return import_react.default.useContext(GraphQLHooksContext).useQuery(
    query,
    options
  );
}
function useMutation(mutation, options) {
  return import_react.default.useContext(GraphQLHooksContext).useMutation(
    mutation,
    options
  );
}
function useSubscription(query, options) {
  return import_react.default.useContext(GraphQLHooksContext).useSubscription(query, options);
}
function useSuspenseQuery(query, options) {
  return import_react.default.useContext(GraphQLHooksContext).useSuspenseQuery(query, options);
}
const useBackgroundQuery = (...args) => {
  return import_react.default.useContext(GraphQLHooksContext).useBackgroundQuery(
    ...args
  );
};
const useReadQuery = (...args) => {
  return import_react.default.useContext(GraphQLHooksContext).useReadQuery(...args);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GraphQLHooksContext,
  GraphQLHooksProvider,
  useBackgroundQuery,
  useMutation,
  useQuery,
  useReadQuery,
  useSubscription,
  useSuspenseQuery
});
