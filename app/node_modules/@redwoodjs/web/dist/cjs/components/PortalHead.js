"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PortalHead_exports = {};
__export(PortalHead_exports, {
  default: () => PortalHead_default
});
module.exports = __toCommonJS(PortalHead_exports);
var import_react = __toESM(require("react"), 1);
var import_react_dom = require("react-dom");
var import_ServerInject = require("./ServerInject.js");
function addDataAttributeMarker(children, marker = "data-rwjs-head") {
  return import_react.default.Children.toArray(children).map((child, i) => {
    return import_react.default.cloneElement(child, {
      [marker]: true,
      key: `${marker}-` + i
    });
  });
}
const PortalHead = ({ children }) => {
  const isServerRendering = typeof window === "undefined";
  (0, import_ServerInject.useServerInsertedHTML)(() => {
    return addDataAttributeMarker(children);
  });
  const shouldPortal = import_react.default.useRef(
    isServerRendering ? false : document.readyState === "complete"
  );
  if (isServerRendering) {
    return null;
  } else {
    return shouldPortal.current ? (0, import_react_dom.createPortal)(children, document.head) : null;
  }
};
var PortalHead_default = PortalHead;
