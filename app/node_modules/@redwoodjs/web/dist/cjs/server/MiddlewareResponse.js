"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MiddlewareResponse_exports = {};
__export(MiddlewareResponse_exports, {
  MiddlewareResponse: () => MiddlewareResponse,
  MiddlewareShortCircuit: () => MiddlewareShortCircuit
});
module.exports = __toCommonJS(MiddlewareResponse_exports);
var import_fetch = require("@whatwg-node/fetch");
var import_cookie = __toESM(require("cookie"), 1);
var import_cookie_jar = require("@redwoodjs/cookie-jar");
class MiddlewareShortCircuit extends Error {
  mwResponse;
  constructor(body, responseInit) {
    super("Short circuit. Skipping all middleware, and returning early");
    this.name = "MiddlewareShortCircuit";
    this.mwResponse = new MiddlewareResponse(body, responseInit);
  }
}
class MiddlewareResponse {
  cookies = new import_cookie_jar.CookieJar();
  headers = new Headers();
  body;
  status = 200;
  statusText;
  constructor(body, init) {
    this.body = body;
    this.headers = new Headers(init?.headers);
    this.status = init?.status || 200;
    this.statusText = init?.statusText;
  }
  static fromResponse = (res) => {
    return new MiddlewareResponse(res.body, {
      headers: res.headers,
      status: res.status,
      statusText: res.statusText
    });
  };
  /**
   *
   * Short circuit the middleware chain and return early.
   * This will skip all the remaining middleware and return the response immediately.
   *
   * @returns MiddlewareResponse
   */
  shortCircuit = (body, init) => {
    for (const [ckName, ckParams] of this.cookies) {
      this.headers.append(
        "Set-Cookie",
        import_cookie.default.serialize(ckName, ckParams.value, ckParams.options)
      );
    }
    throw new MiddlewareShortCircuit(
      body || this.body,
      init || {
        headers: this.headers,
        status: this.status,
        statusText: this.statusText
      }
    );
  };
  /**
   * Skip the current middleware and move to the next one.
   * Careful: It creates a new Response, so any middleware that modifies the
   * response before the current one will be lost.
   * @returns MiddlewareResponse
   */
  static next = () => {
    return new MiddlewareResponse();
  };
  /**
   * Return a MiddlewareResponse object that will redirect the client to the
   * specified location
   *
   * @returns MiddlewareResponse
   */
  static redirect = (location, type = "temporary") => {
    const res = new MiddlewareResponse();
    res.headers.set("Location", location);
    res.status = type === "permanent" ? 301 : 302;
    return res;
  };
  isRedirect = () => {
    return this.status === 301 || this.status === 302;
  };
  toResponse = () => {
    for (const [ckName, ckParams] of this.cookies) {
      this.headers.append(
        "Set-Cookie",
        import_cookie.default.serialize(ckName, ckParams.value, ckParams.options)
      );
    }
    return new import_fetch.Response(this.body, {
      headers: this.headers,
      status: this.status,
      statusText: this.statusText
    });
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MiddlewareResponse,
  MiddlewareShortCircuit
});
