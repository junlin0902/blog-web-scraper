"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MiddlewareRequest_exports = {};
__export(MiddlewareRequest_exports, {
  MiddlewareRequest: () => MiddlewareRequest,
  createMiddlewareRequest: () => createMiddlewareRequest
});
module.exports = __toCommonJS(MiddlewareRequest_exports);
var import_fetch = require("@whatwg-node/fetch");
var import_AuthProviderState = require("@redwoodjs/auth/dist/AuthProvider/AuthProviderState.js");
var import_cookie_jar = require("@redwoodjs/cookie-jar");
class AuthStateJar {
  _data;
  _initialState;
  constructor(initialState) {
    this._data = initialState;
    this._initialState = initialState;
  }
  /**
   * Always returns the server auth state, even if its set to null,
   * it'll fall back to the initial state (created when mwReq is initialized)
   */
  get() {
    return this._data || this._initialState;
  }
  set(value) {
    this._data = value;
  }
  clear() {
    this._data = null;
  }
}
class MiddlewareRequest extends import_fetch.Request {
  cookies;
  serverAuthState;
  constructor(input) {
    super(input);
    const defaultServerAuthState = {
      ...import_AuthProviderState.middlewareDefaultAuthProviderState,
      cookieHeader: input.headers.get("Cookie"),
      roles: []
    };
    this.cookies = new import_cookie_jar.CookieJar(input.headers.get("Cookie"));
    this.serverAuthState = new AuthStateJar(defaultServerAuthState);
  }
}
const createMiddlewareRequest = (req) => {
  const middlewareRequest = new MiddlewareRequest(req);
  return middlewareRequest;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MiddlewareRequest,
  createMiddlewareRequest
});
