import React, { Fragment, createContext, useContext, useId } from "react";
const ServerHtmlContext = createContext(() => {
});
const createInjector = () => {
  const injectionState = /* @__PURE__ */ new Set([]);
  const injectToPage = (renderCallback) => {
    injectionState.add(renderCallback);
  };
  return { injectToPage, injectionState };
};
const ServerHtmlProvider = ServerHtmlContext.Provider;
const ServerInjectedHtml = ({
  injectionState
}) => {
  const serverInsertedHtml = [];
  for (const callback of injectionState) {
    serverInsertedHtml.push(callback());
    injectionState.delete(callback);
  }
  const fragmentId = useId();
  return serverInsertedHtml.map((html, i) => {
    return /* @__PURE__ */ React.createElement(Fragment, { key: `rw-server-inserted-${fragmentId}-${i}` }, html);
  });
};
function useServerInsertedHTML(callback) {
  const addInsertedServerHTMLCallback = useContext(ServerHtmlContext);
  if (addInsertedServerHTMLCallback) {
    addInsertedServerHTMLCallback(callback);
  }
}
export {
  ServerHtmlContext,
  ServerHtmlProvider,
  ServerInjectedHtml,
  createInjector,
  useServerInsertedHTML
};
