import React, { Suspense } from "react";
import { useApolloClient } from "@apollo/client/react/hooks/hooks.cjs";
import { useBackgroundQuery, useReadQuery } from "../GraphQLHooksProvider.js";
import { CellErrorBoundary } from "./CellErrorBoundary.js";
import { isDataEmpty } from "./isCellEmpty.js";
function createSuspendingCell(createCellProps) {
  const {
    QUERY,
    beforeQuery = (props) => ({
      // By default, we assume that the props are the gql-variables.
      variables: props,
      /**
       * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
       * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
       *
       * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
       */
      fetchPolicy: "cache-and-network",
      notifyOnNetworkStatusChange: true
    }),
    afterQuery = (data) => ({ ...data }),
    isEmpty = isDataEmpty,
    Loading,
    Failure,
    Empty,
    Success,
    displayName = "Cell"
  } = createCellProps;
  function SuspendingSuccess(props) {
    const { queryRef, suspenseQueryResult, userProps } = props;
    const { data, networkStatus } = useReadQuery(queryRef);
    const afterQueryData = afterQuery(data);
    const queryResultWithNetworkStatus = {
      ...suspenseQueryResult,
      networkStatus
    };
    if (isEmpty(data, { isDataEmpty }) && Empty) {
      return /* @__PURE__ */ React.createElement(
        Empty,
        {
          ...userProps,
          ...afterQueryData,
          queryResult: queryResultWithNetworkStatus
        }
      );
    }
    return /* @__PURE__ */ React.createElement(
      Success,
      {
        ...afterQueryData,
        ...userProps,
        queryResult: queryResultWithNetworkStatus
      }
    );
  }
  SuspendingSuccess.displayName = displayName;
  return (props) => {
    const { children: _, ...variables } = props;
    const options = beforeQuery(variables);
    const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
    const [queryRef, other] = useBackgroundQuery(query, options);
    const client = useApolloClient();
    const suspenseQueryResult = {
      client,
      ...other,
      called: !!queryRef
    };
    const FailureComponent = ({ error, resetErrorBoundary }) => {
      if (!Failure) {
        if (error) {
          throw error;
        }
        throw new Error("Unreachable code: FailureComponent without a Failure");
      }
      const queryResultWithErrorReset = {
        ...suspenseQueryResult,
        refetch: (variables2) => {
          resetErrorBoundary();
          return suspenseQueryResult.refetch?.(variables2);
        }
      };
      return /* @__PURE__ */ React.createElement(
        Failure,
        {
          error,
          errorCode: error?.graphQLErrors?.[0]?.extensions?.["code"],
          queryResult: queryResultWithErrorReset
        }
      );
    };
    const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
      if (!LoadingComponent) {
        return suspendingSuccessElement;
      }
      return /* @__PURE__ */ React.createElement(
        Suspense,
        {
          fallback: /* @__PURE__ */ React.createElement(LoadingComponent, { ...props, queryResult: suspenseQueryResult })
        },
        suspendingSuccessElement
      );
    };
    return /* @__PURE__ */ React.createElement(CellErrorBoundary, { renderFallback: FailureComponent }, wrapInSuspenseIfLoadingPresent(
      /* @__PURE__ */ React.createElement(
        SuspendingSuccess,
        {
          userProps: props,
          queryRef,
          suspenseQueryResult
        }
      ),
      Loading
    ));
  };
}
export {
  createSuspendingCell
};
