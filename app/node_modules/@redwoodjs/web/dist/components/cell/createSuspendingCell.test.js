import React from "react";
import { loadErrorMessages, loadDevMessages } from "@apollo/client/dev";
import { render, screen } from "@testing-library/react";
import { vi, describe, beforeAll, test } from "vitest";
import { GraphQLHooksProvider } from "../GraphQLHooksProvider.js";
import { createSuspendingCell } from "./createSuspendingCell.js";
vi.mock("@apollo/client/react/hooks/hooks.cjs", () => {
  return {
    useApolloClient: vi.fn()
  };
});
describe("createSuspendingCell", () => {
  beforeAll(() => {
    globalThis.RWJS_ENV = {
      RWJS_EXP_STREAMING_SSR: true
    };
    loadDevMessages();
    loadErrorMessages();
  });
  const mockedUseBgQuery = () => {
    return ["mocked-query-ref", { refetch: vi.fn(), fetchMore: vi.fn() }];
  };
  const mockedQueryHook = () => ({ data: {} });
  test("Renders a static Success component", () => {
    const TestCell = createSuspendingCell({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: () => /* @__PURE__ */ React.createElement(React.Fragment, null, "Great success!")
    });
    render(
      /* @__PURE__ */ React.createElement(
        GraphQLHooksProvider,
        {
          useBackgroundQuery: mockedUseBgQuery,
          useReadQuery: mockedQueryHook
        },
        /* @__PURE__ */ React.createElement(TestCell, null)
      )
    );
    screen.getByText(/^Great success!$/);
  });
  test("Renders Success with data", () => {
    const TestCell = createSuspendingCell({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { answer }",
      Success: ({ answer }) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("dl", null, /* @__PURE__ */ React.createElement("dt", null, "What's the meaning of life?"), /* @__PURE__ */ React.createElement("dd", null, answer)))
    });
    const myUseQueryHook = () => {
      return { data: { answer: 42 } };
    };
    render(
      /* @__PURE__ */ React.createElement(
        GraphQLHooksProvider,
        {
          useReadQuery: myUseQueryHook,
          useBackgroundQuery: mockedUseBgQuery
        },
        /* @__PURE__ */ React.createElement(TestCell, null)
      )
    );
    screen.getByText(/^What's the meaning of life\?$/);
    screen.getByText(/^42$/);
  });
  test("Renders Success if any of the fields have data (i.e. not just the first)", () => {
    const TestCell = createSuspendingCell({
      // @ts-expect-error - Purposefully using a plain string here.
      QUERY: "query TestQuery { users { name } posts { title } }",
      Empty: () => /* @__PURE__ */ React.createElement(React.Fragment, null, "No users or posts"),
      Success: ({ users, posts }) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", null, users.length > 0 ? /* @__PURE__ */ React.createElement("ul", null, users.map(({ name }) => /* @__PURE__ */ React.createElement("li", { key: name }, name))) : "no users"), /* @__PURE__ */ React.createElement("div", null, posts.length > 0 ? /* @__PURE__ */ React.createElement("ul", null, posts.map(({ title }) => /* @__PURE__ */ React.createElement("li", { key: title }, title))) : "no posts"))
    });
    const myReadQueryHook = () => {
      return {
        data: {
          users: [],
          posts: [{ title: "bazinga" }, { title: "kittens" }]
        }
      };
    };
    render(
      /* @__PURE__ */ React.createElement(
        GraphQLHooksProvider,
        {
          useReadQuery: myReadQueryHook,
          useBackgroundQuery: mockedUseBgQuery
        },
        /* @__PURE__ */ React.createElement(TestCell, null)
      )
    );
    screen.getByText(/bazinga/);
    screen.getByText(/kittens/);
  });
});
