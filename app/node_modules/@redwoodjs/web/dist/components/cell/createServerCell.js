import React, { Suspense } from "react";
import { isDataEmpty } from "./isCellEmpty.js";
function createServerCell(createCellProps) {
  const {
    data: dataFn,
    isEmpty = isDataEmpty,
    Loading,
    Failure,
    Empty,
    Success,
    displayName = "Cell"
  } = createCellProps;
  async function SuspendingSuccess(props) {
    const { children: _, ...variables } = props;
    const FailureComponent = ({ error }) => {
      if (!Failure) {
        throw error;
      }
      const queryResultWithRefetch = {
        refetch: (variables2) => {
          return dataFn(variables2);
        }
      };
      return /* @__PURE__ */ React.createElement(Failure, { error, queryResult: queryResultWithRefetch });
    };
    try {
      const data = await dataFn(variables);
      if (isEmpty(data, { isDataEmpty }) && Empty) {
        return /* @__PURE__ */ React.createElement(Empty, { ...props, ...data });
      }
      return /* @__PURE__ */ React.createElement(Success, { ...data, ...props });
    } catch (error) {
      return /* @__PURE__ */ React.createElement(FailureComponent, { error });
    }
  }
  SuspendingSuccess.displayName = displayName;
  return (props) => {
    const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
      if (!LoadingComponent) {
        return suspendingSuccessElement;
      }
      return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(LoadingComponent, { ...props }) }, suspendingSuccessElement);
    };
    return (
      // TODO(RSC): Do we always want a client side error boundary? If so, this
      // is where we'd add it
      // <CellErrorBoundary renderFallback={FailureComponent}>
      /* @__PURE__ */ React.createElement(React.Fragment, null, wrapInSuspenseIfLoadingPresent(
        /* @__PURE__ */ React.createElement(SuspendingSuccess, { ...props }),
        Loading
      ))
    );
  };
}
export {
  createServerCell
};
