import React from "react";
class InfallibleErrorBoundary extends React.Component {
  state = { hasError: false };
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ React.createElement("h1", null, "Something went wrong and we are unable to show this page.");
    }
    return this.props.children;
  }
}
class FatalErrorBoundary extends React.Component {
  state = { hasError: false, error: void 0 };
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  render() {
    const { page: Page } = this.props;
    if (this.state.hasError) {
      return /* @__PURE__ */ React.createElement(InfallibleErrorBoundary, null, /* @__PURE__ */ React.createElement(Page, { error: this.state.error }));
    }
    return this.props.children;
  }
}
export {
  FatalErrorBoundary
};
