import React from 'react';
/**
 * Inspired by Next's useServerInsertedHTML, originally designed for CSS-in-JS
 * for now it seems the only way to inject html with streaming is to use a context
 *
 * We use this for <head> tags, and for apollo cache hydration
 *
 * Until https://github.com/reactjs/rfcs/pull/219 makes it into react
 */
export type RenderCallback = () => React.ReactNode;
export declare const ServerHtmlContext: React.Context<(callback: RenderCallback) => void>;
/**
 * Use this factory, once per request.
 * This is to ensure that injectionState is isolated to the request
 * and not shared between requests.
 */
export declare const createInjector: () => {
    injectToPage: (renderCallback: RenderCallback) => void;
    injectionState: Set<RenderCallback>;
};
export declare const ServerHtmlProvider: React.Provider<(callback: RenderCallback) => void>;
export declare const ServerInjectedHtml: ({ injectionState, }: {
    injectionState: Set<RenderCallback>;
}) => React.JSX.Element[];
export declare function useServerInsertedHTML(callback: () => React.ReactNode): void;
//# sourceMappingURL=ServerInject.d.ts.map