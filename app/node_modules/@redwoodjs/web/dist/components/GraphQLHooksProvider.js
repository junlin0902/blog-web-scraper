import React from "react";
const GraphQLHooksContext = React.createContext({
  useQuery: () => {
    throw new Error(
      "You must register a useQuery hook via the `GraphQLHooksProvider`"
    );
  },
  useMutation: () => {
    throw new Error(
      "You must register a useMutation hook via the `GraphQLHooksProvider`"
    );
  },
  useSubscription: () => {
    throw new Error(
      "You must register a useSubscription hook via the `GraphQLHooksProvider`"
    );
  },
  useSuspenseQuery: () => {
    throw new Error(
      "You must register a useSuspenseQuery hook via the `GraphQLHooksProvider`."
    );
  },
  //  These are apollo specific hooks!
  useBackgroundQuery: () => {
    throw new Error(
      "You must register a useBackgroundQuery hook via the `GraphQLHooksProvider`."
    );
  },
  useReadQuery: () => {
    throw new Error(
      "You must register a useReadQuery hook via the `GraphQLHooksProvider`."
    );
  }
});
const GraphQLHooksProvider = ({
  useQuery: useQuery2,
  useMutation: useMutation2,
  useSubscription: useSubscription2,
  useSuspenseQuery: useSuspenseQuery2,
  useBackgroundQuery: useBackgroundQuery2,
  useReadQuery: useReadQuery2,
  children
}) => {
  return /* @__PURE__ */ React.createElement(
    GraphQLHooksContext.Provider,
    {
      value: {
        useQuery: useQuery2,
        useMutation: useMutation2,
        useSubscription: useSubscription2,
        useSuspenseQuery: useSuspenseQuery2,
        useBackgroundQuery: useBackgroundQuery2,
        useReadQuery: useReadQuery2
      }
    },
    children
  );
};
function useQuery(query, options) {
  return React.useContext(GraphQLHooksContext).useQuery(
    query,
    options
  );
}
function useMutation(mutation, options) {
  return React.useContext(GraphQLHooksContext).useMutation(
    mutation,
    options
  );
}
function useSubscription(query, options) {
  return React.useContext(GraphQLHooksContext).useSubscription(query, options);
}
function useSuspenseQuery(query, options) {
  return React.useContext(GraphQLHooksContext).useSuspenseQuery(query, options);
}
const useBackgroundQuery = (...args) => {
  return React.useContext(GraphQLHooksContext).useBackgroundQuery(
    ...args
  );
};
const useReadQuery = (...args) => {
  return React.useContext(GraphQLHooksContext).useReadQuery(...args);
};
export {
  GraphQLHooksContext,
  GraphQLHooksProvider,
  useBackgroundQuery,
  useMutation,
  useQuery,
  useReadQuery,
  useSubscription,
  useSuspenseQuery
};
