import type { HttpOptions } from '@apollo/client';
import type { Operation, FetchResult } from '@apollo/client/core';
import { ApolloLink } from '@apollo/client/link/core/core.cjs';
import { Observable } from '@apollo/client/utilities/utilities.cjs';
import type { DefinitionNode } from 'graphql';
import type { ClientOptions } from 'graphql-sse';
interface SSELinkOptions extends Partial<ClientOptions> {
    url: string;
    auth: {
        authProviderType: string;
        tokenFn: () => Promise<null | string>;
    };
    httpLinkConfig?: HttpOptions;
    headers?: Record<string, string>;
}
declare const isSubscription: (definition: DefinitionNode) => boolean;
declare const isLiveQuery: (definition: DefinitionNode) => boolean;
/**
 * GraphQL over Server-Sent Events (SSE) spec link for Apollo Client
 */
declare class SSELink extends ApolloLink {
    private client;
    constructor(options: SSELinkOptions);
    request(operation: Operation & {
        query?: any;
    }): Observable<FetchResult>;
}
export { SSELink, isSubscription, isLiveQuery };
//# sourceMappingURL=sseLink.d.ts.map