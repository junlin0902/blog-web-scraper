import * as apolloClient from "@apollo/client";
import { createFragmentRegistry } from "@apollo/client/cache/cache.cjs";
import { getFragmentDefinitions } from "@apollo/client/utilities/utilities.cjs";
const getTypenameFromFragment = (fragment) => {
  const [definition] = getFragmentDefinitions(fragment);
  return definition.typeCondition.name.value;
};
const useRegisteredFragmentHook = (fragment, id) => {
  const from = { __typename: getTypenameFromFragment(fragment), id };
  return apolloClient.useFragment({
    fragment,
    from
  });
};
const fragmentRegistry = createFragmentRegistry();
const registerFragments = (fragments) => {
  return fragments.map(registerFragment);
};
const registerFragment = (fragment) => {
  fragmentRegistry.register(fragment);
  const typename = getTypenameFromFragment(fragment);
  const getCacheKey = (id) => {
    return { __typename: typename, id };
  };
  const useRegisteredFragment = (id) => {
    return useRegisteredFragmentHook(fragment, id);
  };
  return {
    fragment,
    typename,
    getCacheKey,
    useRegisteredFragment
  };
};
export {
  fragmentRegistry,
  registerFragment,
  registerFragments
};
