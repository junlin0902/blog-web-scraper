"use client";
import React, { useContext } from "react";
import { setLogVerbosity as apolloSetLogVerbosity } from "@apollo/client/core/index.js";
import {
  useMutation,
  useSubscription,
  useBackgroundQuery,
  useQuery,
  useReadQuery,
  useSuspenseQuery
} from "@apollo/client/react/hooks/index.js";
import {
  ApolloClient,
  InMemoryCache,
  WrapApolloProvider
} from "@apollo/client-react-streaming";
import { buildManualDataTransport } from "@apollo/client-react-streaming/manual-transport";
import { useNoAuth } from "@redwoodjs/auth";
import { ServerAuthContext } from "@redwoodjs/auth/dist/AuthProvider/ServerAuthProvider.js";
import "./typeOverride.js";
import {
  FetchConfigProvider,
  useFetchConfig
} from "../components/FetchConfigProvider.js";
import { GraphQLHooksProvider } from "../components/GraphQLHooksProvider.js";
import { ServerHtmlContext } from "../components/ServerInject.js";
import {
  createAuthApolloLink,
  createFinalLink,
  createHttpLink,
  createTokenLink,
  createUpdateDataLink
} from "./links.js";
const WrappedApolloProvider = WrapApolloProvider(
  buildManualDataTransport({
    useInsertHtml() {
      return React.useContext(ServerHtmlContext);
    }
  })
);
const ApolloProviderWithFetchConfig = ({ config, children, logLevel, useAuth = useNoAuth }) => {
  apolloSetLogVerbosity(logLevel);
  const { uri, headers } = useFetchConfig();
  const { getToken, type: authProviderType } = useAuth();
  const isDev = process.env.NODE_ENV === "development";
  const serverAuthState = useContext(ServerAuthContext);
  const getGraphqlUrl = () => {
    return typeof window === "undefined" ? RWJS_ENV.RWJS_EXP_SSR_GRAPHQL_ENDPOINT : uri;
  };
  const { httpLinkConfig, link: userPassedLink, ...otherConfig } = config ?? {};
  const redwoodApolloLinks = [
    // @MARK REMOVE: We will not need these for cookie based auth ~~~~
    { name: "withToken", link: createTokenLink(getToken) },
    {
      name: "authMiddleware",
      link: createAuthApolloLink(authProviderType, headers)
    },
    // ~~~~ @END REMOVE ~~~~
    isDev && { name: "enhanceErrorLink", link: createUpdateDataLink() },
    {
      name: "httpLink",
      link: createHttpLink(
        getGraphqlUrl(),
        httpLinkConfig,
        serverAuthState?.cookieHeader
      )
    }
  ].filter((link) => !!link);
  function makeClient() {
    return new ApolloClient({
      link: createFinalLink({
        userConfiguredLink: userPassedLink,
        defaultLinks: redwoodApolloLinks
      }),
      ...otherConfig
    });
  }
  return /* @__PURE__ */ React.createElement(WrappedApolloProvider, { makeClient }, children);
};
const RedwoodApolloProvider = ({
  graphQLClientConfig,
  useAuth = useNoAuth,
  logLevel = "debug",
  children
}) => {
  const { cacheConfig, ...config } = graphQLClientConfig ?? {};
  const cache = new InMemoryCache(cacheConfig).restore(
    globalThis?.__REDWOOD__APOLLO_STATE ?? {}
  );
  return /* @__PURE__ */ React.createElement(FetchConfigProvider, { useAuth }, /* @__PURE__ */ React.createElement(
    ApolloProviderWithFetchConfig,
    {
      config: { cache, ...config },
      useAuth,
      logLevel
    },
    /* @__PURE__ */ React.createElement(
      GraphQLHooksProvider,
      {
        useQuery,
        useMutation,
        useSubscription,
        useSuspenseQuery,
        useBackgroundQuery,
        useReadQuery
      },
      children
    )
  ));
};
export {
  RedwoodApolloProvider
};
