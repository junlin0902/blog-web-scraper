import { ApolloLink } from "@apollo/client/link/core/core.cjs";
import { Observable } from "@apollo/client/utilities/utilities.cjs";
import { Kind, OperationTypeNode, print } from "graphql";
import { createClient } from "graphql-sse";
const mapCredentialsHeader = (httpLinkCredentials) => {
  if (!httpLinkCredentials) {
    return void 0;
  }
  switch (httpLinkCredentials) {
    case "omit":
    case "same-origin":
    case "include":
      return httpLinkCredentials;
    default:
      return void 0;
  }
};
const mapReferrerPolicyHeader = (referrerPolicy) => {
  if (!referrerPolicy) {
    return void 0;
  }
  switch (referrerPolicy) {
    case "no-referrer":
    case "no-referrer-when-downgrade":
    case "same-origin":
    case "origin":
    case "strict-origin":
    case "origin-when-cross-origin":
    case "strict-origin-when-cross-origin":
    case "unsafe-url":
      return referrerPolicy;
    default:
      return void 0;
  }
};
const hasTrustedDocument = (operation) => {
  return operation.extensions?.persistedQuery?.sha256Hash;
};
const isSubscription = (definition) => {
  return definition.kind === Kind.OPERATION_DEFINITION && definition.operation === OperationTypeNode.SUBSCRIPTION;
};
const isLiveQuery = (definition) => {
  if (definition.kind !== Kind.OPERATION_DEFINITION || definition.operation !== OperationTypeNode.QUERY) {
    return false;
  }
  return !!definition.directives?.find((d) => d.name.value === "live");
};
class SSELink extends ApolloLink {
  client;
  constructor(options) {
    super();
    const { url, auth, headers, httpLinkConfig } = options;
    const { credentials, referrer, referrerPolicy } = httpLinkConfig?.headers || {};
    this.client = createClient({
      url,
      headers: async () => {
        const token = await auth.tokenFn();
        if (!token) {
          return { ...headers };
        }
        return {
          Authorization: `Bearer ${token}`,
          "auth-provider": auth.authProviderType,
          ...headers
        };
      },
      credentials: mapCredentialsHeader(credentials),
      referrer,
      referrerPolicy: mapReferrerPolicyHeader(referrerPolicy)
    });
  }
  request(operation) {
    return new Observable((sink) => {
      let request;
      if (hasTrustedDocument(operation)) {
        delete operation.query;
        request = { ...operation };
      } else {
        request = {
          ...operation,
          query: print(operation.query)
        };
      }
      return this.client.subscribe(request, {
        next: sink.next.bind(sink),
        complete: sink.complete.bind(sink),
        error: sink.error.bind(sink)
      });
    });
  }
}
export {
  SSELink,
  isLiveQuery,
  isSubscription
};
