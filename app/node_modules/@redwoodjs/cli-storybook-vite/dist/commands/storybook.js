"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storybook_exports = {};
__export(storybook_exports, {
  aliases: () => aliases,
  builder: () => builder,
  command: () => command,
  defaultOptions: () => defaultOptions,
  description: () => description,
  handler: () => handler
});
module.exports = __toCommonJS(storybook_exports);
var import_terminal_link = __toESM(require("terminal-link"));
var import_cli_helpers = require("@redwoodjs/cli-helpers");
const command = "storybook";
const aliases = ["sb"];
const description = "Launch Storybook: a tool for building UI components and pages in isolation";
const defaultOptions = {
  open: true,
  build: false,
  ci: false,
  port: 7910,
  buildDirectory: "public/storybook",
  smokeTest: false
};
function builder(yargs) {
  return yargs.option("build", {
    describe: "Build Storybook",
    type: "boolean",
    default: defaultOptions.build
  }).option("build-directory", {
    describe: "Directory in web/ to store static files",
    type: "string",
    default: defaultOptions.buildDirectory
  }).option("ci", {
    describe: "Start server in CI mode, with no interactive prompts",
    type: "boolean",
    default: defaultOptions.ci
  }).option("open", {
    describe: "Open storybook in your browser on start",
    type: "boolean",
    default: defaultOptions.open
  }).option("port", {
    describe: "Which port to run storybook on",
    type: "number",
    default: defaultOptions.port
  }).option("smoke-test", {
    describe: "CI mode plus smoke-test (skip prompts; don't open browser; exit after successful start)",
    type: "boolean",
    default: defaultOptions.smokeTest
  }).epilogue(
    `Also see the ${(0, import_terminal_link.default)(
      "Redwood CLI Reference",
      "https://redwoodjs.com/docs/cli-commands#storybook"
    )}`
  );
}
async function handler(options) {
  (0, import_cli_helpers.recordTelemetryAttributes)({
    command: "storybook",
    build: options.build,
    ci: options.ci,
    open: options.open,
    smokeTest: options.smokeTest
  });
  process.emit("shutdown-telemetry");
  const { handler: storybookHandler } = await import("./storybookHandler.js");
  await storybookHandler(options);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aliases,
  builder,
  command,
  defaultOptions,
  description,
  handler
});
