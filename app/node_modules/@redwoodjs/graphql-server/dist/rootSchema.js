"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rootSchema_exports = {};
__export(rootSchema_exports, {
  resolvers: () => resolvers,
  scalarSchemas: () => scalarSchemas,
  schema: () => schema
});
module.exports = __toCommonJS(rootSchema_exports);
var import_graphql_scalars = require("graphql-scalars");
var import_graphql_tag = __toESM(require("graphql-tag"));
var import_api = require("@redwoodjs/api");
const schema = import_graphql_tag.default`
  scalar BigInt
  scalar Date
  scalar Time
  scalar DateTime
  scalar JSON
  scalar JSONObject
  scalar Byte

  """
  The RedwoodJS Root Schema

  Defines details about RedwoodJS such as the current user and version information.
  """
  type Redwood {
    "The version of Redwood."
    version: String
    "The current user."
    currentUser: JSON
    "The version of Prisma."
    prismaVersion: String
  }

  """
  About the Redwood queries.
  """
  type Query {
    "Fetches the Redwood root schema."
    redwood: Redwood
  }
`;
const scalarSchemas = {
  File: import_graphql_tag.default`
    scalar File
  `
};
const resolvers = {
  BigInt: import_graphql_scalars.BigIntResolver,
  Date: import_graphql_scalars.DateResolver,
  Time: import_graphql_scalars.TimeResolver,
  DateTime: import_graphql_scalars.DateTimeResolver,
  JSON: import_graphql_scalars.JSONResolver,
  JSONObject: import_graphql_scalars.JSONObjectResolver,
  Query: {
    redwood: () => ({
      version: import_api.redwoodVersion,
      prismaVersion: import_api.prismaVersion,
      currentUser: (_args, context) => {
        return context?.currentUser;
      }
    })
  },
  Byte: import_graphql_scalars.ByteResolver
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  resolvers,
  scalarSchemas,
  schema
});
