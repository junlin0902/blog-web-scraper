"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  DirectiveParams: () => import_useRedwoodDirective.DirectiveParams,
  DirectiveType: () => import_useRedwoodDirective.DirectiveType,
  RedwoodDirective: () => import_useRedwoodDirective.RedwoodDirective,
  TransformArgs: () => import_useRedwoodDirective.TransformArgs,
  TransformerDirective: () => import_useRedwoodDirective.TransformerDirective,
  TransformerDirectiveFunc: () => import_useRedwoodDirective.TransformerDirectiveFunc,
  ValidateArgs: () => import_useRedwoodDirective.ValidateArgs,
  ValidatorDirective: () => import_useRedwoodDirective.ValidatorDirective,
  ValidatorDirectiveFunc: () => import_useRedwoodDirective.ValidatorDirectiveFunc,
  context: () => import_context.context,
  createTransformerDirective: () => import_makeDirectives.createTransformerDirective,
  createValidatorDirective: () => import_makeDirectives.createValidatorDirective,
  getDirectiveName: () => import_makeDirectives.getDirectiveName,
  hasDirective: () => import_useRedwoodDirective.hasDirective,
  makeDirectivesForPlugin: () => import_makeDirectives.makeDirectivesForPlugin,
  rootSchema: () => rootSchema,
  setContext: () => import_context.setContext,
  useRedwoodDirective: () => import_useRedwoodDirective.useRedwoodDirective
});
module.exports = __toCommonJS(src_exports);
var import_global = require("./global.api-auto-imports");
__reExport(src_exports, require("./global.api-auto-imports"), module.exports);
__reExport(src_exports, require("./errors"), module.exports);
__reExport(src_exports, require("./functions/graphql"), module.exports);
__reExport(src_exports, require("./functions/useRequireAuth"), module.exports);
__reExport(src_exports, require("./makeMergedSchema"), module.exports);
__reExport(src_exports, require("./createGraphQLYoga"), module.exports);
__reExport(src_exports, require("./types"), module.exports);
var import_makeDirectives = require("./directives/makeDirectives");
var import_useRedwoodDirective = require("./plugins/useRedwoodDirective");
var rootSchema = __toESM(require("./rootSchema"));
var import_context = require("@redwoodjs/context");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DirectiveParams,
  DirectiveType,
  RedwoodDirective,
  TransformArgs,
  TransformerDirective,
  TransformerDirectiveFunc,
  ValidateArgs,
  ValidatorDirective,
  ValidatorDirectiveFunc,
  context,
  createTransformerDirective,
  createValidatorDirective,
  getDirectiveName,
  hasDirective,
  makeDirectivesForPlugin,
  rootSchema,
  setContext,
  useRedwoodDirective,
  ...require("./global.api-auto-imports"),
  ...require("./errors"),
  ...require("./functions/graphql"),
  ...require("./functions/useRequireAuth"),
  ...require("./makeMergedSchema"),
  ...require("./createGraphQLYoga"),
  ...require("./types")
});
