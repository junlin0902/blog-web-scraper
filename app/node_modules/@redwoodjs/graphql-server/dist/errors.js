"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  AuthenticationError: () => AuthenticationError,
  ForbiddenError: () => ForbiddenError,
  PersistedQueryNotFoundError: () => PersistedQueryNotFoundError,
  PersistedQueryNotSupportedError: () => PersistedQueryNotSupportedError,
  RedwoodGraphQLError: () => RedwoodGraphQLError,
  SyntaxError: () => SyntaxError,
  UserInputError: () => UserInputError,
  ValidationError: () => ValidationError
});
module.exports = __toCommonJS(errors_exports);
var import_graphql = require("graphql");
class RedwoodGraphQLError extends import_graphql.GraphQLError {
  constructor(message, extensions, originalError) {
    super(message, {
      extensions: {
        ...extensions,
        code: extensions?.code || "REDWOODJS_ERROR"
      },
      originalError
    });
    Object.setPrototypeOf(this, import_graphql.GraphQLError.prototype);
  }
}
class SyntaxError extends RedwoodGraphQLError {
  constructor(message) {
    super(message, { code: "GRAPHQL_PARSE_FAILED" });
    Object.setPrototypeOf(this, SyntaxError.prototype);
  }
}
class ValidationError extends RedwoodGraphQLError {
  constructor(message) {
    super(message, { code: "GRAPHQL_VALIDATION_FAILED" });
    Object.setPrototypeOf(this, ValidationError.prototype);
  }
}
class AuthenticationError extends RedwoodGraphQLError {
  constructor(message) {
    super(message, { code: "UNAUTHENTICATED" });
    Object.setPrototypeOf(this, AuthenticationError.prototype);
  }
}
class ForbiddenError extends RedwoodGraphQLError {
  constructor(message) {
    super(message, { code: "FORBIDDEN" });
    Object.setPrototypeOf(this, ForbiddenError.prototype);
  }
}
class PersistedQueryNotFoundError extends RedwoodGraphQLError {
  constructor() {
    super("PersistedQueryNotFound", { code: "PERSISTED_QUERY_NOT_FOUND" });
    Object.setPrototypeOf(this, PersistedQueryNotFoundError.prototype);
  }
}
class PersistedQueryNotSupportedError extends RedwoodGraphQLError {
  constructor() {
    super("PersistedQueryNotSupported", {
      code: "PERSISTED_QUERY_NOT_SUPPORTED"
    });
    Object.setPrototypeOf(this, PersistedQueryNotSupportedError.prototype);
  }
}
class UserInputError extends RedwoodGraphQLError {
  constructor(message, properties) {
    super(message, { code: "BAD_USER_INPUT", properties });
    Object.setPrototypeOf(this, UserInputError.prototype);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AuthenticationError,
  ForbiddenError,
  PersistedQueryNotFoundError,
  PersistedQueryNotSupportedError,
  RedwoodGraphQLError,
  SyntaxError,
  UserInputError,
  ValidationError
});
