"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var makeDirectives_exports = {};
__export(makeDirectives_exports, {
  createTransformerDirective: () => createTransformerDirective,
  createValidatorDirective: () => createValidatorDirective,
  getDirectiveName: () => getDirectiveName,
  makeDirectivesForPlugin: () => makeDirectivesForPlugin
});
module.exports = __toCommonJS(makeDirectives_exports);
var import_graphql = require("graphql");
var import_useRedwoodDirective = require("../plugins/useRedwoodDirective");
const makeDirectivesForPlugin = (directiveGlobs) => {
  return Object.entries(directiveGlobs).flatMap(
    ([importedGlobName, exports2]) => {
      const [directiveNameFromFile] = importedGlobName.split("_").slice(-2);
      const directive = exports2[directiveNameFromFile] || exports2.default;
      if (!directive.type) {
        throw new Error(
          "Please use `createValidatorDirective` or `createTransformerDirective` functions to define your directive"
        );
      }
      return [directive];
    }
  );
};
const getDirectiveName = (schema) => {
  const definition = schema.definitions.find(
    (definition2) => definition2.kind === import_graphql.Kind.DIRECTIVE_DEFINITION
  );
  return definition?.name?.value;
};
const createValidatorDirective = (schema, directiveFunc) => {
  const directiveName = getDirectiveName(schema);
  if (!directiveName) {
    throw new Error("Could not parse directive schema");
  }
  if (typeof directiveFunc !== "function") {
    throw new Error(
      `Directive validation function not implemented for @${directiveName}`
    );
  }
  return {
    name: directiveName,
    schema,
    onResolvedValue: directiveFunc,
    type: import_useRedwoodDirective.DirectiveType.VALIDATOR
  };
};
const createTransformerDirective = (schema, directiveFunc) => {
  const directiveName = getDirectiveName(schema);
  if (!directiveName) {
    throw new Error("Could not parse directive schema");
  }
  if (typeof directiveFunc !== "function") {
    throw new Error(
      `Directive transformer function not implemented for @${directiveName}`
    );
  }
  return {
    name: directiveName,
    schema,
    onResolvedValue: directiveFunc,
    type: import_useRedwoodDirective.DirectiveType.TRANSFORMER
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createTransformerDirective,
  createValidatorDirective,
  getDirectiveName,
  makeDirectivesForPlugin
});
