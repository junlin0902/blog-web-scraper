"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useRedwoodTrustedDocuments_exports = {};
__export(useRedwoodTrustedDocuments_exports, {
  useRedwoodTrustedDocuments: () => useRedwoodTrustedDocuments
});
module.exports = __toCommonJS(useRedwoodTrustedDocuments_exports);
var import_plugin_persisted_operations = require("@graphql-yoga/plugin-persisted-operations");
const REDWOOD__AUTH_GET_CURRENT_USER_QUERY = '{"query":"query __REDWOOD__AUTH_GET_CURRENT_USER { redwood { currentUser } }"}';
const allowRedwoodAuthCurrentUserQuery = async (request) => {
  const headers = request.headers;
  const hasContentType = headers.get("content-type") === "application/json";
  const hasAuthProvider = !!headers.get("auth-provider");
  const hasAuthorization = !!headers.get("authorization");
  const hasAllowedHeaders = hasContentType && hasAuthProvider && hasAuthorization;
  const query = await request.text();
  const hasAllowedQuery = query === REDWOOD__AUTH_GET_CURRENT_USER_QUERY;
  return hasAllowedHeaders && hasAllowedQuery;
};
const useRedwoodTrustedDocuments = (options) => {
  return (0, import_plugin_persisted_operations.usePersistedOperations)({
    ...options,
    customErrors: {
      persistedQueryOnly: "Use Trusted Only!",
      ...options.customErrors
    },
    getPersistedOperation(sha256Hash) {
      return options.store ? options.store[sha256Hash] : null;
    },
    allowArbitraryOperations: async (request) => {
      if (options.allowArbitraryOperations !== void 0) {
        if (typeof options.allowArbitraryOperations === "boolean") {
          if (options.allowArbitraryOperations) {
            return true;
          }
        }
        if (typeof options.allowArbitraryOperations === "function") {
          const result = await options.allowArbitraryOperations(request);
          if (result === true) {
            return true;
          }
        }
      }
      return allowRedwoodAuthCurrentUserQuery(request);
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useRedwoodTrustedDocuments
});
