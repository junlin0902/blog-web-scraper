"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useArmor_exports = {};
__export(useArmor_exports, {
  useArmor: () => useArmor
});
module.exports = __toCommonJS(useArmor_exports);
var import_graphql_armor = require("@escape.tech/graphql-armor");
const armorConfigDefaultOptions = {
  logContext: false,
  logErrors: true
};
const useArmor = (logger, config) => {
  const logRejection = (ctx, error) => {
    if (config?.logContext ?? armorConfigDefaultOptions.logContext) {
      if (ctx) {
        logger.debug({ custom: ctx }, `Armor rejection context`);
      }
    }
    if (config?.logErrors ?? armorConfigDefaultOptions.logErrors) {
      logger.error(error, `Armor rejected request: ${error.message}`);
    }
  };
  return (0, import_graphql_armor.EnvelopArmorPlugin)({
    ...config,
    costLimit: {
      ...config?.costLimit,
      onReject: [logRejection]
    },
    maxAliases: {
      allowList: [],
      ...config?.maxAliases,
      onReject: [logRejection]
    },
    maxDepth: {
      ...config?.maxDepth,
      flattenFragments: true,
      onReject: [logRejection]
    },
    maxDirectives: {
      ...config?.maxDirectives,
      onReject: [logRejection]
    },
    maxTokens: {
      ...config?.maxTokens,
      onReject: [logRejection]
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useArmor
});
