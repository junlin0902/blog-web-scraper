"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useRedwoodError_exports = {};
__export(useRedwoodError_exports, {
  useRedwoodError: () => useRedwoodError
});
module.exports = __toCommonJS(useRedwoodError_exports);
var import_graphql_yoga = require("graphql-yoga");
var import_api = require("@redwoodjs/api");
const useRedwoodError = (logger) => {
  return {
    async onExecute() {
      return {
        onExecuteDone(payload) {
          return (0, import_graphql_yoga.handleStreamOrSingleExecutionResult)(
            payload,
            ({ result, setResult }) => {
              const errors = result.errors?.map((error) => {
                if (error.originalError && error.originalError instanceof import_api.RedwoodError) {
                  logger.debug(
                    { custom: { name: error.originalError.name } },
                    "Converting RedwoodError to GraphQLError"
                  );
                  return (0, import_graphql_yoga.createGraphQLError)(error.message, {
                    extensions: error.extensions,
                    originalError: error
                  });
                } else {
                  return error;
                }
              });
              setResult({
                ...result,
                errors,
                extensions: result.extensions || {}
              });
            }
          );
        }
      };
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useRedwoodError
});
