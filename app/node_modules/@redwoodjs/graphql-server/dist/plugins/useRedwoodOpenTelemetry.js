"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useRedwoodOpenTelemetry_exports = {};
__export(useRedwoodOpenTelemetry_exports, {
  AttributeName: () => AttributeName,
  useRedwoodOpenTelemetry: () => useRedwoodOpenTelemetry
});
module.exports = __toCommonJS(useRedwoodOpenTelemetry_exports);
var import_core = require("@envelop/core");
var import_on_resolve = require("@envelop/on-resolve");
var import_api = require("@opentelemetry/api");
var opentelemetry = __toESM(require("@opentelemetry/api"));
var import_graphql = require("graphql");
var AttributeName = /* @__PURE__ */ ((AttributeName2) => {
  AttributeName2["EXECUTION_ERROR"] = "graphql.execute.error";
  AttributeName2["EXECUTION_RESULT"] = "graphql.execute.result";
  AttributeName2["RESOLVER_EXCEPTION"] = "graphql.resolver.exception";
  AttributeName2["RESOLVER_FIELD_NAME"] = "graphql.resolver.fieldName";
  AttributeName2["RESOLVER_TYPE_NAME"] = "graphql.resolver.typeName";
  AttributeName2["RESOLVER_RESULT_TYPE"] = "graphql.resolver.resultType";
  AttributeName2["RESOLVER_ARGS"] = "graphql.resolver.args";
  AttributeName2["EXECUTION_OPERATION_NAME"] = "graphql.execute.operationName";
  AttributeName2["EXECUTION_OPERATION_DOCUMENT"] = "graphql.execute.document";
  AttributeName2["EXECUTION_VARIABLES"] = "graphql.execute.variables";
  return AttributeName2;
})(AttributeName || {});
const tracingSpanSymbol = "OPEN_TELEMETRY_GRAPHQL";
const useRedwoodOpenTelemetry = (options) => {
  const spanKind = import_api.SpanKind.SERVER;
  const spanAdditionalAttributes = {};
  const tracer = opentelemetry.trace.getTracer("redwoodjs");
  return {
    onPluginInit({ addPlugin }) {
      if (options.resolvers) {
        addPlugin(
          (0, import_on_resolve.useOnResolve)(({ info, context, args }) => {
            if (context && typeof context === "object" && context[tracingSpanSymbol]) {
              const ctx = opentelemetry.trace.setSpan(
                opentelemetry.context.active(),
                context[tracingSpanSymbol]
              );
              const { fieldName, returnType, parentType } = info;
              return tracer.startActiveSpan(
                `${parentType.name}.${fieldName}`,
                {
                  attributes: {
                    ["graphql.resolver.fieldName" /* RESOLVER_FIELD_NAME */]: fieldName,
                    ["graphql.resolver.typeName" /* RESOLVER_TYPE_NAME */]: parentType.toString(),
                    ["graphql.resolver.resultType" /* RESOLVER_RESULT_TYPE */]: returnType.toString(),
                    ["graphql.resolver.args" /* RESOLVER_ARGS */]: JSON.stringify(args || {})
                  }
                },
                ctx,
                (resolverSpan) => {
                  resolverSpan.spanContext();
                  return ({ result }) => {
                    if (result instanceof Error) {
                      resolverSpan.recordException({
                        name: "graphql.resolver.exception" /* RESOLVER_EXCEPTION */,
                        message: JSON.stringify(result)
                      });
                    }
                    resolverSpan.end();
                  };
                }
              );
            }
            return () => {
            };
          })
        );
      }
    },
    onExecute({ args, extendContext }) {
      return tracer.startActiveSpan(
        `${args.operationName || "Anonymous Operation"}`,
        {
          kind: spanKind,
          attributes: {
            ...spanAdditionalAttributes,
            ["graphql.execute.operationName" /* EXECUTION_OPERATION_NAME */]: args.operationName ?? void 0,
            ["graphql.execute.document" /* EXECUTION_OPERATION_DOCUMENT */]: (0, import_graphql.print)(args.document),
            ...options.variables ? {
              ["graphql.execute.variables" /* EXECUTION_VARIABLES */]: JSON.stringify(
                args.variableValues ?? {}
              )
            } : {}
          }
        },
        (executionSpan) => {
          const resultCbs = {
            onExecuteDone({ result }) {
              if ((0, import_core.isAsyncIterable)(result)) {
                executionSpan.end();
                console.warn(
                  `Plugin "RedwoodOpenTelemetry" encountered an AsyncIterator which is not supported yet, so tracing data is not available for the operation.`
                );
                return;
              }
              if (result.data && options.result) {
                executionSpan.setAttribute(
                  "graphql.execute.result" /* EXECUTION_RESULT */,
                  JSON.stringify(result)
                );
              }
              if (result.errors && result.errors.length > 0) {
                executionSpan.recordException({
                  name: "graphql.execute.error" /* EXECUTION_ERROR */,
                  message: JSON.stringify(result.errors)
                });
              }
              executionSpan.end();
            }
          };
          if (options.resolvers) {
            extendContext({
              [tracingSpanSymbol]: executionSpan
            });
          }
          return resultCbs;
        }
      );
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AttributeName,
  useRedwoodOpenTelemetry
});
