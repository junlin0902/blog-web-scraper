"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useRedwoodLogger_exports = {};
__export(useRedwoodLogger_exports, {
  useRedwoodLogger: () => useRedwoodLogger
});
module.exports = __toCommonJS(useRedwoodLogger_exports);
var import_graphql = require("graphql");
var import_graphql_yoga = require("graphql-yoga");
var import_uuid = require("uuid");
var import_errors = require("../errors");
const logResult = (loggerConfig, envelopLogger, operationName) => ({ result }) => {
  const includeTracing = loggerConfig?.options?.tracing;
  const includeData = loggerConfig?.options?.data;
  const options = {};
  if (result?.errors && result?.errors.length > 0) {
    result.errors.forEach((error) => {
      if (error.originalError && (error.originalError instanceof import_errors.AuthenticationError || error.originalError instanceof import_errors.ForbiddenError)) {
        envelopLogger.warn(
          error,
          `'${error?.extensions?.code || "authentication"}' error '${error.message}' occurred in ${operationName}`
        );
      } else {
        envelopLogger.error(
          error,
          error?.originalError?.message || error.message || `Error in GraphQL execution: ${operationName}`
        );
      }
    });
  }
  if (result?.data) {
    if (includeData) {
      options["data"] = result.data;
    }
    if (result.extensions?.responseCache) {
      options["responseCache"] = result.extensions?.responseCache;
    }
    if (includeTracing) {
      options["tracing"] = result.extensions?.envelopTracing;
    }
    envelopLogger.debug(
      {
        ...options
      },
      `GraphQL execution completed: ${operationName}`
    );
  }
};
const useRedwoodLogger = (loggerConfig) => {
  const logger = loggerConfig.logger;
  const level = loggerConfig.options?.level || logger.level || "warn";
  const childLogger = logger.child({
    name: "graphql-server"
  });
  childLogger.level = level;
  const includeOperationName = loggerConfig?.options?.operationName;
  const includeRequestId = loggerConfig?.options?.requestId;
  const includeUserAgent = loggerConfig?.options?.userAgent;
  const includeQuery = loggerConfig?.options?.query;
  const excludeOperations = loggerConfig.options?.excludeOperations;
  return {
    onPluginInit(context) {
      context.registerContextErrorHandler(({ error }) => {
        if (error) {
          childLogger.error(`Error building context. ${error}`);
        }
      });
    },
    onParse({ params }) {
      const options = params.options;
      const envelopLogger = childLogger.child({
        ...options
      });
      return ({ result }) => {
        if (result instanceof Error) {
          envelopLogger.error(result);
        }
      };
    },
    onValidate({ params }) {
      const options = params.options;
      const envelopLogger = childLogger.child({
        ...options
      });
      return ({ result }) => {
        result.forEach((item) => {
          if (item.message) {
            envelopLogger.error(item.message);
          }
        });
      };
    },
    onExecute({ args }) {
      const options = {};
      const rootOperation = args.document.definitions.find(
        (o) => o.kind === import_graphql.Kind.OPERATION_DEFINITION
      );
      const operationName = args.operationName || rootOperation.name?.value || "Anonymous Operation";
      if (excludeOperations?.includes(operationName)) {
        return;
      }
      if (includeOperationName) {
        options["operationName"] = operationName;
      }
      if (includeQuery) {
        options["query"] = args.variableValues;
      }
      if (includeRequestId) {
        options["requestId"] = args.contextValue.requestContext?.awsRequestId || args.contextValue.event?.requestContext?.requestId || (0, import_uuid.v4)();
      }
      if (includeUserAgent) {
        options["userAgent"] = args.contextValue.event?.headers["user-agent"];
      }
      const envelopLogger = childLogger.child({
        ...options
      });
      envelopLogger.debug(`GraphQL execution started: ${operationName}`);
      const handleResult = logResult(loggerConfig, envelopLogger, operationName);
      return {
        onExecuteDone: (payload) => {
          (0, import_graphql_yoga.handleStreamOrSingleExecutionResult)(payload, ({ result }) => {
            handleResult({ result });
            return void 0;
          });
        }
      };
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useRedwoodLogger
});
