"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createGraphQLYoga_exports = {};
__export(createGraphQLYoga_exports, {
  createGraphQLYoga: () => createGraphQLYoga
});
module.exports = __toCommonJS(createGraphQLYoga_exports);
var import_disable_introspection = require("@envelop/disable-introspection");
var import_filter_operation_type = require("@envelop/filter-operation-type");
var import_graphql = require("graphql");
var import_graphql_yoga = require("graphql-yoga");
var import_cors = require("./cors");
var import_makeDirectives = require("./directives/makeDirectives");
var import_graphiql = require("./graphiql");
var import_introspection = require("./introspection");
var import_makeMergedSchema = require("./makeMergedSchema");
var import_plugins = require("./plugins");
var import_makeSubscriptions = require("./subscriptions/makeSubscriptions");
const createGraphQLYoga = ({
  healthCheckId,
  loggerConfig,
  context,
  getCurrentUser,
  onException,
  generateGraphiQLHeader,
  extraPlugins,
  authDecoder,
  cors,
  services,
  sdls,
  directives = [],
  armorConfig,
  allowedOperations,
  allowIntrospection,
  allowGraphiQL,
  defaultError = "Something went wrong.",
  graphiQLEndpoint = "/graphql",
  schemaOptions,
  realtime,
  trustedDocuments,
  openTelemetryOptions,
  includeScalars
}) => {
  let schema;
  let redwoodDirectivePlugins = [];
  const logger = loggerConfig.logger;
  const isDevEnv = process.env.NODE_ENV === "development";
  try {
    const projectDirectives = (0, import_makeDirectives.makeDirectivesForPlugin)(directives);
    if (projectDirectives.length > 0) {
      ;
      redwoodDirectivePlugins = projectDirectives.map(
        (directive) => (0, import_plugins.useRedwoodDirective)(directive)
      );
    }
    let projectSubscriptions = [];
    if (realtime?.subscriptions?.subscriptions) {
      projectSubscriptions = (0, import_makeSubscriptions.makeSubscriptions)(
        realtime.subscriptions.subscriptions
      );
    }
    schema = (0, import_makeMergedSchema.makeMergedSchema)({
      sdls,
      services,
      directives: projectDirectives,
      subscriptions: projectSubscriptions,
      schemaOptions,
      includeScalars
    });
  } catch (e) {
    logger.fatal(e, "\n \u26A0\uFE0F GraphQL server crashed \n");
    if (onException) {
      onException();
    }
    process.exit(1);
  }
  try {
    const plugins = [];
    const { disableIntrospection } = (0, import_introspection.configureGraphQLIntrospection)({
      allowIntrospection
    });
    if (disableIntrospection) {
      plugins.push((0, import_disable_introspection.useDisableIntrospection)());
    }
    plugins.push((0, import_plugins.useRedwoodAuthContext)(getCurrentUser, authDecoder));
    plugins.push((0, import_plugins.useRedwoodGlobalContextSetter)());
    if (context) {
      plugins.push((0, import_plugins.useRedwoodPopulateContext)(context));
    }
    plugins.push(...redwoodDirectivePlugins);
    if (openTelemetryOptions !== void 0) {
      plugins.push((0, import_plugins.useRedwoodOpenTelemetry)(openTelemetryOptions));
    }
    plugins.push((0, import_plugins.useArmor)(logger, armorConfig));
    const defaultAllowedOperations = [
      import_graphql.OperationTypeNode.QUERY,
      import_graphql.OperationTypeNode.MUTATION
    ];
    if (realtime?.subscriptions?.subscriptions) {
      defaultAllowedOperations.push(import_graphql.OperationTypeNode.SUBSCRIPTION);
    }
    plugins.push(
      (0, import_filter_operation_type.useFilterAllowedOperations)(allowedOperations || defaultAllowedOperations)
    );
    if (trustedDocuments && !trustedDocuments.disabled) {
      plugins.push((0, import_plugins.useRedwoodTrustedDocuments)(trustedDocuments));
    }
    if (extraPlugins && extraPlugins.length > 0) {
      plugins.push(...extraPlugins);
    }
    plugins.push((0, import_plugins.useRedwoodError)(logger));
    plugins.push(
      (0, import_graphql_yoga.useReadinessCheck)({
        endpoint: graphiQLEndpoint + "/readiness",
        check: async ({ request }) => {
          try {
            const response = await yoga.fetch(
              new URL(graphiQLEndpoint + "/health", request.url)
            );
            const expectedHealthCheckId = healthCheckId || "yoga";
            const status = response.headers.get("x-yoga-id") === expectedHealthCheckId && request.headers.get("x-yoga-id") === expectedHealthCheckId;
            return status;
          } catch (err) {
            logger.error(err);
            return false;
          }
        }
      })
    );
    plugins.push((0, import_plugins.useRedwoodLogger)(loggerConfig));
    const yoga = (0, import_graphql_yoga.createYoga)({
      id: healthCheckId,
      landingPage: isDevEnv,
      schema,
      plugins,
      maskedErrors: {
        errorMessage: defaultError,
        isDev: isDevEnv
      },
      logging: logger,
      healthCheckEndpoint: graphiQLEndpoint + "/health",
      graphqlEndpoint: graphiQLEndpoint,
      graphiql: (0, import_graphiql.configureGraphiQLPlayground)({
        allowGraphiQL,
        generateGraphiQLHeader
      }),
      cors: (request) => {
        const requestOrigin = request.headers.get("origin");
        return (0, import_cors.mapRwCorsOptionsToYoga)(cors, requestOrigin);
      }
    });
    return { yoga, logger };
  } catch (e) {
    if (onException) {
      onException();
    }
    throw e;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createGraphQLYoga
});
