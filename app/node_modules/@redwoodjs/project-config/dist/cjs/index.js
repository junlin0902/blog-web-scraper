"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  TargetEnum: () => TargetEnum,
  ensurePosixPath: () => ensurePosixPath,
  findUp: () => findUp,
  getAppRouteHook: () => getAppRouteHook,
  getBaseDir: () => getBaseDir,
  getBaseDirFromFile: () => getBaseDirFromFile,
  getConfig: () => getConfig,
  getConfigPath: () => getConfigPath,
  getPaths: () => getPaths,
  getRawConfig: () => getRawConfig,
  getRouteHookForPage: () => getRouteHookForPage,
  importStatementPath: () => importStatementPath,
  isTypeScriptProject: () => isTypeScriptProject,
  processPagesDir: () => processPagesDir,
  projectIsEsm: () => projectIsEsm,
  projectRootIsEsm: () => projectRootIsEsm,
  projectSideIsEsm: () => projectSideIsEsm,
  resolveFile: () => resolveFile
});
module.exports = __toCommonJS(src_exports);

// src/config.ts
var import_fs2 = __toESM(require("fs"), 1);
var import_deepmerge = __toESM(require("deepmerge"), 1);
var toml = __toESM(require("smol-toml"), 1);
var import_string_env_interpolation = require("string-env-interpolation");

// src/findUp.ts
var import_fs = __toESM(require("fs"), 1);
var import_path = __toESM(require("path"), 1);
function findUp(file, startingDirectory = process.cwd()) {
  const possibleFilepath = import_path.default.join(startingDirectory, file);
  if (import_fs.default.existsSync(possibleFilepath)) {
    return possibleFilepath;
  }
  const parentDirectory = import_path.default.dirname(startingDirectory);
  if (parentDirectory === startingDirectory) {
    return null;
  }
  return findUp(file, parentDirectory);
}

// src/configPath.ts
var CONFIG_FILE_NAME = "redwood.toml";
var getConfigPathCache = /* @__PURE__ */ new Map();
var getConfigPath = (cwd = process.env.RWJS_CWD ?? process.cwd()) => {
  if (getConfigPathCache.has(cwd)) {
    return getConfigPathCache.get(cwd);
  }
  const configPath = findUp(CONFIG_FILE_NAME, cwd);
  if (!configPath) {
    throw new Error(
      `Could not find a "${CONFIG_FILE_NAME}" file, are you sure you're in a Redwood project?`
    );
  }
  getConfigPathCache.set(cwd, configPath);
  return configPath;
};

// src/config.ts
var TargetEnum = /* @__PURE__ */ ((TargetEnum2) => {
  TargetEnum2["NODE"] = "node";
  TargetEnum2["BROWSER"] = "browser";
  TargetEnum2["REACT_NATIVE"] = "react-native";
  TargetEnum2["ELECTRON"] = "electron";
  return TargetEnum2;
})(TargetEnum || {});
var DEFAULT_CONFIG = {
  web: {
    title: "Redwood App",
    port: 8910,
    path: "./web",
    target: "browser" /* BROWSER */,
    includeEnvironmentVariables: [],
    apiUrl: "/.redwood/functions",
    fastRefresh: true,
    a11y: true,
    sourceMap: false
  },
  api: {
    title: "Redwood App",
    port: 8911,
    path: "./api",
    target: "node" /* NODE */,
    schemaPath: "./api/db/schema.prisma",
    serverConfig: "./api/server.config.js",
    debugPort: 18911
  },
  graphql: {
    fragments: false,
    trustedDocuments: false,
    includeScalars: { File: true }
  },
  browser: {
    open: false
  },
  generate: {
    tests: true,
    stories: true,
    nestScaffoldByModel: true
  },
  notifications: {
    versionUpdates: []
  },
  studio: {
    basePort: 4318,
    graphiql: {
      authImpersonation: {
        authProvider: void 0,
        userId: void 0,
        email: void 0,
        jwtSecret: "secret"
      }
    }
  },
  experimental: {
    opentelemetry: {
      enabled: false,
      wrapApi: true
    },
    cli: {
      autoInstall: true,
      plugins: [
        {
          package: "@redwoodjs/cli-storybook-vite"
        },
        {
          package: "@redwoodjs/cli-data-migrate"
        }
      ]
    },
    useSDLCodeGenForGraphQLTypes: false,
    streamingSsr: {
      enabled: false
    },
    rsc: {
      enabled: false
    },
    realtime: {
      enabled: false
    },
    reactCompiler: {
      enabled: false,
      lintOnly: false
    }
  }
};
var getConfig = (configPath = getConfigPath()) => {
  try {
    return (0, import_deepmerge.default)(DEFAULT_CONFIG, getRawConfig(configPath));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
};
function getRawConfig(configPath = getConfigPath()) {
  try {
    return toml.parse((0, import_string_env_interpolation.env)(import_fs2.default.readFileSync(configPath, "utf8")));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
}

// src/paths.ts
var import_fs3 = __toESM(require("fs"), 1);
var import_path2 = __toESM(require("path"), 1);
var import_fast_glob = __toESM(require("fast-glob"), 1);
var PATH_API_DIR_FUNCTIONS = "api/src/functions";
var PATH_RW_SCRIPTS = "scripts";
var PATH_API_DIR_GRAPHQL = "api/src/graphql";
var PATH_API_DIR_CONFIG = "api/src/config";
var PATH_API_DIR_MODELS = "api/src/models";
var PATH_API_DIR_JOBS = "api/src/jobs";
var PATH_API_DIR_LIB = "api/src/lib";
var PATH_API_DIR_GENERATORS = "api/generators";
var PATH_API_DIR_SERVICES = "api/src/services";
var PATH_API_DIR_DIRECTIVES = "api/src/directives";
var PATH_API_DIR_SUBSCRIPTIONS = "api/src/subscriptions";
var PATH_API_DIR_SRC = "api/src";
var PATH_API_DIR_DIST = "api/dist";
var PATH_WEB_ROUTES = "web/src/Routes";
var PATH_WEB_DIR_LAYOUTS = "web/src/layouts/";
var PATH_WEB_DIR_PAGES = "web/src/pages/";
var PATH_WEB_DIR_COMPONENTS = "web/src/components";
var PATH_WEB_DIR_STORYBOOK_CONFIG = "web/.storybook";
var PATH_WEB_DIR_SRC = "web/src";
var PATH_WEB_DIR_SRC_APP = "web/src/App";
var PATH_WEB_DIR_SRC_DOCUMENT = "web/src/Document";
var PATH_WEB_INDEX_HTML = "web/src/index.html";
var PATH_WEB_DIR_GENERATORS = "web/generators";
var PATH_WEB_DIR_CONFIG = "web/config";
var PATH_WEB_DIR_CONFIG_VITE = "web/vite.config";
var PATH_WEB_DIR_ENTRY_CLIENT = "web/src/entry.client";
var PATH_WEB_DIR_ENTRY_SERVER = "web/src/entry.server";
var PATH_WEB_DIR_GRAPHQL = "web/src/graphql";
var PATH_WEB_DIR_CONFIG_POSTCSS = "web/config/postcss.config.js";
var PATH_WEB_DIR_CONFIG_STORYBOOK_CONFIG = "web/config/storybook.config.js";
var PATH_WEB_DIR_CONFIG_STORYBOOK_PREVIEW = "web/config/storybook.preview";
var PATH_WEB_DIR_CONFIG_STORYBOOK_MANAGER = "web/config/storybook.manager.js";
var PATH_WEB_DIR_DIST = "web/dist";
var PATH_WEB_DIR_DIST_BROWSER = "web/dist/browser";
var PATH_WEB_DIR_DIST_RSC = "web/dist/rsc";
var PATH_WEB_DIR_DIST_SSR = "web/dist/ssr";
var PATH_WEB_DIR_DIST_SSR_ENTRY_SERVER = "web/dist/ssr/entry.server.mjs";
var PATH_WEB_DIR_DIST_SSR_DOCUMENT = "web/dist/ssr/Document.mjs";
var PATH_WEB_DIR_DIST_SSR_ROUTEHOOKS = "web/dist/ssr/routeHooks";
var PATH_WEB_DIR_DIST_RSC_ENTRIES = "web/dist/rsc/entries.mjs";
var PATH_WEB_DIR_ROUTE_MANIFEST = "web/dist/ssr/route-manifest.json";
var getBaseDir = (configPath = getConfigPath()) => {
  return import_path2.default.dirname(configPath);
};
var getBaseDirFromFile = (file) => {
  return getBaseDir(getConfigPath(import_path2.default.dirname(file)));
};
var resolveFile = (filePath, extensions = [".js", ".tsx", ".ts", ".jsx", ".mjs", ".mts"]) => {
  for (const extension of extensions) {
    const p = `${filePath}${extension}`;
    if (import_fs3.default.existsSync(p)) {
      return p;
    }
  }
  return null;
};
var getPathsCache = /* @__PURE__ */ new Map();
var getPaths = (BASE_DIR = getBaseDir()) => {
  if (getPathsCache.has(BASE_DIR)) {
    return getPathsCache.get(BASE_DIR);
  }
  const routes = resolveFile(import_path2.default.join(BASE_DIR, PATH_WEB_ROUTES));
  const { schemaPath } = getConfig(getConfigPath(BASE_DIR)).api;
  const schemaDir = import_path2.default.dirname(schemaPath);
  const viteConfig = resolveFile(
    import_path2.default.join(BASE_DIR, PATH_WEB_DIR_CONFIG_VITE)
  );
  const paths = {
    base: BASE_DIR,
    generated: {
      base: import_path2.default.join(BASE_DIR, ".redwood"),
      schema: import_path2.default.join(BASE_DIR, ".redwood/schema.graphql"),
      types: {
        includes: import_path2.default.join(BASE_DIR, ".redwood/types/includes"),
        mirror: import_path2.default.join(BASE_DIR, ".redwood/types/mirror")
      },
      prebuild: import_path2.default.join(BASE_DIR, ".redwood/prebuild")
    },
    scripts: import_path2.default.join(BASE_DIR, PATH_RW_SCRIPTS),
    api: {
      base: import_path2.default.join(BASE_DIR, "api"),
      dataMigrations: import_path2.default.join(BASE_DIR, schemaDir, "dataMigrations"),
      db: import_path2.default.join(BASE_DIR, schemaDir),
      dbSchema: import_path2.default.join(BASE_DIR, schemaPath),
      functions: import_path2.default.join(BASE_DIR, PATH_API_DIR_FUNCTIONS),
      graphql: import_path2.default.join(BASE_DIR, PATH_API_DIR_GRAPHQL),
      lib: import_path2.default.join(BASE_DIR, PATH_API_DIR_LIB),
      generators: import_path2.default.join(BASE_DIR, PATH_API_DIR_GENERATORS),
      config: import_path2.default.join(BASE_DIR, PATH_API_DIR_CONFIG),
      services: import_path2.default.join(BASE_DIR, PATH_API_DIR_SERVICES),
      directives: import_path2.default.join(BASE_DIR, PATH_API_DIR_DIRECTIVES),
      subscriptions: import_path2.default.join(BASE_DIR, PATH_API_DIR_SUBSCRIPTIONS),
      src: import_path2.default.join(BASE_DIR, PATH_API_DIR_SRC),
      dist: import_path2.default.join(BASE_DIR, PATH_API_DIR_DIST),
      types: import_path2.default.join(BASE_DIR, "api/types"),
      models: import_path2.default.join(BASE_DIR, PATH_API_DIR_MODELS),
      mail: import_path2.default.join(BASE_DIR, PATH_API_DIR_SRC, "mail"),
      jobs: import_path2.default.join(import_path2.default.join(BASE_DIR, PATH_API_DIR_JOBS)),
      distJobs: import_path2.default.join(import_path2.default.join(BASE_DIR, PATH_API_DIR_DIST, "jobs")),
      jobsConfig: resolveFile(import_path2.default.join(BASE_DIR, PATH_API_DIR_LIB, "jobs")),
      distJobsConfig: resolveFile(
        import_path2.default.join(BASE_DIR, PATH_API_DIR_DIST, "lib", "jobs")
      ),
      logger: resolveFile(import_path2.default.join(BASE_DIR, PATH_API_DIR_LIB, "logger"))
    },
    web: {
      routes,
      base: import_path2.default.join(BASE_DIR, "web"),
      pages: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_PAGES),
      components: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_COMPONENTS),
      layouts: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_LAYOUTS),
      src: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_SRC),
      storybook: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_STORYBOOK_CONFIG),
      generators: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_GENERATORS),
      app: resolveFile(import_path2.default.join(BASE_DIR, PATH_WEB_DIR_SRC_APP)),
      document: resolveFile(
        import_path2.default.join(BASE_DIR, PATH_WEB_DIR_SRC_DOCUMENT)
      ),
      html: import_path2.default.join(BASE_DIR, PATH_WEB_INDEX_HTML),
      config: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_CONFIG),
      viteConfig,
      postcss: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_CONFIG_POSTCSS),
      storybookConfig: import_path2.default.join(
        BASE_DIR,
        PATH_WEB_DIR_CONFIG_STORYBOOK_CONFIG
      ),
      storybookPreviewConfig: resolveFile(
        import_path2.default.join(BASE_DIR, PATH_WEB_DIR_CONFIG_STORYBOOK_PREVIEW)
      ),
      storybookManagerConfig: import_path2.default.join(
        BASE_DIR,
        PATH_WEB_DIR_CONFIG_STORYBOOK_MANAGER
      ),
      dist: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST),
      distBrowser: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_BROWSER),
      distRsc: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_RSC),
      distSsr: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_SSR),
      distSsrDocument: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_SSR_DOCUMENT),
      distSsrEntryServer: import_path2.default.join(
        BASE_DIR,
        PATH_WEB_DIR_DIST_SSR_ENTRY_SERVER
      ),
      distRouteHooks: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_SSR_ROUTEHOOKS),
      distRscEntries: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_DIST_RSC_ENTRIES),
      routeManifest: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_ROUTE_MANIFEST),
      types: import_path2.default.join(BASE_DIR, "web/types"),
      entryClient: resolveFile(import_path2.default.join(BASE_DIR, PATH_WEB_DIR_ENTRY_CLIENT)),
      // new vite/stream entry point for client
      entryServer: resolveFile(import_path2.default.join(BASE_DIR, PATH_WEB_DIR_ENTRY_SERVER)),
      graphql: import_path2.default.join(BASE_DIR, PATH_WEB_DIR_GRAPHQL)
    }
  };
  import_fs3.default.mkdirSync(paths.generated.types.includes, { recursive: true });
  import_fs3.default.mkdirSync(paths.generated.types.mirror, { recursive: true });
  getPathsCache.set(BASE_DIR, paths);
  return paths;
};
var getRouteHookForPage = (pagePath) => {
  if (!pagePath) {
    return null;
  }
  return import_fast_glob.default.sync("*.routeHooks.{js,ts,tsx,jsx}", {
    absolute: true,
    cwd: import_path2.default.dirname(pagePath)
    // the page's folder
  }).at(0) || null;
};
var getAppRouteHook = (forProd = false) => {
  const rwPaths = getPaths();
  if (forProd) {
    const distAppRouteHook = import_path2.default.join(
      rwPaths.web.distRouteHooks,
      "App.routeHooks.js"
    );
    try {
      import_fs3.default.statSync(distAppRouteHook).isFile();
      return distAppRouteHook;
    } catch {
      return null;
    }
  }
  return resolveFile(import_path2.default.join(rwPaths.web.src, "App.routeHooks"));
};
var processPagesDir = (webPagesDir = getPaths().web.pages) => {
  const pagePaths = import_fast_glob.default.sync("**/*Page.{js,jsx,ts,tsx}", {
    cwd: webPagesDir,
    ignore: ["node_modules"]
  });
  return pagePaths.map((pagePath) => {
    const p = import_path2.default.parse(pagePath);
    const importName = p.dir.replace(/\//g, "");
    const importPath = importStatementPath(
      import_path2.default.join(webPagesDir, p.dir, p.name)
    );
    const importStatement = `const ${importName} = { name: '${importName}', loader: import('${importPath}') }`;
    return {
      importName,
      constName: importName,
      importPath,
      path: import_path2.default.join(webPagesDir, pagePath),
      importStatement
    };
  });
};
var ensurePosixPath = (path3) => {
  let posixPath = path3;
  if (process.platform === "win32") {
    if (/^[A-Z]:\\/.test(path3)) {
      const drive = path3[0].toLowerCase();
      posixPath = `/${drive}/${path3.substring(3)}`;
    }
    posixPath = posixPath.replace(/\\/g, "/");
  }
  return posixPath;
};
var importStatementPath = (path3) => {
  let importPath = path3;
  if (process.platform === "win32") {
    importPath = importPath.replaceAll("\\", "/");
  }
  return importPath;
};
function packageJsonIsEsm(packageJsonPath) {
  const packageJsonContents = JSON.parse(
    import_fs3.default.readFileSync(packageJsonPath, "utf-8")
  );
  return packageJsonContents.type === "module";
}
function projectRootIsEsm() {
  return packageJsonIsEsm(import_path2.default.join(getPaths().base, "package.json"));
}
function projectSideIsEsm(side) {
  const redwoodProjectPaths = getPaths();
  return packageJsonIsEsm(
    import_path2.default.join(redwoodProjectPaths[side].base, "package.json")
  );
}
function projectIsEsm() {
  if (!projectRootIsEsm()) {
    return false;
  }
  for (const side of ["api", "web"]) {
    if (!projectSideIsEsm(side)) {
      return false;
    }
  }
  return true;
}
var isTypeScriptProject = () => {
  const paths = getPaths();
  return import_fs3.default.existsSync(import_path2.default.join(paths.web.base, "tsconfig.json")) || import_fs3.default.existsSync(import_path2.default.join(paths.api.base, "tsconfig.json"));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TargetEnum,
  ensurePosixPath,
  findUp,
  getAppRouteHook,
  getBaseDir,
  getBaseDirFromFile,
  getConfig,
  getConfigPath,
  getPaths,
  getRawConfig,
  getRouteHookForPage,
  importStatementPath,
  isTypeScriptProject,
  processPagesDir,
  projectIsEsm,
  projectRootIsEsm,
  projectSideIsEsm,
  resolveFile
});
