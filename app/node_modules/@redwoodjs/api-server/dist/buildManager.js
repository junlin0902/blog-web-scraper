"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var buildManager_exports = {};
__export(buildManager_exports, {
  BuildManager: () => BuildManager
});
module.exports = __toCommonJS(buildManager_exports);
var import_lodash = require("lodash");
class BuildManager {
  shouldRebuild;
  shouldClean;
  debouncedBuild;
  buildFn;
  constructor(buildFn) {
    this.shouldRebuild = true;
    this.shouldClean = false;
    this.buildFn = buildFn;
    this.debouncedBuild = (0, import_lodash.debounce)(
      async (options) => {
        try {
          await this.buildFn({
            ...options,
            rebuild: this.shouldRebuild,
            clean: this.shouldClean
          });
        } finally {
          this.shouldRebuild = true;
          this.shouldClean = false;
        }
      },
      process.env.RWJS_DELAY_RESTART ? parseInt(process.env.RWJS_DELAY_RESTART, 10) : 500
    );
  }
  // Wrapper method to handle options and set precedence flags.
  // If we ever see a `rebuild: false` option while debouncing, we never want to rebuild.
  // If we ever see a `clean: true` option, we always want to clean.
  async run(options) {
    if (options.rebuild === false) {
      this.shouldRebuild = false;
    }
    if (options.clean) {
      this.shouldClean = true;
    }
    await this.debouncedBuild(options);
  }
  cancelScheduledBuild() {
    this.debouncedBuild.cancel();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BuildManager
});
