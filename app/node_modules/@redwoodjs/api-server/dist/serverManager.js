"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serverManager_exports = {};
__export(serverManager_exports, {
  ServerManager: () => ServerManager,
  serverManager: () => serverManager
});
module.exports = __toCommonJS(serverManager_exports);
var import_child_process = require("child_process");
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_yargs = __toESM(require("yargs"));
var import_helpers = require("yargs/helpers");
var import_project_config = require("@redwoodjs/project-config");
const argv = (0, import_yargs.default)((0, import_helpers.hideBin)(process.argv)).option("debugPort", {
  description: "Port on which to expose API server debugger",
  type: "number",
  alias: ["debug-port", "dp"]
}).option("port", {
  description: "The port to listen at",
  type: "number",
  alias: "p"
}).parseSync();
const rwjsPaths = (0, import_project_config.getPaths)();
class ServerManager {
  httpServerProcess = null;
  async startApiServer() {
    const forkOpts = {
      execArgv: process.execArgv
    };
    if ((0, import_project_config.getConfig)().experimental.opentelemetry.enabled) {
      const opentelemetrySDKScriptPath = import_path.default.join(
        rwjsPaths.api.dist,
        "opentelemetry.js"
      );
      const opentelemetrySDKScriptPathRelative = import_path.default.relative(
        rwjsPaths.base,
        opentelemetrySDKScriptPath
      );
      console.log(
        `Setting up OpenTelemetry using the setup file: ${opentelemetrySDKScriptPathRelative}`
      );
      if (import_fs.default.existsSync(opentelemetrySDKScriptPath)) {
        forkOpts.execArgv = forkOpts.execArgv.concat([
          `--require=${opentelemetrySDKScriptPath}`
        ]);
      } else {
        console.error(
          `OpenTelemetry setup file does not exist at ${opentelemetrySDKScriptPathRelative}`
        );
      }
    }
    const debugPort = argv["debug-port"];
    if (debugPort) {
      forkOpts.execArgv = forkOpts.execArgv.concat([`--inspect=${debugPort}`]);
    }
    const port = argv.port ?? (0, import_project_config.getConfig)().api.port;
    const serverFile = (0, import_project_config.resolveFile)(`${rwjsPaths.api.dist}/server`);
    if (serverFile) {
      this.httpServerProcess = (0, import_child_process.fork)(
        serverFile,
        ["--apiPort", port.toString()],
        forkOpts
      );
    } else {
      this.httpServerProcess = (0, import_child_process.fork)(
        import_path.default.join(__dirname, "bin.js"),
        ["api", "--port", port.toString()],
        forkOpts
      );
    }
  }
  async restartApiServer() {
    this.killApiServer();
    await this.startApiServer();
  }
  killApiServer() {
    this.httpServerProcess?.emit("exit");
    this.httpServerProcess?.kill();
  }
}
const serverManager = new ServerManager();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ServerManager,
  serverManager
});
