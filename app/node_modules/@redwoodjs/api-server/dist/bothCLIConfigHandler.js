"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bothCLIConfigHandler_exports = {};
__export(bothCLIConfigHandler_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(bothCLIConfigHandler_exports);
var import_chalk = __toESM(require("chalk"));
var import_fastify_web = require("@redwoodjs/fastify-web");
var import_cliHelpers = require("./cliHelpers");
var import_createServer = require("./createServer");
var import_fastify = __toESM(require("./fastify"));
async function handler(options) {
  const timeStart = Date.now();
  console.log(import_chalk.default.dim.italic("Starting API and Web Servers..."));
  options.webHost ??= (0, import_cliHelpers.getWebHost)();
  options.webPort ??= (0, import_cliHelpers.getWebPort)();
  options.apiHost ??= (0, import_cliHelpers.getAPIHost)();
  options.apiPort ??= (0, import_cliHelpers.getAPIPort)();
  options.apiRootPath = (0, import_fastify_web.coerceRootPath)(options.apiRootPath ?? "/");
  const apiProxyTarget = [
    "http://",
    options.apiHost.includes(":") ? `[${options.apiHost}]` : options.apiHost,
    ":",
    options.apiPort,
    options.apiRootPath
  ].join("");
  const webFastify = await (0, import_fastify.default)();
  webFastify.register(import_fastify_web.redwoodFastifyWeb, {
    redwood: {
      apiProxyTarget
    }
  });
  const apiFastify = await (0, import_createServer.createServer)({
    apiRootPath: options.apiRootPath
  });
  await webFastify.listen({
    port: options.webPort,
    host: options.webHost,
    listenTextResolver: getListenTextResolver("Web")
  });
  webFastify.log.trace(
    { custom: { ...webFastify.initialConfig } },
    "Fastify server configuration"
  );
  webFastify.log.trace(`Registered plugins
${webFastify.printPlugins()}`);
  await apiFastify.listen({
    port: options.apiPort,
    host: options.apiHost,
    listenTextResolver: getListenTextResolver("API")
  });
  apiFastify.log.trace(
    { custom: { ...apiFastify.initialConfig } },
    "Fastify server configuration"
  );
  apiFastify.log.trace(`Registered plugins
${apiFastify.printPlugins()}`);
  console.log(import_chalk.default.dim.italic("Took " + (Date.now() - timeStart) + " ms"));
  const webServer = import_chalk.default.green(webFastify.listeningOrigin);
  const apiServer = import_chalk.default.magenta(
    `${apiFastify.listeningOrigin}${options.apiRootPath}`
  );
  const graphqlEndpoint = import_chalk.default.magenta(`${apiServer}graphql`);
  console.log(`Web server listening at ${webServer}`);
  console.log(`API server listening at ${apiServer}`);
  console.log(`GraphQL endpoint at ${graphqlEndpoint}`);
  process?.send?.("ready");
}
function getListenTextResolver(side) {
  return (address) => {
    if (process.env.NODE_ENV !== "production") {
      address = address.replace(/http:\/\/\[::\]/, "http://localhost");
    }
    return `${side} server listening at ${address}`;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
