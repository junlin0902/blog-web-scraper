"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var fastify_exports = {};
__export(fastify_exports, {
  DEFAULT_OPTIONS: () => DEFAULT_OPTIONS,
  createFastifyInstance: () => createFastifyInstance,
  default: () => fastify_default,
  loadFastifyConfig: () => loadFastifyConfig
});
module.exports = __toCommonJS(fastify_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_fastify = __toESM(require("fastify"));
var import_store = require("@redwoodjs/context/dist/store");
var import_project_config = require("@redwoodjs/project-config");
const DEFAULT_OPTIONS = {
  logger: {
    level: process.env.NODE_ENV === "development" ? "debug" : "info"
  }
};
let isServerConfigLoaded = false;
let serverConfigFile = {
  config: DEFAULT_OPTIONS,
  configureFastify: async (fastify, options) => {
    fastify.log.trace(
      options,
      `In configureFastify hook for side: ${options?.side}`
    );
    return fastify;
  }
};
async function loadFastifyConfig() {
  const serverConfigPath = import_path.default.join(
    (0, import_project_config.getPaths)().base,
    (0, import_project_config.getConfig)().api.serverConfig
  );
  if (!import_fs.default.existsSync(serverConfigPath)) {
    return serverConfigFile;
  }
  if (!isServerConfigLoaded) {
    console.log(`Loading server config from ${serverConfigPath}`);
    const config = await import(`file://${serverConfigPath}`);
    serverConfigFile = { ...config.default };
    isServerConfigLoaded = true;
  }
  return serverConfigFile;
}
const createFastifyInstance = async (options) => {
  const { config } = await loadFastifyConfig();
  const fastify = (0, import_fastify.default)(options || config || DEFAULT_OPTIONS);
  fastify.addHook("onRequest", (_req, _reply, done) => {
    (0, import_store.getAsyncStoreInstance)().run(/* @__PURE__ */ new Map(), done);
  });
  return fastify;
};
var fastify_default = createFastifyInstance;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_OPTIONS,
  createFastifyInstance,
  loadFastifyConfig
});
