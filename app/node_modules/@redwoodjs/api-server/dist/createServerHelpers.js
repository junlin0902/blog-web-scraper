"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createServerHelpers_exports = {};
__export(createServerHelpers_exports, {
  DEFAULT_CREATE_SERVER_OPTIONS: () => DEFAULT_CREATE_SERVER_OPTIONS,
  resolveOptions: () => resolveOptions
});
module.exports = __toCommonJS(createServerHelpers_exports);
var import_util = require("util");
var import_helpers = require("@redwoodjs/fastify-web/dist/helpers");
var import_cliHelpers = require("./cliHelpers");
const DEFAULT_CREATE_SERVER_OPTIONS = {
  apiRootPath: "/",
  logger: {
    level: process.env.LOG_LEVEL ?? (process.env.NODE_ENV === "development" ? "debug" : "warn")
  },
  fastifyServerOptions: {
    requestTimeout: 15e3,
    bodyLimit: 1024 * 1024 * 100
    // 100MB
  },
  configureApiServer: () => {
  },
  parseArgs: true
};
function resolveOptions(options = {}, args) {
  options.parseArgs ??= true;
  options.logger ??= DEFAULT_CREATE_SERVER_OPTIONS.logger;
  const resolvedOptions = {
    apiRootPath: options.apiRootPath ?? DEFAULT_CREATE_SERVER_OPTIONS.apiRootPath,
    fastifyServerOptions: options.fastifyServerOptions ?? {
      requestTimeout: DEFAULT_CREATE_SERVER_OPTIONS.fastifyServerOptions.requestTimeout,
      logger: options.logger ?? DEFAULT_CREATE_SERVER_OPTIONS.logger,
      bodyLimit: DEFAULT_CREATE_SERVER_OPTIONS.fastifyServerOptions.bodyLimit
    },
    configureApiServer: options.configureApiServer ?? DEFAULT_CREATE_SERVER_OPTIONS.configureApiServer,
    apiHost: (0, import_cliHelpers.getAPIHost)(),
    apiPort: (0, import_cliHelpers.getAPIPort)()
  };
  resolvedOptions.fastifyServerOptions.requestTimeout ??= DEFAULT_CREATE_SERVER_OPTIONS.fastifyServerOptions.requestTimeout;
  resolvedOptions.fastifyServerOptions.logger = options.logger;
  if (options.parseArgs) {
    const { values } = (0, import_util.parseArgs)({
      options: {
        apiHost: {
          type: "string"
        },
        apiPort: {
          type: "string",
          short: "p"
        },
        apiRootPath: {
          type: "string"
        }
      },
      strict: false,
      ...args && { args }
    });
    if (values.apiHost && typeof values.apiHost !== "string") {
      throw new Error("`apiHost` must be a string");
    }
    if (values.apiHost) {
      resolvedOptions.apiHost = values.apiHost;
    }
    if (values.apiPort) {
      resolvedOptions.apiPort = +values.apiPort;
      if (isNaN(resolvedOptions.apiPort)) {
        throw new Error("`apiPort` must be an integer");
      }
    }
    if (values.apiRootPath && typeof values.apiRootPath !== "string") {
      throw new Error("`apiRootPath` must be a string");
    }
    if (values.apiRootPath) {
      resolvedOptions.apiRootPath = values.apiRootPath;
    }
  }
  resolvedOptions.apiRootPath = (0, import_helpers.coerceRootPath)(resolvedOptions.apiRootPath);
  return resolvedOptions;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_CREATE_SERVER_OPTIONS,
  resolveOptions
});
