import type { FastifyListenOptions, FastifyServerOptions, FastifyInstance } from 'fastify';
export type StartOptions = Omit<FastifyListenOptions, 'port' | 'host'>;
export interface Server extends FastifyInstance {
    start: (options?: StartOptions) => Promise<string>;
}
export interface CreateServerOptions {
    /**
     * The prefix for all routes. Defaults to `/`.
     */
    apiRootPath?: string;
    /**
     * Logger instance or options.
     */
    logger?: FastifyServerOptions['logger'];
    /**
     * Options for the fastify server instance.
     * Omitting logger here because we move it up.
     */
    fastifyServerOptions?: Omit<FastifyServerOptions, 'logger'>;
    /**
     * Customise the API server fastify plugin before it is registered
     */
    configureApiServer?: (server: Server) => void | Promise<void>;
    /**
     * Whether to parse args or not. Defaults to `true`.
     */
    parseArgs?: boolean;
}
type DefaultCreateServerOptions = Required<Omit<CreateServerOptions, 'fastifyServerOptions'> & {
    fastifyServerOptions: FastifyServerOptions;
}>;
export declare const DEFAULT_CREATE_SERVER_OPTIONS: DefaultCreateServerOptions;
export declare function resolveOptions(options?: CreateServerOptions, args?: string[]): Required<Omit<CreateServerOptions, "logger" | "fastifyServerOptions" | "parseArgs"> & {
    fastifyServerOptions: FastifyServerOptions;
    apiPort: number;
    apiHost: string;
}>;
export {};
//# sourceMappingURL=createServerHelpers.d.ts.map