"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var webServer_exports = {};
__export(webServer_exports, {
  serveWeb: () => serveWeb
});
module.exports = __toCommonJS(webServer_exports);
var import_path = __toESM(require("path"));
var import_chalk = __toESM(require("chalk"));
var import_fastify = __toESM(require("fastify"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_fastify_web = require("@redwoodjs/fastify-web");
var import_project_config = require("@redwoodjs/project-config");
async function serveWeb(options = {}) {
  const start = Date.now();
  console.log(import_chalk.default.dim.italic("Starting Web Server..."));
  const distIndexExists = await import_fs_extra.default.pathExists(
    import_path.default.join((0, import_project_config.getPaths)().web.dist, "index.html")
  );
  if (!distIndexExists) {
    throw new Error(
      "no built files to serve; run `yarn rw build web` before serving the web side"
    );
  }
  if (process.env.REDWOOD_WEB_PORT) {
    options.port ??= parseInt(process.env.REDWOOD_WEB_PORT);
  }
  options.port ??= (0, import_project_config.getConfig)().web.port;
  options.host ??= process.env.REDWOOD_WEB_HOST;
  options.host ??= (0, import_project_config.getConfig)().web.host;
  options.host ??= process.env.NODE_ENV === "production" ? "0.0.0.0" : "::";
  if (process.env.NODE_ENV === "production" && options.host !== "0.0.0.0") {
    console.warn(
      `Warning: host '${options.host}' may need to be '0.0.0.0' in production for containerized deployments`
    );
  }
  const fastify = (0, import_fastify.default)({
    requestTimeout: 15e3,
    logger: {
      level: process.env.LOG_LEVEL ?? (process.env.NODE_ENV === "development" ? "debug" : "warn")
    }
  });
  fastify.register(import_fastify_web.redwoodFastifyWeb, { redwood: options });
  const address = await fastify.listen({
    port: options.port,
    host: options.host
  });
  console.log(import_chalk.default.dim.italic("Took " + (Date.now() - start) + " ms"));
  console.log(`Web server listening at ${import_chalk.default.green(address)}`);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  serveWeb
});
