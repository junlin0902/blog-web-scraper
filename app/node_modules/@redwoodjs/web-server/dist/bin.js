#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/webServer.ts
async function serveWeb(options = {}) {
  const start = Date.now();
  console.log(import_chalk.default.dim.italic("Starting Web Server..."));
  const distIndexExists = await import_fs_extra.default.pathExists(
    import_path.default.join((0, import_project_config.getPaths)().web.dist, "index.html")
  );
  if (!distIndexExists) {
    throw new Error(
      "no built files to serve; run `yarn rw build web` before serving the web side"
    );
  }
  if (process.env.REDWOOD_WEB_PORT) {
    options.port ??= parseInt(process.env.REDWOOD_WEB_PORT);
  }
  options.port ??= (0, import_project_config.getConfig)().web.port;
  options.host ??= process.env.REDWOOD_WEB_HOST;
  options.host ??= (0, import_project_config.getConfig)().web.host;
  options.host ??= process.env.NODE_ENV === "production" ? "0.0.0.0" : "::";
  if (process.env.NODE_ENV === "production" && options.host !== "0.0.0.0") {
    console.warn(
      `Warning: host '${options.host}' may need to be '0.0.0.0' in production for containerized deployments`
    );
  }
  const fastify = (0, import_fastify.default)({
    requestTimeout: 15e3,
    logger: {
      level: process.env.LOG_LEVEL ?? (process.env.NODE_ENV === "development" ? "debug" : "warn")
    }
  });
  fastify.register(import_fastify_web.redwoodFastifyWeb, { redwood: options });
  const address = await fastify.listen({
    port: options.port,
    host: options.host
  });
  console.log(import_chalk.default.dim.italic("Took " + (Date.now() - start) + " ms"));
  console.log(`Web server listening at ${import_chalk.default.green(address)}`);
}
var import_path, import_chalk, import_fastify, import_fs_extra, import_fastify_web, import_project_config;
var init_webServer = __esm({
  "src/webServer.ts"() {
    "use strict";
    import_path = __toESM(require("path"));
    import_chalk = __toESM(require("chalk"));
    import_fastify = __toESM(require("fastify"));
    import_fs_extra = __toESM(require("fs-extra"));
    import_fastify_web = require("@redwoodjs/fastify-web");
    import_project_config = require("@redwoodjs/project-config");
  }
});

// src/cliConfigHandler.ts
async function handler(options) {
  try {
    await serveWeb(options);
  } catch (error) {
    process.exitCode ||= 1;
    console.error(`Error: ${error.message}`);
  }
}
var init_cliConfigHandler = __esm({
  "src/cliConfigHandler.ts"() {
    "use strict";
    init_webServer();
  }
});

// src/bin.ts
var import_path2 = __toESM(require("path"));
var import_dotenv_defaults = require("dotenv-defaults");
var import_helpers = require("yargs/helpers");
var import_yargs = __toESM(require("yargs/yargs"));
var import_project_config2 = require("@redwoodjs/project-config");

// package.json
var bin = {
  "rw-web-server": "./dist/bin.js"
};

// src/cliConfig.ts
var description = "Start a server for serving the web side";
function builder(yargs2) {
  yargs2.options({
    port: {
      description: "The port to listen on",
      type: "number",
      alias: "p"
    },
    host: {
      description: "The host to listen on. Note that you most likely want this to be '0.0.0.0' in production",
      type: "string"
    },
    apiProxyTarget: {
      description: "Forward requests from the apiUrl (in the redwood.toml) to this target. apiUrl must be a relative URL",
      type: "string",
      alias: "api-proxy-target"
    },
    // Deprecated alias of `apiProxyTarget`
    apiHost: {
      hidden: true,
      alias: "api-host"
    }
  });
}

// src/bin.ts
init_cliConfigHandler();
if (!process.env.REDWOOD_ENV_FILES_LOADED) {
  (0, import_dotenv_defaults.config)({
    path: import_path2.default.join((0, import_project_config2.getPaths)().base, ".env"),
    defaults: import_path2.default.join((0, import_project_config2.getPaths)().base, ".env.defaults"),
    multiline: true
  });
  process.env.REDWOOD_ENV_FILES_LOADED = "true";
}
process.env.NODE_ENV ??= "production";
var [scriptName] = Object.keys(bin);
(0, import_yargs.default)((0, import_helpers.hideBin)(process.argv)).scriptName(scriptName).alias("h", "help").alias("v", "version").strict().example(
  "yarn $0 --api-url=/api --api-proxy-target=https://api.redwood.horse",
  "Start the web server and proxy requests made to '/api' to 'https://api.redwood.horse'"
).example(
  "yarn $0 --api-url=https://api.redwood.horse",
  "Start the web server send api requests to 'https://api.redwood.horse' (make sure to configure CORS)"
).command("$0", description, builder, handler).parse();
