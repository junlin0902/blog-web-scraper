"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CookieJar_exports = {};
__export(CookieJar_exports, {
  CookieJar: () => CookieJar
});
module.exports = __toCommonJS(CookieJar_exports);
var import_cookie = __toESM(require("cookie"));
class CookieJar {
  map = /* @__PURE__ */ new Map();
  // This allows CookieJar to be used in MWRequest.cookie also
  // note that options are not available when constructed this way
  constructor(cookieString) {
    if (cookieString) {
      const parsedCookies = import_cookie.default.parse(cookieString);
      this.map = new Map(
        Object.entries(parsedCookies).map(([key, value]) => {
          return [key, { value }];
        })
      );
    }
  }
  set(name, value, options) {
    this.map.set(name, {
      value,
      options
    });
    return this;
  }
  get(name) {
    return this.map.get(name)?.value;
  }
  getWithOptions(name) {
    return this.map.get(name);
  }
  has(name) {
    return this.map.has(name);
  }
  /**
   * Won't delete a cookie from the jar, but will set it to expire
   * and set an empty value
   */
  unset(name) {
    return this.map.set(name, {
      value: "",
      options: {
        expires: /* @__PURE__ */ new Date(0)
      }
    });
  }
  /** Clear all cookies, or remove a specific cookie from the jar */
  clear(name) {
    if (name) {
      this.map.delete(name);
    } else {
      this.map.clear();
    }
  }
  entries() {
    return this.map.entries();
  }
  [Symbol.iterator]() {
    return this.map[Symbol.iterator]();
  }
  get size() {
    return this.map.size;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CookieJar
});
