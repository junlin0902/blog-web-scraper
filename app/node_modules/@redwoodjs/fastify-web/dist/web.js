"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/web.ts
var web_exports = {};
__export(web_exports, {
  coerceRootPath: () => coerceRootPath,
  redwoodFastifyWeb: () => redwoodFastifyWeb
});
module.exports = __toCommonJS(web_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_http_proxy = __toESM(require("@fastify/http-proxy"));
var import_static = __toESM(require("@fastify/static"));
var import_url_data = __toESM(require("@fastify/url-data"));
var import_fast_glob = __toESM(require("fast-glob"));
var import_project_config2 = require("@redwoodjs/project-config");

// src/helpers.ts
function coerceRootPath(path2) {
  const prefix = !path2.startsWith("/") ? "/" : "";
  const suffix = !path2.endsWith("/") ? "/" : "";
  return `${prefix}${path2}${suffix}`;
}

// src/resolveOptions.ts
var import_project_config = require("@redwoodjs/project-config");
function resolveOptions(options) {
  const redwoodOptions = options.redwood ?? {};
  const flags = {
    shouldRegisterApiUrl: false
  };
  redwoodOptions.apiUrl ??= (0, import_project_config.getConfig)().web.apiUrl;
  const apiUrlIsFullyQualifiedUrl = isFullyQualifiedUrl(redwoodOptions.apiUrl);
  if (redwoodOptions.apiHost && !redwoodOptions.apiProxyTarget) {
    redwoodOptions.apiProxyTarget = redwoodOptions.apiHost;
    delete redwoodOptions.apiHost;
  }
  if (redwoodOptions.apiUrl.trim() === "") {
    throw new Error(`\`apiUrl\` cannot be an empty string`);
  }
  if (redwoodOptions.apiProxyTarget && !isFullyQualifiedUrl(redwoodOptions.apiProxyTarget)) {
    throw new Error(
      `If you provide \`apiProxyTarget\`, it has to be a fully-qualified URL. \`apiProxyTarget\` is '${redwoodOptions.apiProxyTarget}'`
    );
  }
  if (!redwoodOptions.apiUrl && redwoodOptions.apiProxyTarget) {
    throw new Error(
      `If you provide \`apiProxyTarget\`, \`apiUrl\` has to be a relative URL. \`apiUrl\` is '${redwoodOptions.apiUrl}'`
    );
  }
  if (apiUrlIsFullyQualifiedUrl && redwoodOptions.apiProxyTarget) {
    throw new Error(
      `If you provide \`apiProxyTarget\`, \`apiUrl\` cannot be a fully-qualified URL. \`apiUrl\` is '${redwoodOptions.apiUrl}'`
    );
  }
  if (!apiUrlIsFullyQualifiedUrl && !redwoodOptions.apiProxyTarget) {
    flags.shouldRegisterApiUrl = true;
  }
  return { redwoodOptions, flags };
}
function isFullyQualifiedUrl(url) {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

// src/web.ts
async function redwoodFastifyWeb(fastify, opts) {
  const { redwoodOptions, flags } = resolveOptions(opts);
  fastify.register(import_url_data.default);
  fastify.register(import_static.default, { root: (0, import_project_config2.getPaths)().web.dist });
  if (redwoodOptions.apiProxyTarget) {
    fastify.register(import_http_proxy.default, {
      prefix: redwoodOptions.apiUrl,
      upstream: redwoodOptions.apiProxyTarget,
      disableCache: true,
      replyOptions: {
        rewriteRequestHeaders: (req, headers) => ({
          ...headers,
          // preserve the original host header, instead of letting it be overwritten by the proxy
          host: req.headers.host
        })
      }
    });
  }
  if (redwoodOptions.apiUrl && flags.shouldRegisterApiUrl) {
    const apiUrlHandler = (_req, reply) => {
      reply.code(200);
      reply.send({
        data: null,
        errors: [
          {
            message: `Bad Gateway: you may have misconfigured apiUrl and apiProxyTarget. If apiUrl is a relative URL, you must provide apiProxyTarget.`,
            extensions: {
              code: "BAD_GATEWAY",
              httpStatus: 502
            }
          }
        ]
      });
    };
    const apiUrlWarningPath = coerceRootPath(redwoodOptions.apiUrl);
    fastify.all(apiUrlWarningPath, apiUrlHandler);
    fastify.all(`${apiUrlWarningPath}*`, apiUrlHandler);
  }
  const prerenderedFiles = await (0, import_fast_glob.default)("**/*.html", {
    cwd: (0, import_project_config2.getPaths)().web.dist,
    ignore: ["index.html", "200.html", "404.html"]
  });
  for (const prerenderedFile of prerenderedFiles) {
    const [pathName] = prerenderedFile.split(".html");
    fastify.get(`/${pathName}`, (_, reply) => {
      reply.header("Content-Type", "text/html; charset=UTF-8");
      reply.sendFile(prerenderedFile);
    });
  }
  const prerenderIndexPath = import_path.default.join((0, import_project_config2.getPaths)().web.dist, "200.html");
  const fallbackIndexPath = import_fs.default.existsSync(prerenderIndexPath) ? "200.html" : "index.html";
  fastify.setNotFoundHandler({}, (req, reply) => {
    const urlData = req.urlData();
    const requestHasExtension = !!import_path.default.extname(urlData.path ?? "");
    if (requestHasExtension && urlData.path?.startsWith("/assets/")) {
      reply.code(404);
      return reply.send("Not Found");
    }
    reply.header("Content-Type", "text/html; charset=UTF-8");
    return reply.sendFile(fallbackIndexPath);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  coerceRootPath,
  redwoodFastifyWeb
});
