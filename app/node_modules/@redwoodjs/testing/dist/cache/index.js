"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cache_exports = {};
__export(cache_exports, {
  partialMatch: () => partialMatch
});
module.exports = __toCommonJS(cache_exports);
expect.extend({
  toHaveCached(cacheClient, keyOrExpectedValue, expectedValue) {
    let value;
    let regexKey;
    let stringKey;
    if (_isKVPair(keyOrExpectedValue, expectedValue)) {
      if (keyOrExpectedValue instanceof RegExp) {
        regexKey = keyOrExpectedValue;
      } else {
        stringKey = keyOrExpectedValue;
      }
      value = expectedValue;
    } else {
      value = keyOrExpectedValue;
    }
    let foundKVPair;
    let found = false;
    if (stringKey) {
      return _checkValueForKey(cacheClient, stringKey, value);
    } else {
      for (const [cachedKey, cachedValue] of Object.entries(
        cacheClient.storage
      )) {
        if (found) {
          break;
        }
        if (regexKey?.test(cachedKey)) {
          found = true;
          foundKVPair = { key: cachedKey, value: cachedValue.value };
        } else {
          found = cachedValue.value === JSON.stringify(value);
        }
      }
    }
    if (foundKVPair) {
      return _checkValueForKey(cacheClient, foundKVPair.key, value);
    }
    if (found) {
      return {
        pass: true,
        message: () => "Found cached value"
      };
    } else {
      return {
        pass: false,
        message: () => `Expected Cached Value: ${this.utils.printExpected(
          JSON.stringify(value)
        )}
Cache Contents: ${this.utils.printReceived(cacheClient.storage)}`
      };
    }
  }
});
const _isKVPair = (keyOrCachedValue, cachedValue) => {
  return !!cachedValue && !!keyOrCachedValue;
};
const _checkValueForKey = (cacheClient, cacheKey, expectedValue) => {
  try {
    const cachedStringValue = cacheClient.storage[cacheKey]?.value;
    const expectedValueOrMatcher = expectedValue?.$$typeof === Symbol.for("jest.asymmetricMatcher") ? expectedValue : JSON.parse(JSON.stringify(expectedValue));
    expect(
      cachedStringValue ? JSON.parse(cachedStringValue) : void 0
    ).toEqual(expectedValueOrMatcher);
    return {
      pass: true,
      message: () => `Found cached value with ${cacheKey}`
    };
  } catch (e) {
    return {
      pass: false,
      message: () => e.message
    };
  }
};
const partialMatch = (value) => {
  return Array.isArray(value) ? expect.arrayContaining(value.map((v) => expect.objectContaining(v))) : expect.objectContaining(value);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  partialMatch
});
