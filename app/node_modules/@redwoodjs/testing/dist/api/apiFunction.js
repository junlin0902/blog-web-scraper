"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var apiFunction_exports = {};
__export(apiFunction_exports, {
  mockContext: () => mockContext,
  mockHttpEvent: () => mockHttpEvent,
  mockSignedWebhook: () => mockSignedWebhook
});
module.exports = __toCommonJS(apiFunction_exports);
var import_webhooks = require("@redwoodjs/api/webhooks");
const mockHttpEvent = ({
  payload = null,
  signature,
  signatureHeader,
  queryStringParameters = null,
  httpMethod = "GET",
  headers = {},
  path = "",
  isBase64Encoded = false,
  ...others
}) => {
  if (signature && signatureHeader) {
    headers[signatureHeader.toLocaleLowerCase()] = signature;
  }
  const payloadAsString = typeof payload === "string" ? payload : JSON.stringify(payload);
  const body = payload === null ? null : isBase64Encoded ? Buffer.from(payloadAsString || "").toString("base64") : payloadAsString;
  return {
    body,
    headers,
    multiValueHeaders: {},
    isBase64Encoded,
    path,
    pathParameters: null,
    stageVariables: null,
    httpMethod,
    queryStringParameters,
    // @ts-expect-error not required for mocks
    requestContext: null,
    // @ts-expect-error not required for mocks
    resource: null,
    multiValueQueryStringParameters: null,
    ...others
  };
};
const mockContext = () => {
  const context = {};
  return context;
};
const mockSignedWebhook = ({
  payload = null,
  signatureType,
  signatureHeader,
  secret,
  ...others
}) => {
  const payloadAsString = typeof payload === "string" ? payload : JSON.stringify(payload);
  const signature = (0, import_webhooks.signPayload)(signatureType, {
    payload: payloadAsString,
    secret
  });
  return mockHttpEvent({
    payload,
    signature,
    signatureHeader,
    ...others
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mockContext,
  mockHttpEvent,
  mockSignedWebhook
});
