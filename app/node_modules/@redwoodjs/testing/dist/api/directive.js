"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var directive_exports = {};
__export(directive_exports, {
  getDirectiveName: () => import_graphql_server2.getDirectiveName,
  mockRedwoodDirective: () => mockRedwoodDirective
});
module.exports = __toCommonJS(directive_exports);
var import_context = require("@redwoodjs/context");
var import_graphql_server = require("@redwoodjs/graphql-server");
var import_graphql_server2 = require("@redwoodjs/graphql-server");
const mockRedwoodDirective = (directive, executionMock) => {
  const { directiveArgs, context, ...others } = executionMock;
  if (directive.onResolvedValue.constructor.name === "AsyncFunction") {
    return async () => {
      if (context !== void 0) {
        (0, import_context.setContext)(context);
      }
      if (directive.type === import_graphql_server.DirectiveType.TRANSFORMER) {
        const { mockedResolvedValue } = others;
        return directive.onResolvedValue({
          resolvedValue: mockedResolvedValue,
          directiveArgs: directiveArgs ?? {},
          context: import_context.context,
          ...others
        });
      } else {
        await directive.onResolvedValue({
          directiveArgs: directiveArgs ?? {},
          context: import_context.context,
          ...others
        });
      }
    };
  }
  return () => {
    if (context !== void 0) {
      (0, import_context.setContext)(context);
    }
    if (directive.type === import_graphql_server.DirectiveType.TRANSFORMER) {
      const { mockedResolvedValue } = others;
      return directive.onResolvedValue({
        resolvedValue: mockedResolvedValue,
        directiveArgs: directiveArgs ?? {},
        context: import_context.context,
        ...others
      });
    } else {
      directive.onResolvedValue({
        directiveArgs: directiveArgs ?? {},
        context: import_context.context,
        ...others
      });
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getDirectiveName,
  mockRedwoodDirective
});
