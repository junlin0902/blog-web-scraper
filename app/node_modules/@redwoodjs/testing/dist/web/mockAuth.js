"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mockAuth_exports = {};
__export(mockAuth_exports, {
  createAuthentication: () => createAuthentication,
  useAuth: () => useAuth
});
module.exports = __toCommonJS(mockAuth_exports);
var import_react = __toESM(require("react"));
__reExport(mockAuth_exports, require("@redwoodjs/auth"), module.exports);
var import_mockRequests = require("./mockRequests");
const AuthProvider = ({ children }) => {
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, children);
};
function makeArray(input) {
  return !input ? [] : Array.isArray(input) ? input : [input];
}
function useAuth() {
  return {
    loading: false,
    isAuthenticated: !!import_mockRequests.mockedUserMeta.currentUser,
    logIn: async () => {
    },
    logOut: async () => {
    },
    signUp: async () => {
    },
    currentUser: import_mockRequests.mockedUserMeta.currentUser,
    userMetadata: import_mockRequests.mockedUserMeta.currentUser,
    getToken: async () => null,
    getCurrentUser: async () => import_mockRequests.mockedUserMeta.currentUser,
    hasRole: (roles) => {
      const currentUserRoles = makeArray(
        import_mockRequests.mockedUserMeta.currentUser?.roles
      );
      if (currentUserRoles) {
        return makeArray(roles).some((role) => currentUserRoles.includes(role));
      }
      return false;
    },
    reauthenticate: async () => {
    },
    forgotPassword: async () => {
    },
    resetPassword: async () => {
    },
    validateResetToken: async () => {
    },
    type: "default",
    client: void 0,
    hasError: false
  };
}
const createAuthentication = () => {
  return { AuthProvider, useAuth };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAuthentication,
  useAuth,
  ...require("@redwoodjs/auth")
});
