"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mockRequests_exports = {};
__export(mockRequests_exports, {
  closeServer: () => closeServer,
  mockCurrentUser: () => mockCurrentUser,
  mockGraphQLMutation: () => mockGraphQLMutation,
  mockGraphQLQuery: () => mockGraphQLQuery,
  mockedUserMeta: () => mockedUserMeta,
  registerHandler: () => registerHandler,
  setupRequestHandlers: () => setupRequestHandlers,
  startMSW: () => startMSW
});
module.exports = __toCommonJS(mockRequests_exports);
var import_msw = require("msw");
let REQUEST_HANDLER_QUEUE = [];
let SERVER_INSTANCE;
const startMSW = async (target, options) => {
  if (SERVER_INSTANCE) {
    return SERVER_INSTANCE;
  }
  if (target === "browsers") {
    SERVER_INSTANCE = (0, import_msw.setupWorker)();
    await SERVER_INSTANCE.start(options);
  } else {
    const { setupServer } = require("msw/node");
    SERVER_INSTANCE = setupServer();
    await SERVER_INSTANCE.listen(options);
  }
  return SERVER_INSTANCE;
};
const setupRequestHandlers = () => {
  SERVER_INSTANCE.resetHandlers();
  for (const handler of REQUEST_HANDLER_QUEUE) {
    SERVER_INSTANCE.use(handler);
  }
};
const closeServer = () => {
  SERVER_INSTANCE.close();
};
const registerHandler = (handler) => {
  if (!SERVER_INSTANCE) {
    REQUEST_HANDLER_QUEUE = [...REQUEST_HANDLER_QUEUE, handler];
  } else {
    SERVER_INSTANCE.use(handler);
  }
};
const mockGraphQL = (type, operation, data, responseEnhancer) => {
  const resolver = (req, res, ctx) => {
    let d = data;
    let responseTransforms = [];
    if (typeof data === "function") {
      const captureTransform = (fn) => {
        return (...args) => {
          const resTransform = fn(...args);
          responseTransforms = [...responseTransforms, resTransform];
          return resTransform;
        };
      };
      const newCtx = {
        status: captureTransform(ctx.status),
        delay: captureTransform(ctx.delay),
        errors: captureTransform(ctx.errors),
        set: captureTransform(ctx.set),
        fetch: captureTransform(ctx.fetch),
        data: captureTransform(ctx.data),
        extensions: captureTransform(ctx.extensions),
        cookie: captureTransform(ctx.cookie),
        field: captureTransform(ctx.field)
      };
      d = data(req.variables, {
        req,
        ctx: newCtx
      });
    }
    return (responseEnhancer ? res[responseEnhancer] : res)(
      ctx.data(d),
      ...responseTransforms
    );
  };
  registerHandler(import_msw.graphql[type](operation, resolver));
  return data;
};
const mockGraphQLQuery = (operation, data, responseEnhancer) => {
  return mockGraphQL("query", operation, data, responseEnhancer);
};
const mockGraphQLMutation = (operation, data, responseEnhancer) => {
  return mockGraphQL("mutation", operation, data, responseEnhancer);
};
const mockedUserMeta = {
  currentUser: null
};
const mockCurrentUser = (user) => {
  mockedUserMeta.currentUser = user;
  mockGraphQLQuery("__REDWOOD__AUTH_GET_CURRENT_USER", () => {
    return {
      redwood: {
        currentUser: user
      }
    };
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  closeServer,
  mockCurrentUser,
  mockGraphQLMutation,
  mockGraphQLQuery,
  mockedUserMeta,
  registerHandler,
  setupRequestHandlers,
  startMSW
});
