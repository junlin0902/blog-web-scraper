import type { PluginOptions, PluginTarget, TransformOptions } from '@babel/core';
import type { RegisterHookOptions } from './common';
export declare const TARGETS_NODE = "20.10";
export declare const getApiSideBabelPresets: ({ presetEnv }?: {
    presetEnv: boolean;
}) => TransformOptions["presets"];
export declare const BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS: {
    corejs: {
        version: number;
        proposals: boolean;
    };
    version: any;
};
export type PluginList = PluginShape[];
type PluginShape = [PluginTarget, PluginOptions, undefined | string] | [PluginTarget, PluginOptions];
export declare const getApiSideBabelPlugins: ({ openTelemetry, projectIsEsm, }?: {
    openTelemetry?: boolean | undefined;
    projectIsEsm?: boolean | undefined;
}) => PluginList;
export declare const getApiSideBabelConfigPath: () => string | undefined;
export declare const getApiSideBabelOverrides: ({ projectIsEsm }?: {
    projectIsEsm?: boolean | undefined;
}) => TransformOptions[];
export declare const getApiSideDefaultBabelConfig: ({ projectIsEsm }?: {
    projectIsEsm?: boolean | undefined;
}) => {
    presets: import("@babel/core").PluginItem[] | null | undefined;
    plugins: PluginList;
    overrides: TransformOptions[];
    extends: string | undefined;
    babelrc: boolean;
    ignore: string[];
};
export declare const registerApiSideBabelHook: ({ plugins, ...rest }?: RegisterHookOptions) => void;
export declare const transformWithBabel: (srcPath: string, plugins: TransformOptions["plugins"]) => Promise<import("@babel/core").BabelFileResult | null>;
export {};
//# sourceMappingURL=api.d.ts.map