"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var common_exports = {};
__export(common_exports, {
  CORE_JS_VERSION: () => CORE_JS_VERSION,
  RUNTIME_CORE_JS_VERSION: () => RUNTIME_CORE_JS_VERSION,
  getCommonPlugins: () => getCommonPlugins,
  getPathsFromTypeScriptConfig: () => getPathsFromTypeScriptConfig,
  getRouteHookBabelPlugins: () => getRouteHookBabelPlugins,
  parseTypeScriptConfigFiles: () => parseTypeScriptConfigFiles,
  registerBabel: () => registerBabel
});
module.exports = __toCommonJS(common_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_typescript = require("typescript");
var import_project_config = require("@redwoodjs/project-config");
var import_web = require("./web");
const pkgJson = require("../package.json");
const registerBabel = (options) => {
  require("@babel/register")(options);
};
const CORE_JS_VERSION = pkgJson.dependencies["core-js"].split(".").slice(0, 2).join(".");
if (!CORE_JS_VERSION) {
  throw new Error(
    "RedwoodJS Project Babel: Could not determine core-js version."
  );
}
const RUNTIME_CORE_JS_VERSION = pkgJson.dependencies["@babel/runtime-corejs3"];
if (!RUNTIME_CORE_JS_VERSION) {
  throw new Error(
    "RedwoodJS Project Babel: Could not determine core-js runtime version"
  );
}
const getCommonPlugins = () => {
  return [
    ["@babel/plugin-transform-class-properties", { loose: true }],
    // Note: The private method loose mode configuration setting must be the
    // same as @babel/plugin-proposal class-properties.
    // (https://babeljs.io/docs/en/babel-plugin-proposal-private-methods#loose)
    ["@babel/plugin-transform-private-methods", { loose: true }],
    ["@babel/plugin-transform-private-property-in-object", { loose: true }]
  ];
};
const getRouteHookBabelPlugins = () => {
  return [
    ...(0, import_web.getWebSideBabelPlugins)(),
    [
      "babel-plugin-module-resolver",
      {
        alias: {
          "api/src": "./src"
        },
        root: [(0, import_project_config.getPaths)().api.base],
        cwd: "packagejson",
        loglevel: "silent"
        // to silence the unnecessary warnings
      },
      "rwjs-api-module-resolver"
    ]
  ];
};
const parseTypeScriptConfigFiles = () => {
  const rwPaths = (0, import_project_config.getPaths)();
  const parseConfigFile = (basePath) => {
    let configPath = import_path.default.join(basePath, "tsconfig.json");
    if (!import_fs.default.existsSync(configPath)) {
      configPath = import_path.default.join(basePath, "jsconfig.json");
      if (!import_fs.default.existsSync(configPath)) {
        return null;
      }
    }
    return (0, import_typescript.parseConfigFileTextToJson)(
      configPath,
      import_fs.default.readFileSync(configPath, "utf-8")
    );
  };
  const apiConfig = parseConfigFile(rwPaths.api.base);
  const webConfig = parseConfigFile(rwPaths.web.base);
  return {
    api: apiConfig?.config ?? null,
    web: webConfig?.config ?? null
  };
};
const getPathsFromTypeScriptConfig = (config, rootDir) => {
  if (!config) {
    return {};
  }
  if (!config.compilerOptions?.baseUrl || !config.compilerOptions?.paths) {
    return {};
  }
  const { baseUrl, paths } = config.compilerOptions;
  const absoluteBase = import_path.default.isAbsolute(baseUrl) ? baseUrl : import_path.default.join(rootDir, baseUrl);
  const pathsObj = {};
  for (const [key, value] of Object.entries(paths)) {
    if (key.match(/src\/|\$api\/\*|types\/\*|\@redwoodjs\/.*/g)) {
      continue;
    }
    const aliasKey = key.replace("/*", "");
    const aliasValue = import_path.default.join(absoluteBase, value[0].replace("/*", ""));
    pathsObj[aliasKey] = aliasValue;
  }
  return pathsObj;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CORE_JS_VERSION,
  RUNTIME_CORE_JS_VERSION,
  getCommonPlugins,
  getPathsFromTypeScriptConfig,
  getRouteHookBabelPlugins,
  parseTypeScriptConfigFiles,
  registerBabel
});
