"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var api_exports = {};
__export(api_exports, {
  BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS: () => BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS,
  TARGETS_NODE: () => TARGETS_NODE,
  getApiSideBabelConfigPath: () => getApiSideBabelConfigPath,
  getApiSideBabelOverrides: () => getApiSideBabelOverrides,
  getApiSideBabelPlugins: () => getApiSideBabelPlugins,
  getApiSideBabelPresets: () => getApiSideBabelPresets,
  getApiSideDefaultBabelConfig: () => getApiSideDefaultBabelConfig,
  registerApiSideBabelHook: () => registerApiSideBabelHook,
  transformWithBabel: () => transformWithBabel
});
module.exports = __toCommonJS(api_exports);
var import_fs = require("fs");
var import_promises = __toESM(require("fs/promises"));
var import_path = __toESM(require("path"));
var import_core = require("@babel/core");
var import_project_config = require("@redwoodjs/project-config");
var import_common = require("./common");
var import_babel_plugin_redwood_context_wrapping = __toESM(require("./plugins/babel-plugin-redwood-context-wrapping"));
var import_babel_plugin_redwood_directory_named_import = __toESM(require("./plugins/babel-plugin-redwood-directory-named-import"));
var import_babel_plugin_redwood_graphql_options_extract = __toESM(require("./plugins/babel-plugin-redwood-graphql-options-extract"));
var import_babel_plugin_redwood_import_dir = __toESM(require("./plugins/babel-plugin-redwood-import-dir"));
var import_babel_plugin_redwood_job_path_injector = __toESM(require("./plugins/babel-plugin-redwood-job-path-injector"));
var import_babel_plugin_redwood_otel_wrapping = __toESM(require("./plugins/babel-plugin-redwood-otel-wrapping"));
const TARGETS_NODE = "20.10";
const getApiSideBabelPresets = ({ presetEnv } = { presetEnv: false }) => {
  return [
    [
      "@babel/preset-typescript",
      {
        isTSX: true,
        allExtensions: true
      },
      "rwjs-babel-preset-typescript"
    ],
    // Preset-env is required when we are not doing the transpilation with esbuild
    presetEnv && [
      "@babel/preset-env",
      {
        targets: {
          node: TARGETS_NODE
        },
        useBuiltIns: "usage",
        corejs: {
          version: import_common.CORE_JS_VERSION,
          // List of supported proposals: https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md#ecmascript-proposals
          proposals: true
        },
        exclude: [
          // Remove class-properties from preset-env, and include separately with loose
          // https://github.com/webpack/webpack/issues/9708
          "@babel/plugin-transform-class-properties",
          "@babel/plugin-transform-private-methods"
        ]
      }
    ]
  ].filter(Boolean);
};
const BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS = {
  // See https://babeljs.io/docs/babel-plugin-transform-runtime/#corejs
  // and https://babeljs.io/docs/en/babel-plugin-transform-runtime/#core-js-aliasing.
  //
  // This results in over polyfilling.
  corejs: { version: 3, proposals: true },
  // See https://babeljs.io/docs/en/babel-plugin-transform-runtime/#version.
  version: import_common.RUNTIME_CORE_JS_VERSION
};
const getApiSideBabelPlugins = ({
  openTelemetry = false,
  projectIsEsm = false
} = {}) => {
  const tsConfig = (0, import_common.parseTypeScriptConfigFiles)();
  const plugins = [
    ...(0, import_common.getCommonPlugins)(),
    // Needed to support `/** @jsxImportSource custom-jsx-library */`
    // comments in JSX files
    ["@babel/plugin-transform-react-jsx", { runtime: "automatic" }],
    ["@babel/plugin-transform-runtime", BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS],
    [
      "babel-plugin-module-resolver",
      {
        alias: {
          src: "./src",
          // adds the paths from [ts|js]config.json to the module resolver
          ...(0, import_common.getPathsFromTypeScriptConfig)(tsConfig.api, (0, import_project_config.getPaths)().api.base)
        },
        root: [(0, import_project_config.getPaths)().api.base],
        cwd: "packagejson",
        loglevel: "silent"
        // to silence the unnecessary warnings
      },
      "rwjs-api-module-resolver"
    ],
    [
      import_babel_plugin_redwood_directory_named_import.default,
      void 0,
      "rwjs-babel-directory-named-modules"
    ],
    [
      "babel-plugin-auto-import",
      {
        declarations: [
          {
            // import gql from 'graphql-tag'
            default: "gql",
            path: "graphql-tag"
          },
          {
            // import { context } from '@redwoodjs/context'
            members: ["context"],
            path: "@redwoodjs/context"
          }
        ]
      },
      "rwjs-babel-auto-import"
    ],
    // FIXME: `graphql-tag` is not working: https://github.com/redwoodjs/redwood/pull/3193
    ["babel-plugin-graphql-tag", void 0, "rwjs-babel-graphql-tag"],
    [
      import_babel_plugin_redwood_import_dir.default,
      {
        projectIsEsm
      },
      "rwjs-babel-glob-import-dir"
    ],
    openTelemetry && [
      import_babel_plugin_redwood_otel_wrapping.default,
      void 0,
      "rwjs-babel-otel-wrapping"
    ]
  ];
  return plugins.filter(Boolean);
};
const getApiSideBabelConfigPath = () => {
  const p = import_path.default.join((0, import_project_config.getPaths)().api.base, "babel.config.js");
  if ((0, import_fs.existsSync)(p)) {
    return p;
  } else {
    return;
  }
};
const getApiSideBabelOverrides = ({ projectIsEsm = false } = {}) => {
  const overrides = [
    // Extract graphql options from the graphql function
    // NOTE: this must come before the context wrapping
    {
      // match */api/src/functions/graphql.js|ts
      test: /.+api(?:[\\|/])src(?:[\\|/])functions(?:[\\|/])graphql\.(?:js|ts)$/,
      plugins: [import_babel_plugin_redwood_graphql_options_extract.default]
    },
    // Apply context wrapping to all functions
    {
      // match */api/src/functions/*.js|ts
      test: /.+api(?:[\\|/])src(?:[\\|/])functions(?:[\\|/]).+.(?:js|ts)$/,
      plugins: [
        [
          import_babel_plugin_redwood_context_wrapping.default,
          {
            projectIsEsm
          }
        ]
      ]
    },
    // Add import names and paths to job definitions
    {
      // match */api/src/jobs/*.js|ts
      test: /.+api(?:[\\|/])src(?:[\\|/])jobs(?:[\\|/]).+.(?:js|ts)$/,
      plugins: [[import_babel_plugin_redwood_job_path_injector.default]]
    }
  ].filter(Boolean);
  return overrides;
};
const getApiSideDefaultBabelConfig = ({ projectIsEsm = false } = {}) => {
  return {
    presets: getApiSideBabelPresets(),
    plugins: getApiSideBabelPlugins({ projectIsEsm }),
    overrides: getApiSideBabelOverrides({ projectIsEsm }),
    extends: getApiSideBabelConfigPath(),
    babelrc: false,
    ignore: ["node_modules"]
  };
};
const registerApiSideBabelHook = ({
  plugins = [],
  ...rest
} = {}) => {
  const defaultOptions = getApiSideDefaultBabelConfig({
    projectIsEsm: (0, import_project_config.projectSideIsEsm)("api")
  });
  (0, import_common.registerBabel)({
    ...defaultOptions,
    presets: getApiSideBabelPresets({
      presetEnv: true
    }),
    extensions: [".js", ".ts", ".jsx", ".tsx"],
    plugins: [...defaultOptions.plugins, ...plugins],
    cache: false,
    ...rest
  });
};
const transformWithBabel = async (srcPath, plugins) => {
  const code = await import_promises.default.readFile(srcPath, "utf-8");
  const defaultOptions = getApiSideDefaultBabelConfig({
    projectIsEsm: (0, import_project_config.projectSideIsEsm)("api")
  });
  const result = (0, import_core.transformAsync)(code, {
    ...defaultOptions,
    cwd: (0, import_project_config.getPaths)().api.base,
    filename: srcPath,
    // we need inline sourcemaps at this level
    // because this file will eventually be fed to esbuild
    // when esbuild finds an inline sourcemap, it tries to "combine" it
    // so the final sourcemap (the one that esbuild generates) combines both mappings
    sourceMaps: "inline",
    plugins
  });
  return result;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BABEL_PLUGIN_TRANSFORM_RUNTIME_OPTIONS,
  TARGETS_NODE,
  getApiSideBabelConfigPath,
  getApiSideBabelOverrides,
  getApiSideBabelPlugins,
  getApiSideBabelPresets,
  getApiSideDefaultBabelConfig,
  registerApiSideBabelHook,
  transformWithBabel
});
