"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var web_exports = {};
__export(web_exports, {
  getWebSideBabelConfigPath: () => getWebSideBabelConfigPath,
  getWebSideBabelPlugins: () => getWebSideBabelPlugins,
  getWebSideBabelPresets: () => getWebSideBabelPresets,
  getWebSideDefaultBabelConfig: () => getWebSideDefaultBabelConfig,
  getWebSideOverrides: () => getWebSideOverrides,
  registerWebSideBabelHook: () => registerWebSideBabelHook
});
module.exports = __toCommonJS(web_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_project_config = require("@redwoodjs/project-config");
var import_common = require("./common");
const getWebSideBabelPlugins = ({ forJest } = { forJest: false }) => {
  const config = (0, import_project_config.getConfig)();
  const useReactCompiler = config.experimental?.reactCompiler?.enabled && config.experimental?.reactCompiler?.lintOnly === false;
  const useTrustedDocumentsGqlTag = config.graphql.trustedDocuments;
  const rwjsPaths = (0, import_project_config.getPaths)();
  const tsConfigs = (0, import_common.parseTypeScriptConfigFiles)();
  const plugins = [
    // It is important that this plugin run first, as noted here: https://react.dev/learn/react-compiler
    useReactCompiler && [
      "babel-plugin-react-compiler",
      {
        // No specific config at this time...
      }
    ],
    // === Import path handling
    [
      "babel-plugin-module-resolver",
      {
        alias: {
          src: (
            // Jest monorepo and multi project runner is not correctly determining
            // the `cwd`: https://github.com/facebook/jest/issues/7359
            forJest ? rwjsPaths.web.src : "./src"
          ),
          // adds the paths from [ts|js]config.json to the module resolver
          ...(0, import_common.getPathsFromTypeScriptConfig)(tsConfigs.web, rwjsPaths.web.base),
          $api: rwjsPaths.api.base
        },
        root: [rwjsPaths.web.base],
        cwd: "packagejson",
        loglevel: "silent"
        // to silence the unnecessary warnings
      },
      "rwjs-module-resolver"
    ],
    [
      require("./plugins/babel-plugin-redwood-directory-named-import").default,
      void 0,
      "rwjs-directory-named-modules"
    ],
    // === Auto imports, and transforms
    [
      "babel-plugin-auto-import",
      {
        declarations: [
          {
            // import { React } from 'react'
            default: "React",
            path: "react"
          },
          // A project can turn on trusted graphql documents
          // If projects do not use trusted documents (default)
          // it auto-imports the gql tag from graphql-tag
          !useTrustedDocumentsGqlTag && {
            // import gql from 'graphql-tag'
            default: "gql",
            path: "graphql-tag"
          },
          // if projects use trusted documents
          // then it auto-imports the gql function from the generated codegen client preset
          useTrustedDocumentsGqlTag && {
            // import { gql } from 'src/graphql/gql'
            members: ["gql"],
            path: `web/src/graphql/gql`
          }
        ].filter(Boolean)
      },
      "rwjs-web-auto-import"
    ],
    ["babel-plugin-graphql-tag", void 0, "rwjs-babel-graphql-tag"],
    process.env.NODE_ENV !== "development" && [
      require("./plugins/babel-plugin-redwood-remove-dev-fatal-error-page").default,
      void 0,
      "rwjs-remove-dev-fatal-error-page"
    ]
  ].filter(Boolean);
  return plugins;
};
const getWebSideOverrides = ({ forPrerender } = { forPrerender: false }) => {
  const overrides = [
    {
      test: /.+Cell.(js|tsx|jsx)$/,
      plugins: [require("./plugins/babel-plugin-redwood-cell").default]
    },
    // Automatically import files in `./web/src/pages/*` in to
    // the `./web/src/Routes.[ts|jsx]` file.
    {
      test: /Routes.(js|tsx|jsx)$/,
      plugins: [
        [
          require("./plugins/babel-plugin-redwood-routes-auto-loader").default,
          // The plugin will modify the Routes file differently based on what
          // context we're building for
          {
            forPrerender
          },
          "babel-plugin-redwood-routes-auto-loader"
        ]
      ]
    },
    // ** Files ending in `Cell.mock.[js,ts]` **
    // Automatically determine keys for saving and retrieving mock data.
    // Only required for storybook and jest
    process.env.NODE_ENV !== "production" && {
      test: /.+Cell.mock.(js|ts)$/,
      plugins: [
        require("./plugins/babel-plugin-redwood-mock-cell-data").default
      ]
    }
  ];
  return overrides.filter(
    (override) => {
      return !!override;
    }
  );
};
const getWebSideBabelPresets = (options) => {
  if (options.forPrerender || options.forJest || options.forJavaScriptLinting) {
    let reactPresetConfig = { runtime: "automatic" };
    if (getWebSideBabelConfigPath()) {
      const userProjectConfig = require(getWebSideBabelConfigPath());
      userProjectConfig.presets?.forEach(
        (preset) => {
          if (!Array.isArray(preset)) {
            return;
          }
          const [presetName, presetConfig] = preset;
          if (presetName === "@babel/preset-react") {
            reactPresetConfig = presetConfig;
          }
        }
      );
    }
    return [
      ["@babel/preset-react", reactPresetConfig],
      [
        "@babel/preset-env",
        {
          // the targets are set in <userProject>/web/package.json
          useBuiltIns: "usage",
          corejs: {
            version: import_common.CORE_JS_VERSION,
            proposals: true
          },
          exclude: [
            // Remove class-properties from preset-env, and include separately
            // https://github.com/webpack/webpack/issues/9708
            "@babel/plugin-transform-class-properties",
            "@babel/plugin-transform-private-methods"
          ]
        },
        "rwjs-babel-preset-env"
      ],
      ["@babel/preset-typescript", void 0, "rwjs-babel-preset-typescript"]
    ];
  }
  return [];
};
const getWebSideBabelConfigPath = () => {
  const customBabelConfig = import_path.default.join((0, import_project_config.getPaths)().web.base, "babel.config.js");
  if (import_fs.default.existsSync(customBabelConfig)) {
    return customBabelConfig;
  } else {
    return void 0;
  }
};
const getWebSideDefaultBabelConfig = (options = {}) => {
  return {
    presets: getWebSideBabelPresets(options),
    plugins: getWebSideBabelPlugins(options),
    overrides: getWebSideOverrides(options),
    extends: getWebSideBabelConfigPath(),
    babelrc: false,
    ignore: ["node_modules"]
  };
};
const registerWebSideBabelHook = ({
  plugins = [],
  overrides = [],
  options = {}
} = {}) => {
  const defaultOptions = getWebSideDefaultBabelConfig(options);
  (0, import_common.registerBabel)({
    ...defaultOptions,
    root: (0, import_project_config.getPaths)().base,
    extensions: [".js", ".ts", ".tsx", ".jsx"],
    plugins: [...defaultOptions.plugins, ...plugins],
    cache: false,
    // We only register for prerender currently
    // Static importing pages makes sense
    overrides: [...getWebSideOverrides({ forPrerender: true }), ...overrides]
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getWebSideBabelConfigPath,
  getWebSideBabelPlugins,
  getWebSideBabelPresets,
  getWebSideDefaultBabelConfig,
  getWebSideOverrides,
  registerWebSideBabelHook
});
