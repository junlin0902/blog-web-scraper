"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_otel_wrapping_exports = {};
__export(babel_plugin_redwood_otel_wrapping_exports, {
  default: () => babel_plugin_redwood_otel_wrapping_default
});
module.exports = __toCommonJS(babel_plugin_redwood_otel_wrapping_exports);
var nodejsPath = __toESM(require("path"));
var import_project_config = require("@redwoodjs/project-config");
function addOpenTelemetryImport(path, t) {
  path.node.body.unshift(
    t.importDeclaration(
      [
        t.importSpecifier(
          t.identifier("RW_OTEL_WRAPPER_TRACE"),
          t.identifier("trace")
        )
      ],
      t.stringLiteral("@opentelemetry/api")
    )
  );
}
function getRedwoodPaths(state) {
  if (process.env.NODE_ENV === "test") {
    return {
      filename: "__MOCKED_FILENAME__",
      apiFolder: "__MOCKED_API_FOLDER__"
    };
  }
  const filename = state.file.opts.filename;
  const filenameOffset = filename ? (0, import_project_config.getBaseDirFromFile)(filename).length + 9 : 0;
  const apiFolder = filename ? filename.substring(
    filenameOffset,
    filename.substring(filenameOffset).indexOf(nodejsPath.sep) + filenameOffset
  ) : "?";
  return {
    filename,
    apiFolder
  };
}
function wrapExportNamedDeclaration(path, state, t) {
  const declaration = path.node.declaration;
  const declarationIsSupported = declaration != null && declaration.type === "VariableDeclaration" && declaration.declarations[0].init?.type === "ArrowFunctionExpression";
  if (!declarationIsSupported) {
    return;
  }
  const originalFunction = declaration.declarations[0].init;
  if (!originalFunction) {
    return;
  }
  const originalFunctionName = declaration.declarations[0].id.type === "Identifier" ? declaration.declarations[0].id.name : "?";
  const wrappedFunctionName = `__${originalFunctionName === "?" ? "RW_OTEL_WRAPPER_UNKNOWN_FUNCTION" : originalFunctionName}`;
  const originalFunctionArgumentsWithoutDefaults = [];
  for (const param of originalFunction.params) {
    if (param.type === "Identifier") {
      originalFunctionArgumentsWithoutDefaults.push(param);
      continue;
    }
    if (param.type === "ObjectPattern") {
      const objectProperties = param.properties.filter(
        (p) => p.type === "ObjectProperty"
      );
      originalFunctionArgumentsWithoutDefaults.push(
        t.objectExpression(
          objectProperties.map((p) => {
            if (p.value.type === "AssignmentPattern") {
              return t.objectProperty(p.key, p.value.left);
            }
            return p;
          })
        )
      );
      continue;
    }
    if (param.type === "AssignmentPattern") {
      if (param.left.type === "Identifier") {
        originalFunctionArgumentsWithoutDefaults.push(param.left);
      } else if (param.left.type === "ObjectPattern") {
        const objectProperties = param.left.properties.filter(
          (p) => p.type === "ObjectProperty"
        );
        originalFunctionArgumentsWithoutDefaults.push(
          t.objectExpression(
            objectProperties.map((p) => {
              if (p.value.type === "AssignmentPattern") {
                return t.objectProperty(p.key, p.value.left);
              }
              return p;
            })
          )
        );
      } else {
        return;
      }
    }
    if (param.type === "ArrayPattern" || param.type === "RestElement") {
      return;
    }
  }
  const { filename, apiFolder } = getRedwoodPaths(state);
  const activeSpanBlock = t.callExpression(
    t.memberExpression(
      t.identifier("RW_OTEL_WRAPPER_TRACER"),
      t.identifier("startActiveSpan")
    ),
    [
      t.stringLiteral(`redwoodjs:api:${apiFolder}:${originalFunctionName}`),
      t.arrowFunctionExpression(
        [t.identifier("span")],
        t.blockStatement([
          t.expressionStatement(
            t.callExpression(
              t.memberExpression(
                t.identifier("span"),
                t.identifier("setAttribute")
              ),
              [
                t.stringLiteral("code.function"),
                t.stringLiteral(originalFunctionName)
              ]
            )
          ),
          t.expressionStatement(
            t.callExpression(
              t.memberExpression(
                t.identifier("span"),
                t.identifier("setAttribute")
              ),
              [
                t.stringLiteral("code.filepath"),
                t.stringLiteral(filename || "?")
              ]
            )
          ),
          t.tryStatement(
            t.blockStatement([
              t.variableDeclaration("const", [
                t.variableDeclarator(
                  t.identifier("RW_OTEL_WRAPPER_INNER_RESULT"),
                  originalFunction.async ? t.awaitExpression(
                    t.callExpression(
                      t.identifier(wrappedFunctionName),
                      originalFunctionArgumentsWithoutDefaults
                    )
                  ) : t.callExpression(
                    t.identifier(wrappedFunctionName),
                    originalFunctionArgumentsWithoutDefaults
                  )
                )
              ]),
              t.expressionStatement(
                t.callExpression(
                  t.memberExpression(t.identifier("span"), t.identifier("end")),
                  []
                )
              ),
              t.returnStatement(t.identifier("RW_OTEL_WRAPPER_INNER_RESULT"))
            ]),
            t.catchClause(
              t.identifier("error"),
              t.blockStatement([
                t.expressionStatement(
                  t.callExpression(
                    t.memberExpression(
                      t.identifier("span"),
                      t.identifier("recordException")
                    ),
                    [t.identifier("error")]
                  )
                ),
                t.expressionStatement(
                  t.callExpression(
                    t.memberExpression(
                      t.identifier("span"),
                      t.identifier("setStatus")
                    ),
                    [
                      t.objectExpression([
                        t.objectProperty(
                          t.identifier("code"),
                          t.numericLiteral(2)
                        ),
                        t.objectProperty(
                          t.identifier("message"),
                          t.logicalExpression(
                            "??",
                            t.optionalMemberExpression(
                              t.optionalCallExpression(
                                t.optionalMemberExpression(
                                  t.optionalMemberExpression(
                                    t.identifier("error"),
                                    t.identifier("message"),
                                    false,
                                    true
                                  ),
                                  t.identifier("split"),
                                  false,
                                  true
                                ),
                                [t.stringLiteral("\n")],
                                false
                              ),
                              t.numericLiteral(0),
                              true,
                              false
                            ),
                            t.optionalMemberExpression(
                              t.optionalCallExpression(
                                t.optionalMemberExpression(
                                  t.optionalCallExpression(
                                    t.optionalMemberExpression(
                                      t.identifier("error"),
                                      t.identifier("toString"),
                                      false,
                                      true
                                    ),
                                    [],
                                    false
                                  ),
                                  t.identifier("split"),
                                  false,
                                  true
                                ),
                                [t.stringLiteral("\n")],
                                false
                              ),
                              t.numericLiteral(0),
                              true,
                              false
                            )
                          )
                        )
                      ])
                    ]
                  )
                ),
                t.expressionStatement(
                  t.callExpression(
                    t.memberExpression(
                      t.identifier("span"),
                      t.identifier("end")
                    ),
                    []
                  )
                ),
                t.throwStatement(t.identifier("error"))
              ])
            )
          )
        ]),
        originalFunction.async
      )
    ]
  );
  const wrapper = t.arrowFunctionExpression(
    originalFunction.params,
    t.blockStatement(
      [
        t.variableDeclaration("const", [
          t.variableDeclarator(
            t.identifier(wrappedFunctionName),
            originalFunction
          )
        ]),
        t.variableDeclaration("const", [
          t.variableDeclarator(
            t.identifier("RW_OTEL_WRAPPER_TRACER"),
            t.callExpression(
              t.memberExpression(
                t.identifier("RW_OTEL_WRAPPER_TRACE"),
                t.identifier("getTracer")
              ),
              [t.stringLiteral("redwoodjs")]
            )
          )
        ]),
        t.variableDeclaration("const", [
          t.variableDeclarator(
            t.identifier("RW_OTEL_WRAPPER_RESULT"),
            originalFunction.async ? t.awaitExpression(activeSpanBlock) : activeSpanBlock
          )
        ]),
        t.returnStatement(t.identifier("RW_OTEL_WRAPPER_RESULT"))
      ],
      originalFunction.body.type === "BlockStatement" ? originalFunction.body.directives : void 0
    ),
    originalFunction.async
  );
  declaration.declarations[0].init = wrapper;
}
function babel_plugin_redwood_otel_wrapping_default({ types: t }) {
  return {
    name: "babel-plugin-redwood-otel-wrapping",
    visitor: {
      Program(path) {
        addOpenTelemetryImport(path, t);
      },
      ExportNamedDeclaration(path, state) {
        wrapExportNamedDeclaration(path, state, t);
      }
    }
  };
}
