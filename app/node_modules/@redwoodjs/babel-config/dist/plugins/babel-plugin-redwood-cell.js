"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_cell_exports = {};
__export(babel_plugin_redwood_cell_exports, {
  default: () => babel_plugin_redwood_cell_default
});
module.exports = __toCommonJS(babel_plugin_redwood_cell_exports);
var import_path = require("path");
const EXPECTED_EXPORTS_FROM_CELL = [
  "beforeQuery",
  "QUERY",
  "data",
  "isEmpty",
  "afterQuery",
  "Loading",
  "Success",
  "Failure",
  "Empty"
];
function babel_plugin_redwood_cell_default({ types: t }) {
  let exportNames = [];
  let hasDefaultExport = false;
  return {
    name: "babel-plugin-redwood-cell",
    visitor: {
      ExportDefaultDeclaration() {
        hasDefaultExport = true;
      },
      ExportNamedDeclaration(path) {
        const declaration = path.node.declaration;
        if (!declaration) {
          return;
        }
        let name;
        if (declaration.type === "VariableDeclaration") {
          const id = declaration.declarations[0].id;
          name = id.name;
        }
        if (declaration.type === "FunctionDeclaration") {
          name = declaration?.id?.name;
        }
        if (name && EXPECTED_EXPORTS_FROM_CELL.includes(name)) {
          exportNames.push(name);
        }
      },
      Program: {
        enter() {
          exportNames = [];
          hasDefaultExport = false;
        },
        exit(path) {
          const hasQueryOrDataExport = exportNames.includes("QUERY") || exportNames.includes("data");
          if (hasDefaultExport || !hasQueryOrDataExport) {
            return;
          }
          const createCellHookName = exportNames.includes("data") ? "createServerCell" : "createCell";
          const importFrom = exportNames.includes("data") ? "@redwoodjs/web/dist/components/cell/createServerCell" : "@redwoodjs/web";
          path.node.body.unshift(
            t.importDeclaration(
              [
                t.importSpecifier(
                  t.identifier(createCellHookName),
                  t.identifier(createCellHookName)
                )
              ],
              t.stringLiteral(importFrom)
            )
          );
          path.node.body.push(
            t.exportDefaultDeclaration(
              t.callExpression(t.identifier(createCellHookName), [
                t.objectExpression([
                  ...exportNames.map(
                    (name) => t.objectProperty(
                      t.identifier(name),
                      t.identifier(name),
                      false,
                      true
                    )
                  ),
                  // Add the `displayName` property so we can name the Cell
                  // after the filename.
                  t.objectProperty(
                    t.identifier("displayName"),
                    t.stringLiteral(
                      (0, import_path.parse)(this.file.opts.filename).name
                    ),
                    false,
                    true
                  )
                ])
              ])
            )
          );
        }
      }
    }
  };
}
