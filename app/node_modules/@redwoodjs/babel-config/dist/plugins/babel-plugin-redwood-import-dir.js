"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_import_dir_exports = {};
__export(babel_plugin_redwood_import_dir_exports, {
  default: () => babel_plugin_redwood_import_dir_default
});
module.exports = __toCommonJS(babel_plugin_redwood_import_dir_exports);
var import_path = __toESM(require("path"));
var import_fast_glob = __toESM(require("fast-glob"));
var import_project_config = require("@redwoodjs/project-config");
function babel_plugin_redwood_import_dir_default({ types: t }, { projectIsEsm = false } = {}) {
  return {
    name: "babel-plugin-redwood-import-dir",
    visitor: {
      ImportDeclaration(p, state) {
        if (!p.node.source.value.includes("**")) {
          return;
        }
        const nodes = [];
        const importName = p.node.specifiers[0].local.name;
        nodes.push(
          t.variableDeclaration("let", [
            t.variableDeclarator(
              t.identifier(importName),
              t.objectExpression([])
            )
          ])
        );
        const importGlob = (0, import_project_config.importStatementPath)(p.node.source.value);
        const cwd = import_path.default.dirname(state.file.opts.filename);
        const dirFiles = import_fast_glob.default.sync(importGlob, { cwd }).filter((n) => !n.includes(".test.")).filter((n) => !n.includes(".scenarios.")).filter((n) => !n.includes(".d.ts"));
        const staticGlob = importGlob.split("*")[0];
        const filePathToVarName = (filePath) => {
          return filePath.replace(staticGlob, "").replace(/\.(js|ts)$/, "").replace(/[^a-zA-Z0-9]/g, "_");
        };
        for (const filePath of dirFiles) {
          const { dir: fileDir, name: fileName } = import_path.default.parse(filePath);
          const filePathWithoutExtension = fileDir + "/" + fileName;
          const fpVarName = filePathToVarName(filePath);
          nodes.push(
            t.importDeclaration(
              [
                t.importNamespaceSpecifier(
                  t.identifier(importName + "_" + fpVarName)
                )
              ],
              t.stringLiteral(
                projectIsEsm ? `${filePathWithoutExtension}.js` : filePathWithoutExtension
              )
            )
          );
          nodes.push(
            t.expressionStatement(
              t.assignmentExpression(
                "=",
                t.memberExpression(
                  t.identifier(importName),
                  t.identifier(fpVarName)
                ),
                t.identifier(importName + "_" + fpVarName)
              )
            )
          );
        }
        for (const node of nodes) {
          p.insertBefore(node);
        }
        p.remove();
      }
    }
  };
}
