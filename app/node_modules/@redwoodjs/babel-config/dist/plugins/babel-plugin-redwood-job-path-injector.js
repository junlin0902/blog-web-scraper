"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_job_path_injector_exports = {};
__export(babel_plugin_redwood_job_path_injector_exports, {
  default: () => babel_plugin_redwood_job_path_injector_default
});
module.exports = __toCommonJS(babel_plugin_redwood_job_path_injector_exports);
var import_node_path = __toESM(require("node:path"));
var import_project_config = require("@redwoodjs/project-config");
function babel_plugin_redwood_job_path_injector_default({ types }) {
  const paths = (0, import_project_config.getPaths)();
  return {
    name: "babel-plugin-redwood-job-path-injector",
    visitor: {
      ExportNamedDeclaration(path, state) {
        const declaration = path.node.declaration;
        if (!declaration) {
          return;
        }
        if (declaration.type !== "VariableDeclaration") {
          return;
        }
        const declarator = declaration.declarations[0];
        if (!declarator) {
          return;
        }
        if (declarator.type !== "VariableDeclarator") {
          return;
        }
        const init = declarator.init;
        if (!init) {
          return;
        }
        if (init.type !== "CallExpression") {
          return;
        }
        const callee = init.callee;
        if (!callee) {
          return;
        }
        if (callee.type !== "MemberExpression") {
          return;
        }
        const property = callee.property;
        if (!property) {
          return;
        }
        if (property.type !== "Identifier") {
          return;
        }
        if (property.name !== "createJob") {
          return;
        }
        const id = declarator.id;
        if (!id) {
          return;
        }
        if (id.type !== "Identifier") {
          return;
        }
        const filepath = state.file.opts.filename;
        if (!filepath) {
          throw new Error("No file path was found in the state");
        }
        const importName = id.name;
        const importPath = import_node_path.default.relative(paths.api.jobs, filepath);
        const importPathWithoutExtension = importPath.replace(/\.[^/.]+$/, "");
        const firstArg = init.arguments[0];
        if (!firstArg) {
          throw new Error("No first argument found in the createJob call");
        }
        if (firstArg.type !== "ObjectExpression") {
          throw new Error(
            "The first argument of the createJob call is not an object expression"
          );
        }
        firstArg.properties.push(
          types.objectProperty(
            types.identifier("path"),
            types.stringLiteral(importPathWithoutExtension)
          )
        );
        firstArg.properties.push(
          types.objectProperty(
            types.identifier("name"),
            types.stringLiteral(importName)
          )
        );
      }
    }
  };
}
