"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_src_alias_exports = {};
__export(babel_plugin_redwood_src_alias_exports, {
  default: () => babel_plugin_redwood_src_alias_default
});
module.exports = __toCommonJS(babel_plugin_redwood_src_alias_exports);
var import_path = __toESM(require("path"));
function babel_plugin_redwood_src_alias_default({ types: t }, options) {
  return {
    name: "babel-plugin-redwood-src-alias",
    visitor: {
      ImportDeclaration(p, state) {
        const { value } = p.node.source;
        const { filename } = state.file.opts;
        if (!filename || filename?.includes("/node_modules/") || !value.startsWith("src/")) {
          return;
        }
        const absPath = import_path.default.join(options.srcAbsPath, value.substr(4));
        let newImport = import_path.default.relative(import_path.default.dirname(filename), absPath);
        if (process.platform === "win32") {
          newImport = newImport.replaceAll("\\", "/");
        }
        if (!newImport.startsWith(".")) {
          newImport = "./" + newImport;
        }
        const newSource = t.stringLiteral(newImport);
        p.node.source = newSource;
      },
      ExportDeclaration(p, state) {
        if (!p?.node?.source) {
          return;
        }
        const { value } = p.node.source;
        const { filename } = state.file.opts;
        if (!filename || filename?.includes("/node_modules/") || !value.startsWith("src/")) {
          return;
        }
        const absPath = import_path.default.join(options.srcAbsPath, value.substr(4));
        const newImport = import_path.default.relative(import_path.default.dirname(filename), absPath);
        const newSource = t.stringLiteral(newImport);
        p.node.source = newSource;
      }
    }
  };
}
