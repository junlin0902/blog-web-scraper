"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_routes_auto_loader_exports = {};
__export(babel_plugin_redwood_routes_auto_loader_exports, {
  default: () => babel_plugin_redwood_routes_auto_loader_default,
  getPathRelativeToSrc: () => getPathRelativeToSrc,
  withRelativeImports: () => withRelativeImports
});
module.exports = __toCommonJS(babel_plugin_redwood_routes_auto_loader_exports);
var import_path = __toESM(require("path"));
var import_project_config = require("@redwoodjs/project-config");
const getPathRelativeToSrc = (maybeAbsolutePath) => {
  if (!import_path.default.isAbsolute(maybeAbsolutePath)) {
    return maybeAbsolutePath;
  }
  return `./${import_path.default.relative((0, import_project_config.getPaths)().web.src, maybeAbsolutePath)}`;
};
const withRelativeImports = (page) => {
  return {
    ...page,
    relativeImport: (0, import_project_config.ensurePosixPath)(getPathRelativeToSrc(page.importPath))
  };
};
function babel_plugin_redwood_routes_auto_loader_default({ types: t }, { forPrerender = false }) {
  let pages = (0, import_project_config.processPagesDir)().map(withRelativeImports);
  const duplicatePageImportNames = /* @__PURE__ */ new Set();
  const sortedPageImportNames = pages.map((page) => page.importName).sort();
  for (let i = 0; i < sortedPageImportNames.length - 1; i++) {
    if (sortedPageImportNames[i + 1] === sortedPageImportNames[i]) {
      duplicatePageImportNames.add(sortedPageImportNames[i]);
    }
  }
  if (duplicatePageImportNames.size > 0) {
    throw new Error(
      `Unable to find only a single file ending in 'Page.{js,jsx,ts,tsx}' in the following page directories: ${Array.from(
        duplicatePageImportNames
      ).map((name) => `'${name}'`).join(", ")}`
    );
  }
  return {
    name: "babel-plugin-redwood-routes-auto-loader",
    visitor: {
      // Remove any pages that have been explicitly imported in the Routes file,
      // because when one is present, the user is requesting that the module be
      // included in the main bundle.
      ImportDeclaration(p) {
        if (pages.length === 0) {
          return;
        }
        const userImportRelativePath = getPathRelativeToSrc(
          (0, import_project_config.importStatementPath)(p.node.source?.value)
        );
        const defaultSpecifier = p.node.specifiers.find(
          (specifiers) => t.isImportDefaultSpecifier(specifiers)
        );
        if (!defaultSpecifier) {
          return;
        }
        if (forPrerender) {
          const pageThatUserImported = pages.find((page) => {
            return page.relativeImport === (0, import_project_config.ensurePosixPath)(userImportRelativePath);
          });
          if (pageThatUserImported) {
            pageThatUserImported.importName = defaultSpecifier.local.name;
            p.node.specifiers = p.node.specifiers.filter(
              (specifier) => !t.isImportDefaultSpecifier(specifier)
            );
          }
          return;
        }
        if (userImportRelativePath && defaultSpecifier) {
          pages = pages.filter(
            (page) => !(page.relativeImport === (0, import_project_config.ensurePosixPath)(userImportRelativePath))
          );
        }
      },
      Program: {
        enter() {
          pages = (0, import_project_config.processPagesDir)().map(withRelativeImports);
        },
        exit(p) {
          if (pages.length === 0) {
            return;
          }
          const nodes = [];
          nodes.unshift(
            t.importDeclaration(
              [t.importSpecifier(t.identifier("lazy"), t.identifier("lazy"))],
              t.stringLiteral("react")
            )
          );
          for (const { importName, relativeImport } of pages) {
            const importArgument = t.stringLiteral(relativeImport);
            nodes.push(
              t.variableDeclaration("const", [
                t.variableDeclarator(
                  t.identifier(importName),
                  t.objectExpression([
                    t.objectProperty(
                      t.identifier("name"),
                      t.stringLiteral(importName)
                    ),
                    // prerenderLoader for ssr/prerender and first load of
                    // prerendered pages in browser (csr)
                    // prerenderLoader: (name) => { prerenderLoaderImpl }
                    t.objectProperty(
                      t.identifier("prerenderLoader"),
                      t.arrowFunctionExpression(
                        [t.identifier("name")],
                        prerenderLoaderImpl(forPrerender, relativeImport, t)
                      )
                    ),
                    t.objectProperty(
                      t.identifier("LazyComponent"),
                      t.callExpression(t.identifier("lazy"), [
                        t.arrowFunctionExpression(
                          [],
                          t.callExpression(t.identifier("import"), [
                            importArgument
                          ])
                        )
                      ])
                    )
                  ])
                )
              ])
            );
          }
          p.node.body.unshift(...nodes);
        }
      }
    }
  };
}
function prerenderLoaderImpl(forPrerender, relativeImport, t) {
  if (forPrerender) {
    return t.callExpression(t.identifier("require"), [
      t.stringLiteral(relativeImport)
    ]);
  }
  return t.objectExpression([
    t.objectProperty(
      t.identifier("default"),
      t.memberExpression(
        t.identifier("globalThis.__REDWOOD__PRERENDER_PAGES"),
        t.identifier("name"),
        true
      )
    )
  ]);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPathRelativeToSrc,
  withRelativeImports
});
