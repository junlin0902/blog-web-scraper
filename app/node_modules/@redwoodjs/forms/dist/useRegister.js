"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useRegister_exports = {};
__export(useRegister_exports, {
  useRegister: () => useRegister
});
module.exports = __toCommonJS(useRegister_exports);
var import_react_hook_form = require("react-hook-form");
var import_coercion = require("./coercion");
const useRegister = (props, ref, emptyAs) => {
  const { register } = (0, import_react_hook_form.useFormContext)();
  const { name } = props;
  if (!name) {
    throw Error("`name` prop must be provided");
  }
  const validation = props.validation || { required: false };
  (0, import_coercion.setCoercion)(validation, {
    type: props.type,
    name,
    emptyAs
  });
  const {
    ref: _ref,
    onBlur: handleBlur,
    onChange: handleChange,
    ...rest
  } = register(name, validation);
  const onBlur = (event) => {
    handleBlur(event);
    props.onBlur?.(event);
  };
  const onChange = (event) => {
    handleChange(event);
    props.onChange?.(event);
  };
  return {
    ...rest,
    ref: (element) => {
      _ref(element);
      if (typeof ref === "function") {
        ref(element);
      } else if (ref) {
        ref.current = element;
      }
    },
    onBlur,
    onChange
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useRegister
});
