import type React from 'react';
import type { EmptyAsValue } from './coercion';
import type { FieldProps } from './FieldProps';
export type UseRegisterProps<Element extends HTMLTextAreaElement | HTMLSelectElement | HTMLInputElement = HTMLInputElement> = Pick<FieldProps<Element>, 'name' | 'validation' | 'type' | 'onBlur' | 'onChange'>;
/**
 * useRegister
 *
 * Register the field into `react-hook-form` with defaults.
 *
 * @remarks
 *
 * A field's `validation` prop is `react-hook-form`'s `RegisterOptions`
 * (with Redwood's extended `valueAs` props).
 *
 * @see {@link https://react-hook-form.com/api/useform/register}
 */
export declare const useRegister: <T, Element extends HTMLTextAreaElement | HTMLSelectElement | HTMLInputElement = HTMLInputElement>(props: UseRegisterProps<Element> & {
    element?: string;
}, ref?: React.ForwardedRef<T>, emptyAs?: EmptyAsValue) => {
    ref: (element: T) => void;
    onBlur: React.FocusEventHandler<Element>;
    onChange: React.ChangeEventHandler<Element>;
    name: string;
    min?: string | number;
    max?: string | number;
    maxLength?: number;
    minLength?: number;
    pattern?: string;
    required?: boolean;
    disabled?: boolean;
};
//# sourceMappingURL=useRegister.d.ts.map