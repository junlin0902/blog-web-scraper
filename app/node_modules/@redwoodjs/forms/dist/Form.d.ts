import React from 'react';
import type { FieldValues, UseFormReturn, UseFormProps } from 'react-hook-form';
export interface FormProps<TFieldValues extends FieldValues> extends Omit<React.ComponentPropsWithRef<'form'>, 'onSubmit'> {
    error?: any;
    /**
     * The methods returned by `useForm`.
     * This prop is only necessary if you've called `useForm` yourself to get
     * access to one of its functions, like `reset`.
     *
     * @example
     *
     * ```typescript
     * const formMethods = useForm<FormData>()
     *
     * const onSubmit = (data: FormData) => {
     *  sendDataToServer(data)
     *  formMethods.reset()
     * }
     *
     * return (
     *   <Form formMethods={formMethods} onSubmit={onSubmit}>
     * )
     * ```
     */
    formMethods?: UseFormReturn<TFieldValues>;
    /**
     * Configures how React Hook Form performs validation, among other things.
     *
     * @example
     *
     * ```jsx
     * <Form config={{ mode: 'onBlur' }}>
     * ```
     *
     * @see {@link https://react-hook-form.com/api/useform}
     */
    config?: UseFormProps<TFieldValues>;
    onSubmit?: (value: TFieldValues, event?: React.BaseSyntheticEvent) => void;
}
export declare const Form: <TFieldValues extends FieldValues>(props: FormProps<TFieldValues> & React.RefAttributes<HTMLFormElement>) => React.ReactElement | null;
//# sourceMappingURL=Form.d.ts.map