import React from "react";
import { middlewareDefaultAuthProviderState } from "./AuthProviderState.js";
const getAuthInitialStateFromServer = () => {
  if (globalThis?.__REDWOOD__SERVER__AUTH_STATE__) {
    const initialState = {
      ...middlewareDefaultAuthProviderState,
      encryptedSession: null,
      ...globalThis?.__REDWOOD__SERVER__AUTH_STATE__ || {}
    };
    globalThis.__REDWOOD__SERVER__AUTH_STATE__ = null;
    return initialState;
  }
  return null;
};
const ServerAuthContext = React.createContext(
  getAuthInitialStateFromServer()
);
const ServerAuthProvider = ({
  value,
  children
}) => {
  const stringifiedAuthState = `__REDWOOD__SERVER__AUTH_STATE__ = ${JSON.stringify(
    sanitizeServerAuthState(value)
  )};`;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    "script",
    {
      id: "__REDWOOD__SERVER_AUTH_STATE__",
      dangerouslySetInnerHTML: {
        __html: stringifiedAuthState
      }
    }
  ), /* @__PURE__ */ React.createElement(ServerAuthContext.Provider, { value }, children));
};
function sanitizeServerAuthState(value) {
  const sanitizedState = { ...value };
  delete sanitizedState.cookieHeader;
  return sanitizedState;
}
export {
  ServerAuthContext,
  ServerAuthProvider
};
