"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useReauthenticate_exports = {};
__export(useReauthenticate_exports, {
  useReauthenticate: () => useReauthenticate
});
module.exports = __toCommonJS(useReauthenticate_exports);
var import_react = require("react");
var import_useToken = require("./useToken.js");
const notAuthenticatedState = {
  isAuthenticated: false,
  currentUser: null,
  userMetadata: null,
  loading: false,
  hasError: false
};
const useReauthenticate = (authImplementation, setAuthProviderState, getCurrentUser) => {
  const getToken = (0, import_useToken.useToken)(authImplementation);
  return (0, import_react.useCallback)(async () => {
    if (authImplementation.loadWhileReauthenticating) {
      setAuthProviderState((oldState) => ({
        ...oldState,
        loading: true
      }));
    }
    try {
      const token = await getToken();
      let currentUser;
      if (token || authImplementation.middlewareAuthEnabled) {
        currentUser = await getCurrentUser();
      }
      if (!currentUser) {
        let loading = false;
        if (authImplementation.clientHasLoaded) {
          loading = !authImplementation.clientHasLoaded();
        }
        setAuthProviderState({
          ...notAuthenticatedState,
          loading,
          client: authImplementation.client
        });
      } else {
        const userMetadata = await authImplementation.getUserMetadata();
        setAuthProviderState((oldState) => ({
          ...oldState,
          userMetadata,
          currentUser,
          isAuthenticated: !!currentUser,
          loading: false,
          client: authImplementation.client
        }));
      }
    } catch (e) {
      setAuthProviderState({
        ...notAuthenticatedState,
        hasError: true,
        error: e
      });
    }
  }, [authImplementation, setAuthProviderState, getToken, getCurrentUser]);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useReauthenticate
});
