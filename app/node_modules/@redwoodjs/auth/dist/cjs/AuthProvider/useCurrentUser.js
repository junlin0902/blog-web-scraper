"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useCurrentUser_exports = {};
__export(useCurrentUser_exports, {
  useCurrentUser: () => useCurrentUser
});
module.exports = __toCommonJS(useCurrentUser_exports);
var import_react = require("react");
var import_useToken = require("./useToken.js");
const useCurrentUser = (authImplementation) => {
  const getToken = (0, import_useToken.useToken)(authImplementation);
  return (0, import_react.useCallback)(async () => {
    const token = await getToken();
    const response = await globalThis.fetch(globalThis.RWJS_API_GRAPHQL_URL, {
      method: "POST",
      credentials: "include",
      headers: {
        "content-type": "application/json",
        "auth-provider": authImplementation.type,
        authorization: `Bearer ${token}`
      },
      body: JSON.stringify({
        query: "query __REDWOOD__AUTH_GET_CURRENT_USER { redwood { currentUser } }"
      })
    });
    if (response.ok) {
      const { data } = await response.json();
      return data?.redwood?.currentUser;
    } else {
      throw new Error(
        `Could not fetch current user: ${response.statusText} (${response.status})`
      );
    }
  }, [authImplementation, getToken]);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useCurrentUser
});
