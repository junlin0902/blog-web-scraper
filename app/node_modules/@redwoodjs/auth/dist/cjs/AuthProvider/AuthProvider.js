"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AuthProvider_exports = {};
__export(AuthProvider_exports, {
  createAuthProvider: () => createAuthProvider
});
module.exports = __toCommonJS(AuthProvider_exports);
var import_react = __toESM(require("react"), 1);
var import_AuthProviderState = require("./AuthProviderState.js");
var import_ServerAuthProvider = require("./ServerAuthProvider.js");
var import_useCurrentUser = require("./useCurrentUser.js");
var import_useForgotPassword = require("./useForgotPassword.js");
var import_useHasRole = require("./useHasRole.js");
var import_useLogIn = require("./useLogIn.js");
var import_useLogOut = require("./useLogOut.js");
var import_useReauthenticate = require("./useReauthenticate.js");
var import_useResetPassword = require("./useResetPassword.js");
var import_useSignUp = require("./useSignUp.js");
var import_useToken = require("./useToken.js");
var import_useValidateResetToken = require("./useValidateResetToken.js");
function createAuthProvider(AuthContext, authImplementation, customProviderHooks) {
  const AuthProvider = ({ children }) => {
    const serverAuthState = (0, import_react.useContext)(import_ServerAuthProvider.ServerAuthContext);
    const [authProviderState, setAuthProviderState] = (0, import_react.useState)(serverAuthState || import_AuthProviderState.spaDefaultAuthProviderState);
    const getToken = (0, import_useToken.useToken)(authImplementation);
    const getCurrentUser = customProviderHooks?.useCurrentUser ? customProviderHooks.useCurrentUser : (
      // eslint-disable-next-line react-hooks/rules-of-hooks
      (0, import_useCurrentUser.useCurrentUser)(authImplementation)
    );
    const reauthenticate = (0, import_useReauthenticate.useReauthenticate)(
      authImplementation,
      setAuthProviderState,
      getCurrentUser
    );
    const hasRole = customProviderHooks?.useHasRole ? customProviderHooks.useHasRole(authProviderState.currentUser) : (
      // eslint-disable-next-line react-hooks/rules-of-hooks
      (0, import_useHasRole.useHasRole)(authProviderState.currentUser)
    );
    const signUp = (0, import_useSignUp.useSignUp)(
      authImplementation,
      setAuthProviderState,
      getCurrentUser
    );
    const logIn = (0, import_useLogIn.useLogIn)(
      authImplementation,
      setAuthProviderState,
      getCurrentUser
    );
    const logOut = (0, import_useLogOut.useLogOut)(authImplementation, setAuthProviderState);
    const forgotPassword = (0, import_useForgotPassword.useForgotPassword)(authImplementation);
    const resetPassword = (0, import_useResetPassword.useResetPassword)(authImplementation);
    const validateResetToken = (0, import_useValidateResetToken.useValidateResetToken)(authImplementation);
    const type = authImplementation.type;
    const client = authImplementation.client;
    (0, import_react.useEffect)(() => {
      async function doRestoreState() {
        await authImplementation.restoreAuthState?.();
        if (!serverAuthState) {
          reauthenticate();
        }
      }
      doRestoreState();
    }, [reauthenticate, serverAuthState]);
    return /* @__PURE__ */ import_react.default.createElement(
      AuthContext.Provider,
      {
        value: {
          ...authProviderState,
          signUp,
          logIn,
          logOut,
          getToken,
          getCurrentUser,
          hasRole,
          reauthenticate,
          forgotPassword,
          resetPassword,
          validateResetToken,
          client,
          type
        }
      },
      children
    );
  };
  return AuthProvider;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAuthProvider
});
