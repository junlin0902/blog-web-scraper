import type { ReactNode } from 'react';
import React from 'react';
import type { AuthProviderState } from './AuthProviderState.js';
export type ServerAuthState = AuthProviderState<any> & {
    cookieHeader: string | null | undefined;
    roles: string[];
};
/**
 * On the server, it resolves to the middlewareDefaultAuthProviderState first.
 *
 * On the client it restores from the initial server state injected in the ServerAuthProvider
 */
export declare const ServerAuthContext: React.Context<ServerAuthState>;
/**
 * Note: This only gets rendered on the server and serves two purposes:
 * 1) On the server, it sets the auth state
 * 2) On the client, it restores the auth state from the initial server render
 */
export declare const ServerAuthProvider: ({ value, children, }: {
    value: ServerAuthState;
    children?: ReactNode[];
}) => React.JSX.Element;
//# sourceMappingURL=ServerAuthProvider.d.ts.map