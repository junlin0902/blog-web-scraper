"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var babel_plugin_redwood_prerender_media_imports_exports = {};
__export(babel_plugin_redwood_prerender_media_imports_exports, {
  default: () => babel_plugin_redwood_prerender_media_imports_default
});
module.exports = __toCommonJS(babel_plugin_redwood_prerender_media_imports_exports);
var import_path = require("path");
var import_project_config = require("@redwoodjs/project-config");
var import_utils = require("./utils");
const defaultOptions = {
  // This list of extensions matches config for file-loader in
  extensions: [
    ".ico",
    ".jpg",
    ".jpeg",
    ".png",
    ".gif",
    ".svg",
    ".eot",
    ".otf",
    ".webp",
    ".ttf",
    ".woff",
    ".woff2",
    ".cur",
    ".ani",
    ".pdf",
    ".bmp"
  ]
};
function getVariableName(p) {
  if (p.node.specifiers?.[0]?.local) {
    return p.node.specifiers[0].local.name;
  }
  return null;
}
function babel_plugin_redwood_prerender_media_imports_default({ types: t }) {
  const manifestPath = (0, import_path.join)((0, import_project_config.getPaths)().web.dist, "client-build-manifest.json");
  const buildManifest = require(manifestPath);
  return {
    name: "babel-plugin-redwood-prerender-media-imports",
    visitor: {
      ImportDeclaration(p, state) {
        const importPath = p.node.source.value;
        const ext = (0, import_path.extname)(importPath);
        const options = {
          ...defaultOptions,
          ...state.opts
        };
        if (ext && options.extensions.includes(ext)) {
          const importConstName = getVariableName(p);
          if (state.filename === void 0) {
            return;
          }
          const absPath = (0, import_path.join)((0, import_path.dirname)(state.filename), p.node.source.value);
          const viteManifestKey = (0, import_project_config.ensurePosixPath)(
            (0, import_path.relative)((0, import_project_config.getPaths)().web.src, absPath)
          );
          const copiedAssetPath = buildManifest[viteManifestKey]?.file;
          const assetSrc = copiedAssetPath ?? (0, import_utils.convertToDataUrl)(
            (0, import_path.join)(state.file.opts.sourceRoot || "./", importPath)
          );
          if (importConstName) {
            p.replaceWith(
              t.variableDeclaration("const", [
                t.variableDeclarator(
                  t.identifier(importConstName),
                  t.stringLiteral(assetSrc)
                )
              ])
            );
          }
        }
      }
    }
  };
}
