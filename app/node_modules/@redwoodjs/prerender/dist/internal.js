"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var internal_exports = {};
__export(internal_exports, {
  getRootHtmlPath: () => getRootHtmlPath,
  registerShims: () => registerShims,
  writeToDist: () => writeToDist
});
module.exports = __toCommonJS(internal_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_fetch = require("@whatwg-node/fetch");
var import_project_config = require("@redwoodjs/project-config");
const INDEX_FILE = import_path.default.join((0, import_project_config.getPaths)().web.dist, "index.html");
const DEFAULT_INDEX = import_path.default.join((0, import_project_config.getPaths)().web.dist, "200.html");
const getRootHtmlPath = () => {
  if (import_fs.default.existsSync(DEFAULT_INDEX)) {
    return DEFAULT_INDEX;
  } else {
    return INDEX_FILE;
  }
};
const registerShims = (routerPath) => {
  const rwjsConfig = (0, import_project_config.getConfig)();
  globalThis.RWJS_ENV = {
    RWJS_API_GRAPHQL_URL: rwjsConfig.web.apiGraphQLUrl ?? rwjsConfig.web.apiUrl + "/graphql",
    RWJS_API_URL: rwjsConfig.web.apiUrl,
    __REDWOOD__APP_TITLE: rwjsConfig.web.title
  };
  globalThis.RWJS_DEBUG_ENV = {
    RWJS_SRC_ROOT: (0, import_project_config.getPaths)().web.src
  };
  globalThis.__REDWOOD__PRERENDERING = true;
  globalThis.__REDWOOD__HELMET_CONTEXT = {};
  process.env.__REDWOOD__PRERENDERING = "1";
  globalThis.location = {
    ...globalThis.location,
    pathname: routerPath
  };
  if (!globalThis.fetch) {
    globalThis.fetch = import_fetch.fetch;
  }
};
const writeToDist = (outputHtmlPath, renderOutput) => {
  const dirName = import_path.default.dirname(outputHtmlPath);
  const exist = import_fs.default.existsSync(dirName);
  if (!exist) {
    import_fs.default.mkdirSync(dirName, { recursive: true });
  }
  import_fs.default.writeFileSync(outputHtmlPath, renderOutput);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getRootHtmlPath,
  registerShims,
  writeToDist
});
