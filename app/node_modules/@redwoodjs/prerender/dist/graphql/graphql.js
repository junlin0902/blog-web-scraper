"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var graphql_exports = {};
__export(graphql_exports, {
  executeQuery: () => executeQuery,
  getGqlHandler: () => getGqlHandler
});
module.exports = __toCommonJS(graphql_exports);
var import_path = __toESM(require("path"));
var import_graphql = require("graphql");
var import_project_config = require("@redwoodjs/project-config");
var import_graphql2 = require("@redwoodjs/web/dist/graphql.js");
var import_errors = require("../errors");
async function executeQuery(gqlHandler, query, variables) {
  const config = (0, import_project_config.getConfig)();
  const operationName = (0, import_graphql2.getOperationName)(query);
  const operation = {
    operationName,
    query: (0, import_graphql.print)(query),
    variables
  };
  if (config.graphql.trustedDocuments) {
    const documentsPath = import_path.default.join((0, import_project_config.getPaths)().web.graphql, "graphql");
    const documents = require(documentsPath);
    const documentName = operationName[0].toUpperCase() + operationName.slice(1) + "Document";
    const queryHash = documents?.[documentName]?.__meta__?.hash;
    operation.query = void 0;
    operation.extensions = {
      persistedQuery: {
        version: 1,
        sha256Hash: queryHash
      }
    };
  }
  const handlerResult = await gqlHandler(operation);
  return handlerResult?.body;
}
async function getGqlHandler() {
  const gqlPath = import_path.default.join((0, import_project_config.getPaths)().api.functions, "graphql");
  try {
    const { handler } = require(gqlPath);
    return async (operation) => {
      return await handler(buildApiEvent(operation), buildContext());
    };
  } catch {
    return () => {
      throw new import_errors.GqlHandlerImportError(
        `Unable to import GraphQL handler at ${gqlPath}`
      );
    };
  }
}
function buildApiEvent(body) {
  return {
    body: JSON.stringify(body),
    headers: {
      origin: "http://localhost:8910",
      "content-type": "application/json",
      accept: "*/*",
      host: "localhost:8910"
    },
    multiValueHeaders: {},
    httpMethod: "POST",
    isBase64Encoded: false,
    path: "/graphql",
    pathParameters: null,
    queryStringParameters: {},
    multiValueQueryStringParameters: null,
    stageVariables: null,
    resource: "",
    requestContext: {
      requestId: "req-3",
      identity: {
        sourceIp: "::1",
        accessKey: null,
        accountId: null,
        apiKey: null,
        apiKeyId: null,
        caller: null,
        clientCert: null,
        cognitoAuthenticationProvider: null,
        cognitoAuthenticationType: null,
        cognitoIdentityId: null,
        cognitoIdentityPoolId: null,
        principalOrgId: null,
        user: null,
        userAgent: null,
        userArn: null
      },
      authorizer: {},
      protocol: "http",
      httpMethod: "POST",
      path: "/graphql",
      stage: "",
      requestTimeEpoch: 0,
      resourceId: "",
      resourcePath: "",
      accountId: "",
      apiId: ""
    }
  };
}
function buildContext() {
  return {
    callbackWaitsForEmptyEventLoop: false,
    functionName: "",
    functionVersion: "",
    invokedFunctionArn: "",
    memoryLimitInMB: "",
    awsRequestId: "",
    logGroupName: "",
    logStreamName: "",
    getRemainingTimeInMillis: () => 100,
    done: () => {
    },
    fail: () => {
    },
    succeed: () => {
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  executeQuery,
  getGqlHandler
});
