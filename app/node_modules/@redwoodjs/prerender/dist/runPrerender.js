"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var runPrerender_exports = {};
__export(runPrerender_exports, {
  runPrerender: () => runPrerender,
  writePrerenderedHtmlFile: () => writePrerenderedHtmlFile
});
module.exports = __toCommonJS(runPrerender_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_react = __toESM(require("react"));
var import_client = require("@apollo/client");
var import_cheerio = require("cheerio");
var import_server = __toESM(require("react-dom/server"));
var import_babel_config = require("@redwoodjs/babel-config");
var import_project_config = require("@redwoodjs/project-config");
var import_router = require("@redwoodjs/router");
var import_util = require("@redwoodjs/router/dist/util");
var import_babel_plugin_redwood_prerender_media_imports = __toESM(require("./babelPlugins/babel-plugin-redwood-prerender-media-imports"));
var import_detection = require("./detection");
var import_errors = require("./errors");
var import_graphql = require("./graphql/graphql");
var import_internal = require("./internal");
const prerenderApolloClient = new import_client.ApolloClient({ cache: new import_client.InMemoryCache() });
async function recursivelyRender(App, Routes, renderPath, gqlHandler, queryCache) {
  const {
    CellCacheContextProvider,
    getOperationName
  } = require("@redwoodjs/web");
  let shouldShowGraphqlHandlerNotFoundWarn = false;
  await Promise.all(
    Object.entries(queryCache).map(async ([cacheKey, value]) => {
      if (value.hasProcessed) {
        return Promise.resolve("");
      }
      try {
        const resultString = await (0, import_graphql.executeQuery)(
          gqlHandler,
          value.query,
          value.variables
        );
        let result;
        try {
          result = JSON.parse(resultString);
        } catch (e) {
          if (e instanceof SyntaxError) {
            throw new import_errors.JSONParseError({
              query: value.query,
              variables: value.variables,
              result: resultString
            });
          }
        }
        if (result.errors) {
          const message = result.errors[0].message ?? JSON.stringify(result.errors, null, 4);
          if (result.errors[0]?.extensions?.code === "UNAUTHENTICATED") {
            console.error(
              `
 
 \u{1F6D1}  Cannot prerender the query ${getOperationName(
                value.query
              )} as it requires auth. 
`
            );
          }
          throw new import_errors.PrerenderGqlError(message);
        }
        queryCache[cacheKey] = {
          ...value,
          data: result.data,
          hasProcessed: true
        };
        return result;
      } catch (e) {
        if (e instanceof import_errors.GqlHandlerImportError) {
          shouldShowGraphqlHandlerNotFoundWarn = true;
          queryCache[cacheKey] = {
            ...value,
            // tried to fetch, but failed
            renderLoading: true,
            hasProcessed: true
          };
          return;
        } else {
          throw e;
        }
      }
    })
  );
  const prerenderUrl = process.env.RWJS_PRERENDER_ORIGIN || "http://localhost" + renderPath;
  const componentAsHtml = import_server.default.renderToString(
    /* @__PURE__ */ import_react.default.createElement(import_router.LocationProvider, { location: new URL(prerenderUrl) }, /* @__PURE__ */ import_react.default.createElement(CellCacheContextProvider, { queryCache }, /* @__PURE__ */ import_react.default.createElement(App, null, /* @__PURE__ */ import_react.default.createElement(Routes, null))))
  );
  if (Object.values(queryCache).some((value) => !value.hasProcessed)) {
    return recursivelyRender(App, Routes, renderPath, gqlHandler, queryCache);
  } else {
    if (shouldShowGraphqlHandlerNotFoundWarn) {
      console.warn(
        '\n  \u26A0\uFE0F  Could not load your GraphQL handler. \n Your Cells have been prerendered in the "Loading" state. \n'
      );
    }
    return Promise.resolve(componentAsHtml);
  }
}
function insertChunkLoadingScript(indexHtmlTree, renderPath) {
  const prerenderRoutes = (0, import_detection.detectPrerenderRoutes)();
  const route = prerenderRoutes.find((route2) => {
    if (!route2.routePath) {
      return false;
    }
    return (0, import_util.matchPath)(route2.routePath, renderPath).match;
  });
  if (!route) {
    throw new Error("Could not find a Route matching " + renderPath);
  }
  if (!route.pageIdentifier) {
    throw new Error(`Route for ${renderPath} has no pageIdentifier`);
  }
  const buildManifest = JSON.parse(
    import_fs.default.readFileSync(
      import_path.default.join((0, import_project_config.getPaths)().web.dist, "client-build-manifest.json"),
      "utf-8"
    )
  );
  const chunkPaths = [];
  if (route?.filePath) {
    const pagesIndex = route.filePath.indexOf(import_path.default.join("web", "src", "pages")) + 8;
    const pagePath = (0, import_project_config.ensurePosixPath)(route.filePath.slice(pagesIndex));
    const pageChunkPath = buildManifest[pagePath]?.file;
    if (pageChunkPath) {
      chunkPaths.push("/" + pageChunkPath);
    }
  }
  if (chunkPaths.length === 0) {
    return;
  }
  chunkPaths.forEach((chunkPath) => {
    indexHtmlTree("head").prepend(
      `<script defer="defer" src="${chunkPath}" type="module"></script>`
    );
  });
  chunkPaths.forEach((chunkPath) => {
    const fullChunkPath = import_path.default.join((0, import_project_config.getPaths)().web.dist, chunkPath);
    const jsChunk = import_fs.default.readFileSync(fullChunkPath, "utf-8");
    const matches = jsChunk.match(/export\s*\{\s*\w+ as default\s*\}/g) || [];
    const lastIndex = jsChunk.lastIndexOf(matches[matches.length - 1]);
    const varNameMatch = jsChunk.slice(lastIndex).match(/export\s*\{\s*(\w+) as default\s*\}/);
    import_fs.default.writeFileSync(
      fullChunkPath,
      jsChunk + `globalThis.__REDWOOD__PRERENDER_PAGES = globalThis.__REDWOOD__PRERENDER_PAGES || {};
globalThis.__REDWOOD__PRERENDER_PAGES.${route?.pageIdentifier}=${varNameMatch?.[1]};
`
    );
  });
}
const runPrerender = async ({
  queryCache,
  renderPath
}) => {
  (0, import_internal.registerShims)(renderPath);
  (0, import_babel_config.registerApiSideBabelHook)({
    plugins: [
      [
        "babel-plugin-module-resolver",
        {
          alias: {
            api: (0, import_project_config.getPaths)().api.base,
            web: (0, import_project_config.getPaths)().web.base
          },
          loglevel: "silent"
          // to silence the unnecessary warnings
        }
      ]
    ],
    overrides: [
      {
        test: ["./api/"],
        plugins: [
          [
            "babel-plugin-module-resolver",
            {
              alias: {
                src: (0, import_project_config.getPaths)().api.src
              },
              loglevel: "silent"
            },
            "exec-api-src-module-resolver"
          ]
        ]
      }
    ]
  });
  const gqlHandler = await (0, import_graphql.getGqlHandler)();
  (0, import_babel_config.registerWebSideBabelHook)({
    overrides: [
      {
        plugins: [
          ["ignore-html-and-css-imports"],
          // webpack/postcss handles CSS imports
          [import_babel_plugin_redwood_prerender_media_imports.default]
        ]
      }
    ],
    options: {
      forPrerender: true
    }
  });
  const indexContent = import_fs.default.readFileSync((0, import_internal.getRootHtmlPath)()).toString();
  const { default: App } = require((0, import_project_config.getPaths)().web.app);
  const { default: Routes } = require((0, import_project_config.getPaths)().web.routes);
  const componentAsHtml = await recursivelyRender(
    App,
    Routes,
    renderPath,
    gqlHandler,
    queryCache
  );
  const { helmet } = globalThis.__REDWOOD__HELMET_CONTEXT;
  Object.keys(queryCache).forEach((queryKey) => {
    const { query, variables, data } = queryCache[queryKey];
    prerenderApolloClient.writeQuery({
      query,
      variables,
      data
    });
  });
  const indexHtmlTree = (0, import_cheerio.load)(indexContent);
  if (helmet) {
    const helmetElements = `
  ${helmet?.link.toString()}
  ${helmet?.meta.toString()}
  ${helmet?.script.toString()}
  ${helmet?.noscript.toString()}
  `;
    indexHtmlTree("head").prepend(helmetElements);
    const titleHtmlTag = helmet.title.toString();
    if ((0, import_cheerio.load)(titleHtmlTag)("title").text() !== "") {
      if (indexHtmlTree("title").text().length === 0) {
        indexHtmlTree("head").prepend(titleHtmlTag);
      } else {
        indexHtmlTree("title").replaceWith(titleHtmlTag);
      }
    }
  }
  indexHtmlTree("head").append(
    `<script> globalThis.__REDWOOD__APOLLO_STATE = ${JSON.stringify(
      prerenderApolloClient.extract()
    )}</script>`
  );
  prerenderApolloClient.resetStore();
  insertChunkLoadingScript(indexHtmlTree, renderPath);
  indexHtmlTree("#redwood-app").append(componentAsHtml);
  const renderOutput = indexHtmlTree.html();
  return renderOutput;
};
const writePrerenderedHtmlFile = (outputHtmlPath, content) => {
  const outputHtmlAbsPath = import_path.default.join((0, import_project_config.getPaths)().base, outputHtmlPath);
  if (outputHtmlPath === "web/dist/index.html") {
    const html200Path = import_path.default.join((0, import_project_config.getPaths)().web.dist, "200.html");
    if (!import_fs.default.existsSync(html200Path)) {
      import_fs.default.copyFileSync(outputHtmlAbsPath, html200Path);
    }
  }
  (0, import_internal.writeToDist)(outputHtmlAbsPath, content);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  runPrerender,
  writePrerenderedHtmlFile
});
