"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var process_env_computed_exports = {};
__export(process_env_computed_exports, {
  processEnvComputedRule: () => processEnvComputedRule
});
module.exports = __toCommonJS(process_env_computed_exports);
var import_utils = require("@typescript-eslint/utils");
const createRule = import_utils.ESLintUtils.RuleCreator.withoutDocs;
function isProcessEnv(node) {
  return node.type === import_utils.AST_NODE_TYPES.MemberExpression && hasName(node.object, "process") && hasName(node.property, "env");
}
function hasName(node, name) {
  return node.type === import_utils.AST_NODE_TYPES.Identifier && node.name === name;
}
function isTestFile(filename) {
  return filename.endsWith(".test.ts") || filename.endsWith(".test.js") || filename.endsWith(".test.tsx") || filename.endsWith(".test.jsx") || filename.endsWith(".test.mts") || filename.endsWith(".test.mjs") || filename.endsWith(".test.cjs") || filename.endsWith(".spec.ts") || filename.endsWith(".spec.js") || filename.endsWith(".spec.tsx") || filename.endsWith(".spec.jsx") || filename.endsWith(".spec.mts") || filename.endsWith(".spec.mjs") || filename.endsWith(".spec.cjs") || filename.includes("/__tests__/");
}
const processEnvComputedRule = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "Find computed member access on process.env"
    },
    messages: {
      unexpected: "Accessing process.env via array syntax will break in production. Use dot notation e.g. process.env.MY_ENV_VAR instead"
    },
    schema: []
    // No additional configuration needed
  },
  defaultOptions: [],
  create(context) {
    return {
      MemberExpression: function(node) {
        const matches = isProcessEnv(node.object) && node.computed && !isTestFile(context.filename);
        if (matches) {
          context.report({
            messageId: "unexpected",
            node
          });
        }
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  processEnvComputedRule
});
