"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var unsupported_route_components_exports = {};
__export(unsupported_route_components_exports, {
  unsupportedRouteComponents: () => unsupportedRouteComponents
});
module.exports = __toCommonJS(unsupported_route_components_exports);
var import_utils = require("@typescript-eslint/utils");
const createRule = import_utils.ESLintUtils.RuleCreator.withoutDocs;
function isAllowedElement(name) {
  const allowedElements = ["Router", "Route", "Set", "PrivateSet", "Private"];
  return allowedElements.includes(name);
}
function checkNodes(nodesToCheck, context) {
  if (nodesToCheck.type === import_utils.AST_NODE_TYPES.JSXElement) {
    const name = nodesToCheck.openingElement.name.type === import_utils.AST_NODE_TYPES.JSXIdentifier ? nodesToCheck.openingElement.name.name : null;
    if (name && !isAllowedElement(name)) {
      context.report({
        node: nodesToCheck,
        messageId: "unexpected",
        data: { name }
      });
    }
    if (nodesToCheck.children) {
      nodesToCheck.children.forEach((node) => checkNodes(node, context));
    }
  }
}
const unsupportedRouteComponents = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "Find unsupported route components"
    },
    messages: {
      unexpected: "Unexpected JSX element <{{name}}>. Only <Router>, <Route>, <Set>, <PrivateSet> and <Private> are allowed in the Routes component."
    },
    schema: []
  },
  defaultOptions: [],
  create(context) {
    return {
      VariableDeclaration(node) {
        if (isRoutesRenderBlock(node.declarations[0])) {
          const routesDeclaration = node.declarations[0].init;
          if (routesDeclaration?.type === import_utils.AST_NODE_TYPES.ArrowFunctionExpression) {
            if (routesDeclaration.body.type === import_utils.AST_NODE_TYPES.JSXElement) {
              checkNodes(routesDeclaration.body, context);
            } else if (routesDeclaration.body.type === import_utils.AST_NODE_TYPES.BlockStatement) {
              if (routesDeclaration.body.body[0].type === import_utils.AST_NODE_TYPES.ReturnStatement && routesDeclaration.body.body[0].argument?.type === import_utils.AST_NODE_TYPES.JSXElement) {
                const routesReturnStatement = routesDeclaration.body.body[0].argument;
                checkNodes(routesReturnStatement, context);
              }
            }
          }
        }
      }
    };
  }
});
function isRoutesRenderBlock(node) {
  return node?.type === import_utils.AST_NODE_TYPES.VariableDeclarator && node?.id.type === import_utils.AST_NODE_TYPES.Identifier && node?.id.name === "Routes";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  unsupportedRouteComponents
});
