"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultHost = void 0;
var _replaceAll = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/replace-all"));
var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/get-own-property-descriptor"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/applyDecoratedDescriptor"));
var _fastGlob = _interopRequireDefault(require("fast-glob"));
var fs = _interopRequireWildcard(require("fs-extra"));
var _projectConfig = require("@redwoodjs/project-config");
var _decorators = require("./x/decorators");
var _dec, _class;
/**
 * The host interface allows us to decouple the "model/*"
 * classes from access to the file system.
 * This is critical for editor support (ex: showing diagnostics on unsaved files)
 */
let DefaultHost = exports.DefaultHost = (_dec = (0, _decorators.lazy)(), _class = class DefaultHost {
  existsSync(path) {
    return fs.existsSync(path);
  }
  readFileSync(path) {
    return fs.readFileSync(path, {
      encoding: 'utf8'
    }).toString();
  }
  readdirSync(path) {
    return fs.readdirSync(path);
  }
  globSync(pattern) {
    // globSync only works with / as the path separator, even on Windows
    return _fastGlob.default.sync((0, _replaceAll.default)(pattern).call(pattern, '\\', '/'));
  }
  writeFileSync(path, contents) {
    return fs.writeFileSync(path, contents);
  }
  get paths() {
    return (0, _projectConfig.getPaths)();
  }
}, (0, _applyDecoratedDescriptor2.default)(_class.prototype, "paths", [_dec], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "paths"), _class.prototype), _class);