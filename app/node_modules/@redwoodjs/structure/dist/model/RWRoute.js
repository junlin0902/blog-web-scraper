"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.RWRoute = void 0;
require("core-js/modules/esnext.json.parse.js");
var _startsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/starts-with"));
var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/find"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));
var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/get-own-property-descriptor"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/applyDecoratedDescriptor"));
var _path = require("path");
var tsm = _interopRequireWildcard(require("ts-morph"));
var _vscodeLanguageserverTypes = require("vscode-languageserver-types");
var _errors = require("../errors");
var _ide = require("../ide");
var _util = require("../util");
var _decorators = require("../x/decorators");
var _vscodeLanguageserverTypes2 = require("../x/vscode-languageserver-types");
var _advanced_path_parser = require("./util/advanced_path_parser");
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class;
let RWRoute = exports.RWRoute = (_dec = (0, _decorators.lazy)(), _dec2 = (0, _decorators.lazy)(), _dec3 = (0, _decorators.lazy)(), _dec4 = (0, _decorators.lazy)(), _dec5 = (0, _decorators.lazy)(), _dec6 = (0, _decorators.lazy)(), _dec7 = (0, _decorators.lazy)(), _dec8 = (0, _decorators.lazy)(), _dec9 = (0, _decorators.lazy)(), _dec10 = (0, _decorators.lazy)(), _dec11 = (0, _decorators.lazy)(), _dec12 = (0, _decorators.lazy)(), _dec13 = (0, _decorators.lazy)(), _dec14 = (0, _decorators.lazy)(), _dec15 = (0, _decorators.lazy)(), _dec16 = (0, _decorators.lazy)(), _dec17 = (0, _decorators.lazy)(), _dec18 = (0, _decorators.lazy)(), _dec19 = (0, _decorators.lazy)(), _dec20 = (0, _decorators.lazy)(), _dec21 = (0, _decorators.lazy)(), _dec22 = (0, _decorators.lazy)(), _dec23 = (0, _decorators.lazy)(), _dec24 = (0, _decorators.lazy)(), _class = class RWRoute extends _ide.BaseNode {
  constructor(
  /**
   * the <Route> tag
   */
  jsxNode, parent) {
    super();
    this.jsxNode = jsxNode;
    this.parent = parent;
  }
  get id() {
    // we cannot rely on the "path" attribute of the node
    // it might not be unique (which is an error state, but valid while editing)
    return this.parent.id + ' ' + this.jsxNode.getStart();
  }
  get location() {
    return (0, _vscodeLanguageserverTypes2.LocationLike_toLocation)(this.jsxNode);
  }
  get isPrivate() {
    const tagText = this.jsxNode.getParentIfKind(tsm.SyntaxKind.JsxElement)?.getOpeningElement()?.getTagNameNode()?.getText();
    return tagText === 'Private' || tagText === 'PrivateSet';
  }
  get unauthenticated() {
    if (!this.isPrivate) {
      return undefined;
    }
    const a = this.jsxNode.getParentIfKind(tsm.SyntaxKind.JsxElement)?.getOpeningElement().getAttribute('unauthenticated');
    if (!a) {
      return undefined;
    }
    if (tsm.Node.isJsxAttribute(a)) {
      const init = a.getInitializer();
      if (tsm.Node.isStringLiteral(init)) {
        return init.getLiteralValue();
      }
    }
    return undefined;
  }
  get roles() {
    if (!this.isPrivate) {
      return undefined;
    }
    const a = this.jsxNode.getParentIfKind(tsm.SyntaxKind.JsxElement)?.getOpeningElement().getAttribute('roles');
    if (!a) {
      return undefined;
    }
    if (tsm.Node.isJsxAttribute(a)) {
      const init = a.getInitializer();

      // Handle string literals
      if (tsm.Node.isStringLiteral(init)) {
        const literalValue = init.getLiteralValue();

        // Check if the string looks like an array with single quotes
        if ((0, _startsWith.default)(literalValue).call(literalValue, '[') && (0, _endsWith.default)(literalValue).call(literalValue, ']')) {
          try {
            // Unescape the string by replacing single quotes with double quotes
            const correctedLiteralValue = literalValue.replace(/'/g, '"');
            // Attempt to parse as JSON array
            const parsedValue = JSON.parse(correctedLiteralValue);
            if ((0, _isArray.default)(parsedValue)) {
              return parsedValue;
            }
          } catch {
            // If parsing fails, return undefined
            return undefined;
          }
        }

        // If not an array, return the string value
        return literalValue;
      }

      // Handle JSX expressions with array literals
      if (tsm.Node.isJsxExpression(init)) {
        const expr = init.getExpression();
        if (tsm.Node.isArrayLiteralExpression(expr)) {
          var _context, _context2;
          return (0, _filter.default)(_context = (0, _map.default)(_context2 = expr.getElements()).call(_context2, element => {
            if (tsm.Node.isStringLiteral(element)) {
              return element.getLiteralValue();
            }
            return undefined;
          })).call(_context, val => val !== undefined);
        }
      }
    }
    return undefined;
  }
  get hasParameters() {
    var _context3;
    if (!this.path) {
      return false;
    }
    // KLUDGE: we need a good path parsing library here
    return (0, _includes.default)(_context3 = this.path).call(_context3, '{');
  }
  get hasPrerender() {
    return this.prerender;
  }
  get outlineLabel() {
    if (this.isNotFound) {
      return '404';
    }
    return this.path ?? '';
  }
  get outlineDescription() {
    const fp = this.page?.filePath;
    if (!fp) {
      return undefined;
    }
    return (0, _path.basename)(fp);
  }
  get outlineLink() {
    return (0, _vscodeLanguageserverTypes2.LocationLike_toHashLink)(this.location);
    //return LocationLike_toTerminalLink(this.location)
  }

  /**
   * The associated Redwood Page node, if any
   */

  get page() {
    var _context4;
    if (!this.page_identifier_str) {
      return undefined;
    }
    return (0, _find.default)(_context4 = this.parent.parent.pages).call(_context4, p => p.constName === this.page_identifier_str);
  }
  /**
   * <Route path="" page={THIS_IDENTIFIER}/>
   */
  get page_identifier() {
    const a = this.jsxNode.getAttribute('page');
    if (!a) {
      return undefined;
    }
    if (tsm.Node.isJsxAttribute(a)) {
      const init = a.getInitializer();
      if (tsm.Node.isJsxExpression(init)) {
        const expr = init.getExpression();
        if (tsm.Node.isIdentifier(expr)) {
          return expr;
        }
      }
    }
    return undefined;
  }
  get page_identifier_str() {
    return this.page_identifier?.getText();
  }
  get name() {
    return this.getStringAttr('name');
  }
  get path_errorMessage() {
    // TODO: path validation is not strong enough
    if (typeof this.path === 'undefined') {
      return undefined;
    }
    try {
      (0, _util.validateRoutePath)(this.path);
      return undefined;
    } catch (e) {
      return e.toString();
    }
  }
  get path() {
    return this.getStringAttr('path');
  }
  get prerender() {
    return this.getBoolAttr('prerender');
  }

  // TODO (STREAMING) Remove this once we're sure we don't want to do Render Modes
  get renderMode() {
    return this.getStringAttr('renderMode') || 'stream';
  }
  get path_literal_node() {
    const a = this.jsxNode.getAttribute('path');
    if (!a) {
      return undefined;
    }
    if (tsm.Node.isJsxAttribute(a)) {
      const init = a.getInitializer();
      if (tsm.Node.isStringLiteral(init)) {
        return init;
      }
    }
    return undefined;
  }
  get isNotFound() {
    return typeof this.jsxNode.getAttribute('notfound') !== 'undefined';
  }
  get redirect() {
    return this.getStringAttr('redirect');
  }
  *diagnostics() {
    if (this.page_identifier && !this.page) {
      // normally this would be caught by TypeScript
      // but Redwood has some "magic" import behavior going on
      yield (0, _vscodeLanguageserverTypes2.err)(this.page_identifier, 'Page component not found');
    }
    if (this.path_errorMessage && this.path_literal_node) {
      yield (0, _vscodeLanguageserverTypes2.err)(this.path_literal_node, this.path_errorMessage, _errors.RWError.INVALID_ROUTE_PATH_SYNTAX);
    }
    if (this.hasPathCollision) {
      yield (0, _vscodeLanguageserverTypes2.err)(this.path_literal_node, 'Duplicate Path');
    }
    if (this.isPrivate && this.isNotFound) {
      yield (0, _vscodeLanguageserverTypes2.err)(this.jsxNode, "The 'Not Found' page cannot be within a <PrivateSet> or a <Private> tag");
    }
    if (this.isNotFound && this.path) {
      yield (0, _vscodeLanguageserverTypes2.err)(this.path_literal_node, "The 'Not Found' page cannot have a path");
    }
  }
  *ideInfo() {
    // definition: page identifier --> page
    if (this.page && this.page_identifier) {
      yield {
        kind: 'Definition',
        location: (0, _vscodeLanguageserverTypes2.Location_fromNode)(this.page_identifier),
        target: (0, _vscodeLanguageserverTypes2.Location_fromFilePath)(this.page.filePath)
      };
    }
    if (this.path && this.page) {
      // const location = Location_fromNode(this.jsxNode!)
      // yield { kind: 'Hover', location, text: 'Open Preview' }
    }
    yield* this.decorations();
    const {
      sampleLocalPreviewURL
    } = this;
    if (sampleLocalPreviewURL) {
      const range = (0, _vscodeLanguageserverTypes2.Range_fromNode)(this.jsxNode);
      yield {
        kind: 'Hover',
        location: {
          uri: this.parent.uri,
          range
        },
        hover: {
          range,
          contents: `[Open Preview](${sampleLocalPreviewURL})`
        }
      };
      const {
        path_literal_node
      } = this;
      if (path_literal_node) {
        const range = (0, _vscodeLanguageserverTypes2.Range_fromNode)(this.path_literal_node);
        yield {
          kind: 'DocumentLink',
          location: {
            uri: this.parent.uri,
            range
          },
          link: {
            range,
            target: sampleLocalPreviewURL,
            tooltip: sampleLocalPreviewURL
          }
        };
      }
    }
  }
  get hasPathCollision() {
    if (!this.path) {
      return false;
    }
    const pathWithNoParamNames = removeParamNames(this.path);
    for (const route2 of this.parent.routes) {
      if (route2 === this) {
        continue;
      }
      if (!route2.path) {
        continue;
      }
      if (removeParamNames(route2.path) === pathWithNoParamNames) {
        return true;
      }
    }
    return false;
    function removeParamNames(p) {
      // TODO: implement
      // foo/{bar}/baz --> foo/{}/baz
      return p;
    }
  }
  getBoolAttr(name) {
    const attr = this.jsxNode.getAttribute(name);
    // No attribute
    if (!attr) {
      return false;
    }

    // Attribute exists
    if (tsm.Node.isJsxAttribute(attr)) {
      const init = attr.getInitializer();

      // Bool attributes with no initializer are true
      // e.g. <Route prerender />
      if (!init) {
        return true;
      }
      if (tsm.Node.isJsxExpression(init)) {
        // If it is explicitly set to true
        // e.g. <Route prerender={true} />
        return tsm.Node.isTrueLiteral(init.getExpression());
      } else if (tsm.Node.isStringLiteral(init)) {
        // If its using the incorrect string form, we're accepting it as true
        // e.g. <Route prerender="true" />
        const literalValue = init.getLiteralValue();
        return literalValue === 'true';
      }
    }
    return false;
  }
  getStringAttr(name) {
    const a = this.jsxNode.getAttribute(name);
    if (!a) {
      return undefined;
    }
    if (tsm.Node.isJsxAttribute(a)) {
      const init = a.getInitializer();
      if (tsm.Node.isStringLiteral(init)) {
        return init.getLiteralValue();
      }
    }
    return undefined;
  }
  get parsedPath() {
    if (!this.path) {
      return undefined;
    }
    return (0, _advanced_path_parser.advanced_path_parser)(this.path);
  }
  *decorations() {
    const pp = this.parsedPath;
    if (!pp) {
      return;
    }
    const uri = this.parent.uri;
    const pos = (0, _vscodeLanguageserverTypes2.Range_fromNode)(this.path_literal_node).start;
    const xxx = {
      path_punctuation: pp.punctuationIndexes,
      path_slash: pp.slashIndexes,
      path_parameter: pp.paramRanges,
      path_parameter_type: pp.paramTypeRanges
    };
    for (const style of (0, _keys.default)(xxx)) {
      for (const x of xxx[style]) {
        yield {
          kind: 'Decoration',
          style: style,
          location: loc(x)
        };
      }
    }
    function loc(x) {
      if (typeof x === 'number') {
        return loc([x, x + 1]);
      } else {
        const start = (0, _vscodeLanguageserverTypes2.Position_translate)(pos, 0, x[0] + 1);
        const end = (0, _vscodeLanguageserverTypes2.Position_translate)(pos, 0, x[1] + 1);
        return {
          uri,
          range: _vscodeLanguageserverTypes.Range.create(start, end)
        };
      }
    }
  }

  // TODO: we should get the URL of the server dynamically
  get sampleLocalPreviewURL() {
    const {
      path
    } = this;
    if (!path) {
      return undefined;
    }
    if ((0, _includes.default)(path).call(path, '{')) {
      return undefined;
    }
    return `http://localhost:8910${path}`;
  }
}, (0, _applyDecoratedDescriptor2.default)(_class.prototype, "id", [_dec], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "id"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "location", [_dec2], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "location"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "isPrivate", [_dec3], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "isPrivate"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "unauthenticated", [_dec4], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "unauthenticated"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "roles", [_dec5], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "roles"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "hasParameters", [_dec6], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "hasParameters"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "hasPrerender", [_dec7], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "hasPrerender"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "outlineLabel", [_dec8], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "outlineLabel"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "outlineDescription", [_dec9], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "outlineDescription"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "outlineLink", [_dec10], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "outlineLink"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "page", [_dec11], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "page"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "page_identifier", [_dec12], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "page_identifier"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "page_identifier_str", [_dec13], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "page_identifier_str"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "name", [_dec14], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "name"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "path_errorMessage", [_dec15], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "path_errorMessage"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "path", [_dec16], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "path"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "prerender", [_dec17], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "prerender"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "renderMode", [_dec18], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "renderMode"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "path_literal_node", [_dec19], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "path_literal_node"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "isNotFound", [_dec20], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "isNotFound"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "redirect", [_dec21], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "redirect"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "hasPathCollision", [_dec22], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "hasPathCollision"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "parsedPath", [_dec23], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "parsedPath"), _class.prototype), (0, _applyDecoratedDescriptor2.default)(_class.prototype, "sampleLocalPreviewURL", [_dec24], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "sampleLocalPreviewURL"), _class.prototype), _class);