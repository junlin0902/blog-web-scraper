import { getSchema as getPrismaSchema } from "@mrleebo/prisma-ast";
import * as graphql from "graphql";
import { Project } from "ts-morph";
import typescript from "typescript";
import { prismaModeller } from "./prismaModeller.js";
import { lookAtServiceFile } from "./serviceFile.js";
import { createSharedSchemaFiles } from "./sharedSchema.js";
export * from "./types.js";
import { basename, join } from "node:path";
export async function runFullCodegen(preset, config) {
    if (preset !== "redwood")
        throw new Error("Only Redwood codegen is supported at this time");
    const verbose = !!config.verbose;
    const startTime = Date.now();
    const step = makeStep(verbose);
    const paths = config.paths;
    const sys = typescript.sys;
    const pathSettings = {
        root: paths.base,
        apiServicesPath: paths.api.services,
        prismaDSLPath: paths.api.dbSchema,
        graphQLSchemaPath: paths.generated.schema,
        sharedFilename: "shared-schema-types.d.ts",
        sharedInternalFilename: "shared-return-types.d.ts",
        typesFolderRoot: paths.api.types,
    };
    const project = new Project({ useInMemoryFileSystem: true });
    let gqlSchema;
    const getGraphQLSDLFromFile = (settings) => {
        const schema = sys.readFile(settings.graphQLSchemaPath);
        if (!schema)
            throw new Error("No schema found at " + settings.graphQLSchemaPath);
        gqlSchema = graphql.buildSchema(schema);
    };
    let prismaSchema = new Map();
    const getPrismaSchemaFromFile = (settings) => {
        const prismaSchemaText = sys.readFile(settings.prismaDSLPath);
        if (!prismaSchemaText)
            throw new Error("No prisma file found at " + settings.prismaDSLPath);
        const prismaSchemaBlocks = getPrismaSchema(prismaSchemaText);
        prismaSchema = prismaModeller(prismaSchemaBlocks);
    };
    await step("Read the GraphQL schema", () => getGraphQLSDLFromFile(pathSettings));
    await step("Read the Prisma schema", () => getPrismaSchemaFromFile(pathSettings));
    if (!gqlSchema)
        throw new Error("No GraphQL Schema was created during setup");
    const appContext = {
        gql: gqlSchema,
        prisma: prismaSchema,
        tsProject: project,
        codeFacts: new Map(),
        fieldFacts: new Map(),
        pathSettings,
        sys,
        join,
        basename,
    };
    // All changed files
    const filepaths = [];
    // Create the two shared schema files
    await step("Create shared schema files", async () => {
        const sharedDTSes = await createSharedSchemaFiles(appContext);
        filepaths.push(...sharedDTSes);
    });
    let knownServiceFiles = [];
    const createDTSFilesForAllServices = async () => {
        // TODO: Maybe Redwood has an API for this? Its grabbing all the services
        const serviceFiles = appContext.sys.readDirectory(appContext.pathSettings.apiServicesPath);
        knownServiceFiles = serviceFiles.filter(isRedwoodServiceFile);
        for (const path of knownServiceFiles) {
            const dts = await lookAtServiceFile(path, appContext);
            if (dts)
                filepaths.push(dts);
        }
    };
    // Initial run
    await step("Create DTS files for all services", createDTSFilesForAllServices);
    const endTime = Date.now();
    const timeTaken = endTime - startTime;
    if (verbose)
        console.log(`[sdl-codegen]: Full run took ${timeTaken}ms`);
    const createWatcher = () => {
        const oldSDL = "";
        return {
            fileChanged: async (path) => {
                if (isTypesFile(path))
                    return;
                if (path === appContext.pathSettings.graphQLSchemaPath) {
                    const newSDL = appContext.sys.readFile(path);
                    if (newSDL === oldSDL)
                        return;
                    if (verbose)
                        console.log("[sdl-codegen] SDL Schema changed");
                    await step("GraphQL schema changed", () => getGraphQLSDLFromFile(appContext.pathSettings));
                    await step("Create all shared schema files", () => createSharedSchemaFiles(appContext));
                    await step("Create all service files", createDTSFilesForAllServices);
                }
                else if (path === appContext.pathSettings.prismaDSLPath) {
                    await step("Prisma schema changed", () => getPrismaSchemaFromFile(appContext.pathSettings));
                    await step("Create all shared schema files", createDTSFilesForAllServices);
                }
                else if (isRedwoodServiceFile(path)) {
                    if (!knownServiceFiles.includes(path)) {
                        await step("Create all shared schema files", createDTSFilesForAllServices);
                    }
                    else {
                        await step("Create known service files", () => lookAtServiceFile(path, appContext));
                    }
                }
            },
        };
    };
    return {
        paths: filepaths,
        createWatcher,
    };
}
const isTypesFile = (file) => file.endsWith(".d.ts");
const isRedwoodServiceFile = (file) => {
    if (!file.includes("services"))
        return false;
    if (file.endsWith(".d.ts"))
        return false;
    if (file.endsWith(".test.ts") || file.endsWith(".test.js"))
        return false;
    if (file.endsWith("scenarios.ts") || file.endsWith("scenarios.js"))
        return false;
    return file.endsWith(".ts") || file.endsWith(".tsx") || file.endsWith(".js");
};
const makeStep = (verbose) => async (msg, fn) => {
    if (!verbose)
        return fn();
    console.log("[sdl-codegen] " + msg);
    console.time("[sdl-codegen] " + msg);
    await fn();
    console.timeEnd("[sdl-codegen] " + msg);
};
//# sourceMappingURL=index.js.map