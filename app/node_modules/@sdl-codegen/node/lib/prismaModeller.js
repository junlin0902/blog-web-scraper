export const prismaModeller = (schema) => {
    const types = new Map();
    let leadingComments = [];
    schema.list.forEach((b) => {
        if (b.type === "comment") {
            leadingComments.push(b.text.replace("/// ", "").replace("// ", ""));
        }
        if (b.type === "model") {
            const properties = new Map();
            let leadingFieldComments = [];
            // Loop through all the properties and keep track of the
            // comments before them
            b.properties.forEach((p) => {
                if (p.type === "comment") {
                    leadingFieldComments.push(p.text.replace("/// ", "").replace("// ", ""));
                }
                else if (p.type === "break") {
                    leadingFieldComments.push("");
                }
                else {
                    properties.set(p.name, {
                        leadingComments: leadingFieldComments.join("\n"),
                        property: p,
                    });
                    leadingFieldComments = [];
                }
            });
            types.set(b.name, {
                properties,
                leadingComments: leadingComments.join("\n"),
            });
            leadingComments = [];
        }
    });
    return types;
};
//# sourceMappingURL=prismaModeller.js.map