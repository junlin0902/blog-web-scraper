{"version":3,"file":"prisma-ast.esm.js","sources":["../src/lexer.ts","../src/schemaUtils.ts","../src/getConfig.ts","../src/parser.ts","../src/visitor.ts","../src/getSchema.ts","../src/schemaSorter.ts","../src/printSchema.ts","../src/finder.ts","../src/PrismaSchemaBuilder.ts","../src/produceSchema.ts"],"sourcesContent":["import { createToken, Lexer, IMultiModeLexerDefinition } from 'chevrotain';\n\nexport const Identifier = createToken({\n  name: 'Identifier',\n  pattern: /[a-zA-Z][\\w-]*/,\n});\nexport const Datasource = createToken({\n  name: 'Datasource',\n  pattern: /datasource/,\n  push_mode: 'block',\n});\nexport const Generator = createToken({\n  name: 'Generator',\n  pattern: /generator/,\n  push_mode: 'block',\n});\nexport const Model = createToken({\n  name: 'Model',\n  pattern: /model/,\n  push_mode: 'block',\n});\nexport const View = createToken({\n  name: 'View',\n  pattern: /view/,\n  push_mode: 'block',\n});\nexport const Enum = createToken({\n  name: 'Enum',\n  pattern: /enum/,\n  push_mode: 'block',\n});\nexport const Type = createToken({\n  name: 'Type',\n  pattern: /type/,\n  push_mode: 'block',\n});\nexport const True = createToken({\n  name: 'True',\n  pattern: /true/,\n  longer_alt: Identifier,\n});\nexport const False = createToken({\n  name: 'False',\n  pattern: /false/,\n  longer_alt: Identifier,\n});\nexport const Null = createToken({\n  name: 'Null',\n  pattern: /null/,\n  longer_alt: Identifier,\n});\nexport const Comment = createToken({\n  name: 'Comment',\n  pattern: Lexer.NA,\n});\n\nexport const DocComment = createToken({\n  name: 'DocComment',\n  pattern: /\\/\\/\\/[ \\t]*(.*)/,\n  categories: [Comment],\n});\nexport const LineComment = createToken({\n  name: 'LineComment',\n  pattern: /\\/\\/[ \\t]*(.*)/,\n  categories: [Comment],\n});\nexport const Attribute = createToken({\n  name: 'Attribute',\n  pattern: Lexer.NA,\n});\nexport const BlockAttribute = createToken({\n  name: 'BlockAttribute',\n  pattern: /@@/,\n  label: \"'@@'\",\n  categories: [Attribute],\n});\nexport const FieldAttribute = createToken({\n  name: 'FieldAttribute',\n  pattern: /@/,\n  label: \"'@'\",\n  categories: [Attribute],\n});\nexport const Dot = createToken({\n  name: 'Dot',\n  pattern: /\\./,\n  label: \"'.'\",\n});\nexport const QuestionMark = createToken({\n  name: 'QuestionMark',\n  pattern: /\\?/,\n  label: \"'?'\",\n});\nexport const LCurly = createToken({\n  name: 'LCurly',\n  pattern: /{/,\n  label: \"'{'\",\n});\nexport const RCurly = createToken({\n  name: 'RCurly',\n  pattern: /}/,\n  label: \"'}'\",\n  pop_mode: true,\n});\nexport const LRound = createToken({\n  name: 'LRound',\n  pattern: /\\(/,\n  label: \"'('\",\n});\nexport const RRound = createToken({\n  name: 'RRound',\n  pattern: /\\)/,\n  label: \"')'\",\n});\nexport const LSquare = createToken({\n  name: 'LSquare',\n  pattern: /\\[/,\n  label: \"'['\",\n});\nexport const RSquare = createToken({\n  name: 'RSquare',\n  pattern: /\\]/,\n  label: \"']'\",\n});\nexport const Comma = createToken({\n  name: 'Comma',\n  pattern: /,/,\n  label: \"','\",\n});\nexport const Colon = createToken({\n  name: 'Colon',\n  pattern: /:/,\n  label: \"':'\",\n});\nexport const Equals = createToken({\n  name: 'Equals',\n  pattern: /=/,\n  label: \"'='\",\n});\nexport const StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"(:?[^\\\\\"\\n\\r]|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/,\n});\nexport const NumberLiteral = createToken({\n  name: 'NumberLiteral',\n  pattern: /-?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)?/,\n});\nexport const WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /\\s+/,\n  group: Lexer.SKIPPED,\n});\nexport const LineBreak = createToken({\n  name: 'LineBreak',\n  pattern: /\\n|\\r\\n/,\n  line_breaks: true,\n  label: 'LineBreak',\n});\n\nconst naTokens = [Comment, DocComment, LineComment, LineBreak, WhiteSpace];\n\nexport const multiModeTokens: IMultiModeLexerDefinition = {\n  modes: {\n    global: [...naTokens, Datasource, Generator, Model, View, Enum, Type],\n    block: [\n      ...naTokens,\n      Attribute,\n      BlockAttribute,\n      FieldAttribute,\n      Dot,\n      QuestionMark,\n      LCurly,\n      RCurly,\n      LSquare,\n      RSquare,\n      LRound,\n      RRound,\n      Comma,\n      Colon,\n      Equals,\n      True,\n      False,\n      Null,\n      StringLiteral,\n      NumberLiteral,\n      Identifier,\n    ],\n  },\n  defaultMode: 'global',\n};\n\nexport const PrismaLexer = new Lexer(multiModeTokens);\n","import type { CstNode, IToken } from 'chevrotain';\nimport * as schema from './getSchema';\n\nconst schemaObjects = ['model', 'view', 'type'] as const;\n\nexport function isOneOfSchemaObjects<T extends string>(\n  obj: schema.Object,\n  schemas: readonly T[]\n): obj is Extract<schema.Object, { type: T }> {\n  return obj != null && 'type' in obj && schemas.includes(obj.type as T);\n}\n\n/** Returns true if the value is an Object, such as a model or view or composite type. */\nexport function isSchemaObject(\n  obj: schema.Object\n): obj is Extract<schema.Object, { type: (typeof schemaObjects)[number] }> {\n  return isOneOfSchemaObjects(obj, schemaObjects);\n}\n\nconst fieldObjects = ['field', 'enumerator'] as const;\n/** Returns true if the value is a Field or Enumerator. */\nexport function isSchemaField(\n  field: schema.Field | schema.Enumerator\n): field is Extract<schema.Field, { type: (typeof fieldObjects)[number] }> {\n  return field != null && 'type' in field && fieldObjects.includes(field.type);\n}\n\n/** Returns true if the value of the CstNode is a Token. */\nexport function isToken(node: [IToken] | [CstNode]): node is [IToken] {\n  return 'image' in node[0];\n}\n\n/**\n * If parser.nodeLocationTracking is set, then read the location statistics\n * from the available tokens. If tracking is 'none' then just return the\n * existing data structure.\n * */\nexport function appendLocationData<T extends Record<string, unknown>>(\n  data: T,\n  ...tokens: IToken[]\n): T {\n  const location = tokens.reduce((memo, token) => {\n    if (!token) return memo;\n\n    const {\n      endColumn = -Infinity,\n      endLine = -Infinity,\n      endOffset = -Infinity,\n      startColumn = Infinity,\n      startLine = Infinity,\n      startOffset = Infinity,\n    } = memo;\n\n    if (token.startLine != null && token.startLine < startLine)\n      memo.startLine = token.startLine;\n    if (token.startColumn != null && token.startColumn < startColumn)\n      memo.startColumn = token.startColumn;\n    if (token.startOffset != null && token.startOffset < startOffset)\n      memo.startOffset = token.startOffset;\n\n    if (token.endLine != null && token.endLine > endLine)\n      memo.endLine = token.endLine;\n    if (token.endColumn != null && token.endColumn > endColumn)\n      memo.endColumn = token.endColumn;\n    if (token.endOffset != null && token.endOffset > endOffset)\n      memo.endOffset = token.endOffset;\n\n    return memo;\n  }, {} as IToken);\n\n  return Object.assign(data, { location });\n}\n","import type { IParserConfig } from 'chevrotain';\nimport {\n  lilconfigSync as configSync,\n  type LilconfigResult as ConfigResultRaw,\n} from 'lilconfig';\n\nexport type PrismaAstParserConfig = Pick<IParserConfig, 'nodeLocationTracking'>;\nexport interface PrismaAstConfig {\n  parser: PrismaAstParserConfig;\n}\n\ntype ConfigResult<T> = Omit<ConfigResultRaw, 'config'> & {\n  config: T;\n};\n\nconst defaultConfig: PrismaAstConfig = {\n  parser: { nodeLocationTracking: 'none' },\n};\n\nlet config: PrismaAstConfig;\nexport default function getConfig(): PrismaAstConfig {\n  if (config != null) return config;\n\n  const result: ConfigResult<PrismaAstConfig> | null =\n    configSync('prisma-ast').search();\n  return (config = Object.assign(defaultConfig, result?.config));\n}\n","import { CstParser } from 'chevrotain';\nimport getConfig, { PrismaAstParserConfig } from './getConfig';\nimport * as lexer from './lexer';\n\ntype ComponentType =\n  | 'datasource'\n  | 'generator'\n  | 'model'\n  | 'view'\n  | 'enum'\n  | 'type';\nexport class PrismaParser extends CstParser {\n  readonly config: PrismaAstParserConfig;\n\n  constructor(config: PrismaAstParserConfig) {\n    super(lexer.multiModeTokens, config);\n    this.performSelfAnalysis();\n    this.config = config;\n  }\n\n  private break = this.RULE('break', () => {\n    this.CONSUME1(lexer.LineBreak);\n    this.CONSUME2(lexer.LineBreak);\n  });\n\n  private keyedArg = this.RULE('keyedArg', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'keyName' });\n    this.CONSUME(lexer.Colon);\n    this.SUBRULE(this.value);\n  });\n\n  private array = this.RULE('array', () => {\n    this.CONSUME(lexer.LSquare);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.SUBRULE(this.value);\n      },\n    });\n    this.CONSUME(lexer.RSquare);\n  });\n\n  private func = this.RULE('func', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'funcName' });\n    this.CONSUME(lexer.LRound);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.keyedArg) },\n          { ALT: () => this.SUBRULE(this.value) },\n        ]);\n      },\n    });\n    this.CONSUME(lexer.RRound);\n  });\n\n  private value = this.RULE('value', () => {\n    this.OR([\n      { ALT: () => this.CONSUME(lexer.StringLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.NumberLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.array, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.func, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.True, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.False, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Null, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'value' }) },\n    ]);\n  });\n\n  private property = this.RULE('property', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'propertyName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'propertyValue' });\n  });\n\n  private assignment = this.RULE('assignment', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'assignmentName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'assignmentValue' });\n  });\n\n  private field = this.RULE('field', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'fieldName' });\n    this.SUBRULE(this.value, { LABEL: 'fieldType' });\n    this.OPTION1(() => {\n      this.OR([\n        {\n          ALT: () => {\n            this.CONSUME(lexer.LSquare, { LABEL: 'array' });\n            this.CONSUME(lexer.RSquare, { LABEL: 'array' });\n          },\n        },\n        { ALT: () => this.CONSUME(lexer.QuestionMark, { LABEL: 'optional' }) },\n      ]);\n    });\n    this.MANY(() => {\n      this.SUBRULE(this.fieldAttribute, { LABEL: 'attributeList' });\n    });\n    this.OPTION2(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n\n  private block = this.RULE(\n    'block',\n    (\n      options: {\n        componentType?: ComponentType;\n      } = {}\n    ) => {\n      const { componentType } = options;\n      const isEnum = componentType === 'enum';\n      const isObject =\n        componentType === 'model' ||\n        componentType === 'view' ||\n        componentType === 'type';\n\n      this.CONSUME(lexer.LCurly);\n      this.CONSUME1(lexer.LineBreak);\n      this.MANY(() => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n          {\n            GATE: () => isObject,\n            ALT: () => this.SUBRULE(this.property, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.blockAttribute, { LABEL: 'list' }) },\n          {\n            GATE: () => isObject,\n            ALT: () => this.SUBRULE(this.field, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => isEnum,\n            ALT: () => this.SUBRULE(this.enum, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => !isObject,\n            ALT: () => this.SUBRULE(this.assignment, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n          { ALT: () => this.CONSUME2(lexer.LineBreak) },\n        ]);\n      });\n      this.CONSUME(lexer.RCurly);\n    }\n  );\n\n  private enum = this.RULE('enum', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'enumName' });\n    this.MANY(() => {\n      this.SUBRULE(this.fieldAttribute, { LABEL: 'attributeList' });\n    });\n    this.OPTION(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n\n  private fieldAttribute = this.RULE('fieldAttribute', () => {\n    this.CONSUME(lexer.FieldAttribute, { LABEL: 'fieldAttribute' });\n    this.OR([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'attributeName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'attributeName' }),\n      },\n    ]);\n\n    this.OPTION(() => {\n      this.CONSUME(lexer.LRound);\n      this.MANY_SEP({\n        SEP: lexer.Comma,\n        DEF: () => {\n          this.SUBRULE(this.attributeArg);\n        },\n      });\n      this.CONSUME(lexer.RRound);\n    });\n  });\n\n  private blockAttribute = this.RULE('blockAttribute', () => {\n    this.CONSUME(lexer.BlockAttribute, { LABEL: 'blockAttribute' }),\n      this.OR([\n        {\n          ALT: () => {\n            this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n            this.CONSUME(lexer.Dot);\n            this.CONSUME2(lexer.Identifier, { LABEL: 'attributeName' });\n          },\n        },\n        {\n          ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'attributeName' }),\n        },\n      ]);\n\n    this.OPTION(() => {\n      this.CONSUME(lexer.LRound);\n      this.MANY_SEP({\n        SEP: lexer.Comma,\n        DEF: () => {\n          this.SUBRULE(this.attributeArg);\n        },\n      });\n      this.CONSUME(lexer.RRound);\n    });\n  });\n\n  private attributeArg = this.RULE('attributeArg', () => {\n    this.OR([\n      {\n        ALT: () => this.SUBRULE(this.keyedArg, { LABEL: 'value' }),\n      },\n      {\n        ALT: () => this.SUBRULE(this.value, { LABEL: 'value' }),\n      },\n    ]);\n  });\n\n  private component = this.RULE('component', () => {\n    const type = this.OR1([\n      { ALT: () => this.CONSUME(lexer.Datasource, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Generator, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Model, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.View, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Enum, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Type, { LABEL: 'type' }) },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'componentName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'componentName' }),\n      },\n    ]);\n\n    this.SUBRULE(this.block, {\n      ARGS: [{ componentType: type.image as ComponentType }],\n    });\n  });\n\n  private comment = this.RULE('comment', () => {\n    this.CONSUME(lexer.Comment, { LABEL: 'text' });\n  });\n\n  public schema = this.RULE('schema', () => {\n    this.MANY(() => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.component, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n        { ALT: () => this.CONSUME(lexer.LineBreak) },\n      ]);\n    });\n  });\n}\n\nexport const defaultParser = new PrismaParser(getConfig().parser);\n","import { CstNode, IToken } from '@chevrotain/types';\nimport * as Types from './getSchema';\n\nimport { appendLocationData, isToken } from './schemaUtils';\nimport { PrismaParser, defaultParser } from './parser';\nimport { ICstVisitor } from 'chevrotain';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype Class<T> = new (...args: any[]) => T;\nexport type PrismaVisitor = ICstVisitor<any, any>;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport const VisitorClassFactory = (\n  parser: PrismaParser\n): Class<PrismaVisitor> => {\n  const BasePrismaVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\n  return class PrismaVisitor extends BasePrismaVisitor {\n    constructor() {\n      super();\n      this.validateVisitor();\n    }\n\n    schema(ctx: CstNode & { list: CstNode[] }): Types.Schema {\n      const list = ctx.list?.map((item) => this.visit([item])) || [];\n      return { type: 'schema', list };\n    }\n\n    component(\n      ctx: CstNode & {\n        type: [IToken];\n        componentName: [IToken];\n        block: [CstNode];\n      }\n    ): Types.Block {\n      const [type] = ctx.type;\n      const [name] = ctx.componentName;\n      const list = this.visit(ctx.block);\n\n      const data = (() => {\n        switch (type.image) {\n          case 'datasource':\n            return {\n              type: 'datasource',\n              name: name.image,\n              assignments: list,\n            } as const satisfies Types.Datasource;\n          case 'generator':\n            return {\n              type: 'generator',\n              name: name.image,\n              assignments: list,\n            } as const satisfies Types.Generator;\n          case 'model':\n            return {\n              type: 'model',\n              name: name.image,\n              properties: list,\n            } as const satisfies Types.Model;\n          case 'view':\n            return {\n              type: 'view',\n              name: name.image,\n              properties: list,\n            } as const satisfies Types.View;\n          case 'enum':\n            return {\n              type: 'enum',\n              name: name.image,\n              enumerators: list,\n            } as const satisfies Types.Enum;\n          case 'type':\n            return {\n              type: 'type',\n              name: name.image,\n              properties: list,\n            } as const satisfies Types.Type;\n          default:\n            throw new Error(`Unexpected block type: ${type}`);\n        }\n      })();\n\n      return this.maybeAppendLocationData(data, type, name);\n    }\n\n    break(): Types.Break {\n      return { type: 'break' };\n    }\n\n    comment(ctx: CstNode & { text: [IToken] }): Types.Comment {\n      const [comment] = ctx.text;\n      const data = {\n        type: 'comment',\n        text: comment.image,\n      } as const satisfies Types.Comment;\n      return this.maybeAppendLocationData(data, comment);\n    }\n\n    block(ctx: CstNode & { list: CstNode[] }): BlockList {\n      return ctx.list?.map((item) => this.visit([item]));\n    }\n\n    assignment(\n      ctx: CstNode & { assignmentName: [IToken]; assignmentValue: [CstNode] }\n    ): Types.Assignment {\n      const value = this.visit(ctx.assignmentValue);\n      const [key] = ctx.assignmentName;\n      const data = {\n        type: 'assignment',\n        key: key.image,\n        value,\n      } as const satisfies Types.Assignment;\n      return this.maybeAppendLocationData(data, key);\n    }\n\n    field(\n      ctx: CstNode & {\n        fieldName: [IToken];\n        fieldType: [CstNode];\n        array: [IToken];\n        optional: [IToken];\n        attributeList: CstNode[];\n        comment: [IToken];\n      }\n    ): Types.Field {\n      const fieldType = this.visit(ctx.fieldType);\n      const [name] = ctx.fieldName;\n      const attributes = ctx.attributeList?.map((item) => this.visit([item]));\n      const comment = ctx.comment?.[0]?.image;\n      const data = {\n        type: 'field',\n        name: name.image,\n        fieldType,\n        array: ctx.array != null,\n        optional: ctx.optional != null,\n        attributes,\n        comment,\n      } as const satisfies Types.Field;\n\n      return this.maybeAppendLocationData(\n        data,\n        name,\n        ctx.optional?.[0],\n        ctx.array?.[0]\n      );\n    }\n\n    fieldAttribute(\n      ctx: CstNode & {\n        fieldAttribute: [IToken];\n        groupName: [IToken];\n        attributeName: [IToken];\n        attributeArg: CstNode[];\n      }\n    ): Types.Attr {\n      const [name] = ctx.attributeName;\n      const [group] = ctx.groupName || [{}];\n      const args = ctx.attributeArg?.map((attr) => this.visit(attr));\n      const data = {\n        type: 'attribute',\n        name: name.image,\n        kind: 'field',\n        group: group.image,\n        args,\n      } as const satisfies Types.Attr;\n      return this.maybeAppendLocationData(\n        data,\n        name,\n        ...ctx.fieldAttribute,\n        group\n      );\n    }\n\n    blockAttribute(\n      ctx: CstNode & {\n        blockAttribute: [IToken];\n        groupName: [IToken];\n        attributeName: [IToken];\n        attributeArg: CstNode[];\n      }\n    ): Types.Attr | null {\n      const [name] = ctx.attributeName;\n      const [group] = ctx.groupName || [{}];\n      const args = ctx.attributeArg?.map((attr) => this.visit(attr));\n      const data = {\n        type: 'attribute',\n        name: name.image,\n        kind: 'object',\n        group: group.image,\n        args,\n      } as const satisfies Types.Attr;\n\n      return this.maybeAppendLocationData(\n        data,\n        name,\n        ...ctx.blockAttribute,\n        group\n      );\n    }\n\n    attributeArg(ctx: CstNode & { value: [CstNode] }): Types.AttributeArgument {\n      const value = this.visit(ctx.value);\n      return { type: 'attributeArgument', value };\n    }\n\n    func(\n      ctx: CstNode & {\n        funcName: [IToken];\n        value: CstNode[];\n        keyedArg: CstNode[];\n      }\n    ): Types.Func {\n      const [name] = ctx.funcName;\n      const params = ctx.value?.map((item) => this.visit([item]));\n      const keyedParams = ctx.keyedArg?.map((item) => this.visit([item]));\n      const pars = (params || keyedParams) && [\n        ...(params ?? []),\n        ...(keyedParams ?? []),\n      ];\n      const data = {\n        type: 'function',\n        name: name.image,\n        params: pars,\n      } as const satisfies Types.Func;\n      return this.maybeAppendLocationData(data, name);\n    }\n\n    array(ctx: CstNode & { value: CstNode[] }): Types.RelationArray {\n      const args = ctx.value?.map((item) => this.visit([item]));\n      return { type: 'array', args };\n    }\n\n    keyedArg(\n      ctx: CstNode & { keyName: [IToken]; value: [CstNode] }\n    ): Types.KeyValue {\n      const [key] = ctx.keyName;\n      const value = this.visit(ctx.value);\n      const data = {\n        type: 'keyValue',\n        key: key.image,\n        value,\n      } as const satisfies Types.KeyValue;\n      return this.maybeAppendLocationData(data, key);\n    }\n\n    value(ctx: CstNode & { value: [IToken] | [CstNode] }): Types.Value {\n      if (isToken(ctx.value)) {\n        const [{ image }] = ctx.value;\n        return image;\n      }\n      return this.visit(ctx.value);\n    }\n\n    enum(\n      ctx: CstNode & {\n        enumName: [IToken];\n        attributeList: CstNode[];\n        comment: [IToken];\n      }\n    ): Types.Enumerator {\n      const [name] = ctx.enumName;\n      const attributes = ctx.attributeList?.map((item) => this.visit([item]));\n      const comment = ctx.comment?.[0]?.image;\n      const data = {\n        type: 'enumerator',\n        name: name.image,\n        attributes,\n        comment,\n      } as const satisfies Types.Enumerator;\n      return this.maybeAppendLocationData(data, name);\n    }\n\n    maybeAppendLocationData<T extends Record<string, unknown>>(\n      data: T,\n      ...tokens: IToken[]\n    ): T {\n      if (parser.config.nodeLocationTracking === 'none') return data;\n      return appendLocationData(data, ...tokens);\n    }\n  };\n};\n\ntype BlockList = Array<\n  | Types.Comment\n  | Types.Property\n  | Types.Attribute\n  | Types.Field\n  | Types.Enum\n  | Types.Assignment\n  | Types.Break\n>;\nexport const DefaultVisitorClass = VisitorClassFactory(defaultParser);\nexport const defaultVisitor = new DefaultVisitorClass();\n","import { PrismaLexer } from './lexer';\nimport { PrismaVisitor, defaultVisitor } from './visitor';\nimport type { CstNodeLocation } from 'chevrotain';\nimport { PrismaParser, defaultParser } from './parser';\n\n/**\n * Parses a string containing a prisma schema's source code and returns an\n * object that represents the parsed data structure. You can make direct\n * modifications to the objects and arrays nested within, and then produce\n * a new prisma schema using printSchema().\n *\n * @example\n * const schema = getSchema(source)\n * // ... make changes to schema object ...\n * const changedSource = printSchema(schema)\n * */\nexport function getSchema(\n  source: string,\n  options?: {\n    parser: PrismaParser;\n    visitor: PrismaVisitor;\n  }\n): Schema {\n  const lexingResult = PrismaLexer.tokenize(source);\n\n  const parser = options?.parser ?? defaultParser;\n  parser.input = lexingResult.tokens;\n  const cstNode = parser.schema();\n  if (parser.errors.length > 0) throw parser.errors[0];\n\n  const visitor = options?.visitor ?? defaultVisitor;\n  return visitor.visit(cstNode);\n}\n\nexport interface Schema {\n  type: 'schema';\n  list: Block[];\n}\n\nexport type Block =\n  | Model\n  | View\n  | Datasource\n  | Generator\n  | Enum\n  | Comment\n  | Break\n  | Type;\n\nexport interface Object {\n  type: 'model' | 'view' | 'type';\n  name: string;\n  properties: Array<Property | Comment | Break>;\n}\n\nexport interface Model extends Object {\n  type: 'model';\n  location?: CstNodeLocation;\n}\n\nexport interface View extends Object {\n  type: 'view';\n  location?: CstNodeLocation;\n}\n\nexport interface Type extends Object {\n  type: 'type';\n  location?: CstNodeLocation;\n}\n\nexport interface Datasource {\n  type: 'datasource';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n  location?: CstNodeLocation;\n}\n\nexport interface Generator {\n  type: 'generator';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n  location?: CstNodeLocation;\n}\n\nexport interface Enum {\n  type: 'enum';\n  name: string;\n  enumerators: Array<\n    Enumerator | Comment | Break | BlockAttribute | GroupedAttribute\n  >;\n  location?: CstNodeLocation;\n}\n\nexport interface Comment {\n  type: 'comment';\n  text: string;\n}\n\nexport interface Break {\n  type: 'break';\n}\n\nexport type Property = GroupedBlockAttribute | BlockAttribute | Field;\n\nexport interface Assignment {\n  type: 'assignment';\n  key: string;\n  value: Value;\n}\n\nexport interface Enumerator {\n  type: 'enumerator';\n  name: string;\n  value?: Value;\n  attributes?: Attribute[];\n  comment?: string;\n}\n\nexport interface BlockAttribute {\n  type: 'attribute';\n  kind: 'object' | 'view' | 'type';\n  group?: string;\n  name: string;\n  args: AttributeArgument[];\n  location?: CstNodeLocation;\n}\n\nexport type GroupedBlockAttribute = BlockAttribute & { group: string };\n\nexport interface Field {\n  type: 'field';\n  name: string;\n  fieldType: string | Func;\n  array?: boolean;\n  optional?: boolean;\n  attributes?: Attribute[];\n  comment?: string;\n  location?: CstNodeLocation;\n}\n\nexport type Attr =\n  | Attribute\n  | GroupedAttribute\n  | BlockAttribute\n  | GroupedBlockAttribute;\n\nexport interface Attribute {\n  type: 'attribute';\n  kind: 'field';\n  group?: string;\n  name: string;\n  args?: AttributeArgument[];\n  location?: CstNodeLocation;\n}\n\nexport type GroupedAttribute = Attribute & { group: string };\n\nexport interface AttributeArgument {\n  type: 'attributeArgument';\n  value: KeyValue | Value | Func;\n}\n\nexport interface KeyValue {\n  type: 'keyValue';\n  key: string;\n  value: Value;\n}\n\nexport interface Func {\n  type: 'function';\n  name: string;\n  params: Value[];\n}\n\nexport interface RelationArray {\n  type: 'array';\n  args: string[];\n}\n\nexport type Value =\n  | string\n  | number\n  | boolean\n  | Func\n  | RelationArray\n  | Array<Value>;\n","import { Block, Schema } from './getSchema';\n\nconst unsorted = ['break', 'comment'];\nconst defaultSortOrder = [\n  'generator',\n  'datasource',\n  'model',\n  'view',\n  'enum',\n  'break',\n  'comment',\n];\n\n/** Sorts the schema parts, in the given order, and alphabetically for parts of the same type. */\nexport const schemaSorter =\n  (\n    schema: Schema,\n    locales?: string | string[],\n    sortOrder: string[] = defaultSortOrder\n  ) =>\n  (a: Block, b: Block): number => {\n    // Preserve the position of comments and line breaks relative to their\n    // position in the file, since when a re-sort happens it wouldn't be\n    // clear whether a comment should affix to the object above or below it.\n    const aUnsorted = unsorted.indexOf(a.type) !== -1;\n    const bUnsorted = unsorted.indexOf(b.type) !== -1;\n\n    if (aUnsorted !== bUnsorted) {\n      return schema.list.indexOf(a) - schema.list.indexOf(b);\n    }\n\n    if (sortOrder !== defaultSortOrder)\n      sortOrder = sortOrder.concat(defaultSortOrder);\n    const typeIndex = sortOrder.indexOf(a.type) - sortOrder.indexOf(b.type);\n    if (typeIndex !== 0) return typeIndex;\n\n    // Resolve ties using the name of object's name.\n    if ('name' in a && 'name' in b)\n      return a.name.localeCompare(b.name, locales);\n\n    // If all else fails, leave objects in their original position.\n    return 0;\n  };\n","import * as Types from './getSchema';\nimport { EOL } from 'os';\nimport { schemaSorter } from './schemaSorter';\n\ntype Block = 'generator' | 'datasource' | 'model' | 'view' | 'enum' | 'type';\n\nexport interface PrintOptions {\n  sort?: boolean;\n  locales?: string | string[];\n  sortOrder?: Block[];\n}\n\n/**\n * Converts the given schema object into a string representing the prisma\n * schema's source code. Optionally can take options to change the sort order\n * of the schema parts.\n * */\nexport function printSchema(\n  schema: Types.Schema,\n  options: PrintOptions = {}\n): string {\n  const { sort = false, locales = undefined, sortOrder = undefined } = options;\n  let blocks = schema.list;\n  if (sort) {\n    // no point in preserving line breaks when re-sorting\n    blocks = schema.list = blocks.filter((block) => block.type !== 'break');\n    const sorter = schemaSorter(schema, locales, sortOrder);\n    blocks.sort(sorter);\n  }\n\n  return (\n    blocks\n      .map(printBlock)\n      .filter(Boolean)\n      .join(EOL)\n      .replace(/(\\r?\\n\\s*){3,}/g, EOL + EOL) + EOL\n  );\n}\n\nfunction printBlock(block: Types.Block): string {\n  switch (block.type) {\n    case 'comment':\n      return printComment(block);\n    case 'datasource':\n      return printDatasource(block);\n    case 'enum':\n      return printEnum(block);\n    case 'generator':\n      return printGenerator(block);\n    case 'model':\n    case 'view':\n    case 'type':\n      return printObject(block);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized block type`);\n  }\n}\n\nfunction printComment(comment: Types.Comment) {\n  return comment.text;\n}\n\nfunction printBreak() {\n  return EOL;\n}\n\nfunction printDatasource(db: Types.Datasource) {\n  const children = computeAssignmentFormatting(db.assignments);\n\n  return `\ndatasource ${db.name} {\n  ${children}\n}`;\n}\n\nfunction printEnum(enumerator: Types.Enum) {\n  const list: Array<\n    | Types.Comment\n    | Types.Break\n    | Types.Enumerator\n    | Types.BlockAttribute\n    | Types.GroupedBlockAttribute\n    | Types.GroupedAttribute\n  > = enumerator.enumerators;\n  const children = list\n    .filter(Boolean)\n    .map(printEnumerator)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n\n  return `\nenum ${enumerator.name} {\n  ${children}\n}`;\n}\n\nfunction printEnumerator(\n  enumerator:\n    | Types.Enumerator\n    | Types.Attribute\n    | Types.Comment\n    | Types.Break\n    | Types.BlockAttribute\n    | Types.GroupedBlockAttribute\n    | Types.GroupedAttribute\n) {\n  switch (enumerator.type) {\n    case 'enumerator': {\n      const attrs = enumerator.attributes\n        ? enumerator.attributes.map(printAttribute)\n        : [];\n      return [enumerator.name, ...attrs, enumerator.comment]\n        .filter(Boolean)\n        .join(' ');\n    }\n    case 'attribute':\n      return printAttribute(enumerator);\n    case 'comment':\n      return printComment(enumerator);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unexpected enumerator type`);\n  }\n}\n\nfunction printGenerator(generator: Types.Generator) {\n  const children = computeAssignmentFormatting(generator.assignments);\n\n  return `\ngenerator ${generator.name} {\n  ${children}\n}`;\n}\n\nfunction printObject(object: Types.Object) {\n  const props = [...object.properties];\n\n  // If block attributes are declared in the middle of the block, move them to\n  // the bottom of the list.\n  let blockAttributeMoved = false;\n  props.sort((a, b) => {\n    if (\n      a.type === 'attribute' &&\n      a.kind === 'object' &&\n      (b.type !== 'attribute' ||\n        (b.type === 'attribute' && b.kind !== 'object'))\n    ) {\n      blockAttributeMoved = true;\n      return 1;\n    }\n\n    if (\n      b.type === 'attribute' &&\n      b.kind === 'object' &&\n      (a.type !== 'attribute' ||\n        (a.type === 'attribute' && a.kind !== 'object'))\n    ) {\n      blockAttributeMoved = true;\n      return -1;\n    }\n\n    return 0;\n  });\n\n  // Insert a break between the block attributes and the file if the block\n  // attributes are too close to the model's fields\n  const attrIndex = props.findIndex(\n    (item) => item.type === 'attribute' && item.kind === 'object'\n  );\n\n  const needsSpace = !['break', 'comment'].includes(props[attrIndex - 1]?.type);\n  if (blockAttributeMoved && needsSpace) {\n    props.splice(attrIndex, 0, { type: 'break' });\n  }\n\n  const children = computePropertyFormatting(props);\n\n  return `\n${object.type} ${object.name} {\n  ${children}\n}`;\n}\n\nfunction printAssignment(\n  node: Types.Assignment | Types.Comment | Types.Break,\n  keyLength = 0\n) {\n  switch (node.type) {\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    case 'assignment':\n      return `${node.key.padEnd(keyLength)} = ${printValue(node.value)}`;\n    default:\n      throw new Error(`Unexpected assignment type`);\n  }\n}\n\nfunction printProperty(\n  node: Types.Property | Types.Comment | Types.Break,\n  nameLength = 0,\n  typeLength = 0\n) {\n  switch (node.type) {\n    case 'attribute':\n      return printAttribute(node);\n    case 'field':\n      return printField(node, nameLength, typeLength);\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized property type`);\n  }\n}\n\nfunction printAttribute(attribute: Types.Attribute | Types.BlockAttribute) {\n  const args =\n    attribute.args && attribute.args.length > 0\n      ? `(${attribute.args.map(printAttributeArg).filter(Boolean).join(', ')})`\n      : '';\n\n  const name = [attribute.name];\n  if (attribute.group) name.unshift(attribute.group);\n\n  return `${attribute.kind === 'field' ? '@' : '@@'}${name.join('.')}${args}`;\n}\n\nfunction printAttributeArg(arg: Types.AttributeArgument) {\n  return printValue(arg.value);\n}\n\nfunction printField(field: Types.Field, nameLength = 0, typeLength = 0) {\n  const name = field.name.padEnd(nameLength);\n  const fieldType = printFieldType(field).padEnd(typeLength);\n  const attrs = field.attributes ? field.attributes.map(printAttribute) : [];\n  const comment = field.comment;\n  return (\n    [name, fieldType, ...attrs]\n      .filter(Boolean)\n      .join(' ')\n      // comments ignore indents\n      .trim() + (comment ? ` ${comment}` : '')\n  );\n}\n\nfunction printFieldType(field: Types.Field) {\n  const suffix = field.array ? '[]' : field.optional ? '?' : '';\n\n  if (typeof field.fieldType === 'object') {\n    switch (field.fieldType.type) {\n      case 'function': {\n        return `${printFunction(field.fieldType)}${suffix}`;\n      }\n      default:\n        throw new Error(`Unexpected field type`);\n    }\n  }\n\n  return `${field.fieldType}${suffix}`;\n}\n\nfunction printFunction(func: Types.Func) {\n  const params = func.params ? func.params.map(printValue) : '';\n  return `${func.name}(${params})`;\n}\n\nfunction printValue(value: Types.KeyValue | Types.Value): string {\n  switch (typeof value) {\n    case 'object': {\n      if ('type' in value) {\n        switch (value.type) {\n          case 'keyValue':\n            return `${value.key}: ${printValue(value.value)}`;\n          case 'function':\n            return printFunction(value);\n          case 'array':\n            return `[${\n              value.args != null ? value.args.map(printValue).join(', ') : ''\n            }]`;\n          default:\n            throw new Error(`Unexpected value type`);\n        }\n      }\n\n      throw new Error(`Unexpected object value`);\n    }\n    default:\n      return String(value);\n  }\n}\n\nfunction computeAssignmentFormatting(\n  list: Array<Types.Comment | Types.Break | Types.Assignment>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const keyLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'assignment' ? current.key.length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((item, index, arr) => {\n      if (index > 0 && item.type !== 'break' && arr[index - 1].type === 'break')\n        keyLengths.shift();\n      return printAssignment(item, keyLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n\nfunction computePropertyFormatting(\n  list: Array<Types.Break | Types.Comment | Types.Property>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const nameLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? current.name.length : 0\n        ),\n      0\n    )\n  );\n\n  const typeLengths = listBlocks.map((lists) =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? printFieldType(current).length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((prop, index, arr) => {\n      if (\n        index > 0 &&\n        prop.type !== 'break' &&\n        arr[index - 1].type === 'break'\n      ) {\n        nameLengths.shift();\n        typeLengths.shift();\n      }\n\n      return printProperty(prop, nameLengths[0], typeLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n","import type * as schema from './getSchema';\n\nexport type ByTypeSourceObject =\n  | schema.Block\n  | schema.Enumerator\n  | schema.Field\n  | schema.Property\n  | schema.Attribute\n  | schema.Assignment;\n\nexport type ByTypeMatchObject = Exclude<\n  ByTypeSourceObject,\n  schema.Comment | schema.Break\n>;\nexport type ByTypeMatch = ByTypeMatchObject['type'];\nexport type ByTypeOptions = { name?: string | RegExp };\nexport type FindByBlock<Match> = Extract<ByTypeMatchObject, { type: Match }>;\n\nexport const findByType = <const Match extends ByTypeMatch>(\n  list: ByTypeSourceObject[],\n  typeToMatch: Match,\n  options: ByTypeOptions = {}\n): FindByBlock<Match> | null => {\n  const [match, unexpected] = list.filter(findBy(typeToMatch, options));\n\n  if (!match) return null;\n\n  if (unexpected)\n    throw new Error(`Found multiple blocks with [type=${typeToMatch}]`);\n\n  return match;\n};\n\nexport const findAllByType = <const Match extends ByTypeMatch>(\n  list: ByTypeSourceObject[],\n  typeToMatch: Match,\n  options: ByTypeOptions = {}\n): Array<FindByBlock<Match>> => {\n  return list.filter(findBy(typeToMatch, options));\n};\n\ntype NameOf<Match extends ByTypeMatch> = Extract<\n  Match,\n  Match extends 'assignment' ? 'key' : 'name'\n>;\n\nconst findBy =\n  <Match extends ByTypeMatch, MatchName extends NameOf<Match>>(\n    typeToMatch: Match,\n    { name }: ByTypeOptions = {}\n  ) =>\n  (block: ByTypeSourceObject): block is FindByBlock<Match> => {\n    if (name != null) {\n      const nameAttribute = (\n        typeToMatch === 'assignment' ? 'key' : 'name'\n      ) as MatchName;\n      if (!(nameAttribute in block)) return false;\n      const nameMatches =\n        typeof name === 'string'\n          ? block[nameAttribute] === name\n          : name.test(block[nameAttribute]);\n      if (!nameMatches) return false;\n    }\n\n    return block.type === typeToMatch;\n  };\n","import * as schema from './getSchema';\nimport {\n  isOneOfSchemaObjects,\n  isSchemaField,\n  isSchemaObject,\n} from './schemaUtils';\nimport { PrintOptions, printSchema } from './printSchema';\nimport * as finder from './finder';\n\n/** Returns the function type Original with its return type changed to NewReturn. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ReplaceReturnType<Original extends (...args: any) => any, NewReturn> = (\n  ...a: Parameters<Original>\n) => NewReturn;\n\n/**\n * Methods with return values that do not propagate the builder should not have\n * their return value modified by the type replacement system below\n * */\ntype ExtractKeys = 'getSchema' | 'getSubject' | 'getParent' | 'print';\n\n/** These keys preserve the return value context that they were given */\ntype NeutralKeys =\n  | 'break'\n  | 'comment'\n  | 'attribute'\n  | 'enumerator'\n  | 'then'\n  | 'findByType'\n  | 'findAllByType';\n\n/** Keys allowed when you call .datasource() or .generator() */\ntype DatasourceOrGeneratorKeys = 'assignment';\n\n/** Keys allowed when you call .enum(\"name\") */\ntype EnumKeys = 'enumerator';\n\n/** Keys allowed when you call .field(\"name\") */\ntype FieldKeys = 'attribute' | 'removeAttribute';\n\n/** Keys allowed when you call .model(\"name\") */\ntype BlockKeys = 'blockAttribute' | 'field' | 'removeField';\n\ntype PrismaSchemaFinderOptions = finder.ByTypeOptions & {\n  within?: finder.ByTypeSourceObject[];\n};\n\n/**\n * Utility type for making the PrismaSchemaBuilder below readable:\n * Removes methods from the builder that are prohibited based on the context\n * the builder is in. For example, you can add fields to a model, but you can't\n * add fields to an enum or a datasource.\n */\ntype PrismaSchemaSubset<\n  Universe extends keyof ConcretePrismaSchemaBuilder,\n  Method\n> = ReplaceReturnType<\n  ConcretePrismaSchemaBuilder[Universe],\n  PrismaSchemaBuilder<Exclude<keyof ConcretePrismaSchemaBuilder, Method>>\n>;\n\n/**\n * The brain of this whole operation: depending on the key of the method name\n * we receive, filter the available list of method calls the user can make to\n * prevent them from making invalid calls, such as builder.datasource().field()\n * */\ntype PrismaSchemaBuilder<K extends keyof ConcretePrismaSchemaBuilder> = {\n  [U in K]: U extends ExtractKeys\n    ? ConcretePrismaSchemaBuilder[U]\n    : U extends NeutralKeys\n    ? ConcretePrismaSchemaBuilder[U] //ReplaceReturnType<ConcretePrismaSchemaBuilder[U], PrismaSchemaBuilder<K>>\n    : U extends 'datasource'\n    ? PrismaSchemaSubset<U, 'datasource' | EnumKeys | FieldKeys | BlockKeys>\n    : U extends 'generator'\n    ? PrismaSchemaSubset<U, EnumKeys | FieldKeys | BlockKeys>\n    : U extends 'model'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'view'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'type'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'field'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys>\n    : U extends 'removeField'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'enum'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | BlockKeys | FieldKeys>\n    : U extends 'removeAttribute'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys>\n    : PrismaSchemaSubset<\n        U,\n        DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | BlockKeys | 'comment'\n      >;\n};\n\ntype Arg =\n  | string\n  | {\n      name: string;\n      function?: Arg[];\n    };\ntype Parent = schema.Block | undefined;\ntype Subject = schema.Block | schema.Field | schema.Enumerator | undefined;\n\nexport class ConcretePrismaSchemaBuilder {\n  private schema: schema.Schema;\n  private _subject: Subject;\n  private _parent: Parent;\n\n  constructor(source = '') {\n    this.schema = schema.getSchema(source);\n  }\n\n  /** Prints the schema out as a source string */\n  print(options: PrintOptions = {}): string {\n    return printSchema(this.schema, options);\n  }\n\n  /** Returns the underlying schema object for more advanced use cases. */\n  getSchema(): schema.Schema {\n    return this.schema;\n  }\n\n  /** Mutation Methods */\n\n  /** Adds or updates a generator block based on the name. */\n  generator(name: string, provider = 'prisma-client-js'): this {\n    const generator: schema.Generator =\n      this.schema.list.reduce<schema.Generator>(\n        (memo, block) =>\n          block.type === 'generator' && block.name === name ? block : memo,\n        {\n          type: 'generator',\n          name,\n          assignments: [\n            { type: 'assignment', key: 'provider', value: `\"${provider}\"` },\n          ],\n        }\n      );\n\n    if (!this.schema.list.includes(generator)) this.schema.list.push(generator);\n    this._subject = generator;\n    return this;\n  }\n\n  /** Removes something from the schema with the given name. */\n  drop(name: string): this {\n    const index = this.schema.list.findIndex(\n      (block) => 'name' in block && block.name === name\n    );\n    if (index !== -1) this.schema.list.splice(index, 1);\n    return this;\n  }\n\n  /** Sets the datasource for the schema. */\n  datasource(provider: string, url: string | { env: string }): this {\n    const datasource: schema.Datasource = {\n      type: 'datasource',\n      name: 'db',\n      assignments: [\n        {\n          type: 'assignment',\n          key: 'url',\n          value:\n            typeof url === 'string'\n              ? `\"${url}\"`\n              : { type: 'function', name: 'env', params: [`\"${url.env}\"`] },\n        },\n        { type: 'assignment', key: 'provider', value: provider },\n      ],\n    };\n    const existingIndex = this.schema.list.findIndex(\n      (block) => block.type === 'datasource'\n    );\n    this.schema.list.splice(\n      existingIndex,\n      existingIndex !== -1 ? 1 : 0,\n      datasource\n    );\n    this._subject = datasource;\n    return this;\n  }\n\n  /** Adds or updates a model based on the name. Can be chained with .field() or .blockAttribute() to add to it. */\n  model(name: string): this {\n    const model = this.schema.list.reduce<schema.Model>(\n      (memo, block) =>\n        block.type === 'model' && block.name === name ? block : memo,\n      { type: 'model', name, properties: [] }\n    );\n    if (!this.schema.list.includes(model)) this.schema.list.push(model);\n    this._subject = model;\n    return this;\n  }\n\n  /** Adds or updates a view based on the name. Can be chained with .field() or .blockAttribute() to add to it. */\n  view(name: string): this {\n    const view = this.schema.list.reduce<schema.View>(\n      (memo, block) =>\n        block.type === 'view' && block.name === name ? block : memo,\n      { type: 'view', name, properties: [] }\n    );\n    if (!this.schema.list.includes(view)) this.schema.list.push(view);\n    this._subject = view;\n    return this;\n  }\n\n  /** Adds or updates a type based on the name. Can be chained with .field() or .blockAttribute() to add to it. */\n  type(name: string): this {\n    const type = this.schema.list.reduce<schema.Type>(\n      (memo, block) =>\n        block.type === 'type' && block.name === name ? block : memo,\n      { type: 'type', name, properties: [] }\n    );\n    if (!this.schema.list.includes(type)) this.schema.list.push(type);\n    this._subject = type;\n    return this;\n  }\n\n  /** Adds or updates an enum based on the name. Can be chained with .enumerator() to add a value to it. */\n  enum(name: string, enumeratorNames: string[] = []): this {\n    const e = this.schema.list.reduce<schema.Enum>(\n      (memo, block) =>\n        block.type === 'enum' && block.name === name ? block : memo,\n      {\n        type: 'enum',\n        name,\n        enumerators: enumeratorNames.map((name) => ({\n          type: 'enumerator',\n          name,\n        })),\n      } satisfies schema.Enum\n    );\n    if (!this.schema.list.includes(e)) this.schema.list.push(e);\n    this._subject = e;\n    return this;\n  }\n\n  /** Add an enum value to the current enum. */\n  enumerator(value: string): this {\n    const subject = this.getSubject<schema.Enum>();\n    if (!subject || !('type' in subject) || subject.type !== 'enum') {\n      throw new Error('Subject must be a prisma enum!');\n    }\n\n    const enumerator = {\n      type: 'enumerator',\n      name: value,\n    } satisfies schema.Enumerator;\n    subject.enumerators.push(enumerator);\n    this._parent = this._subject as Exclude<\n      Subject,\n      { type: 'field' | 'enumerator' }\n    >;\n    this._subject = enumerator;\n    return this;\n  }\n\n  /**\n   * Returns the current subject, such as a model, field, or enum.\n   * @example\n   * builder.getModel('User').field('firstName').getSubject() // the firstName field\n   * */\n  private getSubject<S extends Subject>(): S {\n    return this._subject as S;\n  }\n\n  /** Returns the parent of the current subject when in a nested context. The parent of a field is its model or view. */\n  private getParent<S extends Parent = schema.Object>(): S {\n    return this._parent as S;\n  }\n\n  /**\n   * Adds a block-level attribute to the current model.\n   * @example\n   * builder.model('Project')\n   *   .blockAttribute(\"map\", \"projects\")\n   *   .blockAttribute(\"unique\", [\"firstName\", \"lastName\"]) // @@unique([firstName, lastName])\n   * */\n  blockAttribute(\n    name: string,\n    args?: string | string[] | Record<string, schema.Value>\n  ): this {\n    let subject = this.getSubject<schema.Object | schema.Enum>();\n    if (subject.type !== 'enum' && !isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isOneOfSchemaObjects(parent, ['model', 'view', 'type', 'enum']))\n        throw new Error('Subject must be a prisma model, view, or type!');\n\n      subject = this._subject = parent;\n    }\n\n    const attributeArgs = ((): schema.AttributeArgument[] => {\n      if (!args) return [] as schema.AttributeArgument[];\n      if (typeof args === 'string')\n        return [{ type: 'attributeArgument', value: `\"${args}\"` }];\n      if (Array.isArray(args))\n        return [{ type: 'attributeArgument', value: { type: 'array', args } }];\n      return Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value },\n      }));\n    })();\n\n    const property: schema.BlockAttribute = {\n      type: 'attribute',\n      kind: 'object',\n      name,\n      args: attributeArgs,\n    };\n\n    if (subject.type === 'enum') {\n      subject.enumerators.push(property);\n    } else {\n      subject.properties.push(property);\n    }\n    return this;\n  }\n\n  /** Adds an attribute to the current field. */\n  attribute<T extends schema.Field>(\n    name: string,\n    args?: Arg[] | Record<string, string[]>\n  ): this {\n    const parent = this.getParent();\n    const subject = this.getSubject<T>();\n    if (!isOneOfSchemaObjects(parent, ['model', 'view', 'type', 'enum'])) {\n      throw new Error('Parent must be a prisma model or view!');\n    }\n\n    if (!isSchemaField(subject)) {\n      throw new Error('Subject must be a prisma field or enumerator!');\n    }\n\n    if (!subject.attributes) subject.attributes = [];\n    const attribute = subject.attributes.reduce<schema.Attribute>(\n      (memo, attr) =>\n        attr.type === 'attribute' &&\n        `${attr.group ? `${attr.group}.` : ''}${attr.name}` === name\n          ? attr\n          : memo,\n      {\n        type: 'attribute',\n        kind: 'field',\n        name,\n      }\n    );\n\n    if (Array.isArray(args)) {\n      const mapArg = (arg: Arg): schema.Value | schema.Func => {\n        return typeof arg === 'string'\n          ? arg\n          : {\n              type: 'function',\n              name: arg.name,\n              params: arg.function?.map(mapArg) ?? [],\n            };\n      };\n\n      if (args.length > 0)\n        attribute.args = args.map((arg) => ({\n          type: 'attributeArgument',\n          value: mapArg(arg),\n        }));\n    } else if (typeof args === 'object') {\n      attribute.args = Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value: { type: 'array', args: value } },\n      }));\n    }\n\n    if (!subject.attributes.includes(attribute))\n      subject.attributes.push(attribute);\n\n    return this;\n  }\n\n  /** Remove an attribute from the current field */\n  removeAttribute<T extends schema.Field>(name: string): this {\n    const parent = this.getParent();\n    const subject = this.getSubject<T>();\n    if (!isSchemaObject(parent)) {\n      throw new Error('Parent must be a prisma model or view!');\n    }\n\n    if (!isSchemaField(subject)) {\n      throw new Error('Subject must be a prisma field!');\n    }\n\n    if (!subject.attributes) subject.attributes = [];\n    subject.attributes = subject.attributes.filter(\n      (attr) => !(attr.type === 'attribute' && attr.name === name)\n    );\n\n    return this;\n  }\n\n  /** Add an assignment to a generator or datasource */\n  assignment<T extends schema.Generator | schema.Datasource>(\n    key: string,\n    value: string\n  ): this {\n    const subject = this.getSubject<T>();\n    if (\n      !subject ||\n      !('type' in subject) ||\n      !['generator', 'datasource'].includes(subject.type)\n    )\n      throw new Error('Subject must be a prisma generator or datasource!');\n\n    function tap<T>(subject: T, callback: (s: T) => void) {\n      callback(subject);\n      return subject;\n    }\n\n    const assignment = subject.assignments.reduce<schema.Assignment>(\n      (memo, assignment) =>\n        assignment.type === 'assignment' && assignment.key === key\n          ? tap(assignment, (a) => {\n              a.value = `\"${value}\"`;\n            })\n          : memo,\n      {\n        type: 'assignment',\n        key,\n        value: `\"${value}\"`,\n      }\n    );\n\n    if (!subject.assignments.includes(assignment))\n      subject.assignments.push(assignment);\n\n    return this;\n  }\n\n  /** Finder Methods */\n\n  /**\n   * Queries the block list for the given block type. Returns `null` if none\n   * match. Throws an error if more than one match is found.\n   * */\n  findByType<const Match extends finder.ByTypeMatch>(\n    typeToMatch: Match,\n    { within = this.schema.list, ...options }: PrismaSchemaFinderOptions\n  ): finder.FindByBlock<Match> | null {\n    return finder.findByType(within, typeToMatch, options);\n  }\n\n  /**\n   * Queries the block list for the given block type. Returns an array of all\n   * matching objects, and an empty array (`[]`) if none match.\n   * */\n  findAllByType<const Match extends finder.ByTypeMatch>(\n    typeToMatch: Match,\n    { within = this.schema.list, ...options }: PrismaSchemaFinderOptions\n  ): Array<finder.FindByBlock<Match> | null> {\n    return finder.findAllByType(within, typeToMatch, options);\n  }\n\n  /** Internal Utilities */\n\n  private blockInsert(statement: schema.Break | schema.Comment): this {\n    let subject = this.getSubject<schema.Block>();\n    const allowed = [\n      'datasource',\n      'enum',\n      'generator',\n      'model',\n      'view',\n      'type',\n    ];\n    if (!subject || !('type' in subject) || !allowed.includes(subject.type)) {\n      const parent = this.getParent<schema.Block>();\n      if (!parent || !('type' in parent) || !allowed.includes(parent.type)) {\n        throw new Error('Subject must be a prisma block!');\n      }\n\n      subject = this._subject = parent;\n    }\n\n    switch (subject.type) {\n      case 'datasource': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'enum': {\n        subject.enumerators.push(statement);\n        break;\n      }\n      case 'generator': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'model': {\n        subject.properties.push(statement);\n        break;\n      }\n    }\n    return this;\n  }\n\n  /** Add a line break */\n  break(): this {\n    const lineBreak: schema.Break = { type: 'break' };\n    return this.blockInsert(lineBreak);\n  }\n\n  /**\n   * Add a comment. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  comment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    return this.blockInsert(comment);\n  }\n\n  /**\n   * Add a comment to the schema. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  schemaComment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    this.schema.list.push(comment);\n    return this;\n  }\n\n  /**\n   * Adds or updates a field in the current model. The field can be customized\n   * further with one or more .attribute() calls.\n   * */\n  field(name: string, fieldType: string | schema.Func = 'String'): this {\n    let subject = this.getSubject<schema.Object>();\n    if (!isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isSchemaObject(parent))\n        throw new Error(\n          'Subject must be a prisma model or view or composite type!'\n        );\n\n      subject = this._subject = parent;\n    }\n\n    const field = subject.properties.reduce<schema.Field>(\n      (memo, block) =>\n        block.type === 'field' && block.name === name ? block : memo,\n      {\n        type: 'field',\n        name,\n        fieldType,\n      }\n    );\n\n    if (!subject.properties.includes(field)) subject.properties.push(field);\n    this._parent = subject;\n    this._subject = field;\n    return this;\n  }\n\n  /** Drop a field from the current model or view or composite type. */\n  removeField(name: string): this {\n    let subject = this.getSubject<schema.Object>();\n    if (!isSchemaObject(subject)) {\n      const parent = this.getParent<schema.Object>();\n      if (!isSchemaObject(parent))\n        throw new Error(\n          'Subject must be a prisma model or view or composite type!'\n        );\n\n      subject = this._subject = parent;\n    }\n\n    subject.properties = subject.properties.filter(\n      (field) => !(field.type === 'field' && field.name === name)\n    );\n    return this;\n  }\n\n  /**\n   * Returns the current subject, allowing for more advanced ways of\n   * manipulating the schema.\n   * */\n  then<R extends NonNullable<Subject>>(\n    callback: (subject: R) => unknown\n  ): this {\n    callback(this._subject as R);\n    return this;\n  }\n}\n\nexport function createPrismaSchemaBuilder(\n  source?: string\n): PrismaSchemaBuilder<\n  Exclude<\n    keyof ConcretePrismaSchemaBuilder,\n    DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | BlockKeys\n  >\n> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new ConcretePrismaSchemaBuilder(source) as any;\n}\n","import { PrintOptions } from './printSchema';\nimport { createPrismaSchemaBuilder } from './PrismaSchemaBuilder';\n\ntype Options = PrintOptions;\n\n/**\n * Receives a prisma schema in the form of a string containing source code, and\n * a callback builder function. Use the builder to modify your schema as\n * desired. Returns the schema as a string with the modifications applied.\n * */\nexport function produceSchema(\n  source: string,\n  producer: (builder: ReturnType<typeof createPrismaSchemaBuilder>) => void,\n  options: Options = {}\n): string {\n  const builder = createPrismaSchemaBuilder(source);\n  producer(builder);\n  return builder.print(options);\n}\n"],"names":["Identifier","createToken","name","pattern","Datasource","push_mode","Generator","Model","View","Enum","Type","True","longer_alt","False","Null","Comment","Lexer","NA","DocComment","categories","LineComment","Attribute","BlockAttribute","label","FieldAttribute","Dot","QuestionMark","LCurly","RCurly","pop_mode","LRound","RRound","LSquare","RSquare","Comma","Colon","Equals","StringLiteral","NumberLiteral","WhiteSpace","group","SKIPPED","LineBreak","line_breaks","naTokens","multiModeTokens","modes","global","concat","block","defaultMode","PrismaLexer","schemaObjects","isOneOfSchemaObjects","obj","schemas","includes","type","isSchemaObject","fieldObjects","isSchemaField","field","isToken","node","appendLocationData","data","_len","arguments","length","tokens","Array","_key","location","reduce","memo","token","_memo$endColumn","endColumn","Infinity","_memo$endLine","endLine","_memo$endOffset","endOffset","_memo$startColumn","startColumn","_memo$startLine","startLine","_memo$startOffset","startOffset","Object","assign","defaultConfig","parser","nodeLocationTracking","config","getConfig","result","configSync","search","PrismaParser","_CstParser","_inheritsLoose","_this","call","lexer","RULE","CONSUME1","CONSUME2","keyedArg","CONSUME","LABEL","SUBRULE","value","array","MANY_SEP","SEP","DEF","func","OR","ALT","property","assignment","OPTION1","MANY","fieldAttribute","OPTION2","options","_options","componentType","isEnum","isObject","comment","GATE","blockAttribute","OPTION","attributeArg","component","OR1","OR2","ARGS","image","schema","performSelfAnalysis","CstParser","defaultParser","VisitorClassFactory","BasePrismaVisitor","getBaseCstVisitorConstructorWithDefaults","_BasePrismaVisitor","PrismaVisitor","validateVisitor","_proto","prototype","ctx","_ctx$list","_this2","list","map","item","visit","_ctx$type","_ctx$componentName","componentName","assignments","properties","enumerators","Error","maybeAppendLocationData","_break","_ctx$text","text","_ctx$list2","_this3","assignmentValue","_ctx$assignmentName","assignmentName","key","_ctx$attributeList","_this4","_ctx$comment","_ctx$optional","_ctx$array","fieldType","_ctx$fieldName","fieldName","attributes","attributeList","optional","_ctx$attributeArg","_this5","_ctx$attributeName","attributeName","_ref","groupName","args","attr","kind","apply","_ctx$attributeArg2","_this6","_ctx$attributeName2","_ref2","_ctx$value","_this7","_ctx$keyedArg","_ctx$funcName","funcName","params","keyedParams","pars","_ctx$value2","_this8","_ctx$keyName","keyName","_ctx$value3","_enum","_ctx$attributeList2","_this9","_ctx$comment2","_ctx$enumName","enumName","DefaultVisitorClass","defaultVisitor","getSchema","source","_options$parser","_options$visitor","lexingResult","tokenize","input","cstNode","errors","visitor","unsorted","defaultSortOrder","schemaSorter","locales","sortOrder","a","b","aUnsorted","indexOf","bUnsorted","typeIndex","localeCompare","printSchema","_options$sort","sort","_options$locales","undefined","_options$sortOrder","blocks","filter","sorter","printBlock","Boolean","join","EOL","replace","printComment","printDatasource","printEnum","printGenerator","printObject","printBreak","db","children","computeAssignmentFormatting","enumerator","printEnumerator","attrs","printAttribute","generator","object","_props","props","blockAttributeMoved","attrIndex","findIndex","needsSpace","splice","computePropertyFormatting","printAssignment","keyLength","padEnd","printValue","printProperty","nameLength","typeLength","printField","attribute","printAttributeArg","unshift","arg","printFieldType","trim","suffix","printFunction","String","pos","listBlocks","current","index","arr","push","keyLengths","lists","max","Math","shift","nameLengths","typeLengths","prop","findByType","typeToMatch","_list$filter","findBy","match","unexpected","findAllByType","_temp","nameAttribute","nameMatches","test","ConcretePrismaSchemaBuilder","_subject","_parent","print","provider","drop","datasource","url","env","existingIndex","model","view","enumeratorNames","e","subject","getSubject","getParent","parent","attributeArgs","isArray","entries","mapArg","_arg$function$map","_arg$function","removeAttribute","tap","callback","_ref3","_ref3$within","within","_objectWithoutPropertiesLoose","_excluded","finder","_ref4","_ref4$within","_excluded2","blockInsert","statement","allowed","lineBreak","schemaComment","removeField","then","createPrismaSchemaBuilder","produceSchema","producer","builder"],"mappings":"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"}