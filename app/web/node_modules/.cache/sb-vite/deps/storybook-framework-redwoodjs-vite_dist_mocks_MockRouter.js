import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  Link,
  LocationProvider,
  NavLink,
  PageLoadingContextProvider,
  ParamsContext,
  ParamsProvider,
  Private,
  PrivateSet,
  Redirect,
  Route,
  Set,
  SkipNavContent,
  SkipNavLink,
  back,
  getRouteRegexAndParams,
  isPrivateNode,
  isPrivateSetNode,
  isSetNode,
  isValidRoute,
  matchPath,
  navigate,
  parseSearch,
  replaceParams,
  route_announcement_default,
  route_focus_default,
  useBlocker,
  useLocation,
  useMatch,
  usePageLoadingContext,
  useParams,
  useRouteName,
  useRoutePath,
  useRoutePaths
} from "./chunk-7QZKDWBI.js";
import "./chunk-LKKP6PRA.js";
import {
  require_react
} from "./chunk-52LGRYSO.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-QGZREBOA.js";

// ../node_modules/storybook-framework-redwoodjs-vite/dist/mocks/MockRouter.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// ../node_modules/@redwoodjs/router/dist/react-util.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var import_react = __toESM(require_react());
function flattenAll(children) {
  const childrenArray = import_react.Children.toArray(children);
  return childrenArray.flatMap((child) => {
    if ((0, import_react.isValidElement)(child) && child.props.children) {
      return [child, ...flattenAll(child.props.children)];
    }
    return [child];
  });
}

// ../node_modules/storybook-framework-redwoodjs-vite/dist/mocks/MockRouter.js
var routes = {};
var Router = ({ children }) => {
  const flatChildArray = flattenAll(children);
  flatChildArray.forEach((child) => {
    if (isValidRoute(child)) {
      const { name, path } = child.props;
      if (name && path) {
        routes[name] = (args = {}) => replaceParams(path, args);
      }
    }
  });
  return null;
};
export {
  Link,
  LocationProvider,
  NavLink,
  PageLoadingContextProvider,
  ParamsContext,
  ParamsProvider,
  Private,
  PrivateSet,
  Redirect,
  Route,
  route_announcement_default as RouteAnnouncement,
  route_focus_default as RouteFocus,
  Router,
  Set,
  SkipNavContent,
  SkipNavLink,
  back,
  getRouteRegexAndParams,
  isPrivateNode,
  isPrivateSetNode,
  isSetNode,
  matchPath,
  navigate,
  parseSearch,
  routes,
  useBlocker,
  useLocation,
  useMatch,
  usePageLoadingContext,
  useParams,
  useRouteName,
  useRoutePath,
  useRoutePaths
};
//# sourceMappingURL=storybook-framework-redwoodjs-vite_dist_mocks_MockRouter.js.map
