{
  "version": 3,
  "sources": ["../../../../../node_modules/@redwoodjs/web/dist/components/FetchConfigProvider.js", "../../../../../node_modules/@redwoodjs/web/dist/components/GraphQLHooksProvider.js", "../../../../../node_modules/@redwoodjs/web/dist/apollo/fragmentRegistry.js"],
  "sourcesContent": ["import React from \"react\";\nimport { useNoAuth } from \"@redwoodjs/auth\";\nconst getApiGraphQLUrl = () => {\n  return globalThis.RWJS_API_GRAPHQL_URL;\n};\nconst FetchConfigContext = React.createContext({\n  uri: getApiGraphQLUrl()\n});\nconst FetchConfigProvider = ({\n  useAuth = useNoAuth,\n  ...rest\n}) => {\n  const { isAuthenticated, type } = useAuth();\n  if (!isAuthenticated) {\n    return /* @__PURE__ */ React.createElement(\n      FetchConfigContext.Provider,\n      {\n        value: { uri: getApiGraphQLUrl() },\n        ...rest\n      }\n    );\n  }\n  const headers = {\n    \"auth-provider\": type\n  };\n  return /* @__PURE__ */ React.createElement(\n    FetchConfigContext.Provider,\n    {\n      value: {\n        uri: getApiGraphQLUrl(),\n        headers\n      },\n      ...rest\n    }\n  );\n};\nconst useFetchConfig = () => React.useContext(FetchConfigContext);\nexport {\n  FetchConfigContext,\n  FetchConfigProvider,\n  getApiGraphQLUrl,\n  useFetchConfig\n};\n", "import React from \"react\";\nconst GraphQLHooksContext = React.createContext({\n  useQuery: () => {\n    throw new Error(\n      \"You must register a useQuery hook via the `GraphQLHooksProvider`\"\n    );\n  },\n  useMutation: () => {\n    throw new Error(\n      \"You must register a useMutation hook via the `GraphQLHooksProvider`\"\n    );\n  },\n  useSubscription: () => {\n    throw new Error(\n      \"You must register a useSubscription hook via the `GraphQLHooksProvider`\"\n    );\n  },\n  useSuspenseQuery: () => {\n    throw new Error(\n      \"You must register a useSuspenseQuery hook via the `GraphQLHooksProvider`.\"\n    );\n  },\n  //  These are apollo specific hooks!\n  useBackgroundQuery: () => {\n    throw new Error(\n      \"You must register a useBackgroundQuery hook via the `GraphQLHooksProvider`.\"\n    );\n  },\n  useReadQuery: () => {\n    throw new Error(\n      \"You must register a useReadQuery hook via the `GraphQLHooksProvider`.\"\n    );\n  }\n});\nconst GraphQLHooksProvider = ({\n  useQuery: useQuery2,\n  useMutation: useMutation2,\n  useSubscription: useSubscription2,\n  useSuspenseQuery: useSuspenseQuery2,\n  useBackgroundQuery: useBackgroundQuery2,\n  useReadQuery: useReadQuery2,\n  children\n}) => {\n  return /* @__PURE__ */ React.createElement(\n    GraphQLHooksContext.Provider,\n    {\n      value: {\n        useQuery: useQuery2,\n        useMutation: useMutation2,\n        useSubscription: useSubscription2,\n        useSuspenseQuery: useSuspenseQuery2,\n        useBackgroundQuery: useBackgroundQuery2,\n        useReadQuery: useReadQuery2\n      }\n    },\n    children\n  );\n};\nfunction useQuery(query, options) {\n  return React.useContext(GraphQLHooksContext).useQuery(\n    query,\n    options\n  );\n}\nfunction useMutation(mutation, options) {\n  return React.useContext(GraphQLHooksContext).useMutation(\n    mutation,\n    options\n  );\n}\nfunction useSubscription(query, options) {\n  return React.useContext(GraphQLHooksContext).useSubscription(query, options);\n}\nfunction useSuspenseQuery(query, options) {\n  return React.useContext(GraphQLHooksContext).useSuspenseQuery(query, options);\n}\nconst useBackgroundQuery = (...args) => {\n  return React.useContext(GraphQLHooksContext).useBackgroundQuery(\n    ...args\n  );\n};\nconst useReadQuery = (...args) => {\n  return React.useContext(GraphQLHooksContext).useReadQuery(...args);\n};\nexport {\n  GraphQLHooksContext,\n  GraphQLHooksProvider,\n  useBackgroundQuery,\n  useMutation,\n  useQuery,\n  useReadQuery,\n  useSubscription,\n  useSuspenseQuery\n};\n", "import * as apolloClient from \"@apollo/client\";\nimport { createFragmentRegistry } from \"@apollo/client/cache/cache.cjs\";\nimport { getFragmentDefinitions } from \"@apollo/client/utilities/utilities.cjs\";\nconst getTypenameFromFragment = (fragment) => {\n  const [definition] = getFragmentDefinitions(fragment);\n  return definition.typeCondition.name.value;\n};\nconst useRegisteredFragmentHook = (fragment, id) => {\n  const from = { __typename: getTypenameFromFragment(fragment), id };\n  return apolloClient.useFragment({\n    fragment,\n    from\n  });\n};\nconst fragmentRegistry = createFragmentRegistry();\nconst registerFragments = (fragments) => {\n  return fragments.map(registerFragment);\n};\nconst registerFragment = (fragment) => {\n  fragmentRegistry.register(fragment);\n  const typename = getTypenameFromFragment(fragment);\n  const getCacheKey = (id) => {\n    return { __typename: typename, id };\n  };\n  const useRegisteredFragment = (id) => {\n    return useRegisteredFragmentHook(fragment, id);\n  };\n  return {\n    fragment,\n    typename,\n    getCacheKey,\n    useRegisteredFragment\n  };\n};\nexport {\n  fragmentRegistry,\n  registerFragment,\n  registerFragments\n};\n"],
  "mappings": "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",
  "names": ["import_dist", "React", "import_dist", "import_react", "React", "React", "import_dist"]
}
