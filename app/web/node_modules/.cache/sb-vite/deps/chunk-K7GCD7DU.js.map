{
  "version": 3,
  "sources": ["../../../../../node_modules/@redwoodjs/web/dist/apollo/index.js", "../../../../../node_modules/@redwoodjs/web/dist/apollo/typeOverride.js", "../../../../../node_modules/@redwoodjs/web/dist/bundled/apollo-upload-client.js", "../../../../../node_modules/apollo-upload-client/createUploadLink.mjs", "../../../../../node_modules/extract-files/extractFiles.mjs", "../../../../../node_modules/is-plain-obj/index.js", "../../../../../node_modules/apollo-upload-client/formDataAppendFile.mjs", "../../../../../node_modules/apollo-upload-client/isExtractableFile.mjs", "../../../../../node_modules/extract-files/isExtractableFile.mjs", "../../../../../node_modules/@redwoodjs/web/dist/apollo/sseLink.js", "../../../../../node_modules/graphql-sse/lib/index.mjs", "../../../../../node_modules/graphql-sse/lib/common.mjs", "../../../../../node_modules/graphql-sse/lib/utils.mjs", "../../../../../node_modules/graphql-sse/lib/handler.mjs", "../../../../../node_modules/graphql-sse/lib/client.mjs", "../../../../../node_modules/graphql-sse/lib/parser.mjs", "../../../../../node_modules/@redwoodjs/web/dist/apollo/useCache.js"],
  "sourcesContent": ["import React from \"react\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  split,\n  ApolloLink\n} from \"@apollo/client\";\nimport { setLogVerbosity as apolloSetLogVerbosity } from \"@apollo/client/core/core.cjs\";\nimport { setContext } from \"@apollo/client/link/context/context.cjs\";\nimport { createPersistedQueryLink } from \"@apollo/client/link/persisted-queries/persisted-queries.cjs\";\nimport {\n  useQuery,\n  useMutation,\n  useSubscription,\n  useBackgroundQuery,\n  useReadQuery,\n  useSuspenseQuery\n} from \"@apollo/client/react/hooks/hooks.cjs\";\nimport { getMainDefinition } from \"@apollo/client/utilities/utilities.cjs\";\nimport { print } from \"graphql/language/printer.js\";\nimport { useNoAuth } from \"@redwoodjs/auth\";\nimport \"./typeOverride.js\";\nimport { createUploadLink } from \"../bundled/apollo-upload-client.js\";\nimport {\n  FetchConfigProvider,\n  useFetchConfig\n} from \"../components/FetchConfigProvider.js\";\nimport { GraphQLHooksProvider } from \"../components/GraphQLHooksProvider.js\";\nimport {\n  fragmentRegistry,\n  registerFragment,\n  registerFragments\n} from \"./fragmentRegistry.js\";\nimport * as SSELinkExports from \"./sseLink.js\";\nimport { useCache } from \"./useCache.js\";\nconst { SSELink, isSubscription, isLiveQuery } = SSELinkExports;\nconst ApolloProviderWithFetchConfig = ({ config, children, useAuth = useNoAuth, logLevel }) => {\n  apolloSetLogVerbosity(logLevel);\n  const { getToken, type: authProviderType } = useAuth();\n  const data = {\n    mostRecentRequest: void 0,\n    mostRecentResponse: void 0\n  };\n  const updateDataApolloLink = new ApolloLink((operation, forward) => {\n    const { operationName, query, variables } = operation;\n    data.mostRecentRequest = {};\n    data.mostRecentRequest.operationName = operationName;\n    data.mostRecentRequest.operationKind = query?.kind.toString();\n    data.mostRecentRequest.variables = variables;\n    data.mostRecentRequest.query = query && print(operation.query);\n    return forward(operation).map((result) => {\n      data.mostRecentResponse = result;\n      return result;\n    });\n  });\n  const withToken = setContext(async () => {\n    const token = await getToken();\n    return { token };\n  });\n  const { headers, uri } = useFetchConfig();\n  const authMiddleware = new ApolloLink((operation, forward) => {\n    const { token } = operation.getContext();\n    const authHeaders = token ? {\n      \"auth-provider\": authProviderType,\n      authorization: `Bearer ${token}`\n    } : {};\n    operation.setContext(() => ({\n      headers: {\n        ...operation.getContext().headers,\n        ...headers,\n        // Duped auth headers, because we may remove the `FetchConfigProvider` at a later date.\n        ...authHeaders\n      }\n    }));\n    return forward(operation);\n  });\n  const { httpLinkConfig, link: redwoodApolloLink, ...rest } = config ?? {};\n  const uploadLink = createUploadLink({\n    uri,\n    ...httpLinkConfig\n    // The upload link types don't match the ApolloLink types, even though it comes from Apollo\n    // because they use ESM imports and we're using the default ones.\n  });\n  const uploadOrSSELink = typeof SSELink !== \"undefined\" ? split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return isSubscription(definition) || isLiveQuery(definition);\n    },\n    new SSELink({\n      url: uri,\n      auth: { authProviderType, tokenFn: getToken },\n      httpLinkConfig,\n      headers\n    }),\n    uploadLink\n  ) : uploadLink;\n  const terminatingLink = split(\n    ({ query }) => {\n      const documentQuery = query;\n      return documentQuery?.[\"__meta__\"]?.[\"hash\"] !== void 0;\n    },\n    createPersistedQueryLink({\n      generateHash: (document) => document[\"__meta__\"][\"hash\"]\n    }).concat(uploadOrSSELink),\n    uploadOrSSELink\n  );\n  const redwoodApolloLinks = [\n    { name: \"withToken\", link: withToken },\n    { name: \"authMiddleware\", link: authMiddleware },\n    { name: \"updateDataApolloLink\", link: updateDataApolloLink },\n    { name: \"httpLink\", link: terminatingLink }\n  ];\n  let link = redwoodApolloLink;\n  link ??= ApolloLink.from(redwoodApolloLinks.map((l) => l.link));\n  if (typeof link === \"function\") {\n    link = link(redwoodApolloLinks);\n  }\n  const client = new ApolloClient({\n    // Default options for every Cell. Better to specify them here than in `beforeQuery` where it's too easy to overwrite them.\n    // See https://www.apollographql.com/docs/react/api/core/ApolloClient/#example-defaultoptions-object.\n    defaultOptions: {\n      watchQuery: {\n        // The `fetchPolicy` we expect:\n        //\n        // > Apollo Client executes the full query against both the cache and your GraphQL server.\n        // > The query automatically updates if the result of the server-side query modifies cached fields.\n        //\n        // See https://www.apollographql.com/docs/react/data/queries/#cache-and-network.\n        fetchPolicy: \"cache-and-network\",\n        // So that Cells rerender when refetching.\n        // See https://www.apollographql.com/docs/react/data/queries/#inspecting-loading-states.\n        notifyOnNetworkStatusChange: true\n      }\n    },\n    link,\n    ...rest\n  });\n  const extendErrorAndRethrow = (error, _errorInfo) => {\n    error[\"mostRecentRequest\"] = data.mostRecentRequest;\n    error[\"mostRecentResponse\"] = data.mostRecentResponse;\n    throw error;\n  };\n  return /* @__PURE__ */ React.createElement(ApolloProvider, { client }, /* @__PURE__ */ React.createElement(ErrorBoundary, { onError: extendErrorAndRethrow }, children));\n};\nclass ErrorBoundary extends React.Component {\n  componentDidCatch(...args) {\n    this.setState({});\n    this.props.onError(...args);\n  }\n  render() {\n    return this.props.children;\n  }\n}\nconst RedwoodApolloProvider = ({\n  graphQLClientConfig,\n  fragments,\n  useAuth = useNoAuth,\n  logLevel = \"debug\",\n  children\n}) => {\n  const { cacheConfig, ...config } = graphQLClientConfig ?? {};\n  if (fragments) {\n    fragmentRegistry.register(...fragments);\n  }\n  const cache = new InMemoryCache({\n    fragments: fragmentRegistry,\n    possibleTypes: cacheConfig?.possibleTypes,\n    ...cacheConfig\n  }).restore(globalThis?.__REDWOOD__APOLLO_STATE ?? {});\n  return /* @__PURE__ */ React.createElement(FetchConfigProvider, { useAuth }, /* @__PURE__ */ React.createElement(\n    ApolloProviderWithFetchConfig,\n    {\n      config: { cache, ...config },\n      useAuth,\n      logLevel\n    },\n    /* @__PURE__ */ React.createElement(\n      GraphQLHooksProvider,\n      {\n        useQuery,\n        useMutation,\n        useSubscription,\n        useBackgroundQuery,\n        useReadQuery,\n        useSuspenseQuery\n      },\n      children\n    )\n  ));\n};\nexport {\n  RedwoodApolloProvider,\n  fragmentRegistry,\n  registerFragment,\n  registerFragments,\n  useCache\n};\n", "", "import createUploadLink from \"apollo-upload-client/createUploadLink.mjs\";\nexport {\n  createUploadLink\n};\n", "// @ts-check\n\nimport { ApolloLink } from \"@apollo/client/link/core/ApolloLink.js\";\nimport { createSignalIfSupported } from \"@apollo/client/link/http/createSignalIfSupported.js\";\nimport { parseAndCheckHttpResponse } from \"@apollo/client/link/http/parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"@apollo/client/link/http/rewriteURIForGET.js\";\nimport {\n  defaultPrinter,\n  fallbackHttpConfig,\n  selectHttpOptionsAndBodyInternal,\n} from \"@apollo/client/link/http/selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"@apollo/client/link/http/selectURI.js\";\nimport { serializeFetchParameter } from \"@apollo/client/link/http/serializeFetchParameter.js\";\nimport { Observable } from \"@apollo/client/utilities/observables/Observable.js\";\nimport extractFiles from \"extract-files/extractFiles.mjs\";\n\nimport formDataAppendFile from \"./formDataAppendFile.mjs\";\nimport isExtractableFile from \"./isExtractableFile.mjs\";\n\n/**\n * Creates a\n * [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://www.apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), or\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) instances),\n * or else fetches a regular\n * [GraphQL POST or GET request](https://www.apollographql.com/docs/apollo-server/workflow/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://www.apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @param {object} options Options.\n * @param {Parameters<typeof selectURI>[1]} [options.uri] GraphQL endpoint URI.\n *   Defaults to `\"/graphql\"`.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch\n *   queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile] Matches\n *   extractable files in the GraphQL operation. Defaults to\n *   {@linkcode isExtractableFile}.\n * @param {typeof FormData} [options.FormData]\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   class. Defaults to the {@linkcode FormData} global.\n * @param {FormDataFileAppender} [options.formDataAppendFile]\n *   Customizes how extracted files are appended to the\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance. Defaults to {@linkcode formDataAppendFile}.\n * @param {import(\"@apollo/client/link/http/selectHttpOptionsAndBody.js\").Printer} [options.print]\n *   Prints the GraphQL query or mutation AST to a string for transport.\n *   Defaults to {@linkcode defaultPrinter}.\n * @param {typeof fetch} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org)\n *   implementation. Defaults to the {@linkcode fetch} global.\n * @param {RequestInit} [options.fetchOptions] `fetch` options; overridden by\n *   upload requirements.\n * @param {string} [options.credentials] Overrides\n *   {@linkcode RequestInit.credentials credentials} in\n *   {@linkcode fetchOptions}.\n * @param {{ [headerName: string]: string }} [options.headers] Merges with and\n *   overrides {@linkcode RequestInit.headers headers} in\n *   {@linkcode fetchOptions}.\n * @param {boolean} [options.includeExtensions] Toggles sending `extensions`\n *   fields to the GraphQL server. Defaults to `false`.\n * @returns A [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example\n * A basic Apollo Client setup:\n *\n * ```js\n * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n * import createUploadLink from \"apollo-upload-client/createUploadLink.mjs\";\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nexport default function createUploadLink({\n  uri: fetchUri = \"/graphql\",\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = isExtractableFile,\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = formDataAppendFile,\n  print = defaultPrinter,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions,\n} = {}) {\n  const linkConfig = {\n    http: { includeExtensions },\n    options: fetchOptions,\n    credentials,\n    headers,\n  };\n\n  return new ApolloLink((operation) => {\n    const context =\n      /**\n       * @type {import(\"@apollo/client/core/types.js\").DefaultContext & {\n       *   clientAwareness?: {\n       *     name?: string,\n       *     version?: string,\n       *   },\n       * }}\n       */\n      (operation.getContext());\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://www.apollographql.com/docs/graphos/metrics/client-awareness/#setup\n      clientAwareness: { name, version } = {},\n      headers,\n    } = context;\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && { \"apollographql-client-name\": name }),\n        ...(version && { \"apollographql-client-version\": version }),\n        ...headers,\n      },\n    };\n\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    const { clone, files } = extractFiles(body, customIsExtractableFile, \"\");\n\n    let uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      if (options.headers)\n        // Automatically set by `fetch` when the `body` is a `FormData` instance.\n        delete options.headers[\"content-type\"];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n\n      const form = new RuntimeFormData();\n\n      form.append(\"operations\", serializeFetchParameter(clone, \"Payload\"));\n\n      /** @type {{ [key: string]: Array<string> }} */\n      const map = {};\n\n      let i = 0;\n      files.forEach((paths) => {\n        map[++i] = paths;\n      });\n      form.append(\"map\", JSON.stringify(map));\n\n      i = 0;\n      files.forEach((_paths, file) => {\n        customFormDataAppendFile(form, String(++i), file);\n      });\n\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        // If the operation contains some mutations GET shouldn’t be used.\n        !operation.query.definitions.some(\n          (definition) =>\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"mutation\",\n        )\n      )\n        options.method = \"GET\";\n\n      if (options.method === \"GET\") {\n        const { newURI, parseError } = rewriteURIForGET(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it’s not\n          // exported from `@apollo/client/link/http`.\n          return new Observable((observer) => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, \"Payload\");\n    }\n\n    const { controller } = createSignalIfSupported();\n\n    if (typeof controller !== \"boolean\") {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted\n          ? // Signal already aborted, so immediately abort.\n            controller.abort()\n          : // Signal not already aborted, so setup a listener to abort when it\n            // does.\n            options.signal.addEventListener(\n              \"abort\",\n              () => {\n                controller.abort();\n              },\n              {\n                // Prevent a memory leak if the user configured abort controller\n                // is long lasting, or controls multiple things.\n                once: true,\n              },\n            );\n\n      options.signal = controller.signal;\n    }\n\n    const runtimeFetch = customFetch || fetch;\n\n    return new Observable((observer) => {\n      /**\n       * Is the observable being cleaned up.\n       * @type {boolean}\n       */\n      let cleaningUp;\n\n      runtimeFetch(uri, options)\n        .then((response) => {\n          // Forward the response on the context.\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then((result) => {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch((error) => {\n          // If the observable is being cleaned up, there is no need to call\n          // next or error because there are no more subscribers. An error after\n          // cleanup begins is likely from the cleanup function aborting the\n          // fetch.\n          if (!cleaningUp) {\n            // For errors such as an invalid fetch URI there will be no GraphQL\n            // result with errors or data to forward.\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n\n            observer.error(error);\n          }\n        });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (typeof controller !== \"boolean\") controller.abort();\n      };\n    });\n  });\n}\n\n/**\n * Checks if a value is an extractable file.\n * @template [ExtractableFile=any] Extractable file.\n * @callback ExtractableFileMatcher\n * @param {unknown} value Value to check.\n * @returns {value is ExtractableFile} Is the value an extractable file.\n * @example\n * How to check for the default exactable files, as well as a custom type of\n * file:\n *\n * ```js\n * import isExtractableFile from \"apollo-upload-client/isExtractableFile.mjs\";\n *\n * const isExtractableFileEnhanced = (value) =>\n *   isExtractableFile(value) ||\n *   (typeof CustomFile !== \"undefined\" && value instanceof CustomFile);\n * ```\n */\n\n/**\n * Appends a file extracted from the GraphQL operation to the\n * [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * instance used as the\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * `options.body` for the\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @template [ExtractableFile=any] Extractable file.\n * @callback FormDataFileAppender\n * @param {FormData} formData\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance to append the specified file to.\n * @param {string} fieldName Form data field name to append the file with.\n * @param {ExtractableFile} file File to append. The file type depends on what\n *   the extractable file matcher extracts.\n */\n", "// @ts-check\n\n// @deno-types=\"is-plain-obj/index.d.ts\"\nimport isPlainObject from \"is-plain-obj\";\n\n/** @typedef {import(\"./isExtractableFile.mjs\").default} isExtractableFile */\n\n/**\n * Recursively extracts files and their {@link ObjectPath object paths} within a\n * value, replacing them with `null` in a deep clone without mutating the\n * original value.\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/Filelist)\n * instances are treated as\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) instance\n * arrays.\n * @template Extractable Extractable file type.\n * @param {unknown} value Value to extract files from. Typically an object tree.\n * @param {(value: unknown) => value is Extractable} isExtractable Matches\n *   extractable files. Typically {@linkcode isExtractableFile}.\n * @param {ObjectPath} [path] Prefix for object paths for extracted files.\n *   Defaults to `\"\"`.\n * @returns {Extraction<Extractable>} Extraction result.\n * @example\n * Extracting files from an object.\n *\n * For the following:\n *\n * ```js\n * import extractFiles from \"extract-files/extractFiles.mjs\";\n * import isExtractableFile from \"extract-files/isExtractableFile.mjs\";\n *\n * const file1 = new File([\"1\"], \"1.txt\", { type: \"text/plain\" });\n * const file2 = new File([\"2\"], \"2.txt\", { type: \"text/plain\" });\n * const value = {\n *   a: file1,\n *   b: [file1, file2],\n * };\n *\n * const { clone, files } = extractFiles(value, isExtractableFile, \"prefix\");\n * ```\n *\n * `value` remains the same.\n *\n * `clone` is:\n *\n * ```json\n * {\n *   \"a\": null,\n *   \"b\": [null, null]\n * }\n * ```\n *\n * `files` is a\n * [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n * instance containing:\n *\n * | Key     | Value                        |\n * | :------ | :--------------------------- |\n * | `file1` | `[\"prefix.a\", \"prefix.b.0\"]` |\n * | `file2` | `[\"prefix.b.1\"]`             |\n */\nexport default function extractFiles(value, isExtractable, path = \"\") {\n  if (!arguments.length) throw new TypeError(\"Argument 1 `value` is required.\");\n\n  if (typeof isExtractable !== \"function\")\n    throw new TypeError(\"Argument 2 `isExtractable` must be a function.\");\n\n  if (typeof path !== \"string\")\n    throw new TypeError(\"Argument 3 `path` must be a string.\");\n\n  /**\n   * Deeply clonable value.\n   * @typedef {Array<unknown> | FileList | {\n   *   [key: PropertyKey]: unknown\n   * }} Cloneable\n   */\n\n  /**\n   * Clone of a {@link Cloneable deeply cloneable value}.\n   * @typedef {Exclude<Cloneable, FileList>} Clone\n   */\n\n  /**\n   * Map of values recursed within the input value and their clones, for reusing\n   * clones of values that are referenced multiple times within the input value.\n   * @type {Map<Cloneable, Clone>}\n   */\n  const clones = new Map();\n\n  /**\n   * Extracted files and their object paths within the input value.\n   * @type {Extraction<Extractable>[\"files\"]}\n   */\n  const files = new Map();\n\n  /**\n   * Recursively clones the value, extracting files.\n   * @param {unknown} value Value to extract files from.\n   * @param {ObjectPath} path Prefix for object paths for extracted files.\n   * @param {Set<Cloneable>} recursed Recursed values for avoiding infinite\n   *   recursion of circular references within the input value.\n   * @returns {unknown} Clone of the value with files replaced with `null`.\n   */\n  function recurse(value, path, recursed) {\n    if (isExtractable(value)) {\n      const filePaths = files.get(value);\n\n      filePaths ? filePaths.push(path) : files.set(value, [path]);\n\n      return null;\n    }\n\n    const valueIsList =\n      Array.isArray(value) ||\n      (typeof FileList !== \"undefined\" && value instanceof FileList);\n    const valueIsPlainObject = isPlainObject(value);\n\n    if (valueIsList || valueIsPlainObject) {\n      let clone = clones.get(value);\n\n      const uncloned = !clone;\n\n      if (uncloned) {\n        clone = valueIsList\n          ? []\n          : // Replicate if the plain object is an `Object` instance.\n          value instanceof /** @type {any} */ (Object)\n          ? {}\n          : Object.create(null);\n\n        clones.set(value, /** @type {Clone} */ (clone));\n      }\n\n      if (!recursed.has(value)) {\n        const pathPrefix = path ? `${path}.` : \"\";\n        const recursedDeeper = new Set(recursed).add(value);\n\n        if (valueIsList) {\n          let index = 0;\n\n          for (const item of value) {\n            const itemClone = recurse(\n              item,\n              pathPrefix + index++,\n              recursedDeeper\n            );\n\n            if (uncloned) /** @type {Array<unknown>} */ (clone).push(itemClone);\n          }\n        } else\n          for (const key in value) {\n            const propertyClone = recurse(\n              value[key],\n              pathPrefix + key,\n              recursedDeeper\n            );\n\n            if (uncloned)\n              /** @type {{ [key: PropertyKey]: unknown }} */ (clone)[key] =\n                propertyClone;\n          }\n      }\n\n      return clone;\n    }\n\n    return value;\n  }\n\n  return {\n    clone: recurse(value, path, new Set()),\n    files,\n  };\n}\n\n/**\n * An extraction result.\n * @template [Extractable=unknown] Extractable file type.\n * @typedef {object} Extraction\n * @prop {unknown} clone Clone of the original value with extracted files\n *   recursively replaced with `null`.\n * @prop {Map<Extractable, Array<ObjectPath>>} files Extracted files and their\n *   object paths within the original value.\n */\n\n/**\n * String notation for the path to a node in an object tree.\n * @typedef {string} ObjectPath\n * @see [`object-path` on npm](https://npm.im/object-path).\n * @example\n * An object path for object property `a`, array index `0`, object property `b`:\n *\n * ```\n * a.0.b\n * ```\n */\n", "export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n", "// @ts-check\n\n/**\n * The default implementation for the function `createUploadLink` option\n * `formDataAppendFile` that uses the standard {@linkcode FormData.append}\n * method.\n * @param {FormData} formData Form data to append the specified file to.\n * @param {string} fieldName Field name for the file.\n * @param {import(\"./isExtractableFile.mjs\").ExtractableFile} file File to\n *   append.\n */\nexport default function formDataAppendFile(formData, fieldName, file) {\n  \"name\" in file\n    ? formData.append(fieldName, file, file.name)\n    : formData.append(fieldName, file);\n}\n", "// @ts-check\n\nexport { default } from \"extract-files/isExtractableFile.mjs\";\n\n/**\n * An extractable file.\n * @typedef {import(\n *   \"extract-files/isExtractableFile.mjs\"\n * ).ExtractableFile} ExtractableFile\n */\n", "// @ts-check\n\n/**\n * Checks if a value is an {@link ExtractableFile extractable file}.\n * @param {unknown} value Value to check.\n * @returns {value is ExtractableFile} Is the value an\n *   {@link ExtractableFile extractable file}.\n */\nexport default function isExtractableFile(value) {\n  return (\n    (typeof File !== \"undefined\" && value instanceof File) ||\n    (typeof Blob !== \"undefined\" && value instanceof Blob)\n  );\n}\n\n/**\n * An extractable file.\n * @typedef {File | Blob} ExtractableFile\n */\n", "import { ApolloLink } from \"@apollo/client/link/core/core.cjs\";\nimport { Observable } from \"@apollo/client/utilities/utilities.cjs\";\nimport { Kind, OperationTypeNode, print } from \"graphql\";\nimport { createClient } from \"graphql-sse\";\nconst mapCredentialsHeader = (httpLinkCredentials) => {\n  if (!httpLinkCredentials) {\n    return void 0;\n  }\n  switch (httpLinkCredentials) {\n    case \"omit\":\n    case \"same-origin\":\n    case \"include\":\n      return httpLinkCredentials;\n    default:\n      return void 0;\n  }\n};\nconst mapReferrerPolicyHeader = (referrerPolicy) => {\n  if (!referrerPolicy) {\n    return void 0;\n  }\n  switch (referrerPolicy) {\n    case \"no-referrer\":\n    case \"no-referrer-when-downgrade\":\n    case \"same-origin\":\n    case \"origin\":\n    case \"strict-origin\":\n    case \"origin-when-cross-origin\":\n    case \"strict-origin-when-cross-origin\":\n    case \"unsafe-url\":\n      return referrerPolicy;\n    default:\n      return void 0;\n  }\n};\nconst hasTrustedDocument = (operation) => {\n  return operation.extensions?.persistedQuery?.sha256Hash;\n};\nconst isSubscription = (definition) => {\n  return definition.kind === Kind.OPERATION_DEFINITION && definition.operation === OperationTypeNode.SUBSCRIPTION;\n};\nconst isLiveQuery = (definition) => {\n  if (definition.kind !== Kind.OPERATION_DEFINITION || definition.operation !== OperationTypeNode.QUERY) {\n    return false;\n  }\n  return !!definition.directives?.find((d) => d.name.value === \"live\");\n};\nclass SSELink extends ApolloLink {\n  client;\n  constructor(options) {\n    super();\n    const { url, auth, headers, httpLinkConfig } = options;\n    const { credentials, referrer, referrerPolicy } = httpLinkConfig?.headers || {};\n    this.client = createClient({\n      url,\n      headers: async () => {\n        const token = await auth.tokenFn();\n        if (!token) {\n          return { ...headers };\n        }\n        return {\n          Authorization: `Bearer ${token}`,\n          \"auth-provider\": auth.authProviderType,\n          ...headers\n        };\n      },\n      credentials: mapCredentialsHeader(credentials),\n      referrer,\n      referrerPolicy: mapReferrerPolicyHeader(referrerPolicy)\n    });\n  }\n  request(operation) {\n    return new Observable((sink) => {\n      let request;\n      if (hasTrustedDocument(operation)) {\n        delete operation.query;\n        request = { ...operation };\n      } else {\n        request = {\n          ...operation,\n          query: print(operation.query)\n        };\n      }\n      return this.client.subscribe(request, {\n        next: sink.next.bind(sink),\n        complete: sink.complete.bind(sink),\n        error: sink.error.bind(sink)\n      });\n    });\n  }\n}\nexport {\n  SSELink,\n  isLiveQuery,\n  isSubscription\n};\n", "export * from './common.mjs';\nexport * from './handler.mjs';\nexport * from './client.mjs';\n", "/**\n *\n * common\n *\n */\nimport { isObject } from './utils.mjs';\n/**\n * Header key through which the event stream token is transmitted\n * when using the client in \"single connection mode\".\n *\n * Read more: https://github.com/enisdenjo/graphql-sse/blob/master/PROTOCOL.md#single-connection-mode\n *\n * @category Common\n */\nexport const TOKEN_HEADER_KEY = 'x-graphql-event-stream-token';\n/**\n * URL query parameter key through which the event stream token is transmitted\n * when using the client in \"single connection mode\".\n *\n * Read more: https://github.com/enisdenjo/graphql-sse/blob/master/PROTOCOL.md#single-connection-mode\n *\n * @category Common\n */\nexport const TOKEN_QUERY_KEY = 'token';\n/** @category Common */\nexport function validateStreamEvent(e) {\n    e = e;\n    if (e !== 'next' && e !== 'complete')\n        throw new Error(`Invalid stream event \"${e}\"`);\n    return e;\n}\n/** @category Common */\nexport function print(msg) {\n    let str = `event: ${msg.event}\\ndata:`;\n    if (msg.data) {\n        str += ' ';\n        str += JSON.stringify(msg.data);\n    }\n    str += '\\n\\n';\n    return str;\n}\n/** @category Common */\nexport function parseStreamData(e, data) {\n    if (data) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch {\n            throw new Error('Invalid stream data');\n        }\n    }\n    if (e === 'next' && !data)\n        throw new Error('Stream data must be an object for \"next\" events');\n    return (data || null);\n}\n/**\n * Checkes whether the provided value is an async iterable.\n *\n * @category Common\n */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n/**\n * Checkes whether the provided value is an async generator.\n *\n * @category Common\n */\nexport function isAsyncGenerator(val) {\n    return (isObject(val) &&\n        typeof Object(val)[Symbol.asyncIterator] === 'function' &&\n        typeof val.return === 'function' &&\n        typeof val.throw === 'function' &&\n        typeof val.next === 'function');\n}\n", "/**\n *\n * utils\n *\n */\n/** @private */\nexport function isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n", "/**\n *\n * handler\n *\n */\nimport { getOperationAST, parse, validate as graphqlValidate, execute as graphqlExecute, subscribe as graphqlSubscribe, } from 'graphql';\nimport { isObject } from './utils.mjs';\nimport { TOKEN_HEADER_KEY, TOKEN_QUERY_KEY, print, isAsyncGenerator, isAsyncIterable, } from './common.mjs';\n/**\n * Makes a Protocol complient HTTP GraphQL server handler. The handler can\n * be used with your favourite server library.\n *\n * Read more about the Protocol in the PROTOCOL.md documentation file.\n *\n * @category Server\n */\nexport function createHandler(options) {\n    const { validate = graphqlValidate, execute = graphqlExecute, subscribe = graphqlSubscribe, schema, authenticate = function extractOrCreateStreamToken(req) {\n        var _a;\n        const headerToken = req.headers.get(TOKEN_HEADER_KEY);\n        if (headerToken)\n            return Array.isArray(headerToken) ? headerToken.join('') : headerToken;\n        const urlToken = new URL((_a = req.url) !== null && _a !== void 0 ? _a : '', 'http://localhost/').searchParams.get(TOKEN_QUERY_KEY);\n        if (urlToken)\n            return urlToken;\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, onConnect, context, onSubscribe, onOperation, onNext, onComplete, } = options;\n    const streams = {};\n    function createStream(token) {\n        const ops = {};\n        let pinger;\n        const msgs = (() => {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            async function dispose() {\n                clearInterval(pinger);\n                // make room for another potential stream while this one is being disposed\n                if (typeof token === 'string')\n                    delete streams[token];\n                // complete all operations and flush messages queue before ending the stream\n                for (const op of Object.values(ops)) {\n                    if (isAsyncGenerator(op)) {\n                        await op.return(undefined);\n                    }\n                }\n            }\n            const iterator = (async function* iterator() {\n                for (;;) {\n                    if (!pending.length) {\n                        // only wait if there are no pending messages available\n                        await new Promise((resolve) => (deferred.resolve = resolve));\n                    }\n                    // first flush\n                    while (pending.length) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        yield pending.shift();\n                    }\n                    // then error\n                    if (deferred.error) {\n                        throw deferred.error;\n                    }\n                    // or complete\n                    if (deferred.done) {\n                        return;\n                    }\n                }\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                    await dispose();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.resolve();\n                    await dispose();\n                }\n                return { done: true, value: undefined };\n            };\n            return {\n                next(msg) {\n                    pending.push(msg);\n                    deferred.resolve();\n                },\n                iterator,\n            };\n        })();\n        let subscribed = false;\n        return {\n            get open() {\n                return subscribed;\n            },\n            ops,\n            subscribe() {\n                subscribed = true;\n                // write an empty message because some browsers (like Firefox and Safari)\n                // dont accept the header flush\n                msgs.next(':\\n\\n');\n                // ping client every 12 seconds to keep the connection alive\n                pinger = setInterval(() => msgs.next(':\\n\\n'), 12000);\n                return msgs.iterator;\n            },\n            from(ctx, req, result, opId) {\n                (async () => {\n                    if (isAsyncIterable(result)) {\n                        /** multiple emitted results */\n                        for await (let part of result) {\n                            const maybeResult = await (onNext === null || onNext === void 0 ? void 0 : onNext(ctx, req, part));\n                            if (maybeResult)\n                                part = maybeResult;\n                            msgs.next(print({\n                                event: 'next',\n                                data: opId\n                                    ? {\n                                        id: opId,\n                                        payload: part,\n                                    }\n                                    : part,\n                            }));\n                        }\n                    }\n                    else {\n                        /** single emitted result */\n                        const maybeResult = await (onNext === null || onNext === void 0 ? void 0 : onNext(ctx, req, result));\n                        if (maybeResult)\n                            result = maybeResult;\n                        msgs.next(print({\n                            event: 'next',\n                            data: opId\n                                ? {\n                                    id: opId,\n                                    payload: result,\n                                }\n                                : result,\n                        }));\n                    }\n                    msgs.next(print({\n                        event: 'complete',\n                        data: opId ? { id: opId } : null,\n                    }));\n                    await (onComplete === null || onComplete === void 0 ? void 0 : onComplete(ctx, req));\n                    if (!opId) {\n                        // end on complete when no operation id is present\n                        // because distinct event streams are used for each operation\n                        await msgs.iterator.return();\n                    }\n                    else {\n                        delete ops[opId];\n                    }\n                })().catch(msgs.iterator.throw);\n            },\n        };\n    }\n    async function prepare(req, params) {\n        let args;\n        const onSubscribeResult = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));\n        if (isResponse(onSubscribeResult))\n            return onSubscribeResult;\n        else if (isExecutionResult(onSubscribeResult) ||\n            isAsyncIterable(onSubscribeResult))\n            return {\n                // even if the result is already available, use\n                // context because onNext and onComplete needs it\n                ctx: (typeof context === 'function'\n                    ? await context(req, params)\n                    : context),\n                perform() {\n                    return onSubscribeResult;\n                },\n            };\n        else if (onSubscribeResult)\n            args = onSubscribeResult;\n        else {\n            // you either provide a schema dynamically through\n            // `onSubscribe` or you set one up during the server setup\n            if (!schema)\n                throw new Error('The GraphQL schema is not provided');\n            const { operationName, variables } = params;\n            let query;\n            try {\n                query = parse(params.query);\n            }\n            catch (err) {\n                return [\n                    JSON.stringify({\n                        errors: [\n                            err instanceof Error\n                                ? {\n                                    message: err.message,\n                                    // TODO: stack might leak sensitive information\n                                    // stack: err.stack,\n                                }\n                                : err,\n                        ],\n                    }),\n                    {\n                        status: 400,\n                        statusText: 'Bad Request',\n                        headers: { 'content-type': 'application/json; charset=utf-8' },\n                    },\n                ];\n            }\n            const argsWithoutSchema = {\n                operationName,\n                document: query,\n                variableValues: variables,\n                contextValue: (typeof context === 'function'\n                    ? await context(req, params)\n                    : context),\n            };\n            args = {\n                ...argsWithoutSchema,\n                schema: typeof schema === 'function'\n                    ? await schema(req, argsWithoutSchema)\n                    : schema,\n            };\n        }\n        let operation;\n        try {\n            const ast = getOperationAST(args.document, args.operationName);\n            if (!ast)\n                throw null;\n            operation = ast.operation;\n        }\n        catch {\n            return [\n                JSON.stringify({\n                    errors: [{ message: 'Unable to detect operation AST' }],\n                }),\n                {\n                    status: 400,\n                    statusText: 'Bad Request',\n                    headers: { 'content-type': 'application/json; charset=utf-8' },\n                },\n            ];\n        }\n        // mutations cannot happen over GETs as per the spec\n        // Read more: https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#get\n        if (operation === 'mutation' && req.method === 'GET') {\n            return [\n                JSON.stringify({\n                    errors: [{ message: 'Cannot perform mutations over GET' }],\n                }),\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'POST',\n                        'content-type': 'application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        // we validate after injecting the context because the process of\n        // reporting the validation errors might need the supplied context value\n        const validationErrs = validate(args.schema, args.document);\n        if (validationErrs.length) {\n            if (req.headers.get('accept') === 'text/event-stream') {\n                // accept the request and emit the validation error in event streams,\n                // promoting graceful GraphQL error reporting\n                // Read more: https://www.w3.org/TR/eventsource/#processing-model\n                // Read more: https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md#document-validation\n                return {\n                    ctx: args.contextValue,\n                    perform() {\n                        return { errors: validationErrs };\n                    },\n                };\n            }\n            return [\n                JSON.stringify({ errors: validationErrs }),\n                {\n                    status: 400,\n                    statusText: 'Bad Request',\n                    headers: { 'content-type': 'application/json; charset=utf-8' },\n                },\n            ];\n        }\n        return {\n            ctx: args.contextValue,\n            async perform() {\n                const result = await (operation === 'subscription'\n                    ? subscribe(args)\n                    : execute(args));\n                const maybeResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(args.contextValue, req, args, result));\n                if (maybeResult)\n                    return maybeResult;\n                return result;\n            },\n        };\n    }\n    return async function handler(req) {\n        var _a, _b, _c;\n        const token = await authenticate(req);\n        if (isResponse(token))\n            return token;\n        // TODO: make accept detection more resilient\n        const accept = req.headers.get('accept') || '*/*';\n        const stream = typeof token === 'string' ? streams[token] : null;\n        if (accept === 'text/event-stream') {\n            const maybeResponse = await (onConnect === null || onConnect === void 0 ? void 0 : onConnect(req));\n            if (isResponse(maybeResponse))\n                return maybeResponse;\n            // if event stream is not registered, process it directly.\n            // this means that distinct connections are used for graphql operations\n            if (!stream) {\n                const paramsOrResponse = await parseReq(req);\n                if (isResponse(paramsOrResponse))\n                    return paramsOrResponse;\n                const params = paramsOrResponse;\n                const distinctStream = createStream(null);\n                // reserve space for the operation\n                distinctStream.ops[''] = null;\n                const prepared = await prepare(req, params);\n                if (isResponse(prepared))\n                    return prepared;\n                const result = await prepared.perform();\n                if (isAsyncIterable(result))\n                    distinctStream.ops[''] = result;\n                distinctStream.from(prepared.ctx, req, result, null);\n                return [\n                    distinctStream.subscribe(),\n                    {\n                        status: 200,\n                        statusText: 'OK',\n                        headers: {\n                            connection: 'keep-alive',\n                            'cache-control': 'no-cache',\n                            'content-encoding': 'none',\n                            'content-type': 'text/event-stream; charset=utf-8',\n                        },\n                    },\n                ];\n            }\n            // open stream cant exist, only one per token is allowed\n            if (stream.open) {\n                return [\n                    JSON.stringify({ errors: [{ message: 'Stream already open' }] }),\n                    {\n                        status: 409,\n                        statusText: 'Conflict',\n                        headers: {\n                            'content-type': 'application/json; charset=utf-8',\n                        },\n                    },\n                ];\n            }\n            return [\n                stream.subscribe(),\n                {\n                    status: 200,\n                    statusText: 'OK',\n                    headers: {\n                        connection: 'keep-alive',\n                        'cache-control': 'no-cache',\n                        'content-encoding': 'none',\n                        'content-type': 'text/event-stream; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        // if there us no token supplied, exclusively use the \"distinct connection mode\"\n        if (typeof token !== 'string') {\n            return [null, { status: 404, statusText: 'Not Found' }];\n        }\n        // method PUT prepares a stream for future incoming connections\n        if (req.method === 'PUT') {\n            if (!['*/*', 'text/plain'].includes(accept)) {\n                return [null, { status: 406, statusText: 'Not Acceptable' }];\n            }\n            // streams mustnt exist if putting new one\n            if (stream) {\n                return [\n                    JSON.stringify({\n                        errors: [{ message: 'Stream already registered' }],\n                    }),\n                    {\n                        status: 409,\n                        statusText: 'Conflict',\n                        headers: {\n                            'content-type': 'application/json; charset=utf-8',\n                        },\n                    },\n                ];\n            }\n            streams[token] = createStream(token);\n            return [\n                token,\n                {\n                    status: 201,\n                    statusText: 'Created',\n                    headers: {\n                        'content-type': 'text/plain; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        else if (req.method === 'DELETE') {\n            // method DELETE completes an existing operation streaming in streams\n            // streams must exist when completing operations\n            if (!stream) {\n                return [\n                    JSON.stringify({\n                        errors: [{ message: 'Stream not found' }],\n                    }),\n                    {\n                        status: 404,\n                        statusText: 'Not Found',\n                        headers: {\n                            'content-type': 'application/json; charset=utf-8',\n                        },\n                    },\n                ];\n            }\n            const opId = new URL((_a = req.url) !== null && _a !== void 0 ? _a : '', 'http://localhost/').searchParams.get('operationId');\n            if (!opId) {\n                return [\n                    JSON.stringify({\n                        errors: [{ message: 'Operation ID is missing' }],\n                    }),\n                    {\n                        status: 400,\n                        statusText: 'Bad Request',\n                        headers: {\n                            'content-type': 'application/json; charset=utf-8',\n                        },\n                    },\n                ];\n            }\n            const op = stream.ops[opId];\n            if (isAsyncGenerator(op))\n                op.return(undefined);\n            delete stream.ops[opId]; // deleting the operation means no further activity should take place\n            return [\n                null,\n                {\n                    status: 200,\n                    statusText: 'OK',\n                },\n            ];\n        }\n        else if (req.method !== 'GET' && req.method !== 'POST') {\n            // only POSTs and GETs are accepted at this point\n            return [\n                null,\n                {\n                    status: 405,\n                    statusText: 'Method Not Allowed',\n                    headers: {\n                        allow: 'GET, POST, PUT, DELETE',\n                    },\n                },\n            ];\n        }\n        else if (!stream) {\n            // for all other requests, streams must exist to attach the result onto\n            return [\n                JSON.stringify({\n                    errors: [{ message: 'Stream not found' }],\n                }),\n                {\n                    status: 404,\n                    statusText: 'Not Found',\n                    headers: {\n                        'content-type': 'application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        if (!['*/*', 'application/*', 'application/json'].includes(accept)) {\n            return [\n                null,\n                {\n                    status: 406,\n                    statusText: 'Not Acceptable',\n                },\n            ];\n        }\n        const paramsOrResponse = await parseReq(req);\n        if (isResponse(paramsOrResponse))\n            return paramsOrResponse;\n        const params = paramsOrResponse;\n        const opId = String((_c = (_b = params.extensions) === null || _b === void 0 ? void 0 : _b.operationId) !== null && _c !== void 0 ? _c : '');\n        if (!opId) {\n            return [\n                JSON.stringify({\n                    errors: [{ message: 'Operation ID is missing' }],\n                }),\n                {\n                    status: 400,\n                    statusText: 'Bad Request',\n                    headers: {\n                        'content-type': 'application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        if (opId in stream.ops) {\n            return [\n                JSON.stringify({\n                    errors: [{ message: 'Operation with ID already exists' }],\n                }),\n                {\n                    status: 409,\n                    statusText: 'Conflict',\n                    headers: {\n                        'content-type': 'application/json; charset=utf-8',\n                    },\n                },\n            ];\n        }\n        // reserve space for the operation through ID\n        stream.ops[opId] = null;\n        const prepared = await prepare(req, params);\n        if (isResponse(prepared))\n            return prepared;\n        // operation might have completed before prepared\n        if (!(opId in stream.ops)) {\n            return [\n                null,\n                {\n                    status: 204,\n                    statusText: 'No Content',\n                },\n            ];\n        }\n        const result = await prepared.perform();\n        // operation might have completed before performed\n        if (!(opId in stream.ops)) {\n            if (isAsyncGenerator(result))\n                result.return(undefined);\n            if (!(opId in stream.ops)) {\n                return [\n                    null,\n                    {\n                        status: 204,\n                        statusText: 'No Content',\n                    },\n                ];\n            }\n        }\n        if (isAsyncIterable(result))\n            stream.ops[opId] = result;\n        // streaming to an empty reservation is ok (will be flushed on connect)\n        stream.from(prepared.ctx, req, result, opId);\n        return [null, { status: 202, statusText: 'Accepted' }];\n    };\n}\nasync function parseReq(req) {\n    var _a, _b, _c;\n    const params = {};\n    try {\n        switch (true) {\n            case req.method === 'GET': {\n                try {\n                    const [, search] = req.url.split('?');\n                    const searchParams = new URLSearchParams(search);\n                    params.operationName = (_a = searchParams.get('operationName')) !== null && _a !== void 0 ? _a : undefined;\n                    params.query = (_b = searchParams.get('query')) !== null && _b !== void 0 ? _b : undefined;\n                    const variables = searchParams.get('variables');\n                    if (variables)\n                        params.variables = JSON.parse(variables);\n                    const extensions = searchParams.get('extensions');\n                    if (extensions)\n                        params.extensions = JSON.parse(extensions);\n                }\n                catch {\n                    throw new Error('Unparsable URL');\n                }\n                break;\n            }\n            case req.method === 'POST' &&\n                ((_c = req.headers.get('content-type')) === null || _c === void 0 ? void 0 : _c.includes('application/json')):\n                {\n                    if (!req.body) {\n                        throw new Error('Missing body');\n                    }\n                    const body = typeof req.body === 'function' ? await req.body() : req.body;\n                    const data = typeof body === 'string' ? JSON.parse(body) : body;\n                    if (!isObject(data)) {\n                        throw new Error('JSON body must be an object');\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Any is ok because values will be chacked below.\n                    params.operationName = data.operationName;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Any is ok because values will be chacked below.\n                    params.query = data.query;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Any is ok because values will be chacked below.\n                    params.variables = data.variables;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Any is ok because values will be chacked below.\n                    params.extensions = data.extensions;\n                    break;\n                }\n            default:\n                return [\n                    null,\n                    {\n                        status: 415,\n                        statusText: 'Unsupported Media Type',\n                    },\n                ];\n        }\n        if (params.query == null)\n            throw new Error('Missing query');\n        if (typeof params.query !== 'string')\n            throw new Error('Invalid query');\n        if (params.variables != null &&\n            (typeof params.variables !== 'object' || Array.isArray(params.variables))) {\n            throw new Error('Invalid variables');\n        }\n        if (params.extensions != null &&\n            (typeof params.extensions !== 'object' ||\n                Array.isArray(params.extensions))) {\n            throw new Error('Invalid extensions');\n        }\n        // request parameters are checked and now complete\n        return params;\n    }\n    catch (err) {\n        return [\n            JSON.stringify({\n                errors: [\n                    err instanceof Error\n                        ? {\n                            message: err.message,\n                            // TODO: stack might leak sensitive information\n                            // stack: err.stack,\n                        }\n                        : err,\n                ],\n            }),\n            {\n                status: 400,\n                statusText: 'Bad Request',\n                headers: { 'content-type': 'application/json; charset=utf-8' },\n            },\n        ];\n    }\n}\nfunction isResponse(val) {\n    // TODO: comprehensive check\n    return Array.isArray(val);\n}\nexport function isExecutionResult(val) {\n    return (isObject(val) &&\n        ('data' in val || ('data' in val && val.data == null && 'errors' in val)));\n}\n", "/**\n *\n * client\n *\n */\nimport { createParser } from './parser.mjs';\nimport { isObject } from './utils.mjs';\nimport { TOKEN_HEADER_KEY, } from './common.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over SSE client to transmit\n * GraphQL operation results.\n *\n * If you have an HTTP/2 server, it is recommended to use the client\n * in \"distinct connections mode\" (`singleConnection = false`) which will\n * create a new SSE connection for each subscribe. This is the default.\n *\n * However, when dealing with HTTP/1 servers from a browser, consider using\n * the \"single connection mode\" (`singleConnection = true`) which will\n * use only one SSE connection.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { singleConnection = false, lazy = true, lazyCloseTimeout = 0, onNonLazyError = console.error, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, retryAttempts = 5, retry = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, credentials = 'same-origin', referrer, referrerPolicy, onMessage, on: clientOn, } = options;\n    const fetchFn = (options.fetchFn || fetch);\n    const AbortControllerImpl = (options.abortControllerImpl ||\n        AbortController);\n    // we dont use yet another AbortController here because of\n    // node's max EventEmitters listeners being only 10\n    const client = (() => {\n        let disposed = false;\n        const listeners = [];\n        return {\n            get disposed() {\n                return disposed;\n            },\n            onDispose(cb) {\n                if (disposed) {\n                    // empty the call stack and then call the cb\n                    setTimeout(() => cb(), 0);\n                    return () => {\n                        // noop\n                    };\n                }\n                listeners.push(cb);\n                return () => {\n                    listeners.splice(listeners.indexOf(cb), 1);\n                };\n            },\n            dispose() {\n                if (disposed)\n                    return;\n                disposed = true;\n                // we copy the listeners so that onDispose unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners]) {\n                    listener();\n                }\n            },\n        };\n    })();\n    let connCtrl, conn, locks = 0, retryingErr = null, retries = 0;\n    async function getOrConnect() {\n        try {\n            if (client.disposed)\n                throw new Error('Client has been disposed');\n            return await (conn !== null && conn !== void 0 ? conn : (conn = (async () => {\n                var _a, _b, _c;\n                if (retryingErr) {\n                    await retry(retries);\n                    // connection might've been aborted while waiting for retry\n                    if (connCtrl.signal.aborted)\n                        throw new Error('Connection aborted by the client');\n                    retries++;\n                }\n                (_a = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connecting) === null || _a === void 0 ? void 0 : _a.call(clientOn, !!retryingErr);\n                // we must create a new controller here because lazy mode aborts currently active ones\n                connCtrl = new AbortControllerImpl();\n                const unlistenDispose = client.onDispose(() => connCtrl.abort());\n                connCtrl.signal.addEventListener('abort', () => {\n                    unlistenDispose();\n                    conn = undefined;\n                });\n                const url = typeof options.url === 'function'\n                    ? await options.url()\n                    : options.url;\n                if (connCtrl.signal.aborted)\n                    throw new Error('Connection aborted by the client');\n                const headers = typeof options.headers === 'function'\n                    ? await options.headers()\n                    : (_b = options.headers) !== null && _b !== void 0 ? _b : {};\n                if (connCtrl.signal.aborted)\n                    throw new Error('Connection aborted by the client');\n                let res;\n                try {\n                    res = await fetchFn(url, {\n                        signal: connCtrl.signal,\n                        method: 'PUT',\n                        credentials,\n                        referrer,\n                        referrerPolicy,\n                        headers,\n                    });\n                }\n                catch (err) {\n                    throw new NetworkError(err);\n                }\n                if (res.status !== 201)\n                    throw new NetworkError(res);\n                const token = await res.text();\n                headers[TOKEN_HEADER_KEY] = token;\n                const connected = await connect({\n                    signal: connCtrl.signal,\n                    headers,\n                    credentials,\n                    referrer,\n                    referrerPolicy,\n                    url,\n                    fetchFn,\n                    onMessage: (msg) => {\n                        var _a;\n                        (_a = clientOn === null || clientOn === void 0 ? void 0 : clientOn.message) === null || _a === void 0 ? void 0 : _a.call(clientOn, msg);\n                        onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg); // @deprecated\n                    },\n                });\n                (_c = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connected) === null || _c === void 0 ? void 0 : _c.call(clientOn, !!retryingErr);\n                connected.waitForThrow().catch(() => (conn = undefined));\n                return connected;\n            })()));\n        }\n        catch (err) {\n            // whatever problem happens during connect means the connection was not established\n            conn = undefined;\n            throw err;\n        }\n    }\n    // non-lazy mode always holds one lock to persist the connection\n    if (singleConnection && !lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const { waitForThrow } = await getOrConnect();\n                    await waitForThrow();\n                }\n                catch (err) {\n                    if (client.disposed)\n                        return;\n                    // all non-network errors are worth reporting immediately\n                    if (!(err instanceof NetworkError))\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(err);\n                    // was a network error, get rid of the current connection to ensure retries\n                    conn = undefined;\n                    // retries are not allowed or we tried to many times, report error\n                    if (!retryAttempts || retries >= retryAttempts)\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(err);\n                    // try again\n                    retryingErr = err;\n                }\n            }\n        })();\n    }\n    function subscribe(request, sink, on) {\n        if (!singleConnection) {\n            // distinct connections mode\n            const control = new AbortControllerImpl();\n            const unlisten = client.onDispose(() => {\n                unlisten();\n                control.abort();\n            });\n            (async () => {\n                var _a, _b, _c, _d, _e;\n                let retryingErr = null, retries = 0;\n                for (;;) {\n                    try {\n                        if (retryingErr) {\n                            await retry(retries);\n                            // connection might've been aborted while waiting for retry\n                            if (control.signal.aborted)\n                                throw new Error('Connection aborted by the client');\n                            retries++;\n                        }\n                        (_a = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connecting) === null || _a === void 0 ? void 0 : _a.call(clientOn, !!retryingErr);\n                        (_b = on === null || on === void 0 ? void 0 : on.connecting) === null || _b === void 0 ? void 0 : _b.call(on, !!retryingErr);\n                        const url = typeof options.url === 'function'\n                            ? await options.url()\n                            : options.url;\n                        if (control.signal.aborted)\n                            throw new Error('Connection aborted by the client');\n                        const headers = typeof options.headers === 'function'\n                            ? await options.headers()\n                            : (_c = options.headers) !== null && _c !== void 0 ? _c : {};\n                        if (control.signal.aborted)\n                            throw new Error('Connection aborted by the client');\n                        const { getResults } = await connect({\n                            signal: control.signal,\n                            headers: {\n                                ...headers,\n                                'content-type': 'application/json; charset=utf-8',\n                            },\n                            credentials,\n                            referrer,\n                            referrerPolicy,\n                            url,\n                            body: JSON.stringify(request),\n                            fetchFn,\n                            onMessage: (msg) => {\n                                var _a, _b;\n                                (_a = clientOn === null || clientOn === void 0 ? void 0 : clientOn.message) === null || _a === void 0 ? void 0 : _a.call(clientOn, msg);\n                                (_b = on === null || on === void 0 ? void 0 : on.message) === null || _b === void 0 ? void 0 : _b.call(on, msg);\n                                onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg); // @deprecated\n                            },\n                        });\n                        (_d = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connected) === null || _d === void 0 ? void 0 : _d.call(clientOn, !!retryingErr);\n                        (_e = on === null || on === void 0 ? void 0 : on.connected) === null || _e === void 0 ? void 0 : _e.call(on, !!retryingErr);\n                        for await (const result of getResults()) {\n                            // only after receiving results are future connects not considered retries.\n                            // this is because a client might successfully connect, but the server\n                            // ends up terminating the connection afterwards before streaming anything.\n                            // of course, if the client completes the subscription, this loop will\n                            // break and therefore stop the stream (it wont reconnect)\n                            retryingErr = null;\n                            retries = 0;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            sink.next(result);\n                        }\n                        return control.abort();\n                    }\n                    catch (err) {\n                        if (control.signal.aborted)\n                            return;\n                        // all non-network errors are worth reporting immediately\n                        if (!(err instanceof NetworkError))\n                            throw err;\n                        // retries are not allowed or we tried to many times, report error\n                        if (!retryAttempts || retries >= retryAttempts)\n                            throw err;\n                        // try again\n                        retryingErr = err;\n                    }\n                }\n            })()\n                .then(() => sink.complete())\n                .catch((err) => sink.error(err));\n            return () => control.abort();\n        }\n        // single connection mode\n        locks++;\n        const control = new AbortControllerImpl();\n        const unlisten = client.onDispose(() => {\n            unlisten();\n            control.abort();\n        });\n        (async () => {\n            const operationId = generateID();\n            request = {\n                ...request,\n                extensions: { ...request.extensions, operationId },\n            };\n            let complete = null;\n            for (;;) {\n                complete = null;\n                try {\n                    const { url, headers, getResults } = await getOrConnect();\n                    let res;\n                    try {\n                        res = await fetchFn(url, {\n                            signal: control.signal,\n                            method: 'POST',\n                            credentials,\n                            referrer,\n                            referrerPolicy,\n                            headers: {\n                                ...headers,\n                                'content-type': 'application/json; charset=utf-8',\n                            },\n                            body: JSON.stringify(request),\n                        });\n                    }\n                    catch (err) {\n                        throw new NetworkError(err);\n                    }\n                    if (res.status !== 202)\n                        throw new NetworkError(res);\n                    complete = async () => {\n                        let res;\n                        try {\n                            const control = new AbortControllerImpl();\n                            const unlisten = client.onDispose(() => {\n                                unlisten();\n                                control.abort();\n                            });\n                            res = await fetchFn(url + '?operationId=' + operationId, {\n                                signal: control.signal,\n                                method: 'DELETE',\n                                credentials,\n                                referrer,\n                                referrerPolicy,\n                                headers,\n                            });\n                        }\n                        catch (err) {\n                            throw new NetworkError(err);\n                        }\n                        if (res.status !== 200)\n                            throw new NetworkError(res);\n                    };\n                    for await (const result of getResults({\n                        signal: control.signal,\n                        operationId,\n                    })) {\n                        // only after receiving results are future connects not considered retries.\n                        // this is because a client might successfully connect, but the server\n                        // ends up terminating the connection afterwards before streaming anything.\n                        // of course, if the client completes the subscription, this loop will\n                        // break and therefore stop the stream (it wont reconnect)\n                        retryingErr = null;\n                        retries = 0;\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        sink.next(result);\n                    }\n                    complete = null; // completed by the server\n                    return control.abort();\n                }\n                catch (err) {\n                    if (control.signal.aborted)\n                        return await (complete === null || complete === void 0 ? void 0 : complete());\n                    // all non-network errors are worth reporting immediately\n                    if (!(err instanceof NetworkError)) {\n                        control.abort(); // TODO: tests for making sure the control's aborted\n                        throw err;\n                    }\n                    // was a network error, get rid of the current connection to ensure retries\n                    // but only if the client is running in lazy mode (otherwise the non-lazy lock will get rid of the connection)\n                    if (lazy) {\n                        conn = undefined;\n                    }\n                    // retries are not allowed or we tried to many times, report error\n                    if (!retryAttempts || retries >= retryAttempts) {\n                        control.abort(); // TODO: tests for making sure the control's aborted\n                        throw err;\n                    }\n                    // try again\n                    retryingErr = err;\n                }\n                finally {\n                    // release lock if subscription is aborted\n                    if (control.signal.aborted && --locks === 0) {\n                        if (isFinite(lazyCloseTimeout) && lazyCloseTimeout > 0) {\n                            // allow for the specified calmdown time and then close the\n                            // connection, only if no lock got created in the meantime and\n                            // if the connection is still open\n                            setTimeout(() => {\n                                if (!locks)\n                                    connCtrl.abort();\n                            }, lazyCloseTimeout);\n                        }\n                        else {\n                            // otherwise close immediately\n                            connCtrl.abort();\n                        }\n                    }\n                }\n            }\n        })()\n            .then(() => sink.complete())\n            .catch((err) => sink.error(err));\n        return () => control.abort();\n    }\n    return {\n        subscribe,\n        iterate(request, on) {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            const dispose = subscribe(request, {\n                next(val) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    pending.push(val);\n                    deferred.resolve();\n                },\n                error(err) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                },\n                complete() {\n                    deferred.done = true;\n                    deferred.resolve();\n                },\n            }, on);\n            const iterator = (async function* iterator() {\n                for (;;) {\n                    if (!pending.length) {\n                        // only wait if there are no pending messages available\n                        await new Promise((resolve) => (deferred.resolve = resolve));\n                    }\n                    // first flush\n                    while (pending.length) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        yield pending.shift();\n                    }\n                    // then error\n                    if (deferred.error) {\n                        throw deferred.error;\n                    }\n                    // or complete\n                    if (deferred.done) {\n                        return;\n                    }\n                }\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                dispose();\n                return { done: true, value: undefined };\n            };\n            return iterator;\n        },\n        dispose() {\n            client.dispose();\n        },\n    };\n}\n/**\n * A network error caused by the client or an unexpected response from the server.\n *\n * Network errors are considered retryable, all others error types will be reported\n * immediately.\n *\n * To avoid bundling DOM typings (because the client can run in Node env too),\n * you should supply the `Response` generic depending on your Fetch implementation.\n *\n * @category Client\n */\nexport class NetworkError extends Error {\n    constructor(msgOrErrOrResponse) {\n        let message, response;\n        if (isResponseLike(msgOrErrOrResponse)) {\n            response = msgOrErrOrResponse;\n            message =\n                'Server responded with ' +\n                    msgOrErrOrResponse.status +\n                    ': ' +\n                    msgOrErrOrResponse.statusText;\n        }\n        else if (msgOrErrOrResponse instanceof Error)\n            message = msgOrErrOrResponse.message;\n        else\n            message = String(msgOrErrOrResponse);\n        super(message);\n        this.name = this.constructor.name;\n        this.response = response;\n    }\n}\nfunction isResponseLike(val) {\n    return (isObject(val) &&\n        typeof val['ok'] === 'boolean' &&\n        typeof val['status'] === 'number' &&\n        typeof val['statusText'] === 'string');\n}\nasync function connect(options) {\n    const { signal, url, credentials, headers, body, referrer, referrerPolicy, fetchFn, onMessage, } = options;\n    const waiting = {};\n    const queue = {};\n    let res;\n    try {\n        res = await fetchFn(url, {\n            signal,\n            method: body ? 'POST' : 'GET',\n            credentials,\n            referrer,\n            referrerPolicy,\n            headers: {\n                ...headers,\n                accept: 'text/event-stream',\n            },\n            body,\n        });\n    }\n    catch (err) {\n        throw new NetworkError(err);\n    }\n    if (!res.ok)\n        throw new NetworkError(res);\n    if (!res.body)\n        throw new Error('Missing response body');\n    let error = null;\n    let waitingForThrow;\n    (async () => {\n        var _a;\n        try {\n            const parse = createParser();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            for await (const chunk of toAsyncIterator(res.body)) {\n                if (typeof chunk === 'string')\n                    throw (error = new Error(`Unexpected string chunk \"${chunk}\"`)); // set error as fatal indicator\n                // read chunk and if messages are ready, yield them\n                let msgs;\n                try {\n                    msgs = parse(chunk);\n                }\n                catch (err) {\n                    throw (error = err); // set error as fatal indicator\n                }\n                if (!msgs)\n                    continue;\n                for (const msg of msgs) {\n                    try {\n                        onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg);\n                    }\n                    catch (err) {\n                        throw (error = err); // set error as fatal indicator\n                    }\n                    const operationId = msg.data && 'id' in msg.data\n                        ? msg.data.id // StreamDataForID\n                        : ''; // StreamData\n                    if (!(operationId in queue))\n                        queue[operationId] = [];\n                    switch (msg.event) {\n                        case 'next':\n                            if (operationId)\n                                queue[operationId].push(msg.data.payload);\n                            else\n                                queue[operationId].push(msg.data);\n                            break;\n                        case 'complete':\n                            queue[operationId].push('complete');\n                            break;\n                        default:\n                            throw (error = new Error(`Unexpected message event \"${msg.event}\"`)); // set error as fatal indicator\n                    }\n                    (_a = waiting[operationId]) === null || _a === void 0 ? void 0 : _a.proceed();\n                }\n            }\n            // some browsers (like Safari) closes the connection without errors even on abrupt server shutdowns,\n            // we therefore make sure that no stream is active and waiting for results (not completed)\n            if (Object.keys(waiting).length) {\n                throw new Error('Connection closed while having active streams');\n            }\n        }\n        catch (err) {\n            if (!error && Object.keys(waiting).length) {\n                // we assume the error is most likely a NetworkError because there are listeners waiting for events.\n                // additionally, the `error` is another indicator because we set it early if the error is considered fatal\n                error = new NetworkError(err);\n            }\n            else {\n                error = err;\n            }\n            waitingForThrow === null || waitingForThrow === void 0 ? void 0 : waitingForThrow(error);\n        }\n        finally {\n            Object.values(waiting).forEach(({ proceed }) => proceed());\n        }\n    })();\n    return {\n        url,\n        headers,\n        waitForThrow: () => new Promise((_, reject) => {\n            if (error)\n                return reject(error);\n            waitingForThrow = reject;\n        }),\n        async *getResults(options) {\n            var _a;\n            const { signal, operationId = '' } = options !== null && options !== void 0 ? options : {};\n            // operationId === '' ? StreamData : StreamDataForID\n            try {\n                for (;;) {\n                    while ((_a = queue[operationId]) === null || _a === void 0 ? void 0 : _a.length) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        const result = queue[operationId].shift();\n                        if (result === 'complete')\n                            return;\n                        yield result;\n                    }\n                    if (error)\n                        throw error;\n                    if (signal === null || signal === void 0 ? void 0 : signal.aborted)\n                        throw new Error('Getting results aborted by the client');\n                    await new Promise((resolve) => {\n                        const proceed = () => {\n                            signal === null || signal === void 0 ? void 0 : signal.removeEventListener('abort', proceed);\n                            delete waiting[operationId];\n                            resolve();\n                        };\n                        signal === null || signal === void 0 ? void 0 : signal.addEventListener('abort', proceed);\n                        waiting[operationId] = { proceed };\n                    });\n                }\n            }\n            finally {\n                delete queue[operationId];\n            }\n        },\n    };\n}\n/** Isomorphic ReadableStream to AsyncIterator converter. */\nfunction toAsyncIterator(val) {\n    // node stream is already async iterable\n    if (typeof Object(val)[Symbol.asyncIterator] === 'function') {\n        val = val;\n        return val[Symbol.asyncIterator]();\n    }\n    // convert web stream to async iterable\n    return (async function* () {\n        const reader = val.getReader();\n        let result;\n        do {\n            result = await reader.read();\n            if (result.value !== undefined)\n                yield result.value;\n        } while (!result.done);\n    })();\n}\n", "/**\n *\n * parser\n *\n */\nimport { validateStreamEvent, parseStreamData, } from './common.mjs';\nvar ControlChars;\n(function (ControlChars) {\n    ControlChars[ControlChars[\"NewLine\"] = 10] = \"NewLine\";\n    ControlChars[ControlChars[\"CchunkiageReturn\"] = 13] = \"CchunkiageReturn\";\n    ControlChars[ControlChars[\"Space\"] = 32] = \"Space\";\n    ControlChars[ControlChars[\"Colon\"] = 58] = \"Colon\";\n})(ControlChars || (ControlChars = {}));\n/**\n * HTTP response chunk parser for graphql-sse's event stream messages.\n *\n * Reference: https://github.com/Azure/fetch-event-source/blob/main/src/parse.ts\n *\n * @private\n */\nexport function createParser() {\n    let buffer;\n    let position; // current read position\n    let fieldLength; // length of the `field` portion of the line\n    let discardTrailingNewline = false;\n    let message = { event: '', data: '' };\n    let pending = [];\n    const decoder = new TextDecoder();\n    return function parse(chunk) {\n        if (buffer === undefined) {\n            buffer = chunk;\n            position = 0;\n            fieldLength = -1;\n        }\n        else {\n            const concat = new Uint8Array(buffer.length + chunk.length);\n            concat.set(buffer);\n            concat.set(chunk, buffer.length);\n            buffer = concat;\n        }\n        const bufLength = buffer.length;\n        let lineStart = 0; // index where the current line starts\n        while (position < bufLength) {\n            if (discardTrailingNewline) {\n                if (buffer[position] === ControlChars.NewLine) {\n                    lineStart = ++position; // skip to next char\n                }\n                discardTrailingNewline = false;\n            }\n            // look forward until the end of line\n            let lineEnd = -1; // index of the \\r or \\n char\n            for (; position < bufLength && lineEnd === -1; ++position) {\n                switch (buffer[position]) {\n                    case ControlChars.Colon:\n                        if (fieldLength === -1) {\n                            // first colon in line\n                            fieldLength = position - lineStart;\n                        }\n                        break;\n                    // \\r case below should fallthrough to \\n:\n                    case ControlChars.CchunkiageReturn:\n                        discardTrailingNewline = true;\n                    // eslint-disable-next-line no-fallthrough\n                    case ControlChars.NewLine:\n                        lineEnd = position;\n                        break;\n                }\n            }\n            if (lineEnd === -1) {\n                // end of the buffer but the line hasn't ended\n                break;\n            }\n            else if (lineStart === lineEnd) {\n                // empty line denotes end of incoming message\n                if (message.event || message.data) {\n                    // NOT a server ping (\":\\n\\n\")\n                    if (!message.event)\n                        throw new Error('Missing message event');\n                    const event = validateStreamEvent(message.event);\n                    const data = parseStreamData(event, message.data);\n                    pending.push({\n                        event,\n                        data,\n                    });\n                    message = { event: '', data: '' };\n                }\n            }\n            else if (fieldLength > 0) {\n                // end of line indicates message\n                const line = buffer.subarray(lineStart, lineEnd);\n                // exclude comments and lines with no values\n                // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n                // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n                const field = decoder.decode(line.subarray(0, fieldLength));\n                const valueOffset = fieldLength + (line[fieldLength + 1] === ControlChars.Space ? 2 : 1);\n                const value = decoder.decode(line.subarray(valueOffset));\n                switch (field) {\n                    case 'event':\n                        message.event = value;\n                        break;\n                    case 'data':\n                        // append the new value if the message has data\n                        message.data = message.data ? message.data + '\\n' + value : value;\n                        break;\n                }\n            }\n            // next line\n            lineStart = position;\n            fieldLength = -1;\n        }\n        if (lineStart === bufLength) {\n            // finished reading\n            buffer = undefined;\n            const messages = [...pending];\n            pending = [];\n            return messages;\n        }\n        else if (lineStart !== 0) {\n            // create a new view into buffer beginning at lineStart so we don't\n            // need to copy over the previous lines when we get the new chunk\n            buffer = buffer.subarray(lineStart);\n            position -= lineStart;\n        }\n    };\n}\n", "import { useApolloClient } from \"@apollo/client/react/hooks/hooks.cjs\";\nconst useCache = () => {\n  const client = useApolloClient();\n  const cache = client.cache;\n  const extract = (optimistic = false) => cache.extract(optimistic);\n  const identify = (object) => {\n    return { id: cache.identify(object) };\n  };\n  const modify = (object, fields) => {\n    return cache.modify({ ...identify(object), fields });\n  };\n  const evict = (object) => {\n    return cache.evict(identify(object));\n  };\n  const resetStore = () => {\n    return client.resetStore();\n  };\n  const clearStore = () => {\n    return client.clearStore();\n  };\n  return { cache, evict, extract, identify, modify, resetStore, clearStore };\n};\nexport {\n  useCache\n};\n"],
  "mappings": "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",
  "names": ["import_dist", "import_core", "import_hooks", "import_utilities", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "value", "path", "import_dist", "import_dist", "import_dist", "print", "headers", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "ControlChars", "parse", "retries", "_a", "subscribe", "control", "unlisten", "retryingErr", "_b", "res", "iterator", "parse", "options", "signal", "import_dist", "SSELink", "isSubscription", "isLiveQuery", "apolloSetLogVerbosity", "React"]
}
