import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  useNoAuth
} from "./chunk-LKKP6PRA.js";
import {
  init_client,
  require_cache,
  require_utilities,
  useFragment
} from "./chunk-3TST5VV5.js";
import {
  require_react
} from "./chunk-52LGRYSO.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-QGZREBOA.js";

// ../node_modules/@redwoodjs/web/dist/components/FetchConfigProvider.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
var import_react = __toESM(require_react(), 1);
var getApiGraphQLUrl = () => {
  return globalThis.RWJS_API_GRAPHQL_URL;
};
var FetchConfigContext = import_react.default.createContext({
  uri: getApiGraphQLUrl()
});
var FetchConfigProvider = ({
  useAuth = useNoAuth,
  ...rest
}) => {
  const { isAuthenticated, type } = useAuth();
  if (!isAuthenticated) {
    return import_react.default.createElement(
      FetchConfigContext.Provider,
      {
        value: { uri: getApiGraphQLUrl() },
        ...rest
      }
    );
  }
  const headers = {
    "auth-provider": type
  };
  return import_react.default.createElement(
    FetchConfigContext.Provider,
    {
      value: {
        uri: getApiGraphQLUrl(),
        headers
      },
      ...rest
    }
  );
};
var useFetchConfig = () => import_react.default.useContext(FetchConfigContext);

// ../node_modules/@redwoodjs/web/dist/components/GraphQLHooksProvider.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
var import_react2 = __toESM(require_react(), 1);
var GraphQLHooksContext = import_react2.default.createContext({
  useQuery: () => {
    throw new Error(
      "You must register a useQuery hook via the `GraphQLHooksProvider`"
    );
  },
  useMutation: () => {
    throw new Error(
      "You must register a useMutation hook via the `GraphQLHooksProvider`"
    );
  },
  useSubscription: () => {
    throw new Error(
      "You must register a useSubscription hook via the `GraphQLHooksProvider`"
    );
  },
  useSuspenseQuery: () => {
    throw new Error(
      "You must register a useSuspenseQuery hook via the `GraphQLHooksProvider`."
    );
  },
  //  These are apollo specific hooks!
  useBackgroundQuery: () => {
    throw new Error(
      "You must register a useBackgroundQuery hook via the `GraphQLHooksProvider`."
    );
  },
  useReadQuery: () => {
    throw new Error(
      "You must register a useReadQuery hook via the `GraphQLHooksProvider`."
    );
  }
});
var GraphQLHooksProvider = ({
  useQuery: useQuery2,
  useMutation: useMutation2,
  useSubscription: useSubscription2,
  useSuspenseQuery: useSuspenseQuery2,
  useBackgroundQuery: useBackgroundQuery2,
  useReadQuery: useReadQuery2,
  children
}) => {
  return import_react2.default.createElement(
    GraphQLHooksContext.Provider,
    {
      value: {
        useQuery: useQuery2,
        useMutation: useMutation2,
        useSubscription: useSubscription2,
        useSuspenseQuery: useSuspenseQuery2,
        useBackgroundQuery: useBackgroundQuery2,
        useReadQuery: useReadQuery2
      }
    },
    children
  );
};
function useQuery(query, options) {
  return import_react2.default.useContext(GraphQLHooksContext).useQuery(
    query,
    options
  );
}
function useMutation(mutation, options) {
  return import_react2.default.useContext(GraphQLHooksContext).useMutation(
    mutation,
    options
  );
}
function useSubscription(query, options) {
  return import_react2.default.useContext(GraphQLHooksContext).useSubscription(query, options);
}
var useBackgroundQuery = (...args) => {
  return import_react2.default.useContext(GraphQLHooksContext).useBackgroundQuery(
    ...args
  );
};
var useReadQuery = (...args) => {
  return import_react2.default.useContext(GraphQLHooksContext).useReadQuery(...args);
};

// ../node_modules/@redwoodjs/web/dist/apollo/fragmentRegistry.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);
init_client();
var import_cache = __toESM(require_cache(), 1);
var import_utilities = __toESM(require_utilities(), 1);
var getTypenameFromFragment = (fragment) => {
  const [definition] = (0, import_utilities.getFragmentDefinitions)(fragment);
  return definition.typeCondition.name.value;
};
var useRegisteredFragmentHook = (fragment, id) => {
  const from = { __typename: getTypenameFromFragment(fragment), id };
  return useFragment({
    fragment,
    from
  });
};
var fragmentRegistry = (0, import_cache.createFragmentRegistry)();
var registerFragments = (fragments) => {
  return fragments.map(registerFragment);
};
var registerFragment = (fragment) => {
  fragmentRegistry.register(fragment);
  const typename = getTypenameFromFragment(fragment);
  const getCacheKey = (id) => {
    return { __typename: typename, id };
  };
  const useRegisteredFragment = (id) => {
    return useRegisteredFragmentHook(fragment, id);
  };
  return {
    fragment,
    typename,
    getCacheKey,
    useRegisteredFragment
  };
};

export {
  FetchConfigProvider,
  useFetchConfig,
  GraphQLHooksProvider,
  useQuery,
  useMutation,
  useSubscription,
  useBackgroundQuery,
  useReadQuery,
  fragmentRegistry,
  registerFragments,
  registerFragment
};
//# sourceMappingURL=chunk-7CKJ3ULP.js.map
