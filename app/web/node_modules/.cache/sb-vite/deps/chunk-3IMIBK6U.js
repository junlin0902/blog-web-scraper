import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  fragmentRegistry,
  useBackgroundQuery,
  useQuery,
  useReadQuery
} from "./chunk-7CKJ3ULP.js";
import {
  index_esm_exports,
  init_index_esm
} from "./chunk-FOZITCPI.js";
import {
  Kind,
  init_graphql,
  require_hooks
} from "./chunk-3TST5VV5.js";
import {
  require_react_dom
} from "./chunk-X5AO4J6U.js";
import {
  require_react
} from "./chunk-52LGRYSO.js";
import {
  __publicField,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-QGZREBOA.js";

// ../node_modules/@redwoodjs/web/dist/index.js
var import_dist49 = __toESM(require_dist());
var import_dist50 = __toESM(require_dist2());
var import_dist51 = __toESM(require_dist3());

// ../node_modules/@redwoodjs/web/dist/global.web-auto-imports.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);

// ../node_modules/@redwoodjs/web/dist/config.js
var import_dist4 = __toESM(require_dist(), 1);
var import_dist5 = __toESM(require_dist2(), 1);
var import_dist6 = __toESM(require_dist3(), 1);
globalThis.RWJS_API_GRAPHQL_URL = RWJS_ENV.RWJS_API_GRAPHQL_URL;
globalThis.RWJS_API_URL = RWJS_ENV.RWJS_API_URL;
globalThis.__REDWOOD__APP_TITLE = RWJS_ENV.__REDWOOD__APP_TITLE;
globalThis.RWJS_EXP_STREAMING_SSR = RWJS_ENV.RWJS_EXP_STREAMING_SSR;
globalThis.RWJS_EXP_RSC = RWJS_ENV.RWJS_EXP_RSC;

// ../node_modules/@redwoodjs/web/dist/components/FatalErrorBoundary.js
var import_dist7 = __toESM(require_dist(), 1);
var import_dist8 = __toESM(require_dist2(), 1);
var import_dist9 = __toESM(require_dist3(), 1);
var import_react = __toESM(require_react(), 1);
var InfallibleErrorBoundary = class extends import_react.default.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", { hasError: false });
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  render() {
    if (this.state.hasError) {
      return import_react.default.createElement("h1", null, "Something went wrong and we are unable to show this page.");
    }
    return this.props.children;
  }
};
var FatalErrorBoundary = class extends import_react.default.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", { hasError: false, error: void 0 });
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  render() {
    const { page: Page } = this.props;
    if (this.state.hasError) {
      return import_react.default.createElement(InfallibleErrorBoundary, null, import_react.default.createElement(Page, { error: this.state.error }));
    }
    return this.props.children;
  }
};

// ../node_modules/@redwoodjs/web/dist/components/cell/CellCacheContext.js
var import_dist10 = __toESM(require_dist(), 1);
var import_dist11 = __toESM(require_dist2(), 1);
var import_dist12 = __toESM(require_dist3(), 1);
var import_react2 = __toESM(require_react(), 1);
var CellCacheContext = (0, import_react2.createContext)(void 0);
var CellCacheContextProvider = ({ queryCache, children }) => {
  return import_react2.default.createElement(CellCacheContext.Provider, { value: { queryCache } }, children);
};
function useCellCacheContext() {
  const context = (0, import_react2.useContext)(CellCacheContext);
  if (!context) {
    throw new Error(
      "useCellCacheContext must be used within a CellCacheContextProvider"
    );
  }
  return context;
}

// ../node_modules/@redwoodjs/web/dist/components/cell/createCell.js
var import_dist25 = __toESM(require_dist(), 1);
var import_dist26 = __toESM(require_dist2(), 1);
var import_dist27 = __toESM(require_dist3(), 1);
var import_react5 = __toESM(require_react(), 1);

// ../node_modules/@redwoodjs/web/dist/graphql.js
var import_dist13 = __toESM(require_dist(), 1);
var import_dist14 = __toESM(require_dist2(), 1);
var import_dist15 = __toESM(require_dist3(), 1);
init_graphql();
function getOperationName(document2) {
  var _a;
  for (const definition of document2.definitions) {
    if (definition.kind === Kind.OPERATION_DEFINITION && ((_a = definition.name) == null ? void 0 : _a.value)) {
      return definition.name.value;
    }
  }
  return "";
}

// ../node_modules/@redwoodjs/web/dist/components/cell/createSuspendingCell.js
var import_dist22 = __toESM(require_dist(), 1);
var import_dist23 = __toESM(require_dist2(), 1);
var import_dist24 = __toESM(require_dist3(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_hooks = __toESM(require_hooks(), 1);

// ../node_modules/@redwoodjs/web/dist/components/cell/CellErrorBoundary.js
var import_dist16 = __toESM(require_dist(), 1);
var import_dist17 = __toESM(require_dist2(), 1);
var import_dist18 = __toESM(require_dist3(), 1);
var import_react3 = __toESM(require_react(), 1);
var CellErrorBoundary = class extends import_react3.default.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    console.log("Cell failure: ", {
      error,
      errorInfo
    });
  }
  render() {
    const { renderFallback } = this.props;
    if (this.state.hasError) {
      return renderFallback({
        error: this.state.error,
        resetErrorBoundary: () => {
          this.setState({ hasError: false, error: void 0 });
        }
      });
    }
    return this.props.children;
  }
};

// ../node_modules/@redwoodjs/web/dist/components/cell/isCellEmpty.js
var import_dist19 = __toESM(require_dist(), 1);
var import_dist20 = __toESM(require_dist2(), 1);
var import_dist21 = __toESM(require_dist3(), 1);
function isDataEmpty(data) {
  return !data || Object.values(data).every((fieldValue) => {
    return fieldValue === null || isFieldEmptyArray(fieldValue);
  });
}
function isFieldEmptyArray(field) {
  return Array.isArray(field) && field.length === 0;
}

// ../node_modules/@redwoodjs/web/dist/components/cell/createSuspendingCell.js
function createSuspendingCell(createCellProps) {
  const {
    QUERY,
    beforeQuery = (props) => ({
      // By default, we assume that the props are the gql-variables.
      variables: props,
      /**
       * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
       * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
       *
       * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
       */
      fetchPolicy: "cache-and-network",
      notifyOnNetworkStatusChange: true
    }),
    afterQuery = (data) => ({ ...data }),
    isEmpty = isDataEmpty,
    Loading,
    Failure,
    Empty,
    Success,
    displayName = "Cell"
  } = createCellProps;
  function SuspendingSuccess(props) {
    const { queryRef, suspenseQueryResult, userProps } = props;
    const { data, networkStatus } = useReadQuery(queryRef);
    const afterQueryData = afterQuery(data);
    const queryResultWithNetworkStatus = {
      ...suspenseQueryResult,
      networkStatus
    };
    if (isEmpty(data, { isDataEmpty }) && Empty) {
      return import_react4.default.createElement(
        Empty,
        {
          ...userProps,
          ...afterQueryData,
          queryResult: queryResultWithNetworkStatus
        }
      );
    }
    return import_react4.default.createElement(
      Success,
      {
        ...afterQueryData,
        ...userProps,
        queryResult: queryResultWithNetworkStatus
      }
    );
  }
  SuspendingSuccess.displayName = displayName;
  return (props) => {
    const { children: _, ...variables } = props;
    const options = beforeQuery(variables);
    const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
    const [queryRef, other] = useBackgroundQuery(query, options);
    const client = (0, import_hooks.useApolloClient)();
    const suspenseQueryResult = {
      client,
      ...other,
      called: !!queryRef
    };
    const FailureComponent = ({ error, resetErrorBoundary }) => {
      var _a, _b, _c;
      if (!Failure) {
        if (error) {
          throw error;
        }
        throw new Error("Unreachable code: FailureComponent without a Failure");
      }
      const queryResultWithErrorReset = {
        ...suspenseQueryResult,
        refetch: (variables2) => {
          var _a2;
          resetErrorBoundary();
          return (_a2 = suspenseQueryResult.refetch) == null ? void 0 : _a2.call(suspenseQueryResult, variables2);
        }
      };
      return import_react4.default.createElement(
        Failure,
        {
          error,
          errorCode: (_c = (_b = (_a = error == null ? void 0 : error.graphQLErrors) == null ? void 0 : _a[0]) == null ? void 0 : _b.extensions) == null ? void 0 : _c["code"],
          queryResult: queryResultWithErrorReset
        }
      );
    };
    const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
      if (!LoadingComponent) {
        return suspendingSuccessElement;
      }
      return import_react4.default.createElement(
        import_react4.Suspense,
        {
          fallback: import_react4.default.createElement(LoadingComponent, { ...props, queryResult: suspenseQueryResult })
        },
        suspendingSuccessElement
      );
    };
    return import_react4.default.createElement(CellErrorBoundary, { renderFallback: FailureComponent }, wrapInSuspenseIfLoadingPresent(
      import_react4.default.createElement(
        SuspendingSuccess,
        {
          userProps: props,
          queryRef,
          suspenseQueryResult
        }
      ),
      Loading
    ));
  };
}

// ../node_modules/@redwoodjs/web/dist/components/cell/createCell.js
var createCell = RWJS_ENV.RWJS_EXP_STREAMING_SSR ? createSuspendingCell : createNonSuspendingCell;
function createNonSuspendingCell({
  QUERY,
  beforeQuery = (props) => ({
    // By default, we assume that the props are the gql-variables.
    variables: props,
    /**
     * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
     * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
     *
     * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
     */
    fetchPolicy: "cache-and-network",
    notifyOnNetworkStatusChange: true
  }),
  afterQuery = (data) => ({ ...data }),
  isEmpty = isDataEmpty,
  Loading = () => import_react5.default.createElement(import_react5.default.Fragment, null, "Loading..."),
  Failure,
  Empty,
  Success,
  displayName = "Cell"
}) {
  function NamedCell(props) {
    var _a, _b, _c;
    const { children: _, ...variables } = props;
    const options = beforeQuery(variables);
    const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
    let {
      // eslint-disable-next-line prefer-const
      error,
      loading,
      data,
      ...queryResult
    } = useQuery(query, options);
    if (globalThis.__REDWOOD__PRERENDERING) {
      const { queryCache } = useCellCacheContext();
      const operationName = getOperationName(query);
      const transformedQuery = fragmentRegistry.transform(query);
      let cacheKey;
      if (operationName) {
        cacheKey = operationName + "_" + JSON.stringify(variables);
      } else {
        const cellName = displayName === "Cell" ? "the cell" : displayName;
        throw new Error(
          `The gql query in ${cellName} is missing an operation name. Something like FindBlogPostQuery in \`query FindBlogPostQuery($id: Int!)\``
        );
      }
      const queryInfo = queryCache[cacheKey];
      if (queryInfo == null ? void 0 : queryInfo.renderLoading) {
        loading = true;
      } else {
        if (queryInfo == null ? void 0 : queryInfo.hasProcessed) {
          loading = false;
          data = queryInfo.data;
          queryResult = { variables };
        } else {
          queryCache[cacheKey] || (queryCache[cacheKey] = {
            query: transformedQuery,
            variables: options.variables,
            hasProcessed: false
          });
        }
      }
    }
    if (error) {
      if (Failure) {
        return import_react5.default.createElement(
          Failure,
          {
            error,
            errorCode: (
              // Use the ad-hoc QueryResultWithErrorCode type to access the errorCode
              queryResult.errorCode ?? ((_c = (_b = (_a = error.graphQLErrors) == null ? void 0 : _a[0]) == null ? void 0 : _b.extensions) == null ? void 0 : _c["code"])
            ),
            ...props,
            updating: loading,
            queryResult
          }
        );
      } else {
        throw error;
      }
    } else if (data) {
      const afterQueryData = afterQuery(data);
      if (isEmpty(data, { isDataEmpty }) && Empty) {
        return import_react5.default.createElement(
          Empty,
          {
            ...props,
            ...afterQueryData,
            updating: loading,
            queryResult
          }
        );
      } else {
        return import_react5.default.createElement(
          Success,
          {
            ...props,
            ...afterQueryData,
            updating: loading,
            queryResult
          }
        );
      }
    } else if (loading) {
      return import_react5.default.createElement(Loading, { ...props, queryResult });
    } else {
      console.warn(
        `If you're using Apollo Client, check for its debug logs here in the console, which may help explain the error.`
      );
      throw new Error(
        "Cannot render Cell: reached an unexpected state where the query succeeded but `data` is `null`. If this happened in Storybook, your query could be missing fields; otherwise this is most likely a GraphQL caching bug. Note that adding an `id` field to all the fields on your query may fix the issue."
      );
    }
  }
  NamedCell.displayName = displayName;
  return (props) => {
    return import_react5.default.createElement(NamedCell, { ...props });
  };
}

// ../node_modules/@redwoodjs/web/dist/components/RedwoodProvider.js
var import_dist28 = __toESM(require_dist(), 1);
var import_dist29 = __toESM(require_dist2(), 1);
var import_dist30 = __toESM(require_dist3(), 1);
var import_react6 = __toESM(require_react(), 1);
init_index_esm();
var { Helmet, HelmetProvider } = index_esm_exports;
var RedwoodProvider = ({
  children,
  titleTemplate
}) => {
  const appTitle = globalThis.__REDWOOD__APP_TITLE;
  const template = () => {
    if (titleTemplate) {
      let template2 = titleTemplate.replace(/%AppTitle/g, appTitle);
      template2 = template2.replace(/%PageTitle/g, "%s");
      return template2;
    }
    return "";
  };
  if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
    return import_react6.default.createElement(import_react6.default.Fragment, null, children);
  }
  return import_react6.default.createElement(HelmetProvider, { context: globalThis.__REDWOOD__HELMET_CONTEXT }, import_react6.default.createElement(Helmet, { titleTemplate: template(), defaultTitle: appTitle }, import_react6.default.createElement("title", null, appTitle)), children);
};

// ../node_modules/@redwoodjs/web/dist/components/MetaTags.js
var import_dist37 = __toESM(require_dist(), 1);
var import_dist38 = __toESM(require_dist2(), 1);
var import_dist39 = __toESM(require_dist3(), 1);
var import_react9 = __toESM(require_react(), 1);
init_index_esm();

// ../node_modules/@redwoodjs/web/dist/components/PortalHead.js
var import_dist34 = __toESM(require_dist(), 1);
var import_dist35 = __toESM(require_dist2(), 1);
var import_dist36 = __toESM(require_dist3(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);

// ../node_modules/@redwoodjs/web/dist/components/ServerInject.js
var import_dist31 = __toESM(require_dist(), 1);
var import_dist32 = __toESM(require_dist2(), 1);
var import_dist33 = __toESM(require_dist3(), 1);
var import_react7 = __toESM(require_react(), 1);
var ServerHtmlContext = (0, import_react7.createContext)(() => {
});
var createInjector = () => {
  const injectionState = /* @__PURE__ */ new Set([]);
  const injectToPage = (renderCallback) => {
    injectionState.add(renderCallback);
  };
  return { injectToPage, injectionState };
};
var ServerHtmlProvider = ServerHtmlContext.Provider;
var ServerInjectedHtml = ({
  injectionState
}) => {
  const serverInsertedHtml = [];
  for (const callback of injectionState) {
    serverInsertedHtml.push(callback());
    injectionState.delete(callback);
  }
  const fragmentId = (0, import_react7.useId)();
  return serverInsertedHtml.map((html, i) => {
    return import_react7.default.createElement(import_react7.Fragment, { key: `rw-server-inserted-${fragmentId}-${i}` }, html);
  });
};
function useServerInsertedHTML(callback) {
  const addInsertedServerHTMLCallback = (0, import_react7.useContext)(ServerHtmlContext);
  if (addInsertedServerHTMLCallback) {
    addInsertedServerHTMLCallback(callback);
  }
}

// ../node_modules/@redwoodjs/web/dist/components/PortalHead.js
function addDataAttributeMarker(children, marker = "data-rwjs-head") {
  return import_react8.default.Children.toArray(children).map((child, i) => {
    return import_react8.default.cloneElement(child, {
      [marker]: true,
      key: `${marker}-` + i
    });
  });
}
var PortalHead = ({ children }) => {
  const isServerRendering = typeof window === "undefined";
  useServerInsertedHTML(() => {
    return addDataAttributeMarker(children);
  });
  const shouldPortal = import_react8.default.useRef(
    isServerRendering ? false : document.readyState === "complete"
  );
  if (isServerRendering) {
    return null;
  } else {
    return shouldPortal.current ? (0, import_react_dom.createPortal)(children, document.head) : null;
  }
};
var PortalHead_default = PortalHead;

// ../node_modules/@redwoodjs/web/dist/components/MetaTags.js
var { Helmet: HelmetHead } = index_esm_exports;
var MetaTags = (props) => {
  const {
    tag = "og:image",
    ogType = "website",
    ogContentUrl,
    robots,
    contentType,
    ogWidth,
    ogHeight,
    ogUrl,
    title,
    locale,
    description,
    author,
    children
  } = props;
  let Head = HelmetHead;
  if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
    Head = PortalHead_default;
  }
  return import_react9.default.createElement(import_react9.default.Fragment, null, title && import_react9.default.createElement(Head, null, import_react9.default.createElement("title", null, title), import_react9.default.createElement("meta", { property: "og:title", content: title, key: "title" }), import_react9.default.createElement("meta", { property: "twitter:title", content: title })), description && import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { name: "description", content: description }), import_react9.default.createElement("meta", { name: "twitter:description", content: description }), import_react9.default.createElement("meta", { property: "og:description", content: description })), author && import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { name: "author", content: author }), import_react9.default.createElement("meta", { name: "twitter:site", content: author }), import_react9.default.createElement("meta", { name: "twitter:creator", content: author })), ogUrl && import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { property: "og:url", content: ogUrl })), locale && import_react9.default.createElement(Head, null, import_react9.default.createElement("html", { lang: locale }), import_react9.default.createElement("meta", { property: "og:locale", content: locale })), import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { property: "og:type", content: ogType })), ogContentUrl && import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { property: tag, content: ogContentUrl })), contentType && import_react9.default.createElement(Head, null, import_react9.default.createElement("meta", { property: `${tag}:type`, content: contentType })), tag === "og:image" && import_react9.default.createElement(Head, null, ogWidth && import_react9.default.createElement("meta", { property: "image:width", content: ogWidth }), ogHeight && import_react9.default.createElement("meta", { property: "image:height", content: ogHeight }), import_react9.default.createElement("meta", { property: "twitter:card", content: "summary_large_image" }), import_react9.default.createElement("meta", { property: "twitter:image", content: ogContentUrl })), robots && import_react9.default.createElement(Head, null, import_react9.default.createElement(
    "meta",
    {
      name: "robots",
      content: Array.isArray(robots) ? robots.join(", ") : robots
    }
  )), children);
};

// ../node_modules/@redwoodjs/web/dist/components/Metadata.js
var import_dist40 = __toESM(require_dist(), 1);
var import_dist41 = __toESM(require_dist2(), 1);
var import_dist42 = __toESM(require_dist3(), 1);
var import_react10 = __toESM(require_react(), 1);
init_index_esm();
var { Helmet: HelmetHead2 } = index_esm_exports;
var EXCLUDE_PROPS = ["charSet"];
var propToMetaTag = (parentKey, parentValue, options) => {
  if (Array.isArray(parentValue)) {
    return parentValue.flatMap((value) => {
      return propToMetaTag(parentKey, value, options);
    });
  } else if (typeof parentValue === "object") {
    return Object.entries(parentValue).filter(([_, v]) => v !== null).flatMap(([key, value]) => {
      return propToMetaTag(`${parentKey}:${key}`, value, { attr: "property" });
    });
  } else {
    const attributes = {
      [options["attr"]]: parentKey,
      content: parentValue
    };
    return import_react10.default.createElement("meta", { ...attributes });
  }
};
var Metadata = (props) => {
  const { children, ...metaProps } = props;
  let Head = HelmetHead2;
  if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
    Head = PortalHead_default;
  }
  const tags = Object.entries(metaProps).filter(
    ([key, value]) => !EXCLUDE_PROPS.includes(key) && value !== null && (key !== "og" || value !== true)
  ).flatMap(([key, value]) => {
    return propToMetaTag(key, value, { attr: "name" });
  }).filter((tag) => !!tag);
  if (metaProps.title) {
    ;
    [metaProps.title].flat().reverse().map((title) => {
      tags.unshift(import_react10.default.createElement("title", null, title));
    });
  }
  if (metaProps.charSet) {
    tags.push(import_react10.default.createElement("meta", { charSet: metaProps.charSet }));
  }
  if (metaProps.og) {
    if (metaProps.title && !metaProps.og.title && metaProps.og.title !== null) {
      tags.push(import_react10.default.createElement("meta", { property: "og:title", content: metaProps.title }));
    }
    if (metaProps.description && !metaProps.og.description && metaProps.og.description !== null) {
      tags.push(
        import_react10.default.createElement("meta", { property: "og:description", content: metaProps.description })
      );
    }
    if (!metaProps.og.type && metaProps.og.type !== null) {
      tags.push(import_react10.default.createElement("meta", { property: "og:type", content: "website" }));
    }
  }
  return import_react10.default.createElement(Head, null, tags.map((tag, i) => import_react10.default.cloneElement(tag, { key: i })), children);
};

// ../node_modules/@redwoodjs/web/dist/index.js
init_index_esm();

// ../node_modules/@redwoodjs/web/dist/components/htmlTags.js
var import_dist43 = __toESM(require_dist(), 1);
var import_dist44 = __toESM(require_dist2(), 1);
var import_dist45 = __toESM(require_dist3(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var extractCssFromAssetMap = () => {
  var _a;
  if (typeof window !== "undefined") {
    return (_a = window.__REDWOOD__ASSET_MAP) == null ? void 0 : _a.css;
  }
  return void 0;
};
var extractMetaFromAssetMap = () => {
  var _a;
  if (typeof window !== "undefined") {
    return (_a = window.__REDWOOD__ASSET_MAP) == null ? void 0 : _a.meta;
  }
  return void 0;
};
function addSlashIfNeeded(path) {
  if (path.startsWith("http") || path.startsWith("/")) {
    return path;
  } else {
    return "/" + path;
  }
}
var Css = ({ css }) => {
  const cssLinks = (css || extractCssFromAssetMap() || []).map(addSlashIfNeeded);
  return import_react11.default.createElement(import_react11.default.Fragment, null, cssLinks.map((cssLink, index) => {
    return import_react11.default.createElement("link", { rel: "stylesheet", key: `css-${index}`, href: `${cssLink}` });
  }));
};
var Meta = ({ tags }) => {
  const metaTags = tags || extractMetaFromAssetMap() || [];
  return import_react11.default.createElement(import_react11.default.Fragment, null, metaTags.map((tag, index) => {
    if (!tag) {
      return null;
    }
    if (isTitleTag(tag)) {
      return import_react11.default.createElement(import_react12.Fragment, { key: "title" }, import_react11.default.createElement("title", null, tag.title), import_react11.default.createElement("meta", { property: "og:title", content: tag.title }));
    }
    if (otherTag(tag)) {
      const { tagType: TagName, ...rest } = tag;
      return import_react11.default.createElement(TagName, { key: `meta-${index}`, ...rest });
    }
    return import_react11.default.createElement("meta", { key: `meta-${index}`, ...tag });
  }));
};
var isTitleTag = (tag) => {
  return "title" in tag;
};
var otherTag = (tag) => {
  return "tagType" in tag;
};

// ../node_modules/@redwoodjs/web/dist/routeHooks.types.js
var import_dist46 = __toESM(require_dist(), 1);
var import_dist47 = __toESM(require_dist2(), 1);
var import_dist48 = __toESM(require_dist3(), 1);

// ../node_modules/@redwoodjs/web/dist/index.js
var { Helmet: Helmet2 } = index_esm_exports;

export {
  FatalErrorBoundary,
  CellCacheContextProvider,
  useCellCacheContext,
  getOperationName,
  createCell,
  RedwoodProvider,
  ServerHtmlContext,
  createInjector,
  ServerHtmlProvider,
  ServerInjectedHtml,
  useServerInsertedHTML,
  MetaTags,
  Metadata,
  Css,
  Meta,
  Helmet2 as Helmet
};
//# sourceMappingURL=chunk-3IMIBK6U.js.map
