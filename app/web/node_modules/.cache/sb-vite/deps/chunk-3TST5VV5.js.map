{
  "version": 3,
  "sources": ["../../../../../node_modules/tslib/tslib.es6.mjs", "../../../../../node_modules/ts-invariant/src/invariant.ts", "../../../../../node_modules/@apollo/src/version.ts", "../../../../../node_modules/@apollo/src/utilities/globals/maybe.ts", "../../../../../node_modules/@apollo/src/utilities/globals/global.ts", "../../../../../node_modules/@apollo/src/utilities/common/makeUniqueId.ts", "../../../../../node_modules/@apollo/src/utilities/common/stringifyForDisplay.ts", "../../../../../node_modules/@apollo/src/utilities/globals/invariantWrappers.ts", "../../../../../node_modules/@apollo/src/utilities/globals/index.ts", "../../../../../node_modules/graphql/version.mjs", "../../../../../node_modules/graphql/jsutils/devAssert.mjs", "../../../../../node_modules/graphql/jsutils/isPromise.mjs", "../../../../../node_modules/graphql/jsutils/isObjectLike.mjs", "../../../../../node_modules/graphql/jsutils/invariant.mjs", "../../../../../node_modules/graphql/language/location.mjs", "../../../../../node_modules/graphql/language/printLocation.mjs", "../../../../../node_modules/graphql/error/GraphQLError.mjs", "../../../../../node_modules/graphql/error/syntaxError.mjs", "../../../../../node_modules/graphql/language/ast.mjs", "../../../../../node_modules/graphql/language/directiveLocation.mjs", "../../../../../node_modules/graphql/language/kinds.mjs", "../../../../../node_modules/graphql/language/characterClasses.mjs", "../../../../../node_modules/graphql/language/blockString.mjs", "../../../../../node_modules/graphql/language/tokenKind.mjs", "../../../../../node_modules/graphql/language/lexer.mjs", "../../../../../node_modules/graphql/jsutils/inspect.mjs", "../../../../../node_modules/graphql/jsutils/instanceOf.mjs", "../../../../../node_modules/graphql/language/source.mjs", "../../../../../node_modules/graphql/language/parser.mjs", "../../../../../node_modules/graphql/jsutils/didYouMean.mjs", "../../../../../node_modules/graphql/jsutils/identityFunc.mjs", "../../../../../node_modules/graphql/jsutils/keyMap.mjs", "../../../../../node_modules/graphql/jsutils/keyValMap.mjs", "../../../../../node_modules/graphql/jsutils/mapValue.mjs", "../../../../../node_modules/graphql/jsutils/naturalCompare.mjs", "../../../../../node_modules/graphql/jsutils/suggestionList.mjs", "../../../../../node_modules/graphql/jsutils/toObjMap.mjs", "../../../../../node_modules/graphql/language/printString.mjs", "../../../../../node_modules/graphql/language/visitor.mjs", "../../../../../node_modules/graphql/language/printer.mjs", "../../../../../node_modules/graphql/utilities/valueFromASTUntyped.mjs", "../../../../../node_modules/graphql/type/assertName.mjs", "../../../../../node_modules/graphql/type/definition.mjs", "../../../../../node_modules/graphql/utilities/typeComparators.mjs", "../../../../../node_modules/graphql/type/scalars.mjs", "../../../../../node_modules/graphql/type/directives.mjs", "../../../../../node_modules/graphql/jsutils/isIterableObject.mjs", "../../../../../node_modules/graphql/utilities/astFromValue.mjs", "../../../../../node_modules/graphql/type/introspection.mjs", "../../../../../node_modules/graphql/type/schema.mjs", "../../../../../node_modules/graphql/type/validate.mjs", "../../../../../node_modules/graphql/utilities/typeFromAST.mjs", "../../../../../node_modules/graphql/utilities/TypeInfo.mjs", "../../../../../node_modules/graphql/language/predicates.mjs", "../../../../../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../../../../../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../../../../../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../../../../../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs", "../../../../../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../../../../../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../../../../../node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.mjs", "../../../../../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs", "../../../../../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../../../../../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../../../../../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs", "../../../../../node_modules/graphql/utilities/sortValueNode.mjs", "../../../../../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../../../../../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../../../../../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../../../../../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../../../../../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs", "../../../../../node_modules/graphql/jsutils/printPathArray.mjs", "../../../../../node_modules/graphql/jsutils/Path.mjs", "../../../../../node_modules/graphql/utilities/coerceInputValue.mjs", "../../../../../node_modules/graphql/utilities/valueFromAST.mjs", "../../../../../node_modules/graphql/execution/values.mjs", "../../../../../node_modules/graphql/execution/collectFields.mjs", "../../../../../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../../../../../node_modules/graphql/jsutils/groupBy.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs", "../../../../../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../../../../../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../../../../../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../../../../../node_modules/graphql/validation/specifiedRules.mjs", "../../../../../node_modules/graphql/validation/ValidationContext.mjs", "../../../../../node_modules/graphql/validation/validate.mjs", "../../../../../node_modules/graphql/jsutils/memoize3.mjs", "../../../../../node_modules/graphql/jsutils/promiseForObject.mjs", "../../../../../node_modules/graphql/jsutils/promiseReduce.mjs", "../../../../../node_modules/graphql/jsutils/toError.mjs", "../../../../../node_modules/graphql/error/locatedError.mjs", "../../../../../node_modules/graphql/execution/execute.mjs", "../../../../../node_modules/graphql/graphql.mjs", "../../../../../node_modules/graphql/type/index.mjs", "../../../../../node_modules/graphql/language/index.mjs", "../../../../../node_modules/graphql/jsutils/isAsyncIterable.mjs", "../../../../../node_modules/graphql/execution/mapAsyncIterator.mjs", "../../../../../node_modules/graphql/execution/subscribe.mjs", "../../../../../node_modules/graphql/execution/index.mjs", "../../../../../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs", "../../../../../node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs", "../../../../../node_modules/graphql/validation/index.mjs", "../../../../../node_modules/graphql/error/index.mjs", "../../../../../node_modules/graphql/utilities/getIntrospectionQuery.mjs", "../../../../../node_modules/graphql/utilities/getOperationAST.mjs", "../../../../../node_modules/graphql/utilities/getOperationRootType.mjs", "../../../../../node_modules/graphql/utilities/introspectionFromSchema.mjs", "../../../../../node_modules/graphql/utilities/buildClientSchema.mjs", "../../../../../node_modules/graphql/utilities/extendSchema.mjs", "../../../../../node_modules/graphql/utilities/buildASTSchema.mjs", "../../../../../node_modules/graphql/utilities/lexicographicSortSchema.mjs", "../../../../../node_modules/graphql/utilities/printSchema.mjs", "../../../../../node_modules/graphql/utilities/concatAST.mjs", "../../../../../node_modules/graphql/utilities/separateOperations.mjs", "../../../../../node_modules/graphql/utilities/stripIgnoredCharacters.mjs", "../../../../../node_modules/graphql/utilities/assertValidName.mjs", "../../../../../node_modules/graphql/utilities/findBreakingChanges.mjs", "../../../../../node_modules/graphql/utilities/index.mjs", "../../../../../node_modules/graphql/index.mjs", "../../../../../node_modules/@apollo/src/utilities/graphql/directives.ts", "../../../../../node_modules/@wry/trie/src/index.ts", "../../../../../node_modules/@apollo/src/utilities/common/canUse.ts", "../../../../../node_modules/@apollo/src/utilities/common/objects.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/fragments.ts", "../../../../../node_modules/@wry/caches/src/strong.ts", "../../../../../node_modules/@wry/caches/src/weak.ts", "../../../../../node_modules/@wry/caches/src/index.ts", "../../../../../node_modules/@apollo/src/utilities/caching/caches.ts", "../../../../../node_modules/@apollo/src/utilities/caching/sizes.ts", "../../../../../node_modules/@apollo/src/utilities/caching/index.ts", "../../../../../node_modules/@apollo/src/utilities/caching/getMemoryInternals.ts", "../../../../../node_modules/@apollo/src/utilities/common/canonicalStringify.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/storeUtils.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/getFromAST.ts", "../../../../../node_modules/optimism/node_modules/@wry/trie/src/index.ts", "../../../../../node_modules/@wry/context/src/slot.ts", "../../../../../node_modules/@wry/context/src/index.ts", "../../../../../node_modules/optimism/src/context.ts", "../../../../../node_modules/optimism/src/helpers.ts", "../../../../../node_modules/optimism/src/entry.ts", "../../../../../node_modules/optimism/src/dep.ts", "../../../../../node_modules/optimism/src/index.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/DocumentTransform.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/print.ts", "../../../../../node_modules/@apollo/src/utilities/common/arrays.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/transform.ts", "../../../../../node_modules/@apollo/src/utilities/graphql/operations.ts", "../../../../../node_modules/@apollo/src/utilities/common/mergeDeep.ts", "../../../../../node_modules/@apollo/src/utilities/policies/pagination.ts", "../../../../../node_modules/zen-observable-ts/module.js", "../../../../../node_modules/symbol-observable/es/ponyfill.js", "../../../../../node_modules/symbol-observable/es/index.js", "../../../../../node_modules/@apollo/src/utilities/observables/Observable.ts", "../../../../../node_modules/@apollo/src/utilities/promises/decoration.ts", "../../../../../node_modules/@apollo/src/utilities/common/cloneDeep.ts", "../../../../../node_modules/@apollo/src/utilities/common/maybeDeepFreeze.ts", "../../../../../node_modules/@apollo/src/utilities/observables/iteration.ts", "../../../../../node_modules/@apollo/src/utilities/observables/asyncMap.ts", "../../../../../node_modules/@apollo/src/utilities/observables/subclassing.ts", "../../../../../node_modules/@apollo/src/utilities/observables/Concast.ts", "../../../../../node_modules/@apollo/src/utilities/common/incrementalResult.ts", "../../../../../node_modules/@apollo/src/utilities/common/errorHandling.ts", "../../../../../node_modules/@apollo/src/utilities/common/compact.ts", "../../../../../node_modules/@apollo/src/utilities/common/mergeOptions.ts", "../../../../../node_modules/@apollo/src/utilities/common/omitDeep.ts", "../../../../../node_modules/@apollo/src/utilities/common/stripTypename.ts", "../../../../../node_modules/@apollo/client/utilities/types/IsStrictlyAny.js", "../../../../../node_modules/@apollo/src/utilities/index.ts", "../../../../../node_modules/@apollo/src/link/utils/fromError.ts", "../../../../../node_modules/@apollo/src/link/utils/toPromise.ts", "../../../../../node_modules/@apollo/src/link/utils/fromPromise.ts", "../../../../../node_modules/@apollo/src/link/utils/throwServerError.ts", "../../../../../node_modules/@apollo/src/link/utils/validateOperation.ts", "../../../../../node_modules/@apollo/src/link/utils/createOperation.ts", "../../../../../node_modules/@apollo/src/link/utils/transformOperation.ts", "../../../../../node_modules/@apollo/src/link/utils/filterOperationVariables.ts", "../../../../../node_modules/@apollo/src/link/utils/index.ts", "../../../../../node_modules/@apollo/src/link/core/ApolloLink.ts", "../../../../../node_modules/@apollo/src/link/core/split.ts", "../../../../../node_modules/@apollo/src/link/core/empty.ts", "../../../../../node_modules/@apollo/src/link/core/from.ts", "../../../../../node_modules/@apollo/src/link/core/concat.ts", "../../../../../node_modules/@apollo/src/link/core/execute.ts", "../../../../../node_modules/@apollo/client/link/core/types.js", "../../../../../node_modules/@apollo/src/link/core/index.ts", "../../../../../node_modules/@wry/equality/src/index.ts", "../../../../../node_modules/@apollo/src/core/equalByQuery.ts", "../../../../../node_modules/@apollo/src/cache/core/cache.ts", "../../../../../node_modules/@apollo/src/cache/core/types/common.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/helpers.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/entityStore.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/object-canon.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/readFromStore.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/reactiveVars.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/key-extractor.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/policies.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/writeToStore.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts", "../../../../../node_modules/@apollo/src/cache/core/types/Cache.ts", "../../../../../node_modules/@apollo/src/cache/inmemory/fragmentRegistry.ts", "../../../../../node_modules/@apollo/client/cache/inmemory/types.js", "../../../../../node_modules/@apollo/src/cache/index.ts", "../../../../../node_modules/@apollo/src/link/http/iterators/async.ts", "../../../../../node_modules/@apollo/src/link/http/iterators/nodeStream.ts", "../../../../../node_modules/@apollo/src/link/http/iterators/promise.ts", "../../../../../node_modules/@apollo/src/link/http/iterators/reader.ts", "../../../../../node_modules/@apollo/src/link/http/responseIterator.ts", "../../../../../node_modules/@apollo/src/errors/index.ts", "../../../../../node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts", "../../../../../node_modules/@apollo/src/link/http/serializeFetchParameter.ts", "../../../../../node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts", "../../../../../node_modules/@apollo/src/link/http/checkFetcher.ts", "../../../../../node_modules/@apollo/src/link/http/createSignalIfSupported.ts", "../../../../../node_modules/@apollo/src/link/http/selectURI.ts", "../../../../../node_modules/@apollo/src/link/http/rewriteURIForGET.ts", "../../../../../node_modules/@apollo/src/link/http/createHttpLink.ts", "../../../../../node_modules/@apollo/src/link/http/HttpLink.ts", "../../../../../node_modules/@apollo/src/link/http/index.ts", "../../../../../node_modules/@apollo/src/core/networkStatus.ts", "../../../../../node_modules/@apollo/src/core/ObservableQuery.ts", "../../../../../node_modules/@apollo/src/core/QueryInfo.ts", "../../../../../node_modules/@apollo/src/core/QueryManager.ts", "../../../../../node_modules/@apollo/src/core/LocalState.ts", "../../../../../node_modules/@apollo/src/core/ApolloClient.ts", "../../../../../node_modules/@apollo/client/core/types.js", "../../../../../node_modules/graphql-tag/src/index.ts", "../../../../../node_modules/@apollo/src/core/index.ts", "../../../../../node_modules/rehackt/index.js", "../../../../../node_modules/@apollo/src/react/context/ApolloContext.ts", "../../../../../node_modules/@apollo/src/react/context/ApolloProvider.tsx", "../../../../../node_modules/@apollo/src/react/context/ApolloConsumer.tsx", "../../../../../node_modules/@apollo/src/react/context/index.ts", "../../../../../node_modules/@apollo/src/react/hooks/useApolloClient.ts", "../../../../../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts", "../../../../../node_modules/@apollo/src/react/parser/index.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/useDeepMemo.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/useIsomorphicLayoutEffect.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/useRenderGuard.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/useLazyRef.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/__use.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/wrapHook.ts", "../../../../../node_modules/@apollo/src/react/hooks/internal/index.ts", "../../../../../node_modules/@apollo/src/react/hooks/useQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/useLazyQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/useMutation.ts", "../../../../../node_modules/@apollo/src/react/hooks/useSubscription.ts", "../../../../../node_modules/@apollo/src/react/hooks/useReactiveVar.ts", "../../../../../node_modules/@apollo/src/react/hooks/useFragment.ts", "../../../../../node_modules/@apollo/src/react/internal/cache/QueryReference.ts", "../../../../../node_modules/@apollo/src/react/internal/cache/SuspenseCache.ts", "../../../../../node_modules/@apollo/src/react/internal/cache/getSuspenseCache.ts", "../../../../../node_modules/@apollo/src/react/internal/index.ts", "../../../../../node_modules/@apollo/src/react/hooks/constants.ts", "../../../../../node_modules/@apollo/src/react/hooks/useSuspenseQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/useBackgroundQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/useLoadableQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/useQueryRefHandlers.ts", "../../../../../node_modules/@apollo/src/react/hooks/useReadQuery.ts", "../../../../../node_modules/@apollo/src/react/hooks/index.ts", "../../../../../node_modules/@apollo/src/react/query-preloader/createQueryPreloader.ts", "../../../../../node_modules/@apollo/client/react/types/types.js", "../../../../../node_modules/@apollo/src/react/index.ts", "../../../../../node_modules/@apollo/src/index.ts", "../../../../../node_modules/@apollo/client/version.js", "../../../../../node_modules/@apollo/client/utilities/globals/maybe.js", "../../../../../node_modules/@apollo/client/utilities/globals/global.js", "../../../../../node_modules/@apollo/client/utilities/common/makeUniqueId.js", "../../../../../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js", "../../../../../node_modules/@apollo/client/utilities/globals/invariantWrappers.js", "../../../../../node_modules/@apollo/client/utilities/globals/index.js", "../../../../../node_modules/@apollo/client/utilities/graphql/directives.js", "../../../../../node_modules/@apollo/client/utilities/common/canUse.js", "../../../../../node_modules/@apollo/client/utilities/common/objects.js", "../../../../../node_modules/@apollo/client/utilities/graphql/fragments.js", "../../../../../node_modules/@apollo/client/utilities/caching/caches.js", "../../../../../node_modules/@apollo/client/utilities/caching/sizes.js", "../../../../../node_modules/@apollo/client/utilities/caching/getMemoryInternals.js", "../../../../../node_modules/@apollo/client/utilities/common/canonicalStringify.js", "../../../../../node_modules/@apollo/client/utilities/graphql/storeUtils.js", "../../../../../node_modules/@apollo/client/utilities/graphql/getFromAST.js", "../../../../../node_modules/@apollo/client/utilities/graphql/DocumentTransform.js", "../../../../../node_modules/@apollo/client/utilities/graphql/print.js", "../../../../../node_modules/@apollo/client/utilities/common/arrays.js", "../../../../../node_modules/@apollo/client/utilities/graphql/transform.js", "../../../../../node_modules/@apollo/client/utilities/graphql/operations.js", "../../../../../node_modules/@apollo/client/utilities/common/mergeDeep.js", "../../../../../node_modules/@apollo/client/utilities/policies/pagination.js", "../../../../../node_modules/@apollo/client/utilities/promises/decoration.js", "../../../../../node_modules/@apollo/client/utilities/common/cloneDeep.js", "../../../../../node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js", "../../../../../node_modules/@apollo/client/utilities/observables/iteration.js", "../../../../../node_modules/@apollo/client/utilities/observables/asyncMap.js", "../../../../../node_modules/@apollo/client/utilities/observables/subclassing.js", "../../../../../node_modules/@apollo/client/utilities/observables/Concast.js", "../../../../../node_modules/@apollo/client/utilities/common/incrementalResult.js", "../../../../../node_modules/@apollo/client/utilities/common/errorHandling.js", "../../../../../node_modules/@apollo/client/utilities/common/compact.js", "../../../../../node_modules/@apollo/client/utilities/common/makeUniqueId.js", "../../../../../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js", "../../../../../node_modules/@apollo/client/utilities/common/mergeOptions.js", "../../../../../node_modules/@apollo/client/utilities/common/omitDeep.js", "../../../../../node_modules/@apollo/client/utilities/common/stripTypename.js", "../../../../../node_modules/@apollo/client/link/utils/fromError.js", "../../../../../node_modules/@apollo/client/link/utils/toPromise.js", "../../../../../node_modules/@apollo/client/link/utils/fromPromise.js", "../../../../../node_modules/@apollo/client/link/utils/throwServerError.js", "../../../../../node_modules/@apollo/client/link/utils/validateOperation.js", "../../../../../node_modules/@apollo/client/link/utils/createOperation.js", "../../../../../node_modules/@apollo/client/link/utils/transformOperation.js", "../../../../../node_modules/@apollo/client/link/utils/filterOperationVariables.js", "../../../../../node_modules/@apollo/client/link/core/ApolloLink.js", "../../../../../node_modules/@apollo/client/link/core/empty.js", "../../../../../node_modules/@apollo/client/link/core/from.js", "../../../../../node_modules/@apollo/client/link/core/split.js", "../../../../../node_modules/@apollo/client/link/core/concat.js", "../../../../../node_modules/@apollo/client/link/core/execute.js", "../../../../../node_modules/@apollo/client/errors/index.js", "../../../../../node_modules/@apollo/client/link/http/iterators/async.js", "../../../../../node_modules/@apollo/client/link/http/iterators/nodeStream.js", "../../../../../node_modules/@apollo/client/link/http/iterators/promise.js", "../../../../../node_modules/@apollo/client/link/http/iterators/reader.js", "../../../../../node_modules/@apollo/client/link/http/responseIterator.js", "../../../../../node_modules/@apollo/client/utilities/common/objects.js", "../../../../../node_modules/@apollo/client/utilities/common/incrementalResult.js", "../../../../../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js", "../../../../../node_modules/@apollo/client/link/http/serializeFetchParameter.js", "../../../../../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js", "../../../../../node_modules/@apollo/client/link/http/checkFetcher.js", "../../../../../node_modules/@apollo/client/link/http/createSignalIfSupported.js", "../../../../../node_modules/@apollo/client/link/http/selectURI.js", "../../../../../node_modules/@apollo/client/link/http/rewriteURIForGET.js", "../../../../../node_modules/@apollo/client/link/http/createHttpLink.js", "../../../../../node_modules/@apollo/client/link/http/HttpLink.js", "../../../../../node_modules/@apollo/client/utilities/caching/getMemoryInternals.js", "../../../../../node_modules/@apollo/client/core/equalByQuery.js", "../../../../../node_modules/@apollo/client/cache/core/cache.js", "../../../../../node_modules/@apollo/client/cache/core/types/Cache.js", "../../../../../node_modules/@apollo/client/cache/core/types/common.js", "../../../../../node_modules/@apollo/client/cache/inmemory/helpers.js", "../../../../../node_modules/@apollo/client/cache/inmemory/entityStore.js", "../../../../../node_modules/@apollo/client/cache/inmemory/object-canon.js", "../../../../../node_modules/@apollo/client/cache/inmemory/readFromStore.js", "../../../../../node_modules/@apollo/client/cache/inmemory/reactiveVars.js", "../../../../../node_modules/@apollo/client/cache/inmemory/key-extractor.js", "../../../../../node_modules/@apollo/client/cache/inmemory/policies.js", "../../../../../node_modules/@apollo/client/cache/inmemory/writeToStore.js", "../../../../../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js", "../../../../../node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js", "../../../../../node_modules/@apollo/client/version.js", "../../../../../node_modules/@apollo/client/utilities/common/objects.js", "../../../../../node_modules/@apollo/client/utilities/common/arrays.js", "../../../../../node_modules/@apollo/client/utilities/common/mergeDeep.js", "../../../../../node_modules/@apollo/client/utilities/common/incrementalResult.js", "../../../../../node_modules/@apollo/client/core/networkStatus.js", "../../../../../node_modules/@apollo/client/core/equalByQuery.js", "../../../../../node_modules/@apollo/client/core/ObservableQuery.js", "../../../../../node_modules/@apollo/client/core/QueryInfo.js", "../../../../../node_modules/@apollo/client/core/QueryManager.js", "../../../../../node_modules/@apollo/client/core/LocalState.js", "../../../../../node_modules/@apollo/client/utilities/caching/sizes.js", "../../../../../node_modules/@apollo/client/utilities/caching/getMemoryInternals.js", "../../../../../node_modules/@apollo/client/core/ApolloClient.js", "../../../../../node_modules/@apollo/client/core/index.js", "../../../../../node_modules/@apollo/client/react/context/ApolloContext.js", "../../../../../node_modules/@apollo/client/react/context/ApolloConsumer.js", "../../../../../node_modules/@apollo/client/react/context/ApolloProvider.js", "../../../../../node_modules/@apollo/client/utilities/caching/getMemoryInternals.js", "../../../../../node_modules/@apollo/client/react/parser/index.js", "../../../../../node_modules/@apollo/client/version.js", "../../../../../node_modules/@apollo/client/utilities/globals/maybe.js", "../../../../../node_modules/@apollo/client/utilities/globals/global.js", "../../../../../node_modules/@apollo/client/utilities/common/makeUniqueId.js", "../../../../../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js", "../../../../../node_modules/@apollo/client/utilities/globals/invariantWrappers.js", "../../../../../node_modules/@apollo/client/react/internal/cache/QueryReference.js", "../../../../../node_modules/@apollo/client/react/internal/cache/SuspenseCache.js", "../../../../../node_modules/@apollo/client/react/internal/cache/getSuspenseCache.js", "../../../../../node_modules/@apollo/client/react/hooks/useApolloClient.js", "../../../../../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/useRenderGuard.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/useLazyRef.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/__use.js", "../../../../../node_modules/@apollo/client/react/hooks/internal/wrapHook.js", "../../../../../node_modules/@apollo/client/react/hooks/useQuery.js", "../../../../../node_modules/@apollo/client/react/hooks/useLazyQuery.js", "../../../../../node_modules/@apollo/client/react/hooks/useMutation.js", "../../../../../node_modules/@apollo/client/react/hooks/useSubscription.js", "../../../../../node_modules/@apollo/client/react/hooks/useReactiveVar.js", "../../../../../node_modules/@apollo/client/react/hooks/useFragment.js", "../../../../../node_modules/@apollo/client/react/hooks/constants.js", "../../../../../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js", "../../../../../node_modules/@apollo/client/react/hooks/useBackgroundQuery.js", "../../../../../node_modules/@apollo/client/react/hooks/useLoadableQuery.js", "../../../../../node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js", "../../../../../node_modules/@apollo/client/react/hooks/useReadQuery.js"],
  "sourcesContent": ["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n", "export const version = \"local\";\n", "export function maybe<T>(thunk: () => T): T | undefined {\n  try {\n    return thunk();\n  } catch {}\n}\n", "import { maybe } from \"./maybe.js\";\n\ndeclare global {\n  const __DEV__: boolean; // will be removed in `dist` by the `postprocessDist` script\n  interface Window {\n    __DEV__?: boolean;\n  }\n}\n\nexport default (maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function () {\n    return maybe.constructor(\"return this\")();\n  })) as typeof globalThis & Window;\n", "const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n", "import { makeUniqueId } from \"./makeUniqueId.js\";\n\nexport function stringifyForDisplay(value: any, space = 0): string {\n  const undefId = makeUniqueId(\"stringifyForDisplay\");\n  return JSON.stringify(\n    value,\n    (key, value) => {\n      return value === void 0 ? undefId : value;\n    },\n    space\n  )\n    .split(JSON.stringify(undefId))\n    .join(\"<undefined>\");\n}\n", "import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn: (msg?: string, ...args: any[]) => void) {\n  return function (message?: string | number, ...args: any[]) {\n    if (typeof message === \"number\") {\n      const arg0 = message;\n      message = getHandledErrorMsg(arg0);\n      if (!message) {\n        message = getFallbackErrorMsg(arg0, args);\n        args = [];\n      }\n    }\n    fn(...[message].concat(args));\n  };\n}\n\ntype LogFunction = {\n  /**\n   * Logs a `$level` message if the user used `ts-invariant`'s `setVerbosity` to set\n   * a verbosity level of `$level` or lower. (defaults to `\"log\"`).\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadDevMessages` to add the message strings to the bundle.\n   * The documentation will display the message without argument substitution.\n   * Instead, the arguments will be printed on the console after the link.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * String substitutions like %s, %o, %d or %f are supported.\n   */\n  (message?: any, ...optionalParams: unknown[]): void;\n};\n\ntype WrappedInvariant = {\n  /**\n   * Throws and InvariantError with the given message if the condition is false.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadErrorMessages` to add the message strings to the bundle.\n   * The documentation will display the message with the arguments substituted.\n   *\n   * String substitutions with %s are supported and will also return\n   * pretty-stringified objects.\n   * Excess `optionalParams` will be swallowed.\n   */\n  (\n    condition: any,\n    message?: string | number,\n    ...optionalParams: unknown[]\n  ): asserts condition;\n\n  debug: LogFunction;\n  log: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n};\nconst invariant: WrappedInvariant = Object.assign(\n  function invariant(\n    condition: any,\n    message?: string | number,\n    ...args: unknown[]\n  ): asserts condition {\n    if (!condition) {\n      originalInvariant(\n        condition,\n        getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args)\n      );\n    }\n  },\n  {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n  }\n);\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(\n    getHandledErrorMsg(message, optionalParams) ||\n      getFallbackErrorMsg(message, optionalParams)\n  );\n}\n\nconst ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: string[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction stringify(arg: any) {\n  if (typeof arg == \"string\") {\n    return arg;\n  }\n\n  try {\n    return stringifyForDisplay(arg, 2).slice(0, 1000);\n  } catch {\n    return \"<non-serializable>\";\n  }\n}\n\nfunction getHandledErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return (\n    global[ApolloErrorMessageHandler] &&\n    global[ApolloErrorMessageHandler](message, messageArgs.map(stringify))\n  );\n}\n\nfunction getFallbackErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n    JSON.stringify({\n      version,\n      message,\n      args: messageArgs.map(stringify),\n    })\n  )}`;\n}\n\nexport {\n  invariant,\n  InvariantError,\n  newInvariantError,\n  ApolloErrorMessageHandler,\n};\n", "import {\n  invariant,\n  newInvariantError,\n  InvariantError,\n} from \"./invariantWrappers.js\";\n\nexport { maybe } from \"./maybe.js\";\nexport { default as global } from \"./global.js\";\nexport { invariant, newInvariantError, InvariantError };\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */\n// this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nexport const DEV = globalThis.__DEV__ !== false;\nexport { DEV as __DEV__ };\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.9.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 9,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nexport function isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = keyMap(this.getValues(), (value) => value.name);\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: GraphQLBoolean,\n      resolve: (type) => {\n        if (isInputObjectType(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if (isNonNullType(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nconst MAX_LISTS_DEPTH = 3;\nexport function MaxIntrospectionDepthRule(context) {\n  /**\n   * Counts the depth of list fields in \"__Type\" recursively and\n   * returns `true` if the limit has been reached.\n   */\n  function checkDepth(node, visitedFragments = Object.create(null), depth = 0) {\n    if (node.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentName = node.name.value;\n\n      if (visitedFragments[fragmentName] === true) {\n        // Fragment cycles are handled by `NoFragmentCyclesRule`.\n        return false;\n      }\n\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        // Missing fragments checks are handled by `KnownFragmentNamesRule`.\n        return false;\n      } // Rather than following an immutable programming pattern which has\n      // significant memory and garbage collection overhead, we've opted to\n      // take a mutable approach for efficiency's sake. Importantly visiting a\n      // fragment twice is fine, so long as you don't do one visit inside the\n      // other.\n\n      try {\n        visitedFragments[fragmentName] = true;\n        return checkDepth(fragment, visitedFragments, depth);\n      } finally {\n        visitedFragments[fragmentName] = undefined;\n      }\n    }\n\n    if (\n      node.kind === Kind.FIELD && // check all introspection lists\n      (node.name.value === 'fields' ||\n        node.name.value === 'interfaces' ||\n        node.name.value === 'possibleTypes' ||\n        node.name.value === 'inputFields')\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      depth++;\n\n      if (depth >= MAX_LISTS_DEPTH) {\n        return true;\n      }\n    } // handles fields and inline fragments\n\n    if ('selectionSet' in node && node.selectionSet) {\n      for (const child of node.selectionSet.selections) {\n        if (checkDepth(child, visitedFragments, depth)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        if (checkDepth(node)) {\n          context.reportError(\n            new GraphQLError('Maximum introspection depth exceeded', {\n              nodes: [node],\n            }),\n          );\n          return false;\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (\n      comparedFragmentPairs.has(\n        referencedFragmentName,\n        fragmentName,\n        areMutuallyExclusive,\n      )\n    ) {\n      continue;\n    }\n\n    comparedFragmentPairs.add(\n      referencedFragmentName,\n      fragmentName,\n      areMutuallyExclusive,\n    );\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return print(sortValueNode(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result =\n      (_this$_data$get = this._data.get(key1)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n\n      if (keys.length !== 1) {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Exactly one key must be specified for OneOf type \"${type.name}\".`,\n          ),\n        );\n      }\n\n      const key = keys[0];\n      const value = coercedValue[key];\n\n      if (value === null) {\n        onError(\n          pathToArray(path).concat(key),\n          value,\n          new GraphQLError(`Field \"${key}\" must be non-null.`),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  let variableDefinitions = {};\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context,\n  node,\n  type,\n  fieldNodeMap,\n  variableDefinitions,\n) {\n  var _fieldNodeMap$keys$;\n\n  const keys = Object.keys(fieldNodeMap);\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new GraphQLError(\n        `OneOf Input Object \"${type.name}\" must specify exactly one key.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  const value =\n    (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null ||\n    _fieldNodeMap$keys$ === void 0\n      ? void 0\n      : _fieldNodeMap$keys$.value;\n  const isNullLiteral = !value || value.kind === Kind.NULL;\n  const isVariable =\n    (value === null || value === void 0 ? void 0 : value.kind) ===\n    Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new GraphQLError(`Field \"${type.name}.${keys[0]}\" must be non-null.`, {\n        nodes: [node],\n      }),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new GraphQLError(\n          `Variable \"${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type.name}\".`,\n          {\n            nodes: [node],\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // TODO: Spec Section\n\nimport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nexport const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { visit, visitInParallel } from '../language/visitor.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.mjs';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.mjs';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(\n  schema,\n  documentAST,\n  rules = specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n", "/**\n * Memoizes the provided three-argument function.\n */\nexport function memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}\n", "import { isPromise } from './isPromise.mjs';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  try {\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result !== undefined) {\n        results[responseName] = result;\n\n        if (isPromise(result)) {\n          containsPromise = true;\n        }\n      }\n    }\n  } catch (error) {\n    if (containsPromise) {\n      // Ensure that any promises returned by other fields are handled, as they may also reject.\n      return promiseForObject(results).finally(() => {\n        throw error;\n      });\n    }\n\n    throw error;\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "import { devAssert } from './jsutils/devAssert.mjs';\nimport { isPromise } from './jsutils/isPromise.mjs';\nimport { parse } from './language/parser.mjs';\nimport { validateSchema } from './type/validate.mjs';\nimport { validate } from './validation/validate.mjs';\nimport { execute } from './execution/execute.mjs';\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * contextValue:\n *    The context value is provided as an argument to resolver functions after\n *    field arguments. It is used to pass shared information useful at any point\n *    during executing this query, for example the currently logged in user and\n *    connections to databases or other services.\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n * typeResolver:\n *    A type resolver function to use when none is provided by the schema.\n *    If not provided, the default type resolver is used (which looks for a\n *    `__typename` field or alternatively calls the `isTypeOf` method).\n */\n\nexport function graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors,\n    };\n  } // Parse\n\n  let document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError],\n    };\n  } // Validate\n\n  const validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors,\n    };\n  } // Execute\n\n  return execute({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  });\n}\n", "export {\n  // Predicate\n  isSchema, // Assertion\n  assertSchema, // GraphQL Schema definition\n  GraphQLSchema,\n} from './schema.mjs';\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Predicates\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField, // Assertions\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Definitions\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType, // Type Wrappers\n  GraphQLList,\n  GraphQLNonNull,\n} from './definition.mjs';\nexport {\n  // Predicate\n  isDirective, // Assertion\n  assertDirective, // Directives Definition\n  GraphQLDirective, // Built-in Directives defined by the Spec\n  isSpecifiedDirective,\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON,\n} from './directives.mjs';\n// Common built-in scalar instances.\nexport {\n  // Predicate\n  isSpecifiedScalarType, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT,\n} from './scalars.mjs';\nexport {\n  // Predicate\n  isIntrospectionType, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // \"Enum\" of Type Kinds\n  TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from './introspection.mjs'; // Validate GraphQL schema.\n\nexport { validateSchema, assertValidSchema } from './validate.mjs'; // Upholds the spec rules about naming.\n\nexport { assertName, assertEnumValueName } from './assertName.mjs';\n", "export { Source } from './source.mjs';\nexport { getLocation } from './location.mjs';\nexport { printLocation, printSourceLocation } from './printLocation.mjs';\nexport { Kind } from './kinds.mjs';\nexport { TokenKind } from './tokenKind.mjs';\nexport { Lexer } from './lexer.mjs';\nexport { parse, parseValue, parseConstValue, parseType } from './parser.mjs';\nexport { print } from './printer.mjs';\nexport {\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n} from './visitor.mjs';\nexport { Location, Token, OperationTypeNode } from './ast.mjs';\nexport {\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './predicates.mjs';\nexport { DirectiveLocation } from './directiveLocation.mjs';\n", "/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n  return (\n    typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0\n      ? void 0\n      : maybeAsyncIterable[Symbol.asyncIterator]) === 'function'\n  );\n}\n", "/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const resultOrStream = await createSourceEventStream(args);\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({ ...args, rootValue: payload }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6],\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(...rawArgs) {\n  const args = toNormalizedArgs(rawArgs);\n  const { schema, document, variableValues } = args; // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n", "export { pathToArray as responsePathAsArray } from '../jsutils/Path.mjs';\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n} from './execute.mjs';\nexport { subscribe, createSourceEventStream } from './subscribe.mjs';\nexport {\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n} from './values.mjs';\n", "import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) || invariant(false);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType } from '../../../type/definition.mjs';\nimport { isIntrospectionType } from '../../../type/introspection.mjs';\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nexport function NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field(node) {\n      const type = getNamedType(context.getType());\n\n      if (type && isIntrospectionType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `GraphQL introspection has been disabled, but the requested query contained the field \"${node.name.value}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "export { validate } from './validate.mjs';\nexport { ValidationContext } from './ValidationContext.mjs';\n// All validation rules in the GraphQL Specification.\nexport { specifiedRules, recommendedRules } from './specifiedRules.mjs'; // Spec Section: \"Executable Definitions\"\n\nexport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nexport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nexport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nexport { KnownArgumentNamesRule } from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nexport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nexport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nexport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nexport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nexport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nexport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nexport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nexport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nexport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nexport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nexport { ProvidedRequiredArgumentsRule } from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nexport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nexport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nexport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nexport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nexport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nexport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nexport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nexport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Values Type Correctness\"\n\nexport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nexport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nexport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\nexport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // SDL-specific validation rules\n\nexport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nexport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nexport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nexport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nexport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nexport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nexport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nexport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Optional rules not defined by the GraphQL Specification\n\nexport { NoDeprecatedCustomRule } from './rules/custom/NoDeprecatedCustomRule.mjs';\nexport { NoSchemaIntrospectionCustomRule } from './rules/custom/NoSchemaIntrospectionCustomRule.mjs';\n", "export { GraphQLError, printError, formatError } from './GraphQLError.mjs';\nexport { syntaxError } from './syntaxError.mjs';\nexport { locatedError } from './locatedError.mjs';\n", "/**\n * Produce the GraphQL query recommended for a full schema introspection.\n * Accepts optional IntrospectionOptions.\n */\nexport function getIntrospectionQuery(options) {\n  const optionsWithDefault = {\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false,\n    oneOf: false,\n    ...options,\n  };\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\n    ? 'specifiedByURL'\n    : '';\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\n    ? 'isRepeatable'\n    : '';\n  const schemaDescription = optionsWithDefault.schemaDescription\n    ? descriptions\n    : '';\n\n  function inputDeprecation(str) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n\n  const oneOf = optionsWithDefault.oneOf ? 'isOneOf' : '';\n  return `\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation('(includeDeprecated: true)')} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      ${oneOf}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation('(includeDeprecated: true)')} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation('isDeprecated')}\n      ${inputDeprecation('deprecationReason')}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n", "import { GraphQLError } from '../error/GraphQLError.mjs';\n\n/**\n * Extracts the root type of the operation from the schema.\n *\n * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    const queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError(\n        'Schema does not define the required query root type.',\n        {\n          nodes: operation,\n        },\n      );\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    const mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', {\n        nodes: operation,\n      });\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    const subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', {\n        nodes: operation,\n      });\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError(\n    'Can only have query, mutation and subscription operations.',\n    {\n      nodes: operation,\n    },\n  );\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { executeSync } from '../execution/execute.mjs';\nimport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    oneOf: true,\n    ...options,\n  };\n  const document = parse(getIntrospectionQuery(optionsWithDefaults));\n  const result = executeSync({\n    schema,\n    document,\n  });\n  (!result.errors && result.data) || invariant(false);\n  return result.data;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { parseValue } from '../language/parser.mjs';\nimport {\n  assertInterfaceType,\n  assertNullableType,\n  assertObjectType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isInputType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { introspectionTypes, TypeKind } from '../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../type/scalars.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  (isObjectLike(introspection) && isObjectLike(introspection.__schema)) ||\n    devAssert(\n      false,\n      `Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ${inspect(\n        introspection,\n      )}.`,\n    ); // Get the schema from the introspection result.\n\n  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  const typeMap = keyValMap(\n    schemaIntrospection.types,\n    (typeIntrospection) => typeIntrospection.name,\n    (typeIntrospection) => buildType(typeIntrospection),\n  ); // Include standard types only if they are used.\n\n  for (const stdType of [...specifiedScalarTypes, ...introspectionTypes]) {\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n  const queryType = schemaIntrospection.queryType\n    ? getObjectType(schemaIntrospection.queryType)\n    : null;\n  const mutationType = schemaIntrospection.mutationType\n    ? getObjectType(schemaIntrospection.mutationType)\n    : null;\n  const subscriptionType = schemaIntrospection.subscriptionType\n    ? getObjectType(schemaIntrospection.subscriptionType)\n    : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  const directives = schemaIntrospection.directives\n    ? schemaIntrospection.directives.map(buildDirective)\n    : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: Object.values(typeMap),\n    directives,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      const itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      const nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      const nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    const typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(`Unknown type reference: ${inspect(typeRef)}.`);\n    }\n\n    const type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\n        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`,\n      );\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n  function buildType(type) {\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (type != null && type.name != null && type.kind != null) {\n      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    const typeStr = inspect(type);\n    throw new Error(\n      `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`,\n    );\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByURL: scalarIntrospection.specifiedByURL,\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (\n      implementingIntrospection.interfaces === null &&\n      implementingIntrospection.kind === TypeKind.INTERFACE\n    ) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      const implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(\n        `Introspection result missing interfaces: ${implementingIntrospectionStr}.`,\n      );\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: () => buildImplementationsList(objectIntrospection),\n      fields: () => buildFieldDefMap(objectIntrospection),\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: () => buildImplementationsList(interfaceIntrospection),\n      fields: () => buildFieldDefMap(interfaceIntrospection),\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      const unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(\n        `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: () => unionIntrospection.possibleTypes.map(getObjectType),\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      const enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(\n        `Introspection result missing enumValues: ${enumIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(\n        enumIntrospection.enumValues,\n        (valueIntrospection) => valueIntrospection.name,\n        (valueIntrospection) => ({\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason,\n        }),\n      ),\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      const inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(\n        `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),\n      isOneOf: inputObjectIntrospection.isOneOf,\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\n        `Introspection result missing fields: ${inspect(typeIntrospection)}.`,\n      );\n    }\n\n    return keyValMap(\n      typeIntrospection.fields,\n      (fieldIntrospection) => fieldIntrospection.name,\n      buildField,\n    );\n  }\n\n  function buildField(fieldIntrospection) {\n    const type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(\n        `Introspection must provide output type for fields, but received: ${typeStr}.`,\n      );\n    }\n\n    if (!fieldIntrospection.args) {\n      const fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(\n        `Introspection result missing field args: ${fieldIntrospectionStr}.`,\n      );\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type,\n      args: buildInputValueDefMap(fieldIntrospection.args),\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(\n      inputValueIntrospections,\n      (inputValue) => inputValue.name,\n      buildInputValue,\n    );\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(\n        `Introspection must provide input type for arguments, but received: ${typeStr}.`,\n      );\n    }\n\n    const defaultValue =\n      inputValueIntrospection.defaultValue != null\n        ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type)\n        : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason,\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\n        `Introspection result missing directive args: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    if (!directiveIntrospection.locations) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\n        `Introspection result missing directive locations: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args),\n    });\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLOneOfDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n          isOneOf: isOneOf(astNode),\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n/**\n * Given an input object node, returns if the node should be OneOf.\n */\n\nfunction isOneOf(node) {\n  return Boolean(getDirectiveValues(GraphQLOneOfDirective, node));\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isPrintableAsBlockString } from '../language/blockString.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  DEFAULT_DEPRECATION_REASON,\n  isSpecifiedDirective,\n} from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nexport function printSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    (n) => !isSpecifiedDirective(n),\n    isDefinedType,\n  );\n}\nexport function printIntrospectionSchema(schema) {\n  return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType);\n}\n\nfunction isDefinedType(type) {\n  return !isSpecifiedScalarType(type) && !isIntrospectionType(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter) {\n  const directives = schema.getDirectives().filter(directiveFilter);\n  const types = Object.values(schema.getTypeMap()).filter(typeFilter);\n  return [\n    printSchemaDefinition(schema),\n    ...directives.map((directive) => printDirective(directive)),\n    ...types.map((type) => printType(type)),\n  ]\n    .filter(Boolean)\n    .join('\\n\\n');\n}\n\nfunction printSchemaDefinition(schema) {\n  if (schema.description == null && isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  const operationTypes = [];\n  const queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return printDescription(schema) + `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n * ```graphql\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *     subscription: Subscription\n *   }\n * ```\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\nfunction isSchemaOfCommonNames(schema) {\n  const queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nexport function printType(type) {\n  if (isScalarType(type)) {\n    return printScalar(type);\n  }\n\n  if (isObjectType(type)) {\n    return printObject(type);\n  }\n\n  if (isInterfaceType(type)) {\n    return printInterface(type);\n  }\n\n  if (isUnionType(type)) {\n    return printUnion(type);\n  }\n\n  if (isEnumType(type)) {\n    return printEnum(type);\n  }\n\n  if (isInputObjectType(type)) {\n    return printInputObject(type);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction printScalar(type) {\n  return (\n    printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type)\n  );\n}\n\nfunction printImplementedInterfaces(type) {\n  const interfaces = type.getInterfaces();\n  return interfaces.length\n    ? ' implements ' + interfaces.map((i) => i.name).join(' & ')\n    : '';\n}\n\nfunction printObject(type) {\n  return (\n    printDescription(type) +\n    `type ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printInterface(type) {\n  return (\n    printDescription(type) +\n    `interface ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printUnion(type) {\n  const types = type.getTypes();\n  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type) {\n  const values = type\n    .getValues()\n    .map(\n      (value, i) =>\n        printDescription(value, '  ', !i) +\n        '  ' +\n        value.name +\n        printDeprecated(value.deprecationReason),\n    );\n  return printDescription(type) + `enum ${type.name}` + printBlock(values);\n}\n\nfunction printInputObject(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f),\n  );\n  return (\n    printDescription(type) +\n    `input ${type.name}` +\n    (type.isOneOf ? ' @oneOf' : '') +\n    printBlock(fields)\n  );\n}\n\nfunction printFields(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) =>\n      printDescription(f, '  ', !i) +\n      '  ' +\n      f.name +\n      printArgs(f.args, '  ') +\n      ': ' +\n      String(f.type) +\n      printDeprecated(f.deprecationReason),\n  );\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(args, indentation = '') {\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n  if (args.every((arg) => !arg.description)) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return (\n    '(\\n' +\n    args\n      .map(\n        (arg, i) =>\n          printDescription(arg, '  ' + indentation, !i) +\n          '  ' +\n          indentation +\n          printInputValue(arg),\n      )\n      .join('\\n') +\n    '\\n' +\n    indentation +\n    ')'\n  );\n}\n\nfunction printInputValue(arg) {\n  const defaultAST = astFromValue(arg.defaultValue, arg.type);\n  let argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += ` = ${print(defaultAST)}`;\n  }\n\n  return argDecl + printDeprecated(arg.deprecationReason);\n}\n\nfunction printDirective(directive) {\n  return (\n    printDescription(directive) +\n    'directive @' +\n    directive.name +\n    printArgs(directive.args) +\n    (directive.isRepeatable ? ' repeatable' : '') +\n    ' on ' +\n    directive.locations.join(' | ')\n  );\n}\n\nfunction printDeprecated(reason) {\n  if (reason == null) {\n    return '';\n  }\n\n  if (reason !== DEFAULT_DEPRECATION_REASON) {\n    const astValue = print({\n      kind: Kind.STRING,\n      value: reason,\n    });\n    return ` @deprecated(reason: ${astValue})`;\n  }\n\n  return ' @deprecated';\n}\n\nfunction printSpecifiedByURL(scalar) {\n  if (scalar.specifiedByURL == null) {\n    return '';\n  }\n\n  const astValue = print({\n    kind: Kind.STRING,\n    value: scalar.specifiedByURL,\n  });\n  return ` @specifiedBy(url: ${astValue})`;\n}\n\nfunction printDescription(def, indentation = '', firstInBlock = true) {\n  const { description } = def;\n\n  if (description == null) {\n    return '';\n  }\n\n  const blockString = print({\n    kind: Kind.STRING,\n    value: description,\n    block: isPrintableAsBlockString(description),\n  });\n  const prefix =\n    indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Provided a collection of ASTs, presumably each from different files,\n * concatenate the ASTs together into batched AST, useful for validating many\n * GraphQL source files which together represent one conceptual application.\n */\n\nexport function concatAST(documents) {\n  const definitions = [];\n\n  for (const doc of documents) {\n    definitions.push(...doc.definitions);\n  }\n\n  return {\n    kind: Kind.DOCUMENT,\n    definitions,\n  };\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(\n          definitionNode.selectionSet,\n        );\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(\n        (node) =>\n          node === operation ||\n          (node.kind === Kind.FRAGMENT_DEFINITION &&\n            dependencies.has(node.name.value)),\n      ),\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    },\n  });\n  return dependencies;\n}\n", "import { printBlockString } from '../language/blockString.mjs';\nimport { isPunctuatorTokenKind, Lexer } from '../language/lexer.mjs';\nimport { isSource, Source } from '../language/source.mjs';\nimport { TokenKind } from '../language/tokenKind.mjs';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * ```graphql\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n * ```\n *\n * SDL example:\n *\n * ```graphql\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n * ```\n *\n * Becomes:\n *\n * ```graphql\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n * ```\n */\n\nexport function stripIgnoredCharacters(source) {\n  const sourceObj = isSource(source) ? source : new Source(source);\n  const body = sourceObj.body;\n  const lexer = new Lexer(sourceObj);\n  let strippedBody = '';\n  let wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    const currentToken = lexer.token;\n    const tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    const isNonPunctuator = !isPunctuatorTokenKind(currentToken.kind);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    const tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += printBlockString(currentToken.value, {\n        minimize: true,\n      });\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { assertName } from '../type/assertName.mjs';\n/* c8 ignore start */\n\n/**\n * Upholds the spec rules about naming.\n * @deprecated Please use `assertName` instead. Will be removed in v17\n */\n\nexport function assertValidName(name) {\n  const error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n * @deprecated Please use `assertName` instead. Will be removed in v17\n */\n\nexport function isValidNameError(name) {\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.startsWith('__')) {\n    return new GraphQLError(\n      `Name \"${name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n    );\n  }\n\n  try {\n    assertName(name);\n  } catch (error) {\n    return error;\n  }\n}\n/* c8 ignore stop */\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n", "// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.mjs'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType.mjs'; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from './introspectionFromSchema.mjs'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema.mjs'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from './buildASTSchema.mjs';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.mjs'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema.mjs'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport {\n  printSchema,\n  printType,\n  printIntrospectionSchema,\n} from './printSchema.mjs'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped.mjs'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue.mjs'; // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.mjs'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from './coerceInputValue.mjs'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST.mjs'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations.mjs'; // Strips characters that are not significant to the validity or execution of a GraphQL document.\n\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.mjs'; // Comparators for types\n\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.mjs'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName.mjs'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './findBreakingChanges.mjs';\n", "/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Definitions\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT, // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective, // \"Enum\" of Type Kinds\n  TypeKind, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef, // Predicates\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective, // Assertions\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Validate GraphQL schema.\n  validateSchema,\n  assertValidSchema, // Upholds the spec rules about naming.\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n// Parse and operate on GraphQL language source files.\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation, // Print source location.\n  printLocation,\n  printSourceLocation, // Lex\n  Lexer,\n  TokenKind, // Parse\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType, // Print\n  print, // Visit\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation, // Predicates\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n// Execute GraphQL queries.\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n// Validate GraphQL documents.\nexport {\n  validate,\n  ValidationContext, // All validation rules in the GraphQL Specification.\n  specifiedRules,\n  recommendedRules, // Individual validation rules.\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n  MaxIntrospectionDepthRule, // SDL-specific validation rules\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule, // Custom validation rules\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n// Create, format, and print GraphQL errors.\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // Produce the GraphQL query recommended for a full schema introspection.\n  // Accepts optional IntrospectionOptions.\n  getIntrospectionQuery, // Gets the target Operation from a Document.\n  getOperationAST, // Gets the Type for the target Operation AST.\n  getOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\n  introspectionFromSchema, // Build a GraphQLSchema from an introspection result.\n  buildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema, // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n  extendSchema, // Sort a GraphQLSchema.\n  lexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema, // Print a GraphQLType to GraphQL Schema language.\n  printType, // Prints the built-in introspection schema in the Schema Language format.\n  printIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\n  valueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\n  valueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\n  astFromValue, // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n  TypeInfo,\n  visitWithTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\n  coerceInputValue, // Concatenates multiple AST together.\n  concatAST, // Separates an AST into an AST per Operation.\n  separateOperations, // Strips characters that are not significant to the validity or execution of a GraphQL document.\n  stripIgnoredCharacters, // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap, // Asserts a string is a valid GraphQL name.\n  assertValidName, // Determine if a string is a valid GraphQL name.\n  isValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n", "import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n} from \"graphql\";\nimport { visit, BREAK } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n", "// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data;\n  public lookup(): Data {\n    return this.lookupArray(arguments);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\")\n      ? node.data as Data\n      : node.data = this.makeData(slice.call(array));\n  }\n\n  public peek<T extends any[]>(...array: T): Data | undefined;\n  public peek(): Data | undefined {\n    return this.peekArray(arguments);\n  }\n\n  public peekArray<T extends IArguments | any[]>(array: T): Data | undefined {\n    let node: Trie<Data> | undefined = this;\n\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map = node.mapFor(array[i], false);\n      node = map && map.get(array[i]);\n    }\n\n    return node && node.data;\n  }\n\n  public remove(...array: any[]): Data | undefined;\n  public remove(): Data | undefined {\n    return this.removeArray(arguments);\n  }\n\n  public removeArray<T extends IArguments | any[]>(array: T): Data | undefined {\n    let data: Data | undefined;\n\n    if (array.length) {\n      const head = array[0];\n      const map = this.mapFor(head, false);\n      const child = map && map.get(head);\n      if (child) {\n        data = child.removeArray(slice.call(array, 1));\n        if (!child.data && !child.weak && !(child.strong && child.strong.size)) {\n          map.delete(head);\n        }\n      }\n    } else {\n      data = this.data;\n      delete this.data;\n    }\n\n    return data;\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.mapFor(key, true)!;\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n\n  private mapFor(key: any, create: boolean): Trie<Data>[\"weak\" | \"strong\"] | undefined {\n    return this.weakness && isObjRef(key)\n      ? this.weak || (create ? this.weak = new WeakMap : void 0)\n      : this.strong || (create ? this.strong = new Map : void 0);\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n", "import { maybe } from \"../globals/index.js\";\n\nconst isReactNative = maybe(() => navigator.product) == \"ReactNative\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === \"function\" &&\n  !(isReactNative && !(global as any).HermesInternal);\n\nexport const canUseWeakSet = typeof WeakSet === \"function\";\n\nexport const canUseSymbol =\n  typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;\n", "export function isNonNullObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport function isPlainObject(obj: any): obj is Record<string | number, any> {\n  return (\n    obj !== null &&\n    typeof obj === \"object\" &&\n    (Object.getPrototypeOf(obj) === Object.prototype ||\n      Object.getPrototypeOf(obj) === null)\n  );\n}\n", "import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from \"graphql\";\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach((definition) => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        `Found a %s operation%s. ` +\n          \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\",\n        definition.operation,\n        definition.name ? ` named '${definition.name.value}'` : \"\"\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: \"OperationDefinition\" as Kind,\n        // OperationTypeNode is an enum\n        operation: \"query\" as OperationTypeNode,\n        selectionSet: {\n          kind: \"SelectionSet\" as Kind,\n          selections: [\n            {\n              kind: \"FragmentSpread\" as Kind,\n              name: {\n                kind: \"Name\" as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\nexport type FragmentMapFunction = (\n  fragmentName: string\n) => FragmentDefinitionNode | null;\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = []\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach((fragment) => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap | FragmentMapFunction\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      const fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      const fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, `No fragment named %s`, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n", "import type { CommonCache } from \"./common\";\n\ninterface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class StrongCache<K = any, V = any> implements CommonCache<K, V> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  public get size() {\n    return this.map.size;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n", "import type { CommonCache } from \"./common\";\n\ninterface PartialNode<K extends object, V> {\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\ninterface UnfinalizedNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef?: undefined;\n  key: K;\n}\n\ninterface FullNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef: WeakRef<K>;\n  key?: undefined;\n}\n\ntype Node<K extends object, V> = FullNode<K, V> | UnfinalizedNode<K, V>;\n\nfunction noop() {}\nconst defaultDispose = noop;\n\nconst _WeakRef =\n  typeof WeakRef !== \"undefined\"\n    ? WeakRef\n    : (function <T>(value: T) {\n        return { deref: () => value } satisfies Omit<\n          WeakRef<any>,\n          typeof Symbol.toStringTag\n        >;\n      } as any as typeof WeakRef);\nconst _WeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\nconst _FinalizationRegistry =\n  typeof FinalizationRegistry !== \"undefined\"\n    ? FinalizationRegistry\n    : (function <T>() {\n        return {\n          register: noop,\n          unregister: noop,\n        } satisfies Omit<FinalizationRegistry<T>, typeof Symbol.toStringTag>;\n      } as any as typeof FinalizationRegistry);\n\nconst finalizationBatchSize = 10024;\n\nexport class WeakCache<K extends object = any, V = any>\n  implements CommonCache<K, V>\n{\n  private map = new _WeakMap<K, Node<K, V>>();\n  private registry: FinalizationRegistry<Node<K, V>>;\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n  private unfinalizedNodes: Set<UnfinalizedNode<K, V>> = new Set();\n  private finalizationScheduled = false;\n  public size = 0;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key?: K) => void = defaultDispose\n  ) {\n    this.registry = new _FinalizationRegistry<Node<K, V>>(\n      this.deleteNode.bind(this)\n    );\n  }\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return (node.value = value);\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest,\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.scheduleFinalization(node);\n    this.map.set(key, node);\n    this.size++;\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.size > this.max) {\n      this.deleteNode(this.oldest);\n    }\n  }\n\n  private deleteNode(node: Node<K, V>) {\n    if (node === this.newest) {\n      this.newest = node.older;\n    }\n\n    if (node === this.oldest) {\n      this.oldest = node.newer;\n    }\n\n    if (node.newer) {\n      node.newer.older = node.older;\n    }\n\n    if (node.older) {\n      node.older.newer = node.newer;\n    }\n\n    this.size--;\n    const key = node.key || (node.keyRef && node.keyRef.deref());\n    this.dispose(node.value, key);\n    if (!node.keyRef) {\n      this.unfinalizedNodes.delete(node);\n    } else {\n      this.registry.unregister(node);\n    }\n    if (key) this.map.delete(key);\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      this.deleteNode(node);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  private scheduleFinalization(node: UnfinalizedNode<K, V>) {\n    this.unfinalizedNodes.add(node);\n    if (!this.finalizationScheduled) {\n      this.finalizationScheduled = true;\n      queueMicrotask(this.finalize);\n    }\n  }\n\n  private finalize = () => {\n    const iterator = this.unfinalizedNodes.values();\n    for (let i = 0; i < finalizationBatchSize; i++) {\n      const node = iterator.next().value;\n      if (!node) break;\n      this.unfinalizedNodes.delete(node);\n      const key = node.key;\n      delete (node as unknown as FullNode<K, V>).key;\n      (node as unknown as FullNode<K, V>).keyRef = new _WeakRef(key);\n      this.registry.register(key, node, node);\n    }\n    if (this.unfinalizedNodes.size > 0) {\n      queueMicrotask(this.finalize);\n    } else {\n      this.finalizationScheduled = false;\n    }\n  };\n}\n", "export type { CommonCache } from \"./common.js\";\nexport { StrongCache } from \"./strong.js\";\nexport { WeakCache } from \"./weak.js\";\n", "import { WeakCache, StrongCache } from \"@wry/caches\";\n\ninterface CleanableCache {\n  size: number;\n  max?: number;\n  clean: () => void;\n}\nconst scheduledCleanup = new WeakSet<CleanableCache>();\nfunction schedule(cache: CleanableCache) {\n  if (cache.size <= (cache.max || -1)) {\n    return;\n  }\n  if (!scheduledCleanup.has(cache)) {\n    scheduledCleanup.add(cache);\n    setTimeout(() => {\n      cache.clean();\n      scheduledCleanup.delete(cache);\n    }, 100);\n  }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport const AutoCleanedWeakCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `WeakCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new WeakCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = WeakCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof WeakCache;\n/**\n * @internal\n */\nexport type AutoCleanedWeakCache<K extends object, V> = WeakCache<K, V>;\n\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport const AutoCleanedStrongCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `StrongCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new StrongCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = StrongCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof StrongCache;\n/**\n * @internal\n */\nexport type AutoCleanedStrongCache<K, V> = StrongCache<K, V>;\n", "import { global } from \"../globals/index.js\";\n\ndeclare global {\n  interface Window {\n    [cacheSizeSymbol]?: Partial<CacheSizes>;\n  }\n}\n\n/**\n * The cache sizes used by various Apollo Client caches.\n *\n * @remarks\n * All configurable caches hold memoized values. If an item is\n * cache-collected, it incurs only a small performance impact and\n * doesn't cause data loss. A smaller cache size might save you memory.\n *\n * You should choose cache sizes appropriate for storing a reasonable\n * number of values rather than every value. To prevent too much recalculation,\n * choose cache sizes that are at least large enough to hold memoized values for\n * all hooks/queries on the screen at any given time.\n */\n/*\n * We assume a \"base value\" of 1000 here, which is already very generous.\n * In most applications, it will be very unlikely that 1000 different queries\n * are on screen at the same time.\n */\nexport interface CacheSizes {\n  /**\n   * Cache size for the [`print`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/print.ts) function.\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This method is called to transform a GraphQL query AST parsed by `gql`\n   * back into a GraphQL string.\n   *\n   * @privateRemarks\n   * This method is called from the `QueryManager` and various `ApolloLink`s,\n   * always with the \"serverQuery\", so the server-facing part of a transformed\n   * `DocumentNode`.\n   */\n  print: number;\n  /**\n   * Cache size for the [`parser`](https://github.com/apollographql/apollo-client/blob/main/src/react/parser/index.ts) function.\n   *\n   * It is called with user-provided `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This method is called by HOCs and hooks.\n   *\n   * @privateRemarks\n   * This function is used directly in HOCs, and nowadays mainly accessed by\n   * calling `verifyDocumentType` from various hooks.\n   * It is called with a user-provided DocumentNode.\n   */\n  parser: number;\n  /**\n   * Cache size for the cache of [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts)\n   * instances with the `cache` option set to `true`.\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * The cache size here should be chosen with other `DocumentTransform`s in mind.\n   * For example, if there was a `DocumentTransform` that would take `x` `DocumentNode`s,\n   * and returned a differently-transformed `DocumentNode` depending if the app is\n   * online or offline, then we assume that the cache returns `2*x` documents.\n   * If that were concatenated with another `DocumentTransform` that would\n   * also duplicate the cache size, you'd need to account for `4*x` documents\n   * returned by the second transform.\n   *\n   * Due to an implementation detail of Apollo Client, if you use custom document\n   * transforms you should always add `n` (the \"base\" number of user-provided\n   * Documents) to the resulting cache size.\n   *\n   * If we assume that the user-provided transforms receive `n` documents and\n   * return `n` documents, the cache size should be `2*n`.\n   *\n   * If we assume that the chain of user-provided transforms receive `n` documents and\n   * return `4*n` documents, the cache size should be `5*n`.\n   *\n   * This size should also then be used in every other cache that mentions that\n   * it operates on a \"transformed\" `DocumentNode`.\n   *\n   * @privateRemarks\n   * Cache size for the `performWork` method of each [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts).\n   *\n   * No user-provided DocumentNode will actually be \"the last one\", as we run the\n   * `defaultDocumentTransform` before *and* after the user-provided transforms.\n   * For that reason, we need the extra `n` here - `n` for \"before transformation\"\n   * plus the actual maximum cache size of the user-provided transform chain.\n   *\n   * This method is called from `transformDocument`, which is called from\n   * `QueryManager` with a user-provided DocumentNode.\n   * It is also called with already-transformed DocumentNodes, assuming the\n   * user provided additional transforms.\n   *\n   */\n  \"documentTransform.cache\": number;\n  /**\n   * A cache inside of [`QueryManager`](https://github.com/apollographql/apollo-client/blob/main/src/core/QueryManager.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `transformCache` used in the `getDocumentInfo` method of `QueryManager`.\n   * Called throughout the `QueryManager` with transformed DocumentNodes.\n   */\n  \"queryManager.getDocumentInfo\": number;\n  /**\n   * A cache inside of [`PersistedQueryLink`](https://github.com/apollographql/apollo-client/blob/main/src/link/persisted-queries/index.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This cache is used to cache the hashes of persisted queries.\n   *\n   * @privateRemarks\n   * Cache size for the `hashesByQuery` cache in the `PersistedQueryLink`.\n   */\n  \"PersistedQueryLink.persistedQueryHashes\": number;\n  /**\n   * Cache used by [`canonicalStringify`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/common/canonicalStringify.ts).\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This cache contains the sorted keys of objects that are stringified by\n   * `canonicalStringify`.\n   * It uses the stringified unsorted keys of objects as keys.\n   * The cache will not grow beyond the size of different object **shapes**\n   * encountered in an application, no matter how much actual data gets stringified.\n   *\n   * @privateRemarks\n   * Cache size for the `sortingMap` in `canonicalStringify`.\n   */\n  canonicalStringify: number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   *\n   * Cache size for the `transform` method of FragmentRegistry.\n   * This function is called as part of the `defaultDocumentTransform` which will be called with\n   * user-provided and already-transformed DocumentNodes.\n   *\n   */\n  \"fragmentRegistry.transform\": number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with fragment names in the form of a string.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * The size of this case should be chosen with the number of fragments in\n   * your application in mind.\n   *\n   * Note:\n   * This function is a dependency of `fragmentRegistry.transform`, so having too small of a cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   *\n   * @privateRemarks\n   * Cache size for the `lookup` method of FragmentRegistry.\n   */\n  \"fragmentRegistry.lookup\": number;\n  /**\n   * Cache size for the `findFragmentSpreads` method of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with transformed `DocumentNode`s, as well as recursively\n   * with every fragment spread referenced within that, or a fragment referenced by a\n   * fragment spread.\n   *\n   * @defaultValue\n   * Defaults to `4000`.\n   *\n   * @remarks\n   *\n   * Note: This function is a dependency of `fragmentRegistry.transform`, so having too small of cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   */\n  \"fragmentRegistry.findFragmentSpreads\": number;\n  /**\n   * Cache size for the `getFragmentDoc` method of [`ApolloCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/core/cache.ts).\n   *\n   * This function is called with user-provided fragment definitions.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This function is called from `readFragment` with user-provided fragment definitions.\n   */\n  \"cache.fragmentQueryDocuments\": number;\n  /**\n   * Cache used in [`removeTypenameFromVariables`](https://github.com/apollographql/apollo-client/blob/main/src/link/remove-typename/removeTypenameFromVariables.ts).\n   *\n   * This function is called transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `getVariableDefinitions` function of `removeTypenameFromVariables`.\n   */\n  \"removeTypenameFromVariables.getVariableDefinitions\": number;\n  /**\n   * Cache size for the `maybeBroadcastWatch` method on [`InMemoryCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/inMemoryCache.ts).\n   *\n   * Note: `maybeBroadcastWatch` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `5000`.\n   *\n   * @remarks\n   * This method is used for dependency tracking in the `InMemoryCache` and\n   * prevents from unnecessary re-renders.\n   * It is recommended to keep this value significantly higher than the number of\n   * possible subscribers you will have active at the same time in your application\n   * at any time.\n   */\n  \"inMemoryCache.maybeBroadcastWatch\": number;\n  /**\n   * Cache size for the `executeSelectionSet` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * Note:\n   * `executeSelectionSet` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `10000`.\n   *\n   * @remarks\n   * Every object that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSelectionSet\": number;\n  /**\n   * Cache size for the `executeSubSelectedArray` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * Note:\n   * `executeSubSelectedArray` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `5000`.\n   *\n   * @remarks\n   * Every array that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSubSelectedArray\": number;\n}\n\nconst cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */\nexport const cacheSizes: Partial<CacheSizes> = { ...global[cacheSizeSymbol] };\n\nexport const enum defaultCacheSizes {\n  parser = 1000,\n  canonicalStringify = 1000,\n  print = 2000,\n  \"documentTransform.cache\" = 2000,\n  \"queryManager.getDocumentInfo\" = 2000,\n  \"PersistedQueryLink.persistedQueryHashes\" = 2000,\n  \"fragmentRegistry.transform\" = 2000,\n  \"fragmentRegistry.lookup\" = 1000,\n  \"fragmentRegistry.findFragmentSpreads\" = 4000,\n  \"cache.fragmentQueryDocuments\" = 1000,\n  \"removeTypenameFromVariables.getVariableDefinitions\" = 2000,\n  \"inMemoryCache.maybeBroadcastWatch\" = 5000,\n  \"inMemoryCache.executeSelectionSet\" = 50000,\n  \"inMemoryCache.executeSubSelectedArray\" = 10000,\n}\n", "export { AutoCleanedStrongCache, AutoCleanedWeakCache } from \"./caches.js\";\nexport type { CacheSizes } from \"./sizes.js\";\nexport { cacheSizes, defaultCacheSizes } from \"./sizes.js\";\n", "import type { OptimisticWrapperFunction } from \"optimism\";\nimport type {\n  InMemoryCache,\n  DocumentTransform,\n  ApolloLink,\n  ApolloCache,\n} from \"../../core/index.js\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport type { CacheSizes } from \"./sizes.js\";\nimport { cacheSizes, defaultCacheSizes } from \"./sizes.js\";\n\nconst globalCaches: {\n  print?: () => number;\n  parser?: () => number;\n  canonicalStringify?: () => number;\n} = {};\n\nexport function registerGlobalCache(\n  name: keyof typeof globalCaches,\n  getSize: () => number\n) {\n  globalCaches[name] = getSize;\n}\n\n/**\n * Transformative helper type to turn a function of the form\n * ```ts\n * (this: any) => R\n * ```\n * into a function of the form\n * ```ts\n * () => R\n * ```\n * preserving the return type, but removing the `this` parameter.\n *\n * @remarks\n *\n * Further down in the definitions of `_getApolloClientMemoryInternals`,\n * `_getApolloCacheMemoryInternals` and `_getInMemoryCacheMemoryInternals`,\n * having the `this` parameter annotation is extremely useful for type checking\n * inside the function.\n *\n * If this is preserved in the exported types, though, it leads to a situation\n * where `ApolloCache.getMemoryInternals` is a function that requires a `this`\n * of the type `ApolloCache`, while the extending class `InMemoryCache` has a\n * `getMemoryInternals` function that requires a `this` of the type\n * `InMemoryCache`.\n * This is not compatible with TypeScript's inheritence system (although it is\n * perfectly correct), and so TypeScript will complain loudly.\n *\n * We still want to define our functions with the `this` annotation, though,\n * and have the return type inferred.\n * (This requirement for return type inference here makes it impossible to use\n * a function overload that is more explicit on the inner overload than it is\n * on the external overload.)\n *\n * So in the end, we use this helper to remove the `this` annotation from the\n * exported function types, while keeping it in the internal implementation.\n *\n */\ntype RemoveThis<T> = T extends (this: any) => infer R ? () => R : never;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloClientMemoryInternals =\n  __DEV__ ?\n    (_getApolloClientMemoryInternals as RemoveThis<\n      typeof _getApolloClientMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getInMemoryCacheMemoryInternals =\n  __DEV__ ?\n    (_getInMemoryCacheMemoryInternals as RemoveThis<\n      typeof _getInMemoryCacheMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloCacheMemoryInternals =\n  __DEV__ ?\n    (_getApolloCacheMemoryInternals as RemoveThis<\n      typeof _getApolloCacheMemoryInternals\n    >)\n  : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults: Record<keyof CacheSizes, number> = {\n    parser: defaultCacheSizes[\"parser\"],\n    canonicalStringify: defaultCacheSizes[\"canonicalStringify\"],\n    print: defaultCacheSizes[\"print\"],\n    \"documentTransform.cache\": defaultCacheSizes[\"documentTransform.cache\"],\n    \"queryManager.getDocumentInfo\":\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"],\n    \"PersistedQueryLink.persistedQueryHashes\":\n      defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"],\n    \"fragmentRegistry.transform\":\n      defaultCacheSizes[\"fragmentRegistry.transform\"],\n    \"fragmentRegistry.lookup\": defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    \"fragmentRegistry.findFragmentSpreads\":\n      defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    \"cache.fragmentQueryDocuments\":\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    \"removeTypenameFromVariables.getVariableDefinitions\":\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    \"inMemoryCache.maybeBroadcastWatch\":\n      defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n    \"inMemoryCache.executeSelectionSet\":\n      defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n    \"inMemoryCache.executeSubSelectedArray\":\n      defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n  };\n  return Object.fromEntries(\n    Object.entries(defaults).map(([k, v]) => [\n      k,\n      cacheSizes[k as keyof CacheSizes] || v,\n    ])\n  );\n}\n\nfunction _getApolloClientMemoryInternals(this: ApolloClient<any>) {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      parser: globalCaches.parser?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(\n          this[\"queryManager\"].documentTransform\n        ),\n      },\n      ...(this.cache.getMemoryInternals?.() as Partial<\n        ReturnType<typeof _getApolloCacheMemoryInternals>\n      > &\n        Partial<ReturnType<typeof _getInMemoryCacheMemoryInternals>>),\n    },\n  };\n}\n\nfunction _getApolloCacheMemoryInternals(this: ApolloCache<any>) {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n    },\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals(this: InMemoryCache) {\n  const fragments = this.config.fragments as\n    | undefined\n    | {\n        findFragmentSpreads?: Function;\n        transform?: Function;\n        lookup?: Function;\n      };\n\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this as any),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(\n        this[\"storeReader\"][\"executeSelectionSet\"]\n      ),\n      executeSubSelectedArray: getWrapperInformation(\n        this[\"storeReader\"][\"executeSubSelectedArray\"]\n      ),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(\n        fragments?.findFragmentSpreads\n      ),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform),\n    },\n  };\n}\n\nfunction isWrapper(f?: Function): f is OptimisticWrapperFunction<any, any> {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f?: Function) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\nfunction transformInfo(transform?: DocumentTransform) {\n  return recurseTransformInfo(transform).map((cache) => ({ cache }));\n}\n\nfunction recurseTransformInfo(transform?: DocumentTransform): number[] {\n  return transform ?\n      [\n        getWrapperInformation(transform?.[\"performWork\"]),\n        ...recurseTransformInfo(transform?.[\"left\"]),\n        ...recurseTransformInfo(transform?.[\"right\"]),\n      ].filter(isDefined)\n    : [];\n}\n\nfunction linkInfo(link?: ApolloLink): unknown[] {\n  return link ?\n      [\n        link?.getMemoryInternals?.(),\n        ...linkInfo(link?.left),\n        ...linkInfo(link?.right),\n      ].filter(isDefined)\n    : [];\n}\n", "import {\n  AutoCleanedStrongCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */\nexport const canonicalStringify = Object.assign(\n  function canonicalStringify(value: any): string {\n    return JSON.stringify(value, stableObjectReplacer);\n  },\n  {\n    reset() {\n      // Clearing the sortingMap will reclaim all cached memory, without\n      // affecting the logical results of canonicalStringify, but potentially\n      // sacrificing performance until the cache is refilled.\n      sortingMap = new AutoCleanedStrongCache<string, readonly string[]>(\n        cacheSizes.canonicalStringify || defaultCacheSizes.canonicalStringify\n      );\n    },\n  }\n);\n\nif (__DEV__) {\n  registerGlobalCache(\"canonicalStringify\", () => sortingMap.size);\n}\n\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nlet sortingMap!: AutoCleanedStrongCache<string, readonly string[]>;\ncanonicalStringify.reset();\n\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key: string, value: any) {\n  if (value && typeof value === \"object\") {\n    const proto = Object.getPrototypeOf(value);\n    // We don't want to mess with objects that are not \"plain\" objects, which\n    // means their prototype is either Object.prototype or null. This check also\n    // prevents needlessly rearranging the indices of arrays.\n    if (proto === Object.prototype || proto === null) {\n      const keys = Object.keys(value);\n      // If keys is already sorted, let JSON.stringify serialize the original\n      // value instead of creating a new object with keys in the same order.\n      if (keys.every(everyKeyInOrder)) return value;\n      const unsortedKey = JSON.stringify(keys);\n      let sortedKeys = sortingMap.get(unsortedKey);\n      if (!sortedKeys) {\n        keys.sort();\n        const sortedKey = JSON.stringify(keys);\n        // Checking for sortedKey in the sortingMap allows us to share the same\n        // sorted array reference for all permutations of the same set of keys.\n        sortedKeys = sortingMap.get(sortedKey) || keys;\n        sortingMap.set(unsortedKey, sortedKeys);\n        sortingMap.set(sortedKey, sortedKeys);\n      }\n      const sortedObject = Object.create(proto);\n      // Reassigning the keys in sorted order will cause JSON.stringify to\n      // serialize them in sorted order.\n      sortedKeys.forEach((key) => {\n        sortedObject[key] = value[key];\n      });\n      return sortedObject;\n    }\n  }\n  return value;\n}\n\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(\n  key: string,\n  i: number,\n  keys: readonly string[]\n): boolean {\n  return i === 0 || keys[i - 1] <= key;\n}\n", "import { newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n  FragmentSpreadNode,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../common/objects.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(\n    obj && typeof obj === \"object\" && typeof obj.__ref === \"string\"\n  );\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\n/**\n * Workaround for a TypeScript quirk:\n * types per default have an implicit index signature that makes them\n * assignable to `StoreObject`.\n * interfaces do not have that implicit index signature, so they cannot\n * be assigned to `StoreObject`.\n * This type just maps over a type or interface that is passed in,\n * implicitly adding the index signature.\n * That way, the result can be assigned to `StoreObject`.\n *\n * This is important if some user-defined interface is used e.g.\n * in cache.modify, where the `toReference` method expects a\n * `StoreObject` as input.\n */\nexport type AsStoreObject<T extends { __typename?: string }> = {\n  [K in keyof T]: T[K];\n};\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === \"StringValue\";\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === \"BooleanValue\";\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === \"IntValue\";\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === \"FloatValue\";\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === \"Variable\";\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === \"ObjectValue\";\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === \"ListValue\";\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === \"EnumValue\";\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === \"NullValue\";\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  \"connection\",\n  \"include\",\n  \"skip\",\n  \"client\",\n  \"rest\",\n  \"export\",\n  \"nonreactive\",\n];\n\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify: (value: any) => string = canonicalStringify;\n\nexport const getStoreKeyName = Object.assign(\n  function (\n    fieldName: string,\n    args?: Record<string, any> | null,\n    directives?: Directives\n  ): string {\n    if (\n      args &&\n      directives &&\n      directives[\"connection\"] &&\n      directives[\"connection\"][\"key\"]\n    ) {\n      if (\n        directives[\"connection\"][\"filter\"] &&\n        (directives[\"connection\"][\"filter\"] as string[]).length > 0\n      ) {\n        const filterKeys =\n          directives[\"connection\"][\"filter\"] ?\n            (directives[\"connection\"][\"filter\"] as string[])\n          : [];\n        filterKeys.sort();\n\n        const filteredArgs = {} as { [key: string]: any };\n        filterKeys.forEach((key) => {\n          filteredArgs[key] = args[key];\n        });\n\n        return `${directives[\"connection\"][\"key\"]}(${storeKeyNameStringify(\n          filteredArgs\n        )})`;\n      } else {\n        return directives[\"connection\"][\"key\"];\n      }\n    }\n\n    let completeFieldName: string = fieldName;\n\n    if (args) {\n      // We can't use `JSON.stringify` here since it's non-deterministic,\n      // and can lead to different store key names being created even though\n      // the `args` object used during creation has the same properties/values.\n      const stringifiedArgs: string = storeKeyNameStringify(args);\n      completeFieldName += `(${stringifiedArgs})`;\n    }\n\n    if (directives) {\n      Object.keys(directives).forEach((key) => {\n        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n        if (directives[key] && Object.keys(directives[key]).length) {\n          completeFieldName += `@${key}(${storeKeyNameStringify(\n            directives[key]\n          )})`;\n        } else {\n          completeFieldName += `@${key}`;\n        }\n      });\n    }\n\n    return completeFieldName;\n  },\n  {\n    setStringify(s: typeof storeKeyNameStringify) {\n      const previous = storeKeyNameStringify;\n      storeKeyNameStringify = s;\n      return previous;\n    },\n  }\n);\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === \"Field\";\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode\n): selection is InlineFragmentNode {\n  return selection.kind === \"InlineFragment\";\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n", "import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode[\"name\"]>;\n};\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  const operations = doc.definitions\n    .filter((d) => d.kind !== \"FragmentDefinition\")\n    .map((definition) => {\n      if (definition.kind !== \"OperationDefinition\") {\n        throw newInvariantError(\n          `Schema type definitions not allowed in queries. Found: \"%s\"`,\n          definition.kind\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains %s operations`,\n    operations.length\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === \"OperationDefinition\"\n  )[0];\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        (definition): definition is OperationDefinitionWithName =>\n          definition.kind === \"OperationDefinition\" && !!definition.name\n      )\n      .map((x) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === \"FragmentDefinition\"\n  );\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === \"query\",\n    \"Must contain a query definition.\"\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    \"Fragment must have exactly one definition.\"\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === \"FragmentDefinition\",\n    \"Must be a fragment definition.\"\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === \"OperationDefinition\") {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === \"query\" ||\n        operation === \"mutation\" ||\n        operation === \"subscription\"\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(\n    \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach((def) => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n", "// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\")\n      ? node.data as Data\n      : node.data = this.makeData(slice.call(array));\n  }\n\n  public peek<T extends any[]>(...array: T): Data | undefined {\n    return this.peekArray(array);\n  }\n\n  public peekArray<T extends IArguments | any[]>(array: T): Data | undefined {\n    let node: Trie<Data> | undefined = this;\n\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map: Trie<Data>[\"weak\" | \"strong\"] =\n        this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n\n      node = map && map.get(array[i]);\n    }\n\n    return node && node.data;\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n", "type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult, TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: TThis) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\nfunction maybe<T>(fn: () => T): T | undefined {\n  try {\n    return fn();\n  } catch (ignored) {}\n}\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\n\nconst host =\n  // Prefer globalThis when available.\n  // https://github.com/benjamn/wryware/issues/347\n  maybe(() => globalThis) ||\n  // Fall back to global, which works in Node.js and may be converted by some\n  // bundlers to the appropriate identifier (window, self, ...) depending on the\n  // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\n  maybe(() => global) ||\n  // Otherwise, use a dummy host that's local to this module. We used to fall\n  // back to using the Array constructor as a namespace, but that was flagged in\n  // https://github.com/benjamn/wryware/issues/347, and can be avoided.\n  Object.create(null) as typeof Array;\n\n// Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\nconst globalHost: typeof host & {\n  [globalKey]?: typeof Slot;\n} = host;\n\nexport const Slot: ReturnType<typeof makeSlotClass> =\n  globalHost[globalKey] ||\n  // Earlier versions of this package stored the globalKey property on the Array\n  // constructor, so we check there as well, to prevent Slot class duplication.\n  (Array as typeof globalHost)[globalKey] ||\n  (function (Slot) {\n    try {\n      Object.defineProperty(globalHost, globalKey, {\n        value: Slot,\n        enumerable: false,\n        writable: false,\n        // When it was possible for globalHost to be the Array constructor (a\n        // legacy Slot dedup strategy), it was important for the property to be\n        // configurable:true so it could be deleted. That does not seem to be as\n        // important when globalHost is the global object, but I don't want to\n        // cause similar problems again, and configurable:true seems safest.\n        // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n        configurable: true\n      });\n    } finally {\n      return Slot;\n    }\n  })(makeSlotClass());\n", "import { Slot } from \"./slot.js\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Relying on the @types/node declaration of global.setTimeout can make\n// things tricky for dowstream projects (see PR #7).\ndeclare function setTimeout(\n  callback: (...args: any[]) => any,\n  ms?: number,\n  ...args: any[]\n): any;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<\n  TArgs extends any[],\n  TYield = any,\n  TReturn = any,\n  TNext = any,\n>(\n  genFn: (...args: TArgs) => Generator<TYield, TReturn, TNext>\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n\n    type Method = (\n      this: Generator<TYield, TReturn, TNext>,\n      arg: any,\n    ) => IteratorResult<TYield, TReturn>;\n\n    const boundNext: Method = bind(gen.next);\n    const boundThrow: Method = bind(gen.throw!);\n\n    return new Promise((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result: any = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<any>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n", "import { Slot } from \"@wry/context\";\nimport { AnyEntry } from \"./entry.js\";\n\nexport const parentEntrySlot = new Slot<AnyEntry | undefined>();\n\nexport function nonReactive<R>(fn: () => R): R {\n  return parentEntrySlot.withValue(void 0, fn);\n}\n\nexport { Slot }\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n", "export type NoInfer<T> = [T][T extends any ? 0 : never];\n\nexport const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const arrayFromSet: <T>(set: Set<T>) => T[] =\n  Array.from ||\n  function (set) {\n    const array: any[] = [];\n    set.forEach(item => array.push(item));\n    return array;\n  };\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n", "import { parentEntrySlot } from \"./context.js\";\nimport { OptimisticWrapOptions } from \"./index.js\";\nimport { Dep } from \"./dep.js\";\nimport { maybeUnsubscribe, arrayFromSet, Unsubscribable } from \"./helpers.js\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public normalizeResult: OptimisticWrapOptions<TArgs, any, any, TValue>[\"normalizeResult\"];\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n\n  const { normalizeResult } = entry;\n  let oldValueCopy: Value<any> | undefined;\n  if (normalizeResult && entry.value.length === 1) {\n    oldValueCopy = valueCopy(entry.value);\n  }\n\n  // Make entry.value an empty array, representing an unknown value.\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n\n    // If we have a viable oldValueCopy to compare with the (successfully\n    // recomputed) new entry.value, and they are not already === identical, give\n    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n    // and/or entry.value[0] to determine the final cached entry.value.\n    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n      try {\n        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n      } catch {\n        // If normalizeResult throws, just use the newer value, rather than\n        // saving the exception as entry.value[1].\n      }\n    }\n\n  } catch (e) {\n    // If entry.fn throws, entry.value will hold that exception.\n    entry.value[1] = e;\n  }\n\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n", "import { AnyEntry } from \"./entry.js\";\nimport { OptimisticWrapOptions } from \"./index.js\";\nimport { parentEntrySlot } from \"./context.js\";\nimport {\n  hasOwnProperty,\n  Unsubscribable,\n  maybeUnsubscribe,\n  arrayFromSet,\n } from \"./helpers.js\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use arrayFromSet(dep).forEach instead of dep.forEach,\n      // because modifying a Set while iterating over it can cause elements in\n      // the Set to be removed from the Set before they've been iterated over.\n      arrayFromSet(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n", "import { Trie } from \"@wry/trie\";\n\nimport { StrongCache, CommonCache } from \"@wry/caches\";\nimport { Entry, AnyEntry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\nimport type { NoInfer } from \"./helpers.js\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  nonReactive,\n  setTimeout,\n  asyncFromGen,\n  Slot,\n} from \"./context.js\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep.js\";\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie: Trie<object> | undefined;\nexport function defaultMakeCacheKey(...args: any[]): object {\n  const trie = defaultKeyTrie || (\n    defaultKeyTrie = new Trie(typeof WeakMap === \"function\")\n  );\n  return trie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // Snapshot of wrap options used to create this wrapper function.\n  options: OptionsWithCacheInstance<TArgs, TKeyArgs, TCacheKey>;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey | undefined) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey | undefined) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey | undefined) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey | undefined;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey. This function is also exposed as\n  // optimistic.options.makeCacheKey, somewhat redundantly.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey | undefined;\n};\n\nexport { CommonCache }\nexport interface CommonCacheConstructor<TCacheKey, TResult, TArgs extends any[]> extends Function {\n  new <K extends TCacheKey, V extends Entry<TArgs, TResult>>(max?: number, dispose?: (value: V, key?: K) => void): CommonCache<K,V>;\n}\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n  TResult = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: NoInfer<TKeyArgs>) => TCacheKey | undefined;\n  // Called when a new value is computed to allow efficient normalization of\n  // results over time, for example by returning older if equal(newer, older).\n  normalizeResult?: (newer: TResult, older: TResult) => TResult;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n  cache?: CommonCache<NoInfer<TCacheKey>, Entry<NoInfer<TArgs>, NoInfer<TResult>>>\n    | CommonCacheConstructor<NoInfer<TCacheKey>, NoInfer<TResult>, NoInfer<TArgs>>;\n};\n\nexport interface OptionsWithCacheInstance<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n  TResult = any,\n> extends OptimisticWrapOptions<TArgs, TKeyArgs, TCacheKey, TResult> {\n  cache: CommonCache<NoInfer<TCacheKey>, Entry<NoInfer<TArgs>, NoInfer<TResult>>>;\n};\n\nconst caches = new Set<CommonCache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(originalFunction: (...args: TArgs) => TResult, {\n  max = Math.pow(2, 16),\n  keyArgs,\n  makeCacheKey = (defaultMakeCacheKey as () => TCacheKey),\n  normalizeResult,\n  subscribe,\n  cache: cacheOption = StrongCache,\n}: OptimisticWrapOptions<TArgs, TKeyArgs, TCacheKey, TResult> = Object.create(null)) {\n  const cache: CommonCache<TCacheKey, Entry<TArgs, TResult>> =\n    typeof cacheOption === \"function\"\n      ? new cacheOption(max, entry => entry.dispose())\n      : cacheOption;\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.normalizeResult = normalizeResult;\n      entry.subscribe = subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get: () => cache.size,\n    configurable: false,\n    enumerable: false,\n  });\n\n  Object.freeze(optimistic.options = {\n    max,\n    keyArgs,\n    makeCacheKey,\n    normalizeResult,\n    subscribe,\n    cache,\n  });\n\n  function dirtyKey(key: TCacheKey | undefined) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey | undefined) {\n    const entry = key && cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey | undefined) {\n    return key ? cache.delete(key) : false;\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey | undefined;\n\n  return Object.freeze(optimistic);\n}\n", "import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\n\nexport type DocumentTransformCacheKey = ReadonlyArray<unknown>;\n\ntype TransformFn = (document: DocumentNode) => DocumentNode;\n\ninterface DocumentTransformOptions {\n  /**\n   * Determines whether to cache the transformed GraphQL document. Caching can speed up repeated calls to the document transform for the same input document. Set to `false` to completely disable caching for the document transform. When disabled, this option takes precedence over the [`getCacheKey`](#getcachekey) option.\n   *\n   * The default value is `true`.\n   */\n  cache?: boolean;\n  /**\n   * Defines a custom cache key for a GraphQL document that will determine whether to re-run the document transform when given the same input GraphQL document. Returns an array that defines the cache key. Return `undefined` to disable caching for that GraphQL document.\n   *\n   * > **Note:** The items in the array may be any type, but also need to be referentially stable to guarantee a stable cache key.\n   *\n   * The default implementation of this function returns the `document` as the cache key.\n   */\n  getCacheKey?: (\n    document: DocumentNode\n  ) => DocumentTransformCacheKey | undefined;\n}\n\nfunction identity(document: DocumentNode) {\n  return document;\n}\n\nexport class DocumentTransform {\n  private readonly transform: TransformFn;\n  private cached: boolean;\n\n  private readonly resultCache =\n    canUseWeakSet ? new WeakSet<DocumentNode>() : new Set<DocumentNode>();\n\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  private getCacheKey(\n    document: DocumentNode\n  ): DocumentTransformCacheKey | undefined {\n    return [document];\n  }\n\n  static identity() {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, { cache: false });\n  }\n\n  static split(\n    predicate: (document: DocumentNode) => boolean,\n    left: DocumentTransform,\n    right: DocumentTransform = DocumentTransform.identity()\n  ) {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          const documentTransform = predicate(document) ? left : right;\n\n          return documentTransform.transformDocument(document);\n        },\n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }\n      ),\n      { left, right }\n    );\n  }\n\n  constructor(\n    transform: TransformFn,\n    options: DocumentTransformOptions = Object.create(null)\n  ) {\n    this.transform = transform;\n\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n    this.cached = options.cache !== false;\n\n    this.resetCache();\n  }\n\n  /**\n   * Resets the internal cache of this transform, if it has one.\n   */\n  resetCache() {\n    if (this.cached) {\n      const stableCacheKeys = new Trie<WeakKey>(canUseWeakMap);\n      this.performWork = wrap(\n        DocumentTransform.prototype.performWork.bind(this),\n        {\n          makeCacheKey: (document) => {\n            const cacheKeys = this.getCacheKey(document);\n            if (cacheKeys) {\n              invariant(\n                Array.isArray(cacheKeys),\n                \"`getCacheKey` must return an array or undefined\"\n              );\n              return stableCacheKeys.lookupArray(cacheKeys);\n            }\n          },\n          max: cacheSizes[\"documentTransform.cache\"],\n          cache: WeakCache<any, any>,\n        }\n      );\n    }\n  }\n\n  private performWork(document: DocumentNode) {\n    checkDocument(document);\n    return this.transform(document);\n  }\n\n  transformDocument(document: DocumentNode) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n\n    const transformedDocument = this.performWork(document);\n\n    this.resultCache.add(transformedDocument);\n\n    return transformedDocument;\n  }\n\n  concat(otherTransform: DocumentTransform): DocumentTransform {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          return otherTransform.transformDocument(\n            this.transformDocument(document)\n          );\n        },\n        // Reasonably assume both transforms handle their own caching\n        { cache: false }\n      ),\n      {\n        left: this,\n        right: otherTransform,\n      }\n    );\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly left?: DocumentTransform;\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly right?: DocumentTransform;\n}\n", "import type { ASTNode } from \"graphql\";\nimport { print as origPrint } from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n\nlet printCache!: AutoCleanedWeakCache<ASTNode, string>;\nexport const print = Object.assign(\n  (ast: ASTNode) => {\n    let result = printCache.get(ast);\n\n    if (!result) {\n      result = origPrint(ast);\n      printCache.set(ast, result);\n    }\n    return result;\n  },\n  {\n    reset() {\n      printCache = new AutoCleanedWeakCache<ASTNode, string>(\n        cacheSizes.print || defaultCacheSizes.print\n      );\n    },\n  }\n);\nprint.reset();\n\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => (printCache ? printCache.size : 0));\n}\n", "// A version of Array.isArray that works better with readonly arrays.\nexport const isArray: (a: any) => a is any[] | readonly any[] = Array.isArray;\n\nexport function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n", "import { invariant } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  ASTNode,\n  ASTVisitFn,\n  InlineFragmentNode,\n} from \"graphql\";\nimport { visit, Kind } from \"graphql\";\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nimport { isArray, isNonEmptyArray } from \"../common/arrays.js\";\n\n// https://github.com/graphql/graphql-js/blob/8d7c8fccf5a9846a50785de04abda58a7eb13fc0/src/language/visitor.ts#L20-L23\ninterface EnterLeaveVisitor<TVisitedNode extends ASTNode> {\n  readonly enter?: ASTVisitFn<TVisitedNode>;\n  readonly leave?: ASTVisitFn<TVisitedNode>;\n}\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig =\n  RemoveNodeConfig<FragmentDefinitionNode>;\nexport type RemoveVariableDefinitionConfig =\n  RemoveNodeConfig<VariableDefinitionNode>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\",\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap\n): boolean {\n  return (\n    !op ||\n    op.selectionSet.selections.every(\n      (selection) =>\n        selection.kind === Kind.FRAGMENT_SPREAD &&\n        isEmpty(fragmentMap[selection.name.value], fragmentMap)\n    )\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return (\n      isEmpty(\n        getOperationDefinition(doc) || getFragmentDefinition(doc),\n        createFragmentMap(getFragmentDefinitions(doc))\n      )\n    ) ?\n      null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  configs: (RemoveDirectiveConfig | GetDirectiveConfig)[]\n) {\n  const names = new Map<string, RemoveDirectiveConfig | GetDirectiveConfig>();\n\n  const tests = new Map<\n    (directive: DirectiveNode) => boolean,\n    RemoveDirectiveConfig | GetDirectiveConfig\n  >();\n\n  configs.forEach((directive) => {\n    if (directive) {\n      if (directive.name) {\n        names.set(directive.name, directive);\n      } else if (directive.test) {\n        tests.set(directive.test, directive);\n      }\n    }\n  });\n\n  return (directive: DirectiveNode) => {\n    let config = names.get(directive.name.value);\n    if (!config && tests.size) {\n      tests.forEach((testConfig, test) => {\n        if (test(directive)) {\n          config = testConfig;\n        }\n      });\n    }\n    return config;\n  };\n}\n\n// Helper interface and function used by removeDirectivesFromDocument to keep\n// track of variable references and fragments spreads found within a given\n// operation or fragment definition.\ninterface InternalInUseInfo {\n  variables: Set<string>;\n  fragmentSpreads: Set<string>;\n  // Set to true when we deliberately remove a fragment definition, so we can\n  // make sure also to remove dangling ...spreads that refer to it.\n  removed?: boolean;\n  // Populated by the populateTransitiveVars helper function below.\n  transitiveVars?: Set<string>;\n}\nfunction makeInUseGetterFunction<TKey>(defaultKey: TKey) {\n  const map = new Map<TKey, InternalInUseInfo>();\n\n  return function inUseGetterFunction(\n    key: TKey = defaultKey\n  ): InternalInUseInfo {\n    let inUse = map.get(key);\n    if (!inUse) {\n      map.set(\n        key,\n        (inUse = {\n          // Variable and fragment spread names used directly within this\n          // operation or fragment definition, as identified by key. These sets\n          // will be populated during the first traversal of the document in\n          // removeDirectivesFromDocument below.\n          variables: new Set(),\n          fragmentSpreads: new Set(),\n        })\n      );\n    }\n    return inUse;\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  checkDocument(doc);\n\n  // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n  // operations as if their names were \"\". Anonymous fragment definitions are\n  // not supposed to be possible, but the same default naming strategy seems\n  // appropriate for that case as well.\n  const getInUseByOperationName = makeInUseGetterFunction<string>(\"\");\n  const getInUseByFragmentName = makeInUseGetterFunction<string>(\"\");\n  const getInUse = (\n    ancestors: readonly (ASTNode | readonly ASTNode[])[]\n  ): InternalInUseInfo | null => {\n    for (\n      let p = 0, ancestor: ASTNode | readonly ASTNode[];\n      p < ancestors.length && (ancestor = ancestors[p]);\n      ++p\n    ) {\n      if (isArray(ancestor)) continue;\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        // If an operation is anonymous, we use the empty string as its key.\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n    invariant.error(`Could not find operation or fragment`);\n    return null;\n  };\n\n  let operationCount = 0;\n  for (let i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const shouldRemoveField = (nodeDirectives: FieldNode[\"directives\"]) =>\n    isNonEmptyArray(nodeDirectives) &&\n    nodeDirectives\n      .map(directiveMatcher)\n      .some(\n        (config: RemoveDirectiveConfig | undefined) => config && config.remove\n      );\n\n  const originalFragmentDefsByPath = new Map<string, FragmentDefinitionNode>();\n\n  // Any time the first traversal of the document below makes a change like\n  // removing a fragment (by returning null), this variable should be set to\n  // true. Once it becomes true, it should never be set to false again. If this\n  // variable remains false throughout the traversal, then we can return the\n  // original doc immediately without any modifications.\n  let firstVisitMadeChanges = false;\n\n  const fieldOrInlineFragmentVisitor: EnterLeaveVisitor<\n    FieldNode | InlineFragmentNode\n  > = {\n    enter(node) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    },\n  };\n\n  const docWithoutDirectiveSubtrees = visit(doc, {\n    // These two AST node types share the same implementation, defined above.\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n\n    VariableDefinition: {\n      enter() {\n        // VariableDefinition nodes do not count as variables in use, though\n        // they do contain Variable nodes that might be visited below. To avoid\n        // counting variable declarations as usages, we skip visiting the\n        // contents of this VariableDefinition node by returning false.\n        return false;\n      },\n    },\n\n    Variable: {\n      enter(node, _key, _parent, _path, ancestors) {\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      },\n    },\n\n    FragmentSpread: {\n      enter(node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n        // We might like to remove this FragmentSpread by returning null here if\n        // the corresponding FragmentDefinition node is also going to be removed\n        // by the logic below, but we can't control the relative order of those\n        // events, so we have to postpone the removal of dangling FragmentSpread\n        // nodes until after the current visit of the document has finished.\n      },\n    },\n\n    FragmentDefinition: {\n      enter(node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave(node, _key, _parent, path) {\n        const originalNode = originalFragmentDefsByPath.get(\n          JSON.stringify(path)\n        );\n        if (node === originalNode) {\n          // If the FragmentNode received by this leave function is identical to\n          // the one received by the corresponding enter function (above), then\n          // the visitor must not have made any changes within this\n          // FragmentDefinition node. This fragment definition may still be\n          // removed if there are no ...spread references to it, but it won't be\n          // removed just because it has only a __typename field.\n          return node;\n        }\n\n        if (\n          // This logic applies only if the document contains one or more\n          // operations, since removing all fragments from a document containing\n          // only fragments makes the document useless.\n          operationCount > 0 &&\n          node.selectionSet.selections.every(\n            (selection) =>\n              selection.kind === Kind.FIELD &&\n              selection.name.value === \"__typename\"\n          )\n        ) {\n          // This is a somewhat opinionated choice: if a FragmentDefinition ends\n          // up having no fields other than __typename, we remove the whole\n          // fragment definition, and later prune ...spread references to it.\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n\n    Directive: {\n      leave(node) {\n        // If a matching directive is found, remove the directive itself. Note\n        // that this does not remove the target (field, argument, etc) of the\n        // directive, but only the directive itself.\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n  });\n\n  if (!firstVisitMadeChanges) {\n    // If our first pass did not change anything about the document, then there\n    // is no cleanup we need to do, and we can return the original doc.\n    return doc;\n  }\n\n  // Utility for making sure inUse.transitiveVars is recursively populated.\n  // Because this logic assumes inUse.fragmentSpreads has been completely\n  // populated and inUse.removed has been set if appropriate,\n  // populateTransitiveVars must be called after that information has been\n  // collected by the first traversal of the document.\n  const populateTransitiveVars = (inUse: InternalInUseInfo) => {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach((childFragmentName) => {\n          populateTransitiveVars(\n            getInUseByFragmentName(childFragmentName)\n          ).transitiveVars!.forEach((varName) => {\n            inUse.transitiveVars!.add(varName);\n          });\n        });\n      }\n    }\n    return inUse;\n  };\n\n  // Since we've been keeping track of fragment spreads used by particular\n  // operations and fragment definitions, we now need to compute the set of all\n  // spreads used (transitively) by any operations in the document.\n  const allFragmentNamesUsed = new Set<string>();\n  docWithoutDirectiveSubtrees.definitions.forEach((def) => {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(\n        getInUseByOperationName(def.name && def.name.value)\n      ).fragmentSpreads.forEach((childFragmentName) => {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (\n      def.kind === Kind.FRAGMENT_DEFINITION &&\n      // If there are no operations in the document, then all fragment\n      // definitions count as usages of their own fragment names. This heuristic\n      // prevents accidentally removing all fragment definitions from the\n      // document just because it contains no operations that use the fragments.\n      operationCount === 0 &&\n      !getInUseByFragmentName(def.name.value).removed\n    ) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  // Now that we have added all fragment spreads used by operations to the\n  // allFragmentNamesUsed set, we can complete the set by transitively adding\n  // all fragment spreads used by those fragments, and so on.\n  allFragmentNamesUsed.forEach((fragmentName) => {\n    // Once all the childFragmentName strings added here have been seen already,\n    // the top-level allFragmentNamesUsed.forEach loop will terminate.\n    populateTransitiveVars(\n      getInUseByFragmentName(fragmentName)\n    ).fragmentSpreads.forEach((childFragmentName) => {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n\n  const fragmentWillBeRemoved = (fragmentName: string) =>\n    !!(\n      // A fragment definition will be removed if there are no spreads that refer\n      // to it, or the fragment was explicitly removed because it had no fields\n      // other than __typename.\n      (\n        !allFragmentNamesUsed.has(fragmentName) ||\n        getInUseByFragmentName(fragmentName).removed\n      )\n    );\n\n  const enterVisitor: EnterLeaveVisitor<\n    FragmentSpreadNode | FragmentDefinitionNode\n  > = {\n    enter(node) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    },\n  };\n\n  return nullIfDocIsEmpty(\n    visit(docWithoutDirectiveSubtrees, {\n      // If the fragment is going to be removed, then leaving any dangling\n      // FragmentSpread nodes with the same name would be a mistake.\n      FragmentSpread: enterVisitor,\n\n      // This is where the fragment definition is actually removed.\n      FragmentDefinition: enterVisitor,\n\n      OperationDefinition: {\n        leave(node) {\n          // Upon leaving each operation in the depth-first AST traversal, prune\n          // any variables that are declared by the operation but unused within.\n          if (node.variableDefinitions) {\n            const usedVariableNames = populateTransitiveVars(\n              // If an operation is anonymous, we use the empty string as its key.\n              getInUseByOperationName(node.name && node.name.value)\n            ).transitiveVars!;\n\n            // According to the GraphQL spec, all variables declared by an\n            // operation must either be used by that operation or used by some\n            // fragment included transitively into that operation:\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            //\n            // To stay on the right side of this validation rule, if/when we\n            // remove the last $var references from an operation or its fragments,\n            // we must also remove the corresponding $var declaration from the\n            // enclosing operation. This pruning applies only to operations and\n            // not fragment definitions, at the moment. Fragments may be able to\n            // declare variables eventually, but today they can only consume them.\n            if (usedVariableNames.size < node.variableDefinitions.length) {\n              return {\n                ...node,\n                variableDefinitions: node.variableDefinitions.filter((varDef) =>\n                  usedVariableNames.has(varDef.variable.name.value)\n                ),\n              };\n            }\n          }\n        },\n      },\n    })\n  );\n}\n\nexport const addTypenameToDocument = Object.assign(\n  function <TNode extends ASTNode>(doc: TNode): TNode {\n    return visit(doc, {\n      SelectionSet: {\n        enter(node, _key, parent) {\n          // Don't add __typename to OperationDefinitions.\n          if (\n            parent &&\n            (parent as OperationDefinitionNode).kind ===\n              Kind.OPERATION_DEFINITION\n          ) {\n            return;\n          }\n\n          // No changes if no selections.\n          const { selections } = node;\n          if (!selections) {\n            return;\n          }\n\n          // If selections already have a __typename, or are part of an\n          // introspection query, do nothing.\n          const skip = selections.some((selection) => {\n            return (\n              isField(selection) &&\n              (selection.name.value === \"__typename\" ||\n                selection.name.value.lastIndexOf(\"__\", 0) === 0)\n            );\n          });\n          if (skip) {\n            return;\n          }\n\n          // If this SelectionSet is @export-ed as an input variable, it should\n          // not have a __typename field (see issue #4691).\n          const field = parent as FieldNode;\n          if (\n            isField(field) &&\n            field.directives &&\n            field.directives.some((d) => d.name.value === \"export\")\n          ) {\n            return;\n          }\n\n          // Create and return a new SelectionSet with a __typename Field.\n          return {\n            ...node,\n            selections: [...selections, TYPENAME_FIELD],\n          };\n        },\n      },\n    });\n  },\n  {\n    added(field: FieldNode): boolean {\n      return field === TYPENAME_FIELD;\n    },\n  }\n);\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === \"connection\";\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some((arg) => arg.name.value === \"key\")\n      ) {\n        invariant.warn(\n          \"Removing an @connection directive even though it does not have a key. \" +\n            \"You may want to use the key parameter to specify a store key.\"\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc)\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some((selection) =>\n      hasDirectivesInSelection(directives, selection, nestedCheck)\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === Kind.VARIABLE &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument)))\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions:\n              node.variableDefinitions ?\n                node.variableDefinitions.filter(\n                  (varDef) =>\n                    !config.some(\n                      (arg) => arg.name === varDef.variable.name.value\n                    )\n                )\n              : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(\n            (argConfig) => argConfig.remove\n          );\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach((arg) => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    })\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode\n  ): null | void {\n    if (config.some((def) => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    })\n  );\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === \"query\") {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: \"query\",\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === \"client\",\n        remove: true,\n      },\n    ],\n    document\n  );\n\n  return modifiedDoc;\n}\n", "import type { DocumentNode } from \"../../core/index.js\";\nimport { getOperationDefinition } from \"./getFromAST.js\";\n\nfunction isOperation(\n  document: DocumentNode,\n  operation: \"query\" | \"mutation\" | \"subscription\"\n) {\n  return getOperationDefinition(document)?.operation === operation;\n}\n\nexport function isMutationOperation(document: DocumentNode) {\n  return isOperation(document, \"mutation\");\n}\n\nexport function isQueryOperation(document: DocumentNode) {\n  return isOperation(document, \"query\");\n}\n\nexport function isSubscriptionOperation(document: DocumentNode) {\n  return isOperation(document, \"subscription\");\n}\n", "import { isNonNullObject } from \"./objects.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A\n  : T extends [infer A, infer B] ? A & B\n  : T extends [infer A, infer B, infer C] ? A & B & C\n  : T extends [infer A, infer B, infer C, infer D] ? A & B & C & D\n  : T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E\n  : T extends (infer U)[] ? U\n  : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> = function (\n  target,\n  source,\n  property\n) {\n  return this.merge(target[property], source[property]);\n};\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler as any as ReconcilerFunction<TContextArgs>\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach((sourceKey) => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(\n              target,\n              source,\n              sourceKey,\n              ...context\n            );\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n", "import { __rest } from \"tslib\";\n\nimport type { FieldPolicy, Reference } from \"../../cache/index.js\";\nimport { mergeDeep } from \"../common/mergeDeep.js\";\n\ntype KeyArgs = FieldPolicy<any>[\"keyArgs\"];\n\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nexport function concatPagination<T = Reference>(\n  keyArgs: KeyArgs = false\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [...existing, ...incoming] : incoming;\n    },\n  };\n}\n\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nexport function offsetLimitPagination<T = Reference>(\n  keyArgs: KeyArgs = false\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming, { args }) {\n      const merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const { offset = 0 } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push(...incoming);\n        }\n      }\n\n      return merged;\n    },\n  };\n}\n\n// Whether TRelayEdge<TNode> is a normalized Reference or a non-normalized\n// object, it needs a .cursor property where the relayStylePagination\n// merge function can store cursor strings taken from pageInfo. Storing an\n// extra reference.cursor property should be safe, and is easier than\n// attempting to update the cursor field of the normalized StoreObject\n// that the reference refers to, or managing edge wrapper objects\n// (something I attempted in #7023, but abandoned because of #7088).\nexport type TRelayEdge<TNode> =\n  | {\n      cursor?: string;\n      node: TNode;\n    }\n  | (Reference & { cursor?: string });\n\nexport type TRelayPageInfo = {\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n  startCursor: string;\n  endCursor: string;\n};\n\nexport type TExistingRelay<TNode> = Readonly<{\n  edges: TRelayEdge<TNode>[];\n  pageInfo: TRelayPageInfo;\n}>;\n\nexport type TIncomingRelay<TNode> = {\n  edges?: TRelayEdge<TNode>[];\n  pageInfo?: TRelayPageInfo;\n};\n\nexport type RelayFieldPolicy<TNode> = FieldPolicy<\n  TExistingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null\n>;\n\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nexport function relayStylePagination<TNode extends Reference = Reference>(\n  keyArgs: KeyArgs = false\n): RelayFieldPolicy<TNode> {\n  return {\n    keyArgs,\n\n    read(existing, { canRead, readField }) {\n      if (!existing) return existing;\n\n      const edges: TRelayEdge<TNode>[] = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach((edge) => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n        firstEdgeCursor = \"\";\n      }\n\n      const { startCursor, endCursor } = existing.pageInfo || {};\n\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor,\n        },\n      };\n    },\n\n    merge(existing, incoming, { args, isReference, readField }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      const incomingEdges =\n        incoming.edges ?\n          incoming.edges.map((edge) => {\n            if (isReference((edge = { ...edge }))) {\n              // In case edge is a Reference, we read out its cursor field and\n              // store it as an extra property of the Reference object.\n              edge.cursor = readField<string>(\"cursor\", edge);\n            }\n            return edge;\n          })\n        : [];\n\n      if (incoming.pageInfo) {\n        const { pageInfo } = incoming;\n        const { startCursor, endCursor } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor,\n            },\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor,\n            },\n          });\n        }\n      }\n\n      let prefix = existing.edges;\n      let suffix: typeof prefix = [];\n\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex((edge) => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex((edge) => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n\n      const edges = [...prefix, ...incomingEdges, ...suffix];\n\n      const pageInfo: TRelayPageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo,\n      };\n\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage,\n          hasNextPage,\n          startCursor,\n          endCursor,\n          ...extras\n        } = incoming.pageInfo;\n\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage)\n            pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo,\n      };\n    },\n  };\n}\n\n// Returns any unrecognized properties of the given object.\nconst getExtras = (obj: Record<string, any>) => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData(): TExistingRelay<any> {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\",\n    },\n  };\n}\n", "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(observer, subscriber) {\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.unsubscribe = function unsubscribe() {\n    if (this._state !== 'closed') {\n      closeSubscription(this);\n      cleanupSubscription(this);\n    }\n  };\n\n  _createClass(Subscription, [{\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = /*#__PURE__*/function () {\n  function SubscriptionObserver(subscription) {\n    this._subscription = subscription;\n  }\n\n  var _proto2 = SubscriptionObserver.prototype;\n\n  _proto2.next = function next(value) {\n    onNotify(this._subscription, 'next', value);\n  };\n\n  _proto2.error = function error(value) {\n    onNotify(this._subscription, 'error', value);\n  };\n\n  _proto2.complete = function complete() {\n    onNotify(this._subscription, 'complete');\n  };\n\n  _createClass(SubscriptionObserver, [{\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = /*#__PURE__*/function () {\n  function Observable(subscriber) {\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  var _proto3 = Observable.prototype;\n\n  _proto3.subscribe = function subscribe(observer) {\n    if (typeof observer !== 'object' || observer === null) {\n      observer = {\n        next: observer,\n        error: arguments[1],\n        complete: arguments[2]\n      };\n    }\n\n    return new Subscription(observer, this._subscriber);\n  };\n\n  _proto3.forEach = function forEach(fn) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof fn !== 'function') {\n        reject(new TypeError(fn + ' is not a function'));\n        return;\n      }\n\n      function done() {\n        subscription.unsubscribe();\n        resolve();\n      }\n\n      var subscription = _this.subscribe({\n        next: function (value) {\n          try {\n            fn(value, done);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  };\n\n  _proto3.map = function map(fn) {\n    var _this2 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this2.subscribe({\n        next: function (value) {\n          try {\n            value = fn(value);\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.filter = function filter(fn) {\n    var _this3 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this3.subscribe({\n        next: function (value) {\n          try {\n            if (!fn(value)) return;\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.reduce = function reduce(fn) {\n    var _this4 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n    return new C(function (observer) {\n      return _this4.subscribe({\n        next: function (value) {\n          var first = !hasValue;\n          hasValue = true;\n\n          if (!first || hasSeed) {\n            try {\n              acc = fn(acc, value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          } else {\n            acc = value;\n          }\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n          observer.next(acc);\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.concat = function concat() {\n    var _this5 = this;\n\n    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n      sources[_key] = arguments[_key];\n    }\n\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscription;\n      var index = 0;\n\n      function startNext(next) {\n        subscription = next.subscribe({\n          next: function (v) {\n            observer.next(v);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (index === sources.length) {\n              subscription = undefined;\n              observer.complete();\n            } else {\n              startNext(C.from(sources[index++]));\n            }\n          }\n        });\n      }\n\n      startNext(_this5);\n      return function () {\n        if (subscription) {\n          subscription.unsubscribe();\n          subscription = undefined;\n        }\n      };\n    });\n  };\n\n  _proto3.flatMap = function flatMap(fn) {\n    var _this6 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscriptions = [];\n\n      var outer = _this6.subscribe({\n        next: function (value) {\n          if (fn) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          }\n\n          var inner = C.from(value).subscribe({\n            next: function (value) {\n              observer.next(value);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              var i = subscriptions.indexOf(inner);\n              if (i >= 0) subscriptions.splice(i, 1);\n              completeIfDone();\n            }\n          });\n          subscriptions.push(inner);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          completeIfDone();\n        }\n      });\n\n      function completeIfDone() {\n        if (outer.closed && subscriptions.length === 0) observer.complete();\n      }\n\n      return function () {\n        subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n        outer.unsubscribe();\n      };\n    });\n  };\n\n  _proto3[SymbolObservable] = function () {\n    return this;\n  };\n\n  Observable.from = function from(x) {\n    var C = typeof this === 'function' ? this : Observable;\n    if (x == null) throw new TypeError(x + ' is not an object');\n    var method = getMethod(x, SymbolObservable);\n\n    if (method) {\n      var observable = method.call(x);\n      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n      if (isObservable(observable) && observable.constructor === C) return observable;\n      return new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    if (hasSymbol('iterator')) {\n      method = getMethod(x, SymbolIterator);\n\n      if (method) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {\n              var item = _step.value;\n              observer.next(item);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < x.length; ++i) {\n            observer.next(x[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n\n    throw new TypeError(x + ' is not observable');\n  };\n\n  Observable.of = function of() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    var C = typeof this === 'function' ? this : Observable;\n    return new C(function (observer) {\n      enqueue(function () {\n        if (observer.closed) return;\n\n        for (var i = 0; i < items.length; ++i) {\n          observer.next(items[i]);\n          if (observer.closed) return;\n        }\n\n        observer.complete();\n      });\n    });\n  };\n\n  _createClass(Observable, null, [{\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}\n\nexport { Observable };\n", "export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\n\t\t\tif (typeof Symbol.for === 'function') {\n\t\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t\t// META: It's a resource locator!\n\t\t\t\tresult = Symbol.for('https://github.com/benlesh/symbol-observable');\n\t\t\t} else {\n\t\t\t\t// Symbol.for didn't exist! The best we can do at this point is a totally \n\t\t\t\t// unique symbol. Note that the string argument here is a descriptor, not\n\t\t\t\t// an identifier. This symbol is unique.\n\t\t\t\tresult = Symbol('https://github.com/benlesh/symbol-observable');\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tSymbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n", "/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n", "import type {\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from \"zen-observable-ts\";\nimport { Observable } from \"zen-observable-ts\";\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport \"symbol-observable\";\n\nexport type { Observer, ObservableSubscription, Subscriber };\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = \"@@observable\" as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  // @ts-expect-error\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };\n", "export interface PendingPromise<TValue> extends Promise<TValue> {\n  status: \"pending\";\n}\n\nexport interface FulfilledPromise<TValue> extends Promise<TValue> {\n  status: \"fulfilled\";\n  value: TValue;\n}\n\nexport interface RejectedPromise<TValue> extends Promise<TValue> {\n  status: \"rejected\";\n  reason: unknown;\n}\n\nexport type PromiseWithState<TValue> =\n  | PendingPromise<TValue>\n  | FulfilledPromise<TValue>\n  | RejectedPromise<TValue>;\n\nexport function createFulfilledPromise<TValue>(value: TValue) {\n  const promise = Promise.resolve(value) as FulfilledPromise<TValue>;\n\n  promise.status = \"fulfilled\";\n  promise.value = value;\n\n  return promise;\n}\n\nexport function createRejectedPromise<TValue = unknown>(reason: unknown) {\n  const promise = Promise.reject(reason) as RejectedPromise<TValue>;\n\n  // prevent potential edge cases leaking unhandled error rejections\n  promise.catch(() => {});\n\n  promise.status = \"rejected\";\n  promise.reason = reason;\n\n  return promise;\n}\n\nexport function isStatefulPromise<TValue>(\n  promise: Promise<TValue>\n): promise is PromiseWithState<TValue> {\n  return \"status\" in promise;\n}\n\nexport function wrapPromiseWithState<TValue>(\n  promise: Promise<TValue>\n): PromiseWithState<TValue> {\n  if (isStatefulPromise(promise)) {\n    return promise;\n  }\n\n  const pendingPromise = promise as PendingPromise<TValue>;\n  pendingPromise.status = \"pending\";\n\n  pendingPromise.then(\n    (value) => {\n      if (pendingPromise.status === \"pending\") {\n        const fulfilledPromise =\n          pendingPromise as unknown as FulfilledPromise<TValue>;\n\n        fulfilledPromise.status = \"fulfilled\";\n        fulfilledPromise.value = value;\n      }\n    },\n    (reason: unknown) => {\n      if (pendingPromise.status === \"pending\") {\n        const rejectedPromise =\n          pendingPromise as unknown as RejectedPromise<TValue>;\n\n        rejectedPromise.status = \"rejected\";\n        rejectedPromise.reason = reason;\n      }\n    }\n  );\n\n  return promise as PromiseWithState<TValue>;\n}\n", "const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n    case \"[object Array]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      const copy: T & any[] = (val as any).slice(0);\n      seen.set(val, copy);\n      copy.forEach(function (child, i) {\n        copy[i] = cloneDeepHelper(child, seen);\n      });\n      return copy;\n    }\n\n    case \"[object Object]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n      // possible in all JS environments, so we will assume they exist/work.\n      const copy = Object.create(Object.getPrototypeOf(val));\n      seen.set(val, copy);\n      Object.keys(val as T & Record<string, any>).forEach((key) => {\n        copy[key] = cloneDeepHelper((val as any)[key], seen);\n      });\n      return copy;\n    }\n\n    default:\n      return val;\n  }\n}\n", "import { isNonNullObject } from \"./objects.js\";\n\nfunction deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach((obj) => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach((name) => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n", "import type { Observer } from \"./Observable.js\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach((obs) => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach((obs) => (obs as any)[method](argument));\n}\n", "import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      key: \"next\" | \"error\"\n    ): (arg: any) => void {\n      return (arg) => {\n        if (examiner) {\n          const both = () =>\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            observer.closed ?\n              /* will be swallowed */ (0 as any)\n            : examiner(arg);\n\n          promiseQueue = promiseQueue.then(both, both).then(\n            (result) => observer.next(result),\n            (error) => observer.error(error)\n          );\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete() {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */ promiseQueue.then(() => observer.complete());\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n", "import { Observable } from \"./Observable.js\";\nimport { canUseSymbol } from \"../common/canUse.js\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (canUseSymbol && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n", "import type {\n  Observer,\n  ObservableSubscription,\n  Subscriber,\n} from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\nexport type ConcastSourcesArray<T> = Array<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super((observer) => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch((_) => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then((iterable) => this.start(iterable), this.handlers.error);\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed each time\n  // this.handlers.complete is called. This private field is not initialized\n  // until the concast.start method is called, which can happen asynchronously\n  // if a Promise is passed to the Concast constructor, so undefined is a\n  // possible value for this.sources before concast.start is called.\n  private sources: Source<T>[] | undefined;\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n    }\n  }\n\n  public removeObserver(observer: Observer<T>) {\n    if (this.observers.delete(observer) && this.observers.size < 1) {\n      // In case there are still any listeners in this.nextResultListeners, and\n      // no error or completion has been broadcast yet, make sure those\n      // observers have a chance to run and then remove themselves from\n      // this.observers.\n      this.handlers.complete();\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve!: (result?: T | PromiseLike<T>) => void;\n  private reject!: (reason: any) => void;\n  public readonly promise = new Promise<T | undefined>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\", T] | [\"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        this.notify(\"next\", result);\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        this.notify(\"error\", error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      const { sub, sources = [] } = this;\n      if (sub !== null) {\n        // If complete is called before concast.start, this.sources may be\n        // undefined, so we use a default value of [] for sources. That works\n        // here because it falls into the if (!value) {...} block, which\n        // appropriately terminates the Concast, even if this.sources might\n        // eventually have been initialized to a non-empty array.\n        const value = sources.shift();\n        if (!value) {\n          if (sub) setTimeout(() => sub.unsubscribe());\n          this.sub = null;\n          if (this.latest && this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          this.notify(\"complete\");\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(\n            (obs) => (this.sub = obs.subscribe(this.handlers)),\n            this.handlers.error\n          );\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  private nextResultListeners = new Set<NextResultListener>();\n\n  private notify(\n    method: Parameters<NextResultListener>[0],\n    arg?: Parameters<NextResultListener>[1]\n  ) {\n    const { nextResultListeners } = this;\n    if (nextResultListeners.size) {\n      // Replacing this.nextResultListeners first ensures it does not grow while\n      // we are iterating over it, potentially leading to infinite loops.\n      this.nextResultListeners = new Set();\n      nextResultListeners.forEach((listener) => listener(method, arg));\n    }\n  }\n\n  // We need a way to run callbacks just *before* the next result (or error or\n  // completion) is delivered by this Concast, so we can be sure any code that\n  // runs as a result of delivering that result/error observes the effects of\n  // running the callback(s). It was tempting to reuse the Observer type instead\n  // of introducing NextResultListener, but that messes with the sizing and\n  // maintenance of this.observers, and ends up being more code overall.\n  beforeNext(callback: NextResultListener) {\n    let called = false;\n    this.nextResultListeners.add((method, arg) => {\n      if (!called) {\n        called = true;\n        callback(method, arg);\n      }\n    });\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  };\n}\n\ntype NextResultListener = (\n  method: \"next\" | \"error\" | \"complete\",\n  arg?: any\n) => any;\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n", "import type {\n  ExecutionPatchIncrementalResult,\n  ExecutionPatchInitialResult,\n  ExecutionPatchResult,\n  ApolloPayloadResult,\n  FetchResult,\n} from \"../../link/core/index.js\";\nimport { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\n\nexport function isExecutionPatchIncrementalResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchIncrementalResult {\n  return \"incremental\" in value;\n}\n\nexport function isExecutionPatchInitialResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchInitialResult<T> {\n  return \"hasNext\" in value && \"data\" in value;\n}\n\nexport function isExecutionPatchResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchResult<T> {\n  return (\n    isExecutionPatchIncrementalResult(value) ||\n    isExecutionPatchInitialResult(value)\n  );\n}\n\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(\n  value: unknown\n): value is ApolloPayloadResult {\n  return isNonNullObject(value) && \"payload\" in value;\n}\n\nexport function mergeIncrementalData<TData extends object>(\n  prevResult: TData,\n  result: ExecutionPatchResult<TData>\n) {\n  let mergedData = prevResult;\n  const merger = new DeepMerger();\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach(({ data, path }) => {\n      for (let i = path.length - 1; i >= 0; --i) {\n        const key = path[i];\n        const isNumericKey = !isNaN(+key);\n        const parent: Record<string | number, any> = isNumericKey ? [] : {};\n        parent[key] = data;\n        data = parent as typeof data;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData as TData;\n}\n", "import type { FetchResult } from \"../../link/core/index.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\n\nexport function graphQLResultHasError<T>(result: FetchResult<T>): boolean {\n  const errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\n\nexport function getGraphQLErrorsFromResult<T>(result: FetchResult<T>) {\n  const graphQLErrors =\n    isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach((incrementalResult) => {\n      if (incrementalResult.errors) {\n        graphQLErrors.push(...incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}\n", "import type { TupleToIntersection } from \"./mergeDeep.js\";\n\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact<TArgs extends any[]>(\n  ...objects: TArgs\n): TupleToIntersection<TArgs> {\n  const result = Object.create(null);\n\n  objects.forEach((obj) => {\n    if (!obj) return;\n    Object.keys(obj).forEach((key) => {\n      const value = (obj as any)[key];\n      if (value !== void 0) {\n        result[key] = value;\n      }\n    });\n  });\n\n  return result;\n}\n", "import type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\n\nimport { compact } from \"./compact.js\";\n\ntype OptionsUnion<TData, TVariables extends OperationVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext, any>;\n\nexport function mergeOptions<\n  TDefaultOptions extends Partial<OptionsUnion<any, any, any>>,\n  TOptions extends TDefaultOptions,\n>(\n  defaults: TDefaultOptions | Partial<TDefaultOptions> | undefined,\n  options: TOptions | Partial<TOptions>\n): TOptions & TDefaultOptions {\n  return compact(\n    defaults,\n    options,\n    options.variables && {\n      variables: compact({\n        ...(defaults && defaults.variables),\n        ...options.variables,\n      }),\n    }\n  );\n}\n", "import type { DeepOmit } from \"../types/DeepOmit.js\";\nimport { isPlainObject } from \"./objects.js\";\n\nexport function omitDeep<T, K extends string>(value: T, key: K) {\n  return __omitDeep(value, key);\n}\n\nfunction __omitDeep<T, K extends string>(\n  value: T,\n  key: K,\n  known = new Map<any, any>()\n): DeepOmit<T, K> {\n  if (known.has(value)) {\n    return known.get(value);\n  }\n\n  let modified = false;\n\n  if (Array.isArray(value)) {\n    const array: any[] = [];\n    known.set(value, array);\n\n    value.forEach((value, index) => {\n      const result = __omitDeep(value, key, known);\n      modified ||= result !== value;\n\n      array[index] = result;\n    });\n\n    if (modified) {\n      return array as DeepOmit<T, K>;\n    }\n  } else if (isPlainObject(value)) {\n    const obj = Object.create(Object.getPrototypeOf(value));\n    known.set(value, obj);\n\n    Object.keys(value).forEach((k) => {\n      if (k === key) {\n        modified = true;\n        return;\n      }\n\n      const result = __omitDeep(value[k], key, known);\n      modified ||= result !== value[k];\n\n      obj[k] = result;\n    });\n\n    if (modified) {\n      return obj;\n    }\n  }\n\n  return value as DeepOmit<T, K>;\n}\n", "import { omitDeep } from \"./omitDeep.js\";\n\nexport function stripTypename<T>(value: T) {\n  return omitDeep(value, \"__typename\");\n}\n", "export {};\n//# sourceMappingURL=IsStrictlyAny.js.map", "export { DEV, maybe } from \"./globals/index.js\";\n\nexport type {\n  DirectiveInfo,\n  InclusionDirectives,\n} from \"./graphql/directives.js\";\nexport {\n  shouldInclude,\n  hasDirectives,\n  hasAnyDirectives,\n  hasAllDirectives,\n  hasClientExports,\n  getDirectiveNames,\n  getInclusionDirectives,\n} from \"./graphql/directives.js\";\n\nexport type { DocumentTransformCacheKey } from \"./graphql/DocumentTransform.js\";\nexport { DocumentTransform } from \"./graphql/DocumentTransform.js\";\n\nexport type { FragmentMap, FragmentMapFunction } from \"./graphql/fragments.js\";\nexport {\n  createFragmentMap,\n  getFragmentQueryDocument,\n  getFragmentFromSelection,\n} from \"./graphql/fragments.js\";\n\nexport {\n  checkDocument,\n  getOperationDefinition,\n  getOperationName,\n  getFragmentDefinitions,\n  getQueryDefinition,\n  getFragmentDefinition,\n  getMainDefinition,\n  getDefaultValues,\n} from \"./graphql/getFromAST.js\";\n\nexport { print } from \"./graphql/print.js\";\n\nexport type {\n  StoreObject,\n  AsStoreObject,\n  Reference,\n  StoreValue,\n  Directives,\n  VariableValue,\n} from \"./graphql/storeUtils.js\";\nexport {\n  makeReference,\n  isDocumentNode,\n  isReference,\n  isField,\n  isInlineFragment,\n  valueToObjectRepresentation,\n  storeKeyNameFromField,\n  argumentsObjectFromField,\n  resultKeyNameFromField,\n  getStoreKeyName,\n  getTypenameFromResult,\n} from \"./graphql/storeUtils.js\";\n\nexport type {\n  RemoveNodeConfig,\n  GetNodeConfig,\n  RemoveDirectiveConfig,\n  GetDirectiveConfig,\n  RemoveArgumentsConfig,\n  GetFragmentSpreadConfig,\n  RemoveFragmentSpreadConfig,\n  RemoveFragmentDefinitionConfig,\n  RemoveVariableDefinitionConfig,\n} from \"./graphql/transform.js\";\nexport {\n  addTypenameToDocument,\n  buildQueryFromSelectionSet,\n  removeDirectivesFromDocument,\n  removeConnectionDirectiveFromDocument,\n  removeArgumentsFromDocument,\n  removeFragmentSpreadFromDocument,\n  removeClientSetsFromDocument,\n} from \"./graphql/transform.js\";\n\nexport {\n  isMutationOperation,\n  isQueryOperation,\n  isSubscriptionOperation,\n} from \"./graphql/operations.js\";\n\nexport {\n  concatPagination,\n  offsetLimitPagination,\n  relayStylePagination,\n} from \"./policies/pagination.js\";\n\nexport type {\n  Observer,\n  ObservableSubscription,\n} from \"./observables/Observable.js\";\nexport { Observable } from \"./observables/Observable.js\";\n\nexport type { PromiseWithState } from \"./promises/decoration.js\";\nexport {\n  isStatefulPromise,\n  createFulfilledPromise,\n  createRejectedPromise,\n  wrapPromiseWithState,\n} from \"./promises/decoration.js\";\n\nexport * from \"./common/mergeDeep.js\";\nexport * from \"./common/cloneDeep.js\";\nexport * from \"./common/maybeDeepFreeze.js\";\nexport * from \"./observables/iteration.js\";\nexport * from \"./observables/asyncMap.js\";\nexport * from \"./observables/Concast.js\";\nexport * from \"./observables/subclassing.js\";\nexport * from \"./common/arrays.js\";\nexport * from \"./common/objects.js\";\nexport * from \"./common/errorHandling.js\";\nexport * from \"./common/canUse.js\";\nexport * from \"./common/compact.js\";\nexport * from \"./common/makeUniqueId.js\";\nexport * from \"./common/stringifyForDisplay.js\";\nexport * from \"./common/mergeOptions.js\";\nexport * from \"./common/incrementalResult.js\";\n\nexport { canonicalStringify } from \"./common/canonicalStringify.js\";\nexport { omitDeep } from \"./common/omitDeep.js\";\nexport { stripTypename } from \"./common/stripTypename.js\";\n\nexport * from \"./types/IsStrictlyAny.js\";\nexport type { DeepOmit } from \"./types/DeepOmit.js\";\nexport type { DeepPartial } from \"./types/DeepPartial.js\";\nexport type { OnlyRequiredProperties } from \"./types/OnlyRequiredProperties.js\";\n\nexport {\n  AutoCleanedStrongCache,\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"./caching/index.js\";\nexport type { CacheSizes } from \"./caching/index.js\";\n", "import { Observable } from \"../../utilities/index.js\";\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>((observer) => {\n    observer.error(errorValue);\n  });\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport type { Observable } from \"../../utilities/index.js\";\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: (data) => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n", "import { Observable } from \"../../utilities/index.js\";\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>((observer) => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n", "export type ServerError = Error & {\n  response: Response;\n  result: Record<string, any> | string;\n  statusCode: number;\n};\n\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = \"ServerError\";\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nimport type { GraphQLRequest } from \"../core/index.js\";\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    \"query\",\n    \"operationName\",\n    \"variables\",\n    \"extensions\",\n    \"context\",\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw newInvariantError(`illegal argument: %s`, key);\n    }\n  }\n\n  return operation;\n}\n", "import type { GraphQLRequest, Operation } from \"../core/index.js\";\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest\n): Operation {\n  let context = { ...starting };\n  const setContext: Operation[\"setContext\"] = (next) => {\n    if (typeof next === \"function\") {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext: Operation[\"getContext\"] = () => ({ ...context });\n\n  Object.defineProperty(operation, \"setContext\", {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, \"getContext\", {\n    enumerable: false,\n    value: getContext,\n  });\n\n  return operation as Operation;\n}\n", "import type { GraphQLRequest, Operation } from \"../core/index.js\";\nimport { getOperationName } from \"../../utilities/index.js\";\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // Best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== \"string\" ?\n        getOperationName(transformedOperation.query) || undefined\n      : \"\";\n  }\n\n  return transformedOperation as Operation;\n}\n", "import type { VariableDefinitionNode, DocumentNode } from \"graphql\";\nimport { visit } from \"graphql\";\n\nexport function filterOperationVariables(\n  variables: Record<string, any>,\n  query: DocumentNode\n) {\n  const result = { ...variables };\n  const unusedNames = new Set(Object.keys(variables));\n  visit(query, {\n    Variable(node, _key, parent) {\n      // A variable type definition at the top level of a query is not\n      // enough to silence server-side errors about the variable being\n      // unused, so variable definitions do not count as usage.\n      // https://spec.graphql.org/draft/#sec-All-Variables-Used\n      if (\n        parent &&\n        (parent as VariableDefinitionNode).kind !== \"VariableDefinition\"\n      ) {\n        unusedNames.delete(node.name.value);\n      }\n    },\n  });\n  unusedNames.forEach((name) => {\n    delete result![name];\n  });\n  return result;\n}\n", "import \"../../utilities/globals/index.js\";\n\nexport { fromError } from \"./fromError.js\";\nexport { toPromise } from \"./toPromise.js\";\nexport { fromPromise } from \"./fromPromise.js\";\nexport type { ServerError } from \"./throwServerError.js\";\nexport { throwServerError } from \"./throwServerError.js\";\nexport { validateOperation } from \"./validateOperation.js\";\nexport { createOperation } from \"./createOperation.js\";\nexport { transformOperation } from \"./transformOperation.js\";\nexport { filterOperationVariables } from \"./filterOperationVariables.js\";\n", "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\n\nimport type { Observer } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest,\n} from \"./types.js\";\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from \"../utils/index.js\";\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    let ret: ApolloLink;\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      ret = new ApolloLink((operation) => {\n        return test(operation) ?\n            leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      ret = new ApolloLink((operation, forward) => {\n        return test(operation) ?\n            leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n    return Object.assign(ret, { left: leftLink, right: rightLink });\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation))\n        )\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        `You are calling concat on a terminating link, which will have no effect %o`,\n        firstLink\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    let ret: ApolloLink;\n    if (isTerminating(nextLink)) {\n      ret = new ApolloLink(\n        (operation) =>\n          firstLink.request(\n            operation,\n            (op) => nextLink.request(op) || Observable.of()\n          ) || Observable.of()\n      );\n    } else {\n      ret = new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, (op) => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n    return Object.assign(ret, { left: firstLink, right: nextLink });\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink\n  ): Observable<FetchResult> | null {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly left?: ApolloLink;\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly right?: ApolloLink;\n\n  /**\n   * @internal\n   * Can be provided by a link that has an internal cache to report it's memory details.\n   */\n  getMemoryInternals?: () => unknown;\n}\n", "import { ApolloLink } from \"./ApolloLink.js\";\n\nexport const split = ApolloLink.split;\n", "import { ApolloLink } from \"./ApolloLink.js\";\n\nexport const empty = ApolloLink.empty;\n", "import { ApolloLink } from \"./ApolloLink.js\";\n\nexport const from = ApolloLink.from;\n", "import { ApolloLink } from \"./ApolloLink.js\";\n\nexport const concat = ApolloLink.concat;\n", "import { ApolloLink } from \"./ApolloLink.js\";\n\nexport const execute = ApolloLink.execute;\n", "export {};\n//# sourceMappingURL=types.js.map", "import \"../../utilities/globals/index.js\";\n\nexport { empty } from \"./empty.js\";\nexport { from } from \"./from.js\";\nexport { split } from \"./split.js\";\nexport { concat } from \"./concat.js\";\nexport { execute } from \"./execute.js\";\nexport { ApolloLink } from \"./ApolloLink.js\";\n\nexport * from \"./types.js\";\n", "const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n      // Fall through...\n    case '[object DataView]': {\n      let len = a.byteLength;\n      if (len === b.byteLength) {\n        while (len-- && a[len] === b[len]) {\n          // Keep looping as long as the bytes are equal.\n        }\n      }\n      return len === -1;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n", "import equal from \"@wry/equality\";\n\nimport type {\n  DirectiveNode,\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  SelectionNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type { ApolloQueryResult, OperationVariables } from \"./types.js\";\n\nimport type { FragmentMap } from \"../utilities/index.js\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n  getFragmentFromSelection,\n  getMainDefinition,\n  isField,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(\n  query: DocumentNode,\n  { data: aData, ...aRest }: Partial<ApolloQueryResult<unknown>>,\n  { data: bData, ...bRest }: Partial<ApolloQueryResult<unknown>>,\n  variables?: OperationVariables\n): boolean {\n  return (\n    equal(aRest, bRest) &&\n    equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      variables,\n    })\n  );\n}\n\n// Encapsulates the information used by equalBySelectionSet that does not change\n// during the recursion.\ninterface CompareContext<TVariables> {\n  fragmentMap: FragmentMap;\n  variables: TVariables | undefined;\n}\n\nfunction equalBySelectionSet(\n  selectionSet: SelectionSetNode,\n  aResult: any,\n  bResult: any,\n  context: CompareContext<OperationVariables>\n): boolean {\n  if (aResult === bResult) {\n    return true;\n  }\n\n  const seenSelections = new Set<SelectionNode>();\n\n  // Returning true from this Array.prototype.every callback function skips the\n  // current field/subtree. Returning false aborts the entire traversal\n  // immediately, causing equalBySelectionSet to return false.\n  return selectionSet.selections.every((selection) => {\n    // Avoid re-processing the same selection at the same level of recursion, in\n    // case the same field gets included via multiple indirect fragment spreads.\n    if (seenSelections.has(selection)) return true;\n    seenSelections.add(selection);\n\n    // Ignore @skip(if: true) and @include(if: false) fields.\n    if (!shouldInclude(selection, context.variables)) return true;\n\n    // If the field or (named) fragment spread has a @nonreactive directive on\n    // it, we don't care if it's different, so we pretend it's the same.\n    if (selectionHasNonreactiveDirective(selection)) return true;\n\n    if (isField(selection)) {\n      const resultKey = resultKeyNameFromField(selection);\n      const aResultChild = aResult && aResult[resultKey];\n      const bResultChild = bResult && bResult[resultKey];\n      const childSelectionSet = selection.selectionSet;\n\n      if (!childSelectionSet) {\n        // These are scalar values, so we can compare them with deep equal\n        // without redoing the main recursive work.\n        return equal(aResultChild, bResultChild);\n      }\n\n      const aChildIsArray = Array.isArray(aResultChild);\n      const bChildIsArray = Array.isArray(bResultChild);\n      if (aChildIsArray !== bChildIsArray) return false;\n      if (aChildIsArray && bChildIsArray) {\n        const length = aResultChild.length;\n        if (bResultChild.length !== length) {\n          return false;\n        }\n        for (let i = 0; i < length; ++i) {\n          if (\n            !equalBySelectionSet(\n              childSelectionSet,\n              aResultChild[i],\n              bResultChild[i],\n              context\n            )\n          ) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      return equalBySelectionSet(\n        childSelectionSet,\n        aResultChild,\n        bResultChild,\n        context\n      );\n    } else {\n      const fragment = getFragmentFromSelection(selection, context.fragmentMap);\n      if (fragment) {\n        // The fragment might === selection if it's an inline fragment, but\n        // could be !== if it's a named fragment ...spread.\n        if (selectionHasNonreactiveDirective(fragment)) return true;\n\n        return equalBySelectionSet(\n          fragment.selectionSet,\n          // Notice that we reuse the same aResult and bResult values here,\n          // since the fragment ...spread does not specify a field name, but\n          // consists of multiple fields (within the fragment's selection set)\n          // that should be applied to the current result value(s).\n          aResult,\n          bResult,\n          context\n        );\n      }\n    }\n  });\n}\n\nfunction selectionHasNonreactiveDirective(\n  selection:\n    | FieldNode\n    | InlineFragmentNode\n    | FragmentSpreadNode\n    | FragmentDefinitionNode\n): boolean {\n  return (\n    !!selection.directives && selection.directives.some(directiveIsNonreactive)\n  );\n}\n\nfunction directiveIsNonreactive(dir: DirectiveNode): boolean {\n  return dir.name.value === \"nonreactive\";\n}\n", "import type { DocumentNode } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport type {\n  StoreObject,\n  Reference,\n  DeepPartial,\n} from \"../../utilities/index.js\";\nimport {\n  Observable,\n  cacheSizes,\n  defaultCacheSizes,\n  getFragmentQueryDocument,\n  mergeDeepArray,\n} from \"../../utilities/index.js\";\nimport type { DataProxy } from \"./types/DataProxy.js\";\nimport type { Cache } from \"./types/Cache.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport type {\n  OperationVariables,\n  TypedDocumentNode,\n} from \"../../core/types.js\";\nimport type { MissingTree } from \"./types/common.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\n/**\n * Watched fragment options.\n */\nexport interface WatchFragmentOptions<TData, TVars> {\n  /**\n   * A GraphQL fragment document parsed into an AST with the `gql`\n   * template literal.\n   *\n   * @docGroup 1. Required options\n   */\n  fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n  /**\n   * An object containing a `__typename` and primary key fields\n   * (such as `id`) identifying the entity object from which the fragment will\n   * be retrieved, or a `{ __ref: \"...\" }` reference, or a `string` ID\n   * (uncommon).\n   *\n   * @docGroup 1. Required options\n   */\n  from: StoreObject | Reference | string;\n  /**\n   * Any variables that the GraphQL fragment may depend on.\n   *\n   * @docGroup 2. Cache options\n   */\n  variables?: TVars;\n  /**\n   * The name of the fragment defined in the fragment document.\n   *\n   * Required if the fragment document includes more than one fragment,\n   * optional otherwise.\n   *\n   * @docGroup 2. Cache options\n   */\n  fragmentName?: string;\n  /**\n   * If `true`, `watchFragment` returns optimistic results.\n   *\n   * The default value is `true`.\n   *\n   * @docGroup 2. Cache options\n   */\n  optimistic?: boolean;\n}\n\n/**\n * Watched fragment results.\n */\nexport type WatchFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing: MissingTree;\n    };\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  public readonly assumeImmutableResults: boolean = false;\n\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>\n  ): TData | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic\n      : options.optimistic === false ? null\n      : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => (updateResult = options.update(this)),\n      optimisticId\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    return false;\n  }\n\n  // DataProxy API\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic,\n    });\n  }\n\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n  public watchFragment<TData = any, TVars = OperationVariables>(\n    options: WatchFragmentOptions<TData, TVars>\n  ): Observable<WatchFragmentResult<TData>> {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...otherOptions\n    } = options;\n    const query = this.getFragmentDoc(fragment, fragmentName);\n\n    const diffOptions: Cache.DiffOptions<TData, TVars> = {\n      ...otherOptions,\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : this.identify(from),\n      query,\n      optimistic,\n    };\n\n    let latestDiff: DataProxy.DiffResult<TData> | undefined;\n\n    return new Observable((observer) => {\n      return this.watch<TData, TVars>({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (\n            // Always ensure we deliver the first result\n            latestDiff &&\n            equalByQuery(\n              query,\n              { data: latestDiff?.result },\n              { data: diff.result }\n            )\n          ) {\n            return;\n          }\n\n          const result = {\n            data: diff.result as DeepPartial<TData>,\n            complete: !!diff.complete,\n          } as WatchFragmentResult<TData>;\n\n          if (diff.missing) {\n            result.missing = mergeDeepArray(\n              diff.missing.map((error) => error.missing)\n            );\n          }\n\n          latestDiff = diff;\n          observer.next(result);\n        },\n      });\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument, {\n    max:\n      cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    cache: WeakCache,\n  });\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        dataId: id || \"ROOT_QUERY\",\n        result: data,\n      })\n    );\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        query: this.getFragmentDoc(fragment, fragmentName),\n        dataId: id,\n        result: data,\n      })\n    );\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public getMemoryInternals?: typeof getApolloCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n", "import type { DocumentNode, FieldNode } from \"graphql\";\n\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n  isReference,\n  AsStoreObject,\n} from \"../../../utilities/index.js\";\n\nimport type { StorageType } from \"../../inmemory/policies.js\";\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport type MissingTree =\n  | string\n  | {\n      readonly [key: string]: MissingTree;\n    };\n\nexport class MissingFieldError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly path: MissingTree | Array<string | number>,\n    public readonly query: DocumentNode,\n    public readonly variables?: Record<string, any>\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    if (Array.isArray(this.path)) {\n      this.missing = this.message;\n      for (let i = this.path.length - 1; i >= 0; --i) {\n        this.missing = { [this.path[i]]: this.missing };\n      }\n    } else {\n      this.missing = this.path;\n    }\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n    // on Android (see issue #3236).\n    (this as any).__proto__ = MissingFieldError.prototype;\n  }\n\n  public readonly missing: MissingTree;\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\ndeclare const _deleteModifier: unique symbol;\nexport interface DeleteModifier {\n  [_deleteModifier]: true;\n}\ndeclare const _invalidateModifier: unique symbol;\nexport interface InvalidateModifier {\n  [_invalidateModifier]: true;\n}\ndeclare const _ignoreModifier: unique symbol;\nexport interface IgnoreModifier {\n  [_ignoreModifier]: true;\n}\n\nexport type ModifierDetails = {\n  DELETE: DeleteModifier;\n  INVALIDATE: InvalidateModifier;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n};\n\nexport type Modifier<T> = (\n  value: T,\n  details: ModifierDetails\n) => T | DeleteModifier | InvalidateModifier | undefined;\n\ntype StoreObjectValueMaybeReference<StoreVal> =\n  StoreVal extends Array<Record<string, any>> ?\n    StoreVal extends Array<infer Item> ?\n      Item extends Record<string, any> ?\n        ReadonlyArray<AsStoreObject<Item> | Reference>\n      : never\n    : never\n  : StoreVal extends Record<string, any> ? AsStoreObject<StoreVal> | Reference\n  : StoreVal;\n\nexport type AllFieldsModifier<Entity extends Record<string, any>> = Modifier<\n  Entity[keyof Entity] extends infer Value ?\n    StoreObjectValueMaybeReference<Exclude<Value, undefined>>\n  : never\n>;\n\nexport type Modifiers<T extends Record<string, any> = Record<string, unknown>> =\n  Partial<{\n    [FieldName in keyof T]: Modifier<\n      StoreObjectValueMaybeReference<Exclude<T[FieldName], undefined>>\n    >;\n  }>;\n", "import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type { NormalizedCache, InMemoryCacheConfig } from \"./types.js\";\n\nimport type { KeyFieldsContext } from \"./policies.js\";\nimport type { FragmentRegistryAPI } from \"./fragmentRegistry.js\";\n\nimport type {\n  Reference,\n  StoreValue,\n  StoreObject,\n  FragmentMap,\n  FragmentMapFunction,\n} from \"../../utilities/index.js\";\nimport {\n  isReference,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n  compact,\n  createFragmentMap,\n  getFragmentDefinitions,\n  isArray,\n} from \"../../utilities/index.js\";\n\nexport const { hasOwnProperty: hasOwn } = Object.prototype;\n\nexport function isNullish(value: any): value is null | undefined {\n  return value === null || value === void 0;\n}\n\nexport { isArray };\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n        !isNullish(id) ? { id }\n        : !isNullish(_id) ? { _id }\n        : void 0;\n    }\n\n    // If there is no object.id, fall back to object._id.\n    if (isNullish(id) && !isNullish(_id)) {\n      id = _id;\n    }\n\n    if (!isNullish(id)) {\n      return `${__typename}:${\n        typeof id === \"number\" || typeof id === \"string\" ?\n          id\n        : JSON.stringify(id)\n      }`;\n    }\n  }\n}\n\nconst defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  // Thanks to the shouldCanonizeResults helper, this should be the only line\n  // you have to change to reenable canonization by default in the future.\n  canonizeResults: false,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function shouldCanonizeResults(\n  config: Pick<InMemoryCacheConfig, \"canonizeResults\">\n): boolean {\n  const value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference\n): string | undefined {\n  return isReference(objectOrReference) ?\n      (store.get(objectOrReference.__ref, \"__typename\") as string)\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>\n): boolean {\n  if (isNonNullObject(result)) {\n    return isArray(result) ?\n        result.every((item) =>\n          selectionSetMatchesResult(selectionSet, item, variables)\n        )\n      : selectionSet.selections.every((field) => {\n          if (isField(field) && shouldInclude(field, variables)) {\n            const key = resultKeyNameFromField(field);\n            return (\n              hasOwn.call(result, key) &&\n              (!field.selectionSet ||\n                selectionSetMatchesResult(\n                  field.selectionSet,\n                  result[key],\n                  variables\n                ))\n            );\n          }\n          // If the selection has been skipped with @skip(true) or\n          // @include(false), it should not count against the matching. If\n          // the selection is not a field, it must be a fragment (inline or\n          // named). We will determine if selectionSetMatchesResult for that\n          // fragment when we get to it, so for now we return true.\n          return true;\n        });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue\n): value is StoreObject {\n  return isNonNullObject(value) && !isReference(value) && !isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}\n\nexport function extractFragmentContext(\n  document: DocumentNode,\n  fragments?: FragmentRegistryAPI\n): {\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n} {\n  // FragmentMap consisting only of fragments defined directly in document, not\n  // including other fragments registered in the FragmentRegistry.\n  const fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n  return {\n    fragmentMap,\n    lookupFragment(name) {\n      let def: FragmentDefinitionNode | null = fragmentMap[name];\n      if (!def && fragments) {\n        def = fragments.lookup(name);\n      }\n      return def || null;\n    },\n  };\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\n\nimport type {\n  StoreValue,\n  StoreObject,\n  Reference,\n} from \"../../utilities/index.js\";\nimport {\n  isReference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\nimport type { NormalizedCache, NormalizedCacheObject } from \"./types.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nimport type { Policies, StorageType } from \"./policies.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n  InvalidateModifier,\n  DeleteModifier,\n  ModifierDetails,\n} from \"../core/types/common.js\";\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\n\nconst DELETE: DeleteModifier = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: InvalidateModifier = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (\n      fieldName === \"__typename\" &&\n      hasOwn.call(this.policies.rootTypenamesById, dataId)\n    ) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(\n    dataId: string,\n    dependOnExistence?: boolean\n  ): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(older: string | StoreObject, newer: StoreObject | string): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(typeof dataId === \"string\", \"store.merge expects a string ID\");\n\n    const merged: StoreObject = new DeepMerger(storeObjectReconciler).merge(\n      existing,\n      incoming\n    );\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach((storeFieldName) => {\n          if (\n            !existing ||\n            existing[storeFieldName] !== merged[storeFieldName]\n          ) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (\n              fieldName !== storeFieldName &&\n              !this.policies.hasKeyArgs(merged.__typename, fieldName)\n            ) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (\n          fieldsToDirty.__typename &&\n          !(existing && existing.__typename) &&\n          // Since we return default root __typename strings\n          // automatically from store.get, we don't need to dirty the\n          // ROOT_QUERY.__typename field if merged.__typename is equal\n          // to the default string (usually \"Query\").\n          this.policies.rootTypenamesById[dataId] === merged.__typename\n        ) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach((fieldName) =>\n          this.group.dirty(dataId as string, fieldName)\n        );\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers<Record<string, any>>\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference\n        ) =>\n          this.policies.readField<V>(\n            typeof fieldNameOrOptions === \"string\" ?\n              {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n              }\n            : fieldNameOrOptions,\n            { store: this }\n          ),\n      } satisfies Partial<ModifierDetails>;\n\n      Object.keys(storeObject).forEach((storeFieldName) => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> | undefined =\n          typeof fields === \"function\" ? fields : (\n            fields[storeFieldName] || fields[fieldName]\n          );\n        if (modify) {\n          let newValue =\n            modify === delModifier ? DELETE : (\n              modify(maybeDeepFreeze(fieldValue), {\n                ...sharedDetails,\n                fieldName,\n                storeFieldName,\n                storage: this.getStorage(dataId, storeFieldName),\n              })\n            );\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n\n              if (__DEV__) {\n                const checkReference = (ref: Reference) => {\n                  if (this.lookup(ref.__ref) === undefined) {\n                    invariant.warn(\n                      \"cache.modify: You are trying to write a Reference that is not part of the store: %o\\n\" +\n                        \"Please make sure to set the `mergeIntoStore` parameter to `true` when creating a Reference that is not part of the store yet:\\n\" +\n                        \"`toReference(object, true)`\",\n                      ref\n                    );\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  let seenReference: boolean = false;\n                  let someNonReference: unknown;\n                  for (const value of newValue) {\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        const [id] = this.policies.identify(value);\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      invariant.warn(\n                        \"cache.modify: Writing an array with a mix of both References and Objects will not result in the Objects being normalized correctly.\\n\" +\n                          \"Please convert the object instance %o to a Reference before writing it to the cache by calling `toReference(object, true)`.\",\n                        someNonReference\n                      );\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName =\n        fieldName && args ?\n          this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(\n        dataId,\n        storeFieldName ?\n          {\n            [storeFieldName]: delModifier,\n          }\n        : delModifier\n      );\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions, limit: EntityStore): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach((id) => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach((dataId) => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach((dataId) => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach((id) => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach((id) => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = (this.refs[dataId] = Object.create(null));\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach((obj) => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach((key) => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  /** overload for `InMemoryCache.maybeBroadcastWatch` */\n  public makeCacheKey(\n    document: DocumentNode,\n    callback: Cache.WatchCallback<any>,\n    details: string\n  ): object;\n  /** overload for `StoreReader.executeSelectionSet` */\n  public makeCacheKey(\n    selectionSet: SelectionSetNode,\n    parent: string /* = ( Reference.__ref ) */ | StoreObject,\n    varString: string | undefined,\n    canonizeResults: boolean\n  ): object;\n  /** overload for `StoreReader.executeSubSelectedArray` */\n  public makeCacheKey(\n    field: FieldNode,\n    array: readonly any[],\n    varString: string | undefined\n  ): object;\n  /** @deprecated This is only meant for internal usage,\n   * in your own code please use a `Trie` instance instead. */\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string\n  ) =>\n    maybeDeepFreeze(\n      isReference(objectOrReference) ?\n        this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n    ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = (objOrRef) => {\n    return isReference(objOrRef) ?\n        this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (objOrIdOrRef, mergeIntoStore) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker!: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\"\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach((dataId) => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach((storeFieldName) => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach((storeFieldName) => {\n              if (\n                !equal(\n                  ownStoreObject[storeFieldName],\n                  parentStoreObject[storeFieldName]\n                )\n              ) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ?\n        {\n          ...fromParent,\n          ...super.findChildRefIds(dataId),\n        }\n      : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(\n      p,\n      // @ts-expect-error\n      arguments\n    );\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group)\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge(older: string | StoreObject, newer: string | StoreObject) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string | number\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n", "import { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return isArray(value) ?\n        (value.slice(0) as any as T)\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add((node.array = array));\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach((key) => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = (node.object = Object.create(proto));\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, (node.keys = { sorted: keys, json }));\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n", "import { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\n\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type {\n  Reference,\n  StoreObject,\n  FragmentMap,\n  FragmentMapFunction,\n} from \"../../utilities/index.js\";\nimport {\n  isField,\n  resultKeyNameFromField,\n  isReference,\n  makeReference,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n  canonicalStringify,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\nimport {\n  maybeDependOnExistenceOfEntity,\n  supportsResultCaching,\n} from \"./entityStore.js\";\nimport {\n  isArray,\n  extractFragmentContext,\n  getTypenameFromStoreObject,\n  shouldCanonizeResults,\n} from \"./helpers.js\";\nimport type { Policies } from \"./policies.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { MissingTree } from \"../core/types/common.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { ObjectCanon } from \"./object-canon.js\";\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n}\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache;\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]\n  >;\n\n  private config: {\n    cache: InMemoryCache;\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new (canUseWeakMap ? WeakMap : Map)<\n    Record<string, any>,\n    SelectionSetNode\n  >();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon();\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon();\n\n    // memoized functions in this class will be \"garbage-collected\"\n    // by recreating the whole `StoreReader` in\n    // `InMemoryCache.resetResultsCache`\n    // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n    this.executeSelectionSet = wrap(\n      (options) => {\n        const { canonizeResults } = options.context;\n\n        const peekArgs = execSelectionSetKeyArgs(options);\n\n        // Negate this boolean option so we can find out if we've already read\n        // this result using the other boolean value.\n        peekArgs[3] = !canonizeResults;\n\n        const other = this.executeSelectionSet.peek(...peekArgs);\n\n        if (other) {\n          if (canonizeResults) {\n            return {\n              ...other,\n              // If we previously read this result without canonizing it, we can\n              // reuse that result simply by canonizing it now.\n              result: this.canon.admit(other.result),\n            };\n          }\n          // If we previously read this result with canonization enabled, we can\n          // return that canonized result as-is.\n          return other;\n        }\n\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n\n        // Finally, if we didn't find any useful previous results, run the real\n        // execSelectionSetImpl method with the given options.\n        return this.execSelectionSetImpl(options);\n      },\n      {\n        max:\n          this.config.resultCacheMaxSize ||\n          cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n        keyArgs: execSelectionSetKeyArgs,\n        // Note that the parameters of makeCacheKey are determined by the\n        // array returned by keyArgs.\n        makeCacheKey(selectionSet, parent, context, canonizeResults) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(\n              selectionSet,\n              isReference(parent) ? parent.__ref : parent,\n              context.varString,\n              canonizeResults\n            );\n          }\n        },\n      }\n    );\n\n    this.executeSubSelectedArray = wrap(\n      (options: ExecSubSelectedArrayOptions) => {\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n        return this.execSubSelectedArrayImpl(options);\n      },\n      {\n        max:\n          this.config.resultCacheMaxSize ||\n          cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n        makeCacheKey({ field, array, context }) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(field, array, context.varString);\n          }\n        },\n      }\n    );\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = \"ROOT_QUERY\",\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [\n        new MissingFieldError(\n          firstMissing(execResult.missing)!,\n          execResult.missing,\n          query,\n          variables\n        ),\n      ];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext\n  ): boolean {\n    if (\n      supportsResultCaching(context.store) &&\n      this.knownResults.get(result) === selectionSet\n    ) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result)\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (\n      isReference(objectOrReference) &&\n      !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n      !context.store.has(objectOrReference.__ref)\n    ) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(\n      objectOrReference,\n      \"__typename\"\n    );\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (\n      this.config.addTypename &&\n      typeof typename === \"string\" &&\n      !policies.rootIdsByTypename[typename]\n    ) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, {\n          [resultName]: result.missing,\n        });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach((selection) => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField(\n          {\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n            from: objectOrReference,\n          },\n          context\n        );\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${selection.name.value}' on ${\n                isReference(objectOrReference) ?\n                  objectOrReference.__ref + \" object\"\n                : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`,\n            });\n          }\n        } else if (isArray(fieldValue)) {\n          if (fieldValue.length > 0) {\n            fieldValue = handleMissing(\n              this.executeSubSelectedArray({\n                field: selection,\n                array: fieldValue,\n                enclosingRef,\n                context,\n              }),\n              resultName\n            );\n          }\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(\n            this.executeSelectionSet({\n              selectionSet: selection.selectionSet,\n              objectOrReference: fieldValue as StoreObject | Reference,\n              enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n              context,\n            }),\n            resultName\n          );\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(`No fragment named %s`, selection.name.value);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen =\n      context.canonizeResults ?\n        this.canon.admit(finalResult)\n        // Since this.canon is normally responsible for freezing results (only in\n        // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(\n          this.executeSubSelectedArray({\n            field,\n            array: item,\n            enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(\n          this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            objectOrReference: item,\n            enclosingRef: isReference(item) ? item : enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result as string;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach((value) => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type %s returned for query field %s`,\n          getTypenameFromStoreObject(store, value),\n          field.name.value\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n", "import type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep, Slot } from \"optimism\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { ApolloCache } from \"../../core/index.js\";\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<\n  ApolloCache<any>,\n  {\n    vars: Set<ReactiveVar<any>>;\n    dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n  }\n>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(\n      cache,\n      (info = {\n        vars: new Set(),\n        dep: dep(),\n      })\n    );\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach((cache) => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach((listener) => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = (listener) => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = (rv.attachCache = (cache) => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  });\n\n  rv.forgetCache = (cache) => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\n\nimport { hasOwn, isArray } from \"./helpers.js\";\nimport type {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies.js\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<\n  string,\n  {\n    paths?: string[][];\n    keyFieldsFn?: KeyFieldsFunction;\n    keyArgsFn?: KeyArgsFunction;\n  }\n> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return (\n    specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null))\n  );\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyFieldsFn ||\n    (info.keyFieldsFn = (object, context) => {\n      const extract: typeof extractKey = (from, key) =>\n        context.readField(key, from);\n\n      const keyObject = (context.keyObject = collectSpecifierPaths(\n        specifier,\n        (schemaKeyPath) => {\n          let extracted = extractKeyPath(\n            context.storeObject,\n            schemaKeyPath,\n            // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract\n          );\n\n          if (\n            extracted === void 0 &&\n            object !== context.storeObject &&\n            hasOwn.call(object, schemaKeyPath[0])\n          ) {\n            // If context.storeObject fails to provide a value for the requested\n            // path, fall back to the raw result object, if it has a top-level key\n            // matching the first key in the path (schemaKeyPath[0]). This allows\n            // key fields included in the written data to be saved in the cache\n            // even if they are not selected explicitly in context.selectionSet.\n            // Not being mentioned by context.selectionSet is convenient here,\n            // since it means these extra fields cannot be affected by field\n            // aliasing, which is why we can use extractKey instead of\n            // context.readField for this extraction.\n            extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n          }\n\n          invariant(\n            extracted !== void 0,\n            `Missing field '%s' while extracting keyFields from %s`,\n            schemaKeyPath.join(\".\"),\n            object\n          );\n\n          return extracted;\n        }\n      ));\n\n      return `${context.typename}:${JSON.stringify(keyObject)}`;\n    })\n  );\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyArgsFn ||\n    (info.keyArgsFn = (args, { field, variables, fieldName }) => {\n      const collected = collectSpecifierPaths(specifier, (keyPath) => {\n        const firstKey = keyPath[0];\n        const firstChar = firstKey.charAt(0);\n\n        if (firstChar === \"@\") {\n          if (field && isNonEmptyArray(field.directives)) {\n            const directiveName = firstKey.slice(1);\n            // If the directive appears multiple times, only the first\n            // occurrence's arguments will be used. TODO Allow repetition?\n            // TODO Cache this work somehow, a la aliasMap?\n            const d = field.directives.find(\n              (d) => d.name.value === directiveName\n            );\n            // Fortunately argumentsObjectFromField works for DirectiveNode!\n            const directiveArgs = d && argumentsObjectFromField(d, variables);\n            // For directives without arguments (d defined, but directiveArgs ===\n            // null), the presence or absence of the directive still counts as\n            // part of the field key, so we return null in those cases. If no\n            // directive with this name was found for this field (d undefined and\n            // thus directiveArgs undefined), we return undefined, which causes\n            // this value to be omitted from the key object returned by\n            // collectSpecifierPaths.\n            return (\n              directiveArgs &&\n              extractKeyPath(\n                directiveArgs,\n                // If keyPath.length === 1, this code calls extractKeyPath with an\n                // empty path, which works because it uses directiveArgs as the\n                // extracted value.\n                keyPath.slice(1)\n              )\n            );\n          }\n          // If the key started with @ but there was no corresponding directive,\n          // we want to omit this value from the key object, not fall through to\n          // treating @whatever as a normal argument name.\n          return;\n        }\n\n        if (firstChar === \"$\") {\n          const variableName = firstKey.slice(1);\n          if (variables && hasOwn.call(variables, variableName)) {\n            const varKeyPath = keyPath.slice(0);\n            varKeyPath[0] = variableName;\n            return extractKeyPath(variables, varKeyPath);\n          }\n          // If the key started with $ but there was no corresponding variable, we\n          // want to omit this value from the key object, not fall through to\n          // treating $whatever as a normal argument name.\n          return;\n        }\n\n        if (args) {\n          return extractKeyPath(args, keyPath);\n        }\n      });\n\n      const suffix = JSON.stringify(collected);\n\n      // If no arguments were passed to this field, and it didn't have any other\n      // field key contributions from directives or variables, hide the empty\n      // :{} suffix from the field key. However, a field passed no arguments can\n      // still end up with a non-empty :{...} suffix if its key configuration\n      // refers to directives or variables.\n      if (args || suffix !== \"{}\") {\n        fieldName += \":\" + suffix;\n      }\n\n      return fieldName;\n    })\n  );\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = (info.paths = []);\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach((p) => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<TObj extends Record<string, any>, TKey extends string>(\n  object: TObj,\n  key: TKey\n): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(\n    path.reduce(function reducer(obj, key): any {\n      return isArray(obj) ?\n          obj.map((child) => reducer(child, key))\n        : obj && extract!(obj, key);\n    }, object)\n  );\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), (path) =>\n      extractKeyPath(value, path)\n    ) as T;\n  }\n  return value;\n}\n", "import { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\n\nimport type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from \"graphql\";\n\nimport type {\n  FragmentMap,\n  StoreValue,\n  StoreObject,\n  Reference,\n} from \"../../utilities/index.js\";\nimport {\n  storeKeyNameFromField,\n  argumentsObjectFromField,\n  isReference,\n  getStoreKeyName,\n  isNonNullObject,\n  stringifyForDisplay,\n} from \"../../utilities/index.js\";\nimport type {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n  isArray,\n} from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from \"../core/types/common.js\";\nimport type { WriteContext } from \"./writeToStore.js\";\n\nimport {\n  keyArgsFnFromSpecifier,\n  keyFieldsFnFromSpecifier,\n} from \"./key-extractor.js\";\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n};\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true;\n  mutationType?: true;\n  subscriptionType?: true;\n\n  fields?: {\n    [fieldName: string]: FieldPolicy<any> | FieldReadFunction<any>;\n  };\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  }\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return (\n    spec.args !== void 0 ? spec.args\n    : spec.field ? argumentsObjectFromField(spec.field, spec.variables)\n    : null\n  );\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> = (\n  existing,\n  incoming,\n  { mergeObjects }\n) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> =\n    Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> =\n    Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(\n    private config: {\n      cache: InMemoryCache;\n      dataIdFromObject?: KeyFieldsFunction;\n      possibleTypes?: PossibleTypesMap;\n      typePolicies?: TypePolicies;\n    }\n  ) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename =\n      (partialContext &&\n        (partialContext.typename || partialContext.storeObject?.__typename)) ||\n      object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject =\n      (partialContext && partialContext.storeObject) || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField:\n        (partialContext && partialContext.readField) ||\n        function () {\n          const options = normalizeReadFieldOptions(arguments, storeObject);\n          return policies.readField(options, {\n            store: policies.cache[\"data\"],\n            variables: options.variables,\n          });\n        },\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = (policy && policy.keyFn) || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn({ ...object, ...storeObject }, context);\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach((typename) => {\n      const { queryType, mutationType, subscriptionType, ...incoming } =\n        typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean },\n      merge?: FieldMergeFunction | boolean\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge\n          // Pass merge:true as a shorthand for a merge implementation\n          // that returns options.mergeObjects(existing, incoming).\n        : merge === true ? mergeTrueFn\n          // Pass merge:false to make incoming always replace existing\n          // without any warnings about data clobbering.\n        : merge === false ? mergeFalseFn\n        : existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn\n        // Pass an array of strings to use those fields to compute a\n        // composite ID for objects of this typename.\n      : isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields)\n        // Pass a function to take full control over identification.\n      : typeof keyFields === \"function\" ? keyFields\n        // Leave existing.keyFn unchanged if above cases fail.\n      : existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach((fieldName) => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn\n              // Pass an array of strings to use named arguments to\n              // compute a composite identity for the field.\n            : isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs)\n              // Pass a function to take full control over field identity.\n            : typeof keyArgs === \"function\" ? keyArgs\n              // Leave existing.keyFn unchanged if above cases fail.\n            : existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(\n        !old || old === which,\n        `Cannot change root %s __typename more than once`,\n        which\n      );\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach((supertype) => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach((subtype) => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] = (this.typePolicies[\n        typename\n      ] = Object.create(null));\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its properties can\n      // still be updated directly using addTypePolicies, but future changes to\n      // inherited supertype policies will not be reflected in this subtype\n      // policy, because this code runs at most once per typename.\n      let supertypes = this.supertypeMap.get(typename);\n      if (!supertypes && this.fuzzySubtypes.size) {\n        // To make the inheritance logic work for unknown typename strings that\n        // may have fuzzy supertypes, we give this typename an empty supertype\n        // set and then populate it with any fuzzy supertypes that match.\n        supertypes = this.getSupertypeSet(typename, true)!;\n        // This only works for typenames that are directly matched by a fuzzy\n        // supertype. What if there is an intermediate chain of supertypes?\n        // While possible, that situation can only be solved effectively by\n        // specifying the intermediate relationships via possibleTypes, manually\n        // and in a non-fuzzy way.\n        this.fuzzySubtypes.forEach((regExp, fuzzy) => {\n          if (regExp.test(typename)) {\n            // The fuzzy parameter is just the original string version of regExp\n            // (not a valid __typename string), but we can look up the\n            // associated supertype(s) in this.supertypeMap.\n            const fuzzySupertypes = this.supertypeMap.get(fuzzy);\n            if (fuzzySupertypes) {\n              fuzzySupertypes.forEach((supertype) =>\n                supertypes!.add(supertype)\n              );\n            }\n          }\n        });\n      }\n      if (supertypes && supertypes.size) {\n        supertypes.forEach((supertype) => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach((policy) => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean\n  ):\n    | {\n        keyFn?: KeyArgsFunction;\n        read?: FieldReadFunction<any>;\n        merge?: FieldMergeFunction<any>;\n      }\n    | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return (\n        fieldPolicies[fieldName] ||\n        (createIfMissing && (fieldPolicies[fieldName] = Object.create(null)))\n      );\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, (supertypeSet = new Set<string>()));\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (\n          supertypeSet &&\n          supertypeSet.size &&\n          workQueue.indexOf(supertypeSet) < 0\n        ) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(\n                `Inferring subtype %s of supertype %s`,\n                typename,\n                supertype\n              );\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (\n          needToCheckFuzzySubtypes &&\n          // Start checking fuzzy subtypes only after exhausting all\n          // non-fuzzy subtypes (after the final iteration of the loop).\n          i === workQueue.length - 1 &&\n          // We could wait to compare fragment.selectionSet to result\n          // after we verify the supertype, but this check is often less\n          // expensive than that search, and we will have to do the\n          // comparison anyway whenever we find a potential match.\n          selectionSetMatchesResult(fragment.selectionSet, result!, variables)\n        ) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName =\n        fieldSpec.field ?\n          storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(\n        objectOrReference,\n        \"__typename\"\n      );\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(\n      objectOrReference,\n      storeFieldName\n    );\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference) ?\n            objectOrReference.__ref\n          : objectOrReference,\n          storeFieldName\n        )\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(this.cache, read, [\n        existing,\n        readOptions,\n      ]) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined = this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(context.store)(\n        existing as StoreObject,\n        incoming as StoreObject\n      );\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(\n      existing,\n      incoming,\n      makeFieldFunctionOptions(\n        this,\n        // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0,\n        {\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        },\n        context,\n        storage || Object.create(null)\n      )\n    );\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>() {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(arguments, objectOrReference, variables),\n        context\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: IArguments,\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"]\n): ReadFieldOptions {\n  const { 0: fieldNameOrOptions, 1: from, length: argc } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(\n      `Undefined 'from' passed to readField with arguments %s`,\n      stringifyForDisplay(Array.from(readFieldArgs))\n    );\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw newInvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (\n        storeValueIsStoreObject(existing) &&\n        storeValueIsStoreObject(incoming)\n      ) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n", "import { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type { SelectionSetNode, FieldNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n  StoreValue,\n  StoreObject,\n  Reference,\n} from \"../../utilities/index.js\";\nimport {\n  getFragmentFromSelection,\n  getDefaultValues,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n  isNonEmptyArray,\n  argumentsObjectFromField,\n  canonicalStringify,\n} from \"../../utilities/index.js\";\n\nimport type {\n  NormalizedCache,\n  ReadMergeModifyContext,\n  MergeTree,\n  InMemoryCacheConfig,\n} from \"./types.js\";\nimport {\n  isArray,\n  makeProcessedFieldsMerger,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  extractFragmentContext,\n} from \"./helpers.js\";\nimport type { StoreReader } from \"./readFromStore.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { EntityStore } from \"./entityStore.js\";\nimport type { Cache } from \"../../core/index.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\nimport type { ReadFieldFunction } from \"../core/types/common.js\";\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<\n    string,\n    {\n      storeObject: StoreObject;\n      mergeTree?: MergeTree;\n      fieldNodeSet: Set<FieldNode>;\n    }\n  >;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n}\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  \"clientOnly\" | \"deferred\" | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"]\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(\n      key,\n      (flavored =\n        context.clientOnly === clientOnly && context.deferred === deferred ?\n          context\n        : {\n            ...context,\n            clientOnly,\n            deferred,\n          })\n    );\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string;\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n    private fragments?: InMemoryCacheConfig[\"fragments\"]\n  ) {}\n\n  public writeToStore(\n    store: NormalizedCache,\n    { query, result, dataId, variables, overwrite }: Cache.WriteOptions\n  ): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map(),\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map() },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw newInvariantError(`Could not identify object %s`, result);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(\n      ({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n        const entityRef = makeReference(dataId);\n\n        if (mergeTree && mergeTree.map.size) {\n          const applied = this.applyMerges(\n            mergeTree,\n            entityRef,\n            storeObject,\n            context\n          );\n          if (isReference(applied)) {\n            // Assume References returned by applyMerges have already been merged\n            // into the store. See makeMergeObjectsFunction in policies.ts for an\n            // example of how this can happen.\n            return;\n          }\n          // Otherwise, applyMerges returned a StoreObject, whose fields we should\n          // merge into the store (see store.merge statement below).\n          storeObject = applied;\n        }\n\n        if (__DEV__ && !context.overwrite) {\n          const fieldsWithSelectionSets: Record<string, true> =\n            Object.create(null);\n          fieldNodeSet.forEach((field) => {\n            if (field.selectionSet) {\n              fieldsWithSelectionSets[field.name.value] = true;\n            }\n          });\n\n          const hasSelectionSet = (storeFieldName: string) =>\n            fieldsWithSelectionSets[fieldNameFromStoreName(storeFieldName)] ===\n            true;\n\n          const hasMergeFunction = (storeFieldName: string) => {\n            const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n            return Boolean(childTree && childTree.info && childTree.info.merge);\n          };\n\n          Object.keys(storeObject).forEach((storeFieldName) => {\n            // If a merge function was defined for this field, trust that it\n            // did the right thing about (not) clobbering data. If the field\n            // has no selection set, it's a scalar field, so it doesn't need\n            // a merge function (even if it's an object, like JSON data).\n            if (\n              hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)\n            ) {\n              warnAboutDataLoss(\n                entityRef,\n                storeObject,\n                storeFieldName,\n                context.store\n              );\n            }\n          });\n        }\n\n        store.merge(dataId, storeObject);\n      }\n    );\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = Object.create(null);\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && (context.store.get(dataId, \"__typename\") as string));\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = function (this: void) {\n      const options = normalizeReadFieldOptions(\n        arguments,\n        incoming,\n        context.variables\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField(\n            {\n              ...options,\n              from: info.storeObject,\n            },\n            context\n          );\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet ?\n            getContextFlavor(context, false, false)\n          : context,\n          childTree\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (\n          field.selectionSet &&\n          (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))\n        ) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(\n          `Missing field '%s' while writing result %o`,\n          resultKeyNameFromField(field),\n          result\n        );\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (\n        this.reader &&\n        this.reader.isFresh(result, dataRef, selectionSet, context)\n      ) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach((field) => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item,\n          field,\n          context,\n          getChildMergeTree(mergeTree, i)\n        );\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<\n    TContext extends Pick<\n      WriteContext,\n      | \"clientOnly\"\n      | \"deferred\"\n      | \"flavors\"\n      | \"fragmentMap\"\n      | \"lookupFragment\"\n      | \"variables\"\n    >,\n  >(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap)\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach((selection) => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach((dir) => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred)\n          );\n        } else {\n          const fragment = getFragmentFromSelection(\n            selection,\n            context.lookupFragment\n          );\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(\n              `No fragment named %s`,\n              selection.name.value\n            );\n          }\n\n          if (\n            fragment &&\n            policies.fragmentMatches(\n              fragment,\n              typename,\n              result,\n              context.variables\n            )\n          ) {\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred)\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined =\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        (\n          !isArray(incoming) &&\n          // Likewise, existing must be either a Reference or a StoreObject\n          // in order for its fields to be safe to merge with the fields of\n          // the incoming object.\n          (isReference(existing) || storeValueIsStoreObject(existing))\n        ) ?\n          existing\n        : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number\n      ): StoreValue => {\n        return (\n          isArray(from) ?\n            typeof name === \"number\" ?\n              from[name]\n            : void 0\n          : context.store.getFieldValue(from, String(name))\n        );\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map();\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs)\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info =\n    left.info && right.info ?\n      {\n        ...left.info,\n        ...right.info,\n      }\n    : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map =\n    needToMergeMaps ? new Map()\n    : left.map.size ? left.map\n    : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach((key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(right.map.get(key), left.map.get(key))\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree({ map }: MergeTree, name: string | number) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (\n    Object.keys(existing).every(\n      (key) => store.getFieldValue(incoming, key) !== void 0\n    )\n  ) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach((child) => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n    `Cache data may be lost when replacing the %s field of a %s object.\n\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\n\nTo address this problem (which is not a bug in Apollo Client), %sdefine a custom merge function for the %s field, so InMemoryCache can safely merge these objects:\n\n  existing: %o\n  incoming: %o\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`,\n    fieldName,\n    parentType,\n    childTypenames.length ?\n      \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") +\n        \" have an ID or a custom merge function, or \"\n    : \"\",\n    typeDotName,\n    { ...existing },\n    { ...incoming }\n  );\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport \"./fixPolyfills.js\";\n\nimport type { DocumentNode } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\n\nimport { ApolloCache } from \"../core/cache.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport type { StoreObject, Reference } from \"../../utilities/index.js\";\nimport {\n  addTypenameToDocument,\n  isReference,\n  DocumentTransform,\n  canonicalStringify,\n  print,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport type { InMemoryCacheConfig, NormalizedCacheObject } from \"./types.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { getInMemoryCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  \"optimistic\" | \"onWatchUpdated\"\n>;\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data!: EntityStore;\n  private optimisticData!: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private storeReader!: StoreReader;\n  private storeWriter!: StoreWriter;\n  private addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n\n  private maybeBroadcastWatch!: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]\n  >;\n\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  public readonly assumeImmutableResults = true;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = (this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    }));\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n    const { fragments } = this.config;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      (this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon:\n          resetResultIdentities ? void 0 : (\n            previousReader && previousReader.canon\n          ),\n        fragments,\n      })),\n      fragments\n    );\n\n    this.maybeBroadcastWatch = wrap(\n      (c: Cache.WatchOptions, options?: BroadcastOptions) => {\n        return this.broadcastWatch(c, options);\n      },\n      {\n        max:\n          this.config.resultCacheMaxSize ||\n          cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] ||\n          defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n        makeCacheKey: (c: Cache.WatchOptions) => {\n          // Return a cache key (thus enabling result caching) only if we're\n          // currently using a data store that can track cache dependencies.\n          const store = c.optimistic ? this.optimisticData : this.data;\n          if (supportsResultCaching(store)) {\n            const { optimistic, id, variables } = c;\n            return store.makeCacheKey(\n              c.query,\n              // Different watches can have the same query, optimistic\n              // status, rootId, and variables, but if their callbacks are\n              // different, the (identical) result needs to be delivered to\n              // each distinct callback. The easiest way to achieve that\n              // separation is to include c.callback in the cache key for\n              // maybeBroadcastWatch calls. See issue #5733.\n              c.callback,\n              canonicalStringify({ optimistic, id, variables })\n            );\n          }\n        },\n      }\n    );\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach((group) =>\n      group.resetCaching()\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return (\n        this.storeReader.diffQueryAgainstStore<T>({\n          ...options,\n          store: options.optimistic ? this.optimisticData : this.data,\n          config: this.config,\n          returnPartialData,\n        }).result || null\n      );\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not need to\n        // worry about catching \"normal\" exceptions resulting from incomplete\n        // cache data. Unexpected errors will be re-thrown. If you need more\n        // information about which fields were missing, use cache.diff instead,\n        // and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store =\n      (\n        options.optimistic // Defaults to false.\n      ) ?\n        this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables extends OperationVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    print.reset();\n    this.addTypenameTransform.resetCache();\n    this.config.fragments?.resetCaches();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach((watch) => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return (updateResult = update(this));\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        },\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach((watch) => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null,\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach((c) => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  private addFragmentsToDocument(document: DocumentNode) {\n    const { fragments } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n\n  private addTypenameToDocument(document: DocumentNode) {\n    if (this.addTypename) {\n      return this.addTypenameTransform.transformDocument(document);\n    }\n    return document;\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(c: Cache.WatchOptions, options?: BroadcastOptions) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (\n        options.onWatchUpdated &&\n        options.onWatchUpdated.call(this, c, diff, lastDiff) === false\n      ) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback((c.lastDiff = diff), lastDiff);\n    }\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public getMemoryInternals?: typeof getInMemoryCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}\n", "import { DataProxy } from \"./DataProxy.js\";\nimport type { AllFieldsModifier, Modifiers } from \"./common.js\";\nimport type { ApolloCache } from \"../cache.js\";\n\nexport namespace Cache {\n  export type WatchCallback<TData = any> = (\n    diff: Cache.DiffResult<TData>,\n    lastDiff?: Cache.DiffResult<TData>\n  ) => void;\n\n  export interface ReadOptions<TVariables = any, TData = any>\n    extends DataProxy.Query<TVariables, TData> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n    returnPartialData?: boolean;\n    /**\n     * @deprecated\n     * Using `canonizeResults` can result in memory leaks so we generally do not\n     * recommend using this option anymore.\n     * A future version of Apollo Client will contain a similar feature without\n     * the risk of memory leaks.\n     */\n    canonizeResults?: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends Omit<DataProxy.Query<TVariables, TResult>, \"id\">,\n      Omit<DataProxy.WriteOptions<TResult>, \"data\"> {\n    dataId?: string;\n    result: TResult;\n  }\n\n  export interface DiffOptions<TData = any, TVariables = any>\n    extends Omit<ReadOptions<TVariables, TData>, \"rootId\"> {\n    // The DiffOptions interface is currently just an alias for\n    // ReadOptions, though DiffOptions used to be responsible for\n    // declaring the returnPartialData option.\n  }\n\n  export interface WatchOptions<TData = any, TVariables = any>\n    extends DiffOptions<TData, TVariables> {\n    watcher?: object;\n    immediate?: boolean;\n    callback: WatchCallback<TData>;\n    lastDiff?: DiffResult<TData>;\n  }\n\n  export interface EvictOptions {\n    id?: string;\n    fieldName?: string;\n    args?: Record<string, any>;\n    broadcast?: boolean;\n  }\n\n  // Although you can call cache.reset() without options, its behavior can be\n  // configured by passing a Cache.ResetOptions object.\n  export interface ResetOptions {\n    discardWatches?: boolean;\n  }\n\n  export interface ModifyOptions<\n    Entity extends Record<string, any> = Record<string, any>,\n  > {\n    id?: string;\n    fields: Modifiers<Entity> | AllFieldsModifier<Entity>;\n    optimistic?: boolean;\n    broadcast?: boolean;\n  }\n\n  export interface BatchOptions<\n    TCache extends ApolloCache<any>,\n    TUpdateResult = void,\n  > {\n    // Same as the first parameter of performTransaction, except the cache\n    // argument will have the subclass type rather than ApolloCache.\n    update(cache: TCache): TUpdateResult;\n\n    // Passing a string for this option creates a new optimistic layer, with the\n    // given string as its layer.id, just like passing a string for the\n    // optimisticId parameter of performTransaction. Passing true is the same as\n    // passing undefined to performTransaction (running the batch operation\n    // against the current top layer of the cache), and passing false is the\n    // same as passing null (running the operation against root/non-optimistic\n    // cache data).\n    optimistic?: string | boolean;\n\n    // If you specify the ID of an optimistic layer using this option, that\n    // layer will be removed as part of the batch transaction, triggering at\n    // most one broadcast for both the transaction and the removal of the layer.\n    // Note: this option is needed because calling cache.removeOptimistic during\n    // the transaction function may not be not safe, since any modifications to\n    // cache layers may be discarded after the transaction finishes.\n    removeOptimistic?: string;\n\n    // If you want to find out which watched queries were invalidated during\n    // this batch operation, pass this optional callback function. Returning\n    // false from the callback will prevent broadcasting this result.\n    onWatchUpdated?: (\n      this: TCache,\n      watch: Cache.WatchOptions,\n      diff: Cache.DiffResult<any>,\n      lastDiff?: Cache.DiffResult<any> | undefined\n    ) => any;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import ReadQueryOptions = DataProxy.ReadQueryOptions;\n  export import ReadFragmentOptions = DataProxy.ReadFragmentOptions;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import UpdateQueryOptions = DataProxy.UpdateQueryOptions;\n  export import UpdateFragmentOptions = DataProxy.UpdateFragmentOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n", "import type {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit } from \"graphql\";\n\nimport { wrap } from \"optimism\";\n\nimport type { FragmentMap } from \"../../utilities/index.js\";\nimport {\n  cacheSizes,\n  defaultCacheSizes,\n  getFragmentDefinitions,\n} from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n  resetCaches(): void;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n\n  public register(...fragments: DocumentNode[]): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    fragments.forEach((doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach((node) => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    const proto = FragmentRegistry.prototype;\n    this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n      makeCacheKey: (arg) => arg,\n      max:\n        cacheSizes[\"fragmentRegistry.lookup\"] ||\n        defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    })).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = wrap(proto.transform.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.transform\"] ||\n        defaultCacheSizes[\"fragmentRegistry.transform\"],\n    });\n    this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n        defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    });\n  }\n\n  /*\n   * Note:\n   * This method is only memoized so it can serve as a dependency to `tranform`,\n   * so calling `invalidate` will invalidate cache entries for `transform`.\n   */\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach((def) => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) =>\n      Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach((fragmentName) => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads((map[fragmentName] = def));\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach((name) => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n", "export {};\n//# sourceMappingURL=types.js.map", "import \"../utilities/globals/index.js\";\n\nexport type {\n  Transaction,\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"./core/cache.js\";\nexport { ApolloCache } from \"./core/cache.js\";\nexport { Cache } from \"./core/types/Cache.js\";\nexport type { DataProxy } from \"./core/types/DataProxy.js\";\nexport type {\n  MissingTree,\n  Modifier,\n  Modifiers,\n  ModifierDetails,\n  ReadFieldOptions,\n} from \"./core/types/common.js\";\nexport { MissingFieldError } from \"./core/types/common.js\";\n\nexport type { Reference } from \"../utilities/index.js\";\nexport {\n  isReference,\n  makeReference,\n  canonicalStringify,\n} from \"../utilities/index.js\";\n\nexport { EntityStore } from \"./inmemory/entityStore.js\";\nexport {\n  fieldNameFromStoreName,\n  defaultDataIdFromObject,\n} from \"./inmemory/helpers.js\";\n\nexport { InMemoryCache } from \"./inmemory/inMemoryCache.js\";\n\nexport type { ReactiveVar } from \"./inmemory/reactiveVars.js\";\nexport { makeVar, cacheSlot } from \"./inmemory/reactiveVars.js\";\n\nexport type {\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n} from \"./inmemory/policies.js\";\nexport { Policies } from \"./inmemory/policies.js\";\n\nexport type { FragmentRegistryAPI } from \"./inmemory/fragmentRegistry.js\";\nexport { createFragmentRegistry } from \"./inmemory/fragmentRegistry.js\";\n\nexport * from \"./inmemory/types.js\";\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */\n\nexport default function asyncIterator<T>(\n  source: AsyncIterableIterator<T>\n): AsyncIterableIterator<T> {\n  const iterator = source[Symbol.asyncIterator]();\n  return {\n    next(): Promise<IteratorResult<T, boolean>> {\n      return iterator.next();\n    },\n    [Symbol.asyncIterator](): AsyncIterableIterator<T> {\n      return this;\n    },\n  };\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */\n\nimport type { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\n\ninterface NodeStreamIterator<T> {\n  next(): Promise<IteratorResult<T, boolean | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function nodeStreamIterator<T>(\n  stream: NodeReadableStream\n): AsyncIterableIterator<T> {\n  let cleanup: (() => void) | null = null;\n  let error: Error | null = null;\n  let done = false;\n  const data: unknown[] = [];\n\n  const waiting: [\n    (\n      value:\n        | IteratorResult<T, boolean | undefined>\n        | PromiseLike<IteratorResult<T, boolean | undefined>>\n    ) => void,\n    (reason?: any) => void,\n  ][] = [];\n\n  function onData(chunk: any) {\n    if (error) return;\n    if (waiting.length) {\n      const shiftedArr = waiting.shift();\n      if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n        return shiftedArr[0]({ value: chunk, done: false });\n      }\n    }\n    data.push(chunk);\n  }\n  function onError(err: Error) {\n    error = err;\n    const all = waiting.slice();\n    all.forEach(function (pair) {\n      pair[1](err);\n    });\n    !cleanup || cleanup();\n  }\n  function onEnd() {\n    done = true;\n    const all = waiting.slice();\n    all.forEach(function (pair) {\n      pair[0]({ value: undefined, done: true });\n    });\n    !cleanup || cleanup();\n  }\n\n  cleanup = function () {\n    cleanup = null;\n    stream.removeListener(\"data\", onData);\n    stream.removeListener(\"error\", onError);\n    stream.removeListener(\"end\", onEnd);\n    stream.removeListener(\"finish\", onEnd);\n    stream.removeListener(\"close\", onEnd);\n  };\n  stream.on(\"data\", onData);\n  stream.on(\"error\", onError);\n  stream.on(\"end\", onEnd);\n  stream.on(\"finish\", onEnd);\n  stream.on(\"close\", onEnd);\n\n  function getNext(): Promise<IteratorResult<T, boolean | undefined>> {\n    return new Promise(function (resolve, reject) {\n      if (error) return reject(error);\n      if (data.length)\n        return resolve({ value: data.shift() as T, done: false });\n      if (done) return resolve({ value: undefined, done: true });\n      waiting.push([resolve, reject]);\n    });\n  }\n\n  const iterator: NodeStreamIterator<T> = {\n    next(): Promise<IteratorResult<T, boolean | undefined>> {\n      return getNext();\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\n\ninterface PromiseIterator<T> {\n  next(): Promise<IteratorResult<T, ArrayBuffer | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function promiseIterator<T = ArrayBuffer>(\n  promise: Promise<ArrayBuffer>\n): AsyncIterableIterator<T> {\n  let resolved = false;\n\n  const iterator: PromiseIterator<T> = {\n    next(): Promise<IteratorResult<T, ArrayBuffer | undefined>> {\n      if (resolved)\n        return Promise.resolve({\n          value: undefined,\n          done: true,\n        });\n      resolved = true;\n      return new Promise(function (resolve, reject) {\n        promise\n          .then(function (value) {\n            resolve({ value: value as unknown as T, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\n\ninterface ReaderIterator<T> {\n  next(): Promise<IteratorResult<T, T | undefined>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function readerIterator<T>(\n  reader: ReadableStreamDefaultReader<T>\n): AsyncIterableIterator<T> {\n  const iterator: ReaderIterator<T> = {\n    next() {\n      return reader.read() as Promise<\n        | ReadableStreamReadValueResult<T>\n        // DoneResult has `value` optional, which doesn't comply with an\n        // `IteratorResult`, so we assert it to `T | undefined` instead\n        | Required<ReadableStreamReadDoneResult<T | undefined>>\n      >;\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<\n      T,\n      T | undefined\n    > {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport type { Response as NodeResponse } from \"node-fetch\";\nimport type { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\n\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nfunction isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nfunction isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nfunction isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nfunction isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nfunction isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n", "import \"../utilities/globals/index.js\";\n\nimport type {\n  GraphQLError,\n  GraphQLErrorExtensions,\n  GraphQLFormattedError,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../utilities/index.js\";\nimport type { ServerParseError } from \"../link/http/index.js\";\nimport type { ServerError } from \"../link/utils/index.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>;\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLFormattedError>;\n  protocolErrors?: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors,\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return (\n    errors\n      // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n      .map(\n        (err) =>\n          (isNonNullObject(err) && err.message) || \"Error message not found.\"\n      )\n      .join(\"\\n\")\n  );\n};\n\n/**\n * @deprecated This type is deprecated and will be removed in the next major version of Apollo Client.\n * It mistakenly referenced `GraqhQLError` instead of `GraphQLFormattedError`.\n *\n * Use `ReadonlyArray<GraphQLFormattedError>` instead.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLFormattedError>;\n  public protocolErrors: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n  /**\n   * Indicates the specific original cause of the error.\n   *\n   * This field contains the first available `networkError`, `graphQLError`, `protocolError`, `clientError`, or `null` if none are available.\n   */\n  public cause:\n    | ({\n        readonly message: string;\n        extensions?:\n          | GraphQLErrorExtensions[]\n          | GraphQLFormattedError[\"extensions\"];\n      } & Omit<Partial<Error> & Partial<GraphQLFormattedError>, \"extensions\">)\n    | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given serialized GraphQL errors,\n  // client errors, protocol errors or network errors.\n  // Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = \"ApolloError\";\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n    this.cause =\n      [\n        networkError,\n        ...(graphQLErrors || []),\n        ...(protocolErrors || []),\n        ...(clientErrors || []),\n      ].find((e) => !!e) || null;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n", "import { responseIterator } from \"./responseIterator.js\";\nimport type { Operation } from \"../core/index.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nimport type { SubscriptionObserver } from \"zen-observable-ts\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport async function readMultipartBody<\n  T extends object = Record<string, unknown>,\n>(response: Response, nextValue: (value: T) => void) {\n  if (TextDecoder === undefined) {\n    throw new Error(\n      \"TextDecoder must be defined in the environment: please import a polyfill.\"\n    );\n  }\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get(\"content-type\");\n  const delimiter = \"boundary=\";\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const boundaryVal =\n    contentType?.includes(delimiter) ?\n      contentType\n        ?.substring(contentType?.indexOf(delimiter) + delimiter.length)\n        .replace(/['\"]/g, \"\")\n        .replace(/\\;(.*)/gm, \"\")\n        .trim()\n    : \"-\";\n\n  const boundary = `\\r\\n--${boundaryVal}`;\n  let buffer = \"\";\n  const iterator = responseIterator(response);\n  let running = true;\n\n  while (running) {\n    const { value, done } = await iterator.next();\n    const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n    const searchFrom = buffer.length - boundary.length + 1;\n    running = !done;\n    buffer += chunk;\n    let bi = buffer.indexOf(boundary, searchFrom);\n\n    while (bi > -1) {\n      let message: string;\n      [message, buffer] = [\n        buffer.slice(0, bi),\n        buffer.slice(bi + boundary.length),\n      ];\n      const i = message.indexOf(\"\\r\\n\\r\\n\");\n      const headers = parseHeaders(message.slice(0, i));\n      const contentType = headers[\"content-type\"];\n      if (\n        contentType &&\n        contentType.toLowerCase().indexOf(\"application/json\") === -1\n      ) {\n        throw new Error(\n          \"Unsupported patch content type: application/json is required.\"\n        );\n      }\n      // nb: Technically you'd want to slice off the beginning \"\\r\\n\" but since\n      // this is going to be `JSON.parse`d there is no need.\n      const body = message.slice(i);\n\n      if (body) {\n        const result = parseJsonBody<T>(response, body);\n        if (\n          Object.keys(result).length > 1 ||\n          \"data\" in result ||\n          \"incremental\" in result ||\n          \"errors\" in result ||\n          \"payload\" in result\n        ) {\n          if (isApolloPayloadResult(result)) {\n            let next = {};\n            if (\"payload\" in result) {\n              if (Object.keys(result).length === 1 && result.payload === null) {\n                return;\n              }\n              next = { ...result.payload };\n            }\n            if (\"errors\" in result) {\n              next = {\n                ...next,\n                extensions: {\n                  ...(\"extensions\" in next ? next.extensions : (null as any)),\n                  [PROTOCOL_ERRORS_SYMBOL]: result.errors,\n                },\n              };\n            }\n            nextValue(next as T);\n          } else {\n            // for the last chunk with only `hasNext: false`\n            // we don't need to call observer.next as there is no data/errors\n            nextValue(result);\n          }\n        } else if (\n          // If the chunk contains only a \"hasNext: false\", we can call\n          // observer.complete() immediately.\n          Object.keys(result).length === 1 &&\n          \"hasNext\" in result &&\n          !result.hasNext\n        ) {\n          return;\n        }\n      }\n      bi = buffer.indexOf(boundary);\n    }\n  }\n}\n\nexport function parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nexport function parseJsonBody<T>(response: Response, bodyText: string): T {\n  if (response.status >= 300) {\n    // Network error\n    const getResult = (): Record<string, unknown> | string => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(\n      response,\n      getResult(),\n      `Response not successful: Received status code ${response.status}`\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText) as T;\n  } catch (err) {\n    const parseError = err as ServerParseError;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\n\nexport function handleError(err: any, observer: SubscriptionObserver<any>) {\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next(err.result);\n  }\n\n  observer.error(err);\n}\n\nexport function parseAndCheckHttpResponse(operations: Operation | Operation[]) {\n  return (response: Response) =>\n    response\n      .text()\n      .then((bodyText) => parseJsonBody(response, bodyText))\n      .then((result: any) => {\n        if (\n          !Array.isArray(result) &&\n          !hasOwnProperty.call(result, \"data\") &&\n          !hasOwnProperty.call(result, \"errors\")\n        ) {\n          // Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations) ?\n                operations.map((op) => op.operationName)\n              : operations.operationName\n            }'.`\n          );\n        }\n        return result;\n      });\n}\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nimport type { InvariantError } from \"../../utilities/globals/index.js\";\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e: any) {\n    const parseError = newInvariantError(\n      `Network request failed. %s is not serializable: %s`,\n      label,\n      e.message\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n", "import type { ASTNode } from \"graphql\";\nimport { print } from \"../../utilities/index.js\";\n\nimport type { Operation } from \"../core/index.js\";\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string;\n}\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: typeof fetch;\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: Record<string, string>;\n\n  /**\n   * If set to true, header names won't be automatically normalized to\n   * lowercase. This allows for non-http-spec-compliant servers that might\n   * expect capitalized header names.\n   */\n  preserveHeaderCase?: boolean;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n  print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n  preserveHeaderCase?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: Record<string, string>;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: \"*/*\",\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  \"content-type\": \"application/json\",\n};\n\nconst defaultOptions = {\n  method: \"POST\",\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach((config) => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  if (options.headers) {\n    options.headers = removeDuplicateHeaders(\n      options.headers,\n      http.preserveHeaderCase\n    );\n  }\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n}\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders = Object.create(null);\n    Object.keys(Object(headers)).forEach((name) => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders;\n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally\n  // capitalized header names (See #6741).\n  const headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach((name) => {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name],\n    };\n  });\n\n  const normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach((name) => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\n\nexport const checkFetcher = (fetcher: typeof fetch | undefined) => {\n  if (!fetcher && typeof fetch === \"undefined\") {\n    throw newInvariantError(`\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `);\n  }\n};\n", "/**\n * @deprecated\n * This is not used internally any more and will be removed in\n * the next major version of Apollo Client.\n */\nexport const createSignalIfSupported = () => {\n  if (typeof AbortController === \"undefined\")\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n", "import type { Operation } from \"../core/index.js\";\n\nexport const selectURI = (\n  operation: Operation,\n  fallbackURI?: string | ((operation: Operation) => string)\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === \"function\") {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || \"/graphql\";\n  }\n};\n", "import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport type { Body } from \"./selectHttpOptionsAndBody.js\";\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if (\"query\" in body) {\n    addQueryParam(\"query\", body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam(\"operationName\", body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        \"Variables map\"\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"variables\", serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        \"Extensions map\"\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"extensions\", serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = \"\",\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf(\"#\");\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n  return { newURI };\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type { DefinitionNode } from \"graphql\";\n\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport {\n  handleError,\n  readMultipartBody,\n  parseAndCheckHttpResponse,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport type { HttpOptions } from \"./selectHttpOptionsAndBody.js\";\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport {\n  maybe,\n  getMainDefinition,\n  removeClientSetsFromDocument,\n} from \"../../utilities/index.js\";\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = \"/graphql\",\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink((operation) => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      \"apollographql-client-name\"?: string;\n      \"apollographql-client-version\"?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders[\"apollographql-client-name\"] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    if (hasDirectives([\"client\"], operation.query)) {\n      const transformedQuery = removeClientSetsFromDocument(operation.query);\n\n      if (!transformedQuery) {\n        return fromError(\n          new Error(\n            \"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"\n          )\n        );\n      }\n\n      operation.query = transformedQuery;\n    }\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      body.variables = filterOperationVariables(\n        body.variables,\n        operation.query\n      );\n    }\n\n    let controller: AbortController | undefined;\n    if (!options.signal && typeof AbortController !== \"undefined\") {\n      controller = new AbortController();\n      options.signal = controller.signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n    };\n    const definitionIsSubscription = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n    };\n    const isSubscription = definitionIsSubscription(\n      getMainDefinition(operation.query)\n    );\n    // does not match custom directives beginning with @defer\n    const hasDefer = hasDirectives([\"defer\"], operation.query);\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = \"GET\";\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      let acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader +=\n          \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n      } else if (hasDefer) {\n        acceptHeader += \"deferSpec=20220824,application/json\";\n      }\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === \"GET\") {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, \"Payload\");\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable((observer) => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      const observerNext = observer.next.bind(observer);\n      currentFetch!(chosenURI, options)\n        .then((response) => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get(\"content-type\");\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observerNext);\n          } else {\n            return parseAndCheckHttpResponse(operation)(response).then(\n              observerNext\n            );\n          }\n        })\n        .then(() => {\n          controller = undefined;\n          observer.complete();\n        })\n        .catch((err) => {\n          controller = undefined;\n          handleError(err, observer);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n", "import { ApolloLink } from \"../core/index.js\";\nimport type { HttpOptions } from \"./selectHttpOptionsAndBody.js\";\nimport { createHttpLink } from \"./createHttpLink.js\";\n\nexport class HttpLink extends ApolloLink {\n  constructor(public options: HttpOptions = {}) {\n    super(createHttpLink(options).request);\n  }\n}\n", "import \"../../utilities/globals/index.js\";\n\nexport type { ServerParseError } from \"./parseAndCheckHttpResponse.js\";\nexport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nexport type { ClientParseError } from \"./serializeFetchParameter.js\";\nexport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport type { HttpOptions, UriFunction } from \"./selectHttpOptionsAndBody.js\";\nexport {\n  fallbackHttpConfig,\n  defaultPrinter,\n  selectHttpOptionsAndBody,\n  selectHttpOptionsAndBodyInternal, // needed by ../batch-http but not public\n} from \"./selectHttpOptionsAndBody.js\";\nexport { checkFetcher } from \"./checkFetcher.js\";\nexport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nexport { selectURI } from \"./selectURI.js\";\nexport { createHttpLink } from \"./createHttpLink.js\";\nexport { HttpLink } from \"./HttpLink.js\";\nexport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\n", "/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */\nexport function isNetworkRequestSettled(\n  networkStatus?: NetworkStatus\n): boolean {\n  return networkStatus === 7 || networkStatus === 8;\n}\n", "import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from \"../utilities/index.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  /**\n   * An object containing the variables that were provided for the query.\n   */\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    this.subscribeToMore = this.subscribeToMore.bind(this);\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : (\n        fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  /** @internal */\n  public resetDiff() {\n    this.queryInfo.resetDiff();\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const resultIsDifferent =\n      this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ?\n        !equalByQuery(this.query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: TData,\n        options: {\n          fetchMoreResult: TFetchData;\n          variables: TFetchVars;\n        }\n      ) => TData;\n    }\n  ): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : (\n        {\n          ...this.options,\n          query: this.options.query,\n          ...fetchMoreOptions,\n          variables: {\n            ...this.options.variables,\n            ...fetchMoreOptions.variables,\n          },\n        }\n      )),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery =\n      fetchMoreOptions.query ?\n        this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        // Performing this cache update inside a cache.batch transaction ensures\n        // any affected cache.watch watchers are notified at most once about any\n        // updates. Most watchers will be using the QueryInfo class, which\n        // responds to notifications by calling reobserveCacheFirst to deliver\n        // fetchMore cache results back to this ObservableQuery.\n        this.queryManager.cache.batch({\n          update: (cache) => {\n            const { updateQuery } = fetchMoreOptions;\n            if (updateQuery) {\n              cache.updateQuery(\n                {\n                  query: this.query,\n                  variables: this.variables,\n                  returnPartialData: true,\n                  optimistic: false,\n                },\n                (previous) =>\n                  updateQuery(previous!, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables as TFetchVars,\n                  })\n              );\n            } else {\n              // If we're using a field policy instead of updateQuery, the only\n              // thing we need to do is write the new data to the cache using\n              // combinedOptions.variables (instead of this.variables, which is\n              // what this.updateQuery uses, because it works by abusing the\n              // original field value, keyed by the original variables).\n              cache.writeQuery({\n                query: combinedOptions.query,\n                variables: combinedOptions.variables,\n                data: fetchMoreResult.data,\n              });\n            }\n          },\n\n          onWatchUpdated: (watch) => {\n            // Record the DocumentNode associated with any watched query whose\n            // data were updated by the cache writes above.\n            updatedQuerySet.add(watch.query);\n          },\n        });\n\n        return fetchMoreResult;\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (!updatedQuerySet.has(this.query)) {\n          reobserveCacheFirst(this);\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">\n    ) => TData\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      this.queryId,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (\n          !isNetworkRequestInFlight(this.queryInfo.networkStatus) &&\n          !this.options.skipPollAttempt?.()\n        ) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\" ?\n                  \"no-cache\"\n                : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result:\n        this.queryManager.assumeImmutableResults ?\n          newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options =\n      useDisposableConcast ?\n        // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        (options.fetchPolicy === oldFetchPolicy ||\n          // A `nextFetchPolicy` function has even higher priority, though,\n          // so in that case `applyNextFetchPolicy` must be called.\n          typeof options.nextFetchPolicy === \"function\")\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        if (equal(this.variables, variables)) {\n          finishWaitingForOwnResult();\n          this.reportResult(result, variables);\n        }\n      },\n      error: (error) => {\n        if (equal(this.variables, variables)) {\n          finishWaitingForOwnResult();\n          this.reportError(error, variables);\n        }\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus)\n      .promise as TODO;\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<TData>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    this.resetLastResults();\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(\n        this: WatchQueryOptions<TVars, TData>,\n        currentFetchPolicy: WatchQueryFetchPolicy,\n        context: NextFetchPolicyContext<TData, TVars>\n      ) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof this.nextFetchPolicy === \"function\") {\n          return this.nextFetchPolicy(currentFetchPolicy, context);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n", "import type { DocumentNode, GraphQLFormattedError } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport type { WatchQueryOptions, ErrorPolicy } from \"./watchQueryOptions.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport type { QueryListener } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport {\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\n\nexport type QueryStoreValue = Pick<\n  QueryInfo,\n  \"variables\" | \"networkStatus\" | \"networkError\" | \"graphQLErrors\"\n>;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n}\n\nconst destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)<\n  ApolloCache<any>,\n  number\n>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: \"evict\" | \"modify\" | \"reset\"\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    // @ts-expect-error this is just too generic to be typed correctly\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15\n      );\n      // @ts-expect-error this is just too generic to be typed correctly\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLFormattedError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId()\n  ) {\n    const cache = (this.cache = queryManager.cache);\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined;\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus;\n    observableQuery?: ObservableQuery<any, any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (\n      this.variables &&\n      this.networkStatus !== NetworkStatus.loading &&\n      !equal(this.variables, query.variables)\n    ) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  }\n\n  resetDiff() {\n    this.lastDiff = void 0;\n  }\n\n  getDiff(): Cache.DiffResult<any> {\n    const options = this.getDiffOptions();\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>;\n    options: Cache.DiffOptions;\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions\n  ) {\n    this.lastDiff =\n      diff ?\n        {\n          diff,\n          options: options || this.getDiffOptions(),\n        }\n      : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n\n    // If we are trying to deliver an incomplete cache result, we avoid\n    // reporting it if the query has errored, otherwise we let the broadcast try\n    // and repair the partial result by refetching the query. This check avoids\n    // a situation where a query that errors and another succeeds with\n    // overlapping data does not report the partial data result to the errored\n    // query.\n    //\n    // See https://github.com/apollographql/apollo-client/issues/11400 for more\n    // information on this issue.\n    if (diff && !diff.complete && this.observableQuery?.getLastError()) {\n      return;\n    }\n\n    this.updateLastDiff(diff);\n\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any, any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any, any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(\n        (this.oqListener = () => {\n          const diff = this.getDiff();\n          if (diff.fromOptimisticTransaction) {\n            // If this diff came from an optimistic transaction, deliver the\n            // current cache data to the ObservableQuery, but don't perform a\n            // reobservation, since oq.reobserveCacheFirst might make a network\n            // request, and we never want to trigger network requests in the\n            // middle of optimistic updates.\n            oq[\"observe\"]();\n          } else {\n            // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n            // using a temporary fetch policy of \"cache-first\", so complete cache\n            // results have a chance to be delivered without triggering additional\n            // network requests, even when options.fetchPolicy is \"network-only\"\n            // or \"cache-and-network\". All other fetch policies are preserved by\n            // this method, and are handled by calling oq.reobserve(). If this\n            // reobservation is spurious, isDifferentFromLastResult still has a\n            // chance to catch it before delivery to ObservableQuery subscribers.\n            reobserveCacheFirst(oq);\n          }\n        })\n      );\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach((listener) => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: (diff) => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch((this.lastWatch = watchOptions));\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"]\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    document: DocumentNode,\n    options: Pick<\n      WatchQueryOptions,\n      \"variables\" | \"fetchPolicy\" | \"errorPolicy\"\n    >,\n    cacheWriteBehavior: CacheWriteBehavior\n  ) {\n    const merger = new DeepMerger();\n    const graphQLErrors =\n      isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n      const mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n\n      // Detect the first chunk of a deferred query and merge it with existing\n      // cache data. This ensures a `cache-first` fetch policy that returns\n      // partial cache data or a `cache-and-network` fetch policy that already\n      // has full data in the cache does not complain when trying to merge the\n      // initial deferred server data with existing cache data.\n    } else if (\"hasNext\" in result && result.hasNext) {\n      const diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === \"no-cache\") {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables)\n      );\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction((cache) => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff && this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called. We also avoid updating\n          // the watch if we are writing a result that doesn't match the current\n          // variables to avoid race conditions from broadcasting the wrong\n          // result.\n          if (!this.stopped && equal(this.variables, options.variables)) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return (this.networkStatus = NetworkStatus.ready);\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\"\n) {\n  const ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n", "import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode } from \"graphql\";\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from \"@wry/equality\";\n\nimport type { ApolloLink, FetchResult } from \"../link/core/index.js\";\nimport { execute } from \"../link/core/index.js\";\nimport {\n  defaultCacheSizes,\n  hasDirectives,\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n  removeDirectivesFromDocument,\n} from \"../utilities/index.js\";\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\n\nimport type {\n  ObservableSubscription,\n  ConcastSourcesArray,\n} from \"../utilities/index.js\";\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  DocumentTransform,\n} from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport {\n  ApolloError,\n  isApolloError,\n  graphQLResultHasProtocolErrors,\n} from \"../errors/index.js\";\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n  DefaultContext,\n} from \"./types.js\";\nimport type { LocalState } from \"./LocalState.js\";\n\nimport type { QueryStoreValue } from \"./QueryInfo.js\";\nimport {\n  QueryInfo,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from \"./QueryInfo.js\";\nimport type { ApolloErrorOptions } from \"../errors/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nimport type { IgnoreModifier } from \"../cache/core/types/common.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst IGNORE: IgnoreModifier = Object.create(null);\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nimport type { DefaultOptions } from \"./ApolloClient.js\";\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\n\nexport interface QueryManagerOptions<TStore> {\n  cache: ApolloCache<TStore>;\n  link: ApolloLink;\n  defaultOptions: DefaultOptions;\n  documentTransform: DocumentTransform | null | undefined;\n  queryDeduplication: boolean;\n  onBroadcast: undefined | (() => void);\n  ssrMode: boolean;\n  clientAwareness: Record<string, string>;\n  localState: LocalState<TStore>;\n  assumeImmutableResults: boolean;\n  defaultContext: Partial<DefaultContext> | undefined;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n  public readonly defaultContext: Partial<DefaultContext>;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor(options: QueryManagerOptions<TStore>) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.cache = options.cache;\n    this.link = options.link;\n    this.defaultOptions = options.defaultOptions;\n    this.queryDeduplication = options.queryDeduplication;\n    this.clientAwareness = options.clientAwareness;\n    this.localState = options.localState;\n    this.ssrMode = options.ssrMode;\n    this.assumeImmutableResults = options.assumeImmutableResults;\n    const documentTransform = options.documentTransform;\n    this.documentTransform =\n      documentTransform ?\n        defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n    this.defaultContext = options.defaultContext || Object.create(null);\n\n    if ((this.onBroadcast = options.onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<\n    FetchResult<TData>\n  > {\n    invariant(\n      mutation,\n      \"mutation option is required. You must specify your GraphQL document in the mutation option.\"\n    );\n\n    invariant(\n      fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\",\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = (await this.localState.addExportedVariables(\n        mutation,\n        variables,\n        context\n      )) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    const isOptimistic =\n      optimisticResponse &&\n      this.markMutationOptimistic<TData, TVariables, TContext, TCache>(\n        optimisticResponse,\n        {\n          mutationId,\n          document: mutation,\n          variables,\n          fetchPolicy,\n          errorPolicy,\n          context,\n          updateQueries,\n          update: updateWithProxyFn,\n          keepRootFields,\n        }\n      );\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse: isOptimistic ? optimisticResponse : void 0,\n          },\n          variables,\n          {},\n          false\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<TData, TVariables, TContext, TCache>({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: isOptimistic ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        }\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (isOptimistic) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : (\n              new ApolloError({\n                networkError: err,\n              })\n            )\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (\n        isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)\n      ) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables,\n          });\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: (document && getOperationName(document)) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      (mutation.refetchQueries || \"\").length > 0 ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache) => {\n          if (!skipCache) {\n            cacheWrites.forEach((write) => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...(result as FetchResult), data: diff.result };\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache as TCache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n      }).forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\" ?\n        optimisticResponse(mutation.variables, { IGNORE })\n      : optimisticResponse;\n\n    if (data === IGNORE) {\n      return false;\n    }\n\n    this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>(\n          {\n            ...mutation,\n            result: { data },\n          },\n          cache\n        );\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n\n    return true;\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n      .promise as TODO;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new AutoCleanedWeakCache<\n    DocumentNode,\n    TransformCacheEntry\n  >(\n    cacheSizes[\"queryManager.getDocumentInfo\"] ||\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"]\n  );\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n          ],\n          document\n        ),\n        defaultVars: getDefaultValues(\n          getOperationDefinition(document)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): OperationVariables {\n    return {\n      ...this.getDocumentInfo(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<\n    T,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n    observable[\"lastQuery\"] = query;\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId()\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      \"query option is required. You must specify your GraphQL document \" +\n        \"in the query option.\"\n    );\n\n    invariant(\n      options.query.kind === \"Document\",\n      'You must wrap the query string in a \"gql\" tag.'\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      \"returnPartialData option only supported on watchQuery.\"\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      \"pollInterval option only supported on watchQuery.\"\n    );\n\n    return this.fetchQuery<TData, TVars>(queryId, {\n      ...options,\n      query: this.transform(options.query),\n    }).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.queries.forEach((queryInfo) => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(\n            typeof nameOrDoc === \"string\" ?\n              `Unknown query named \"%s\" requested in refetchQueries options.include array`\n            : `Unknown query %o requested in refetchQueries options.include array`,\n            nameOrDoc\n          );\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery, queryId) => {\n        const { fetchPolicy } = observableQuery.options;\n        observableQuery.resetLastResults();\n        if (\n          includeStandby ||\n          (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        this.getQuery(queryId).setDiff(null);\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy = \"none\",\n    variables,\n    context = {},\n    extensions = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(query, context, variables, extensions).map(\n        (result) => {\n          if (fetchPolicy !== \"no-cache\") {\n            // the subscription interface should handle not sending us results we no longer subscribe to.\n            // XXX I don't think we ever send in an object with errors, but we might in the future...\n            if (shouldWriteResult(result, errorPolicy)) {\n              this.cache.write({\n                query,\n                result: result.data,\n                dataId: \"ROOT_SUBSCRIPTION\",\n                variables: variables,\n              });\n            }\n\n            this.broadcastQueries();\n          }\n\n          const hasErrors = graphQLResultHasError(result);\n          const hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n          if (hasErrors || hasProtocolErrors) {\n            const errors: ApolloErrorOptions = {};\n            if (hasErrors) {\n              errors.graphQLErrors = result.errors;\n            }\n            if (hasProtocolErrors) {\n              errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n            }\n\n            // `errorPolicy` is a mechanism for handling GraphQL errors, according\n            // to our documentation, so we throw protocol errors regardless of the\n            // set error policy.\n            if (errorPolicy === \"none\" || hasProtocolErrors) {\n              throw new ApolloError(errors);\n            }\n          }\n\n          if (errorPolicy === \"ignore\") {\n            delete result.errors;\n          }\n\n          return result;\n        }\n      );\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      const observablePromise = this.localState\n        .addExportedVariables(query, variables, context)\n        .then(makeObservable);\n\n      return new Observable<FetchResult<T>>((observer) => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          (observable) => (sub = observable.subscribe(observer)),\n          observer.error\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach((info) => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Trie<{\n    observable?: Observable<FetchResult<any>>;\n  }>(false);\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    extensions?: Record<string, any>,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>> | undefined;\n\n    const { serverQuery, clientQuery } = this.getDocumentInfo(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication,\n        }),\n        extensions,\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const printedServerQuery = print(serverQuery);\n        const varJson = canonicalStringify(variables);\n\n        const entry = inFlightLinkObservables.lookup(\n          printedServerQuery,\n          varJson\n        );\n\n        observable = entry.observable;\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>,\n          ]);\n          observable = entry.observable = concast;\n\n          concast.beforeNext(() => {\n            inFlightLinkObservables.remove(printedServerQuery, varJson);\n          });\n        }\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>,\n        ]);\n      }\n    } else {\n      observable = new Concast([Observable.of({ data: {} } as FetchResult<T>)]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, (result) => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<\n      WatchQueryOptions<TVars, TData>,\n      \"query\" | \"variables\" | \"context\" | \"fetchPolicy\" | \"errorPolicy\"\n    >\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables\n      ),\n\n      (result) => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(\n              new ApolloError({\n                graphQLErrors,\n              })\n            );\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(\n            result,\n            linkDocument,\n            options,\n            cacheWriteBehavior\n          );\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      (networkError) => {\n        const error =\n          isApolloError(networkError) ? networkError : (\n            new ApolloError({ networkError })\n          );\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      }\n    );\n  }\n\n  private fetchConcastWithInfo<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n    query = options.query\n  ): ConcastAndInfo<TData> {\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const sourcesWithInfo = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        sourcesWithInfo.sources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options\n        );\n      }\n\n      return sourcesWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, (reason) => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    let concast: Concast<ApolloQueryResult<TData>>,\n      containsDataFromLink: boolean;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(\n        this.localState\n          .addExportedVariables(\n            normalized.query,\n            normalized.variables,\n            normalized.context\n          )\n          .then(fromVariables)\n          .then((sourcesWithInfo) => sourcesWithInfo.sources)\n      );\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return {\n      concast,\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache<TStore>,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<\n      string,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloQueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    {\n      query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus\n  ): SourcesAndInfo<TData> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff();\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) =>\n        Observable.of({\n          data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          ...(diff.complete ? null : { partial: true }),\n        } as ApolloQueryResult<TData>);\n\n      if (data && this.getDocumentInfo(query).hasForcedResolvers) {\n        return this.localState\n          .runResolvers({\n            document: query,\n            remoteResult: { data },\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n          })\n          .then((resolved) => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID\n        // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n      : (\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ?\n        CacheWriteBehavior.OVERWRITE\n      : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        query,\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            sources: [resultsFromCache(diff, queryInfo.markReady())],\n          };\n        }\n\n        if (returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"standby\":\n        return { fromLink: false, sources: [] };\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...this.defaultContext,\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface FetchConcastInfo {\n  // Metadata properties that can be returned in addition to the Concast.\n  fromLink: boolean;\n}\ninterface SourcesAndInfo<TData> extends FetchConcastInfo {\n  sources: ConcastSourcesArray<ApolloQueryResult<TData>>;\n}\ninterface ConcastAndInfo<TData> extends FetchConcastInfo {\n  concast: Concast<ApolloQueryResult<TData>>;\n}\n", "import { invariant } from \"../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  DirectiveNode,\n  FragmentSpreadNode,\n  ExecutableDefinitionNode,\n} from \"graphql\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\n\nimport type { ApolloCache } from \"../cache/index.js\";\nimport type { FragmentMap, StoreObject } from \"../utilities/index.js\";\nimport {\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { Resolvers, OperationVariables } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  }\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n  selectionsToResolve: Set<SelectionNode>;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client?: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher?: FragmentMatcher;\n  private selectionsToResolveCache = new WeakMap<\n    ExecutableDefinitionNode,\n    Set<SelectionNode>\n  >();\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach((resolverGroup) => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers\n      ).then((localResult) => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher | undefined {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables<TVars extends OperationVariables>(\n    document: DocumentNode,\n    variables: TVars = {} as TVars,\n    context = {}\n  ): /* returns at least the variables that were passed in */ Promise<TVars> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables\n      ).then((data) => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(\n              (arg) =>\n                arg.name.value === \"always\" &&\n                arg.value.kind === \"BooleanValue\" &&\n                arg.value.value === true\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false\n  ) {\n    const mainDefinition = getMainDefinition(\n      document\n    ) as OperationDefinitionNode;\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n    const selectionsToResolve = this.collectSelectionsToResolve(\n      mainDefinition,\n      fragmentMap\n    );\n\n    const definitionOperation = mainDefinition.operation;\n\n    const defaultOperationType =\n      definitionOperation ?\n        definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : \"Query\";\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      selectionsToResolve,\n      onlyRunForcedResolvers,\n    };\n    const isClientFieldDescendant = false;\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      isClientFieldDescendant,\n      rootValue,\n      execContext\n    ).then((result) => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    isClientFieldDescendant: boolean,\n    rootValue: TData,\n    execContext: ExecContext\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (\n        !isClientFieldDescendant &&\n        !execContext.selectionsToResolve.has(selection)\n      ) {\n        // Skip selections without @client directives\n        // (still processing if one of the ancestors or one of the child fields has @client directive)\n        return;\n      }\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(\n          selection,\n          isClientFieldDescendant,\n          rootValue,\n          execContext\n        ).then((fieldResult) => {\n          if (typeof fieldResult !== \"undefined\") {\n            resultsToMerge.push({\n              [resultKeyNameFromField(selection)]: fieldResult,\n            } as TData);\n          }\n        });\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named %s`, selection.name.value);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            isClientFieldDescendant,\n            rootValue,\n            execContext\n          ).then((fragmentResult) => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function () {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    rootValue: any,\n    execContext: ExecContext\n  ): Promise<any> {\n    if (!rootValue) {\n      return null;\n    }\n\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach((directive) => {\n          if (directive.name.value === \"export\" && directive.arguments) {\n            directive.arguments.forEach((arg) => {\n              if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      const isClientField =\n        field.directives?.some((d) => d.name.value === \"client\") ?? false;\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(\n          field,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    result: any[],\n    execContext: ExecContext\n  ): any {\n    return Promise.all(\n      result.map((item) => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(\n            field,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(\n            field.selectionSet,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n      })\n    );\n  }\n\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  private collectSelectionsToResolve(\n    mainDefinition: OperationDefinitionNode,\n    fragmentMap: FragmentMap\n  ): Set<SelectionNode> {\n    const isSingleASTNode = (\n      node: ASTNode | readonly ASTNode[]\n    ): node is ASTNode => !Array.isArray(node);\n    const selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(\n      definitionNode: ExecutableDefinitionNode\n    ): Set<SelectionNode> {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        const matches = new Set<SelectionNode>();\n        selectionsToResolveCache.set(definitionNode, matches);\n\n        visit(definitionNode, {\n          Directive(node: DirectiveNode, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread(spread: FragmentSpreadNode, _, __, ___, ancestors) {\n            const fragment = fragmentMap[spread.name.value];\n            invariant(fragment, `No fragment named %s`, spread.name.value);\n\n            const fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n              matches.add(spread);\n              fragmentSelections.forEach((selection) => {\n                matches.add(selection);\n              });\n            }\n          },\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode)!;\n    }\n    return collectByDefinition(mainDefinition);\n  }\n}\n", "import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode, FormattedExecutionResult } from \"graphql\";\n\nimport type { FetchResult, GraphQLRequest } from \"../link/core/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport type { ApolloCache, DataProxy, Reference } from \"../cache/index.js\";\nimport type { DocumentTransform, Observable } from \"../utilities/index.js\";\nimport { version } from \"../version.js\";\nimport type { UriFunction } from \"../link/http/index.js\";\nimport { HttpLink } from \"../link/http/index.js\";\n\nimport { QueryManager } from \"./QueryManager.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\n\nimport type {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from \"./types.js\";\n\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\n\nimport type { FragmentMatcher } from \"./LocalState.js\";\nimport { LocalState } from \"./LocalState.js\";\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nexport interface DevtoolsOptions {\n  /**\n   * If `true`, the [Apollo Client Devtools](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) browser extension can connect to this `ApolloClient` instance.\n   *\n   * The default value is `false` in production and `true` in development if there is a `window` object.\n   */\n  enabled?: boolean;\n\n  /**\n   * Optional name for this `ApolloClient` instance in the devtools. This is\n   * useful when you instantiate multiple clients and want to be able to\n   * identify them by name.\n   */\n  name?: string;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport interface ApolloClientOptions<TCacheShape> {\n  /**\n   * The URI of the GraphQL endpoint that Apollo Client will communicate with.\n   *\n   * One of `uri` or `link` is **required**. If you provide both, `link` takes precedence.\n   */\n  uri?: string | UriFunction;\n  credentials?: string;\n  /**\n   * An object representing headers to include in every HTTP request, such as `{Authorization: 'Bearer 1234'}`\n   *\n   * This value will be ignored when using the `link` option.\n   */\n  headers?: Record<string, string>;\n  /**\n   * You can provide an `ApolloLink` instance to serve as Apollo Client's network layer. For more information, see [Advanced HTTP networking](https://www.apollographql.com/docs/react/networking/advanced-http-networking/).\n   *\n   * One of `uri` or `link` is **required**. If you provide both, `link` takes precedence.\n   */\n  link?: ApolloLink;\n  /**\n   * The cache that Apollo Client should use to store query results locally. The recommended cache is `InMemoryCache`, which is provided by the `@apollo/client` package.\n   *\n   * For more information, see [Configuring the cache](https://www.apollographql.com/docs/react/caching/cache-configuration/).\n   */\n  cache: ApolloCache<TCacheShape>;\n  /**\n   * The time interval (in milliseconds) before Apollo Client force-fetches queries after a server-side render.\n   *\n   * @defaultValue `0` (no delay)\n   */\n  ssrForceFetchDelay?: number;\n  /**\n   * When using Apollo Client for [server-side rendering](https://www.apollographql.com/docs/react/performance/server-side-rendering/), set this to `true` so that the [`getDataFromTree` function](../react/ssr/#getdatafromtree) can work effectively.\n   *\n   * @defaultValue `false`\n   */\n  ssrMode?: boolean;\n  /**\n   * If `true`, the [Apollo Client Devtools](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) browser extension can connect to Apollo Client.\n   *\n   * The default value is `false` in production and `true` in development (if there is a `window` object).\n   * @deprecated Please use the `devtools.enabled` option.\n   */\n  connectToDevTools?: boolean;\n  /**\n   * If `false`, Apollo Client sends every created query to the server, even if a _completely_ identical query (identical in terms of query string, variable values, and operationName) is already in flight.\n   *\n   * @defaultValue `true`\n   */\n  queryDeduplication?: boolean;\n  /**\n   * Provide this object to set application-wide default values for options you can provide to the `watchQuery`, `query`, and `mutate` functions. See below for an example object.\n   *\n   * See this [example object](https://www.apollographql.com/docs/react/api/core/ApolloClient#example-defaultoptions-object).\n   */\n  defaultOptions?: DefaultOptions;\n  defaultContext?: Partial<DefaultContext>;\n  /**\n   * If `true`, Apollo Client will assume results read from the cache are never mutated by application code, which enables substantial performance optimizations.\n   *\n   * @defaultValue `false`\n   */\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  /**\n   * A custom name (e.g., `iOS`) that identifies this particular client among your set of clients. Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n   */\n  name?: string;\n  /**\n   * A custom version that identifies the current version of this particular client (e.g., `1.2`). Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n   *\n   * This is **not** the version of Apollo Client that you are using, but rather any version string that helps you differentiate between versions of your client.\n   */\n  version?: string;\n  documentTransform?: DocumentTransform;\n\n  /**\n   * Configuration used by the [Apollo Client Devtools extension](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) for this client.\n   *\n   * @since 3.11.0\n   */\n  devtools?: DevtoolsOptions;\n}\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nimport { getApolloClientMemoryInternals } from \"../utilities/caching/getMemoryInternals.js\";\nimport type {\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"../cache/core/cache.js\";\nexport { mergeOptions };\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>[\"typeDefs\"];\n  public readonly devtoolsConfig: DevtoolsOptions;\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb?: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of `ApolloClient`.\n   *\n   * @example\n   * ```js\n   * import { ApolloClient, InMemoryCache } from '@apollo/client';\n   *\n   * const cache = new InMemoryCache();\n   *\n   * const client = new ApolloClient({\n   *   // Provide required constructor fields\n   *   cache: cache,\n   *   uri: 'http://localhost:4000/',\n   *\n   *   // Provide some optional constructor fields\n   *   name: 'react-web-client',\n   *   version: '1.3',\n   *   queryDeduplication: false,\n   *   defaultOptions: {\n   *     watchQuery: {\n   *       fetchPolicy: 'cache-and-network',\n   *     },\n   *   },\n   * });\n   * ```\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    if (!options.cache) {\n      throw newInvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n          \"in the options object. \\n\" +\n          \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      documentTransform,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      // Expose the client instance as window.__APOLLO_CLIENT__ and call\n      // onBroadcast in queryManager.broadcastQueries to enable browser\n      // devtools, but disable them by default in production.\n      connectToDevTools,\n      queryDeduplication = true,\n      defaultOptions,\n      defaultContext,\n      assumeImmutableResults = cache.assumeImmutableResults,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n      devtools,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link =\n        uri ? new HttpLink({ uri, credentials, headers }) : ApolloLink.empty();\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n    this.devtoolsConfig = {\n      ...devtools,\n      enabled: devtools?.enabled || connectToDevTools,\n    };\n\n    if (this.devtoolsConfig.enabled === undefined) {\n      this.devtoolsConfig.enabled = __DEV__;\n    }\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.watchFragment = this.watchFragment.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      defaultContext,\n      documentTransform,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast:\n        this.devtoolsConfig.enabled ?\n          () => {\n            if (this.devToolsHookCb) {\n              this.devToolsHookCb({\n                action: {},\n                state: {\n                  queries: this.queryManager.getQueryStore(),\n                  mutations: this.queryManager.mutationStore || {},\n                },\n                dataWithOptimisticResults: this.cache.extract(true),\n              });\n            }\n          }\n        : void 0,\n    });\n\n    if (this.devtoolsConfig.enabled) this.connectToDevTools();\n  }\n\n  private connectToDevTools() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    type DevToolsConnector = {\n      push(client: ApolloClient<any>): void;\n    };\n    const windowWithDevTools = window as Window & {\n      [devtoolsSymbol]?: DevToolsConnector;\n      __APOLLO_CLIENT__?: ApolloClient<any>;\n    };\n    const devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n    (windowWithDevTools[devtoolsSymbol] =\n      windowWithDevTools[devtoolsSymbol] || ([] as DevToolsConnector)).push(\n      this\n    );\n    windowWithDevTools.__APOLLO_CLIENT__ = this;\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        window.document &&\n        window.top === window.self &&\n        /^(https?|file):$/.test(window.location.protocol)\n      ) {\n        setTimeout(() => {\n          if (!(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n            const nav = window.navigator;\n            const ua = nav && nav.userAgent;\n            let url: string | undefined;\n            if (typeof ua === \"string\") {\n              if (ua.indexOf(\"Chrome/\") > -1) {\n                url =\n                  \"https://chrome.google.com/webstore/detail/\" +\n                  \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n              } else if (ua.indexOf(\"Firefox/\") > -1) {\n                url =\n                  \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n              }\n            }\n            if (url) {\n              invariant.log(\n                \"Download the Apollo DevTools for a better development \" +\n                  \"experience: %s\",\n                url\n              );\n            }\n          }\n        }, 10000);\n      }\n    }\n  }\n\n  /**\n   * The `DocumentTransform` used to modify GraphQL documents before a request\n   * is made. If a custom `DocumentTransform` is not provided, this will be the\n   * default document transform.\n   */\n  get documentTransform() {\n    return this.queryManager.documentTransform;\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n   * receive updated results through an observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === \"network-only\" ||\n        options.fetchPolicy === \"cache-and-network\")\n    ) {\n      options = { ...options, fetchPolicy: \"cache-first\" };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a `Promise` which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options - An object of type `QueryOptions` that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: QueryOptions<TVariables, T>): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== \"cache-and-network\",\n      \"The cache-and-network fetchPolicy does not work with client.query, because \" +\n        \"client.query can only return a single result. Please use client.watchQuery \" +\n        \"to receive multiple results from the cache and the network, or consider \" +\n        \"using a different fetchPolicy, such as cache-first or network-only.\"\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n      options = { ...options, fetchPolicy: \"cache-first\" };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * Promise which is either resolved with the resulting data or rejected with an\n   * error. In some cases both `data` and `errors` might be undefined, for example\n   * when `errorPolicy` is set to `'ignore'`.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables extends OperationVariables = OperationVariables,\n    TContext extends Record<string, any> = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>,\n  >(\n    options: MutationOptions<TData, TVariables, TContext>\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(\n      options\n    );\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * `Observable` which either emits received data or an error.\n   */\n  public subscribe<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: SubscriptionOptions<TVariables, T>): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic - Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Watches the cache store of the fragment according to the options specified\n   * and returns an `Observable`. We can subscribe to this\n   * `Observable` and receive updated results through an\n   * observer when the cache store changes.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @since 3.10.0\n   * @param options - An object of type `WatchFragmentOptions` that allows\n   * the cache to identify the fragment and optionally specify whether to react\n   * to optimistic updates.\n   */\n\n  public watchFragment<\n    TFragmentData = unknown,\n    TVariables = OperationVariables,\n  >(\n    options: WatchFragmentOptions<TFragmentData, TVariables>\n  ): Observable<WatchFragmentResult<TFragmentData>> {\n    return this.cache.watchFragment<TFragmentData, TVariables>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic - Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeQuery<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeFragment<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(\n    payload: GraphQLRequest\n  ): Observable<FormattedExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: false,\n        })\n      )\n      .then(() => Promise.all(this.resetStoreCallbacks.map((fn) => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: true,\n        })\n      )\n      .then(() => Promise.all(this.clearStoreCallbacks.map((fn) => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(\n      options as RefetchQueriesOptions<ApolloCache<TCacheShape>, TResult>\n    );\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch((error) => {\n      invariant.debug(\n        `In client.refetchQueries, Promise.all promise rejected with error %o`,\n        error\n      );\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings.\n   *\n   * An \"active\" query is one that has observers and a `fetchPolicy` other than\n   * \"standby\" or \"cache-only\".\n   *\n   * You can include all `ObservableQuery` objects (including the inactive ones)\n   * by passing \"all\" instead of \"active\", or you can include just a subset of\n   * active queries by passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\"\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n\n  public get defaultContext() {\n    return this.queryManager.defaultContext;\n  }\n\n  /**\n   * @experimental\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   * For more details, see [Memory Management](https://www.apollographql.com/docs/react/caching/memory-management/#measuring-cache-usage)\n   *\n   * @example\n   * ```ts\n   * console.log(client.getMemoryInternals())\n   * ```\n   * Logs output in the following JSON format:\n   * @example\n   * ```json\n   *{\n   *  limits:     {\n   *    parser: 1000,\n   *    canonicalStringify: 1000,\n   *    print: 2000,\n   *    'documentTransform.cache': 2000,\n   *    'queryManager.getDocumentInfo': 2000,\n   *    'PersistedQueryLink.persistedQueryHashes': 2000,\n   *    'fragmentRegistry.transform': 2000,\n   *    'fragmentRegistry.lookup': 1000,\n   *    'fragmentRegistry.findFragmentSpreads': 4000,\n   *    'cache.fragmentQueryDocuments': 1000,\n   *    'removeTypenameFromVariables.getVariableDefinitions': 2000,\n   *    'inMemoryCache.maybeBroadcastWatch': 5000,\n   *    'inMemoryCache.executeSelectionSet': 10000,\n   *    'inMemoryCache.executeSubSelectedArray': 5000\n   *  },\n   *  sizes: {\n   *    parser: 26,\n   *    canonicalStringify: 4,\n   *    print: 14,\n   *    addTypenameDocumentTransform: [\n   *      {\n   *        cache: 14,\n   *      },\n   *    ],\n   *    queryManager: {\n   *      getDocumentInfo: 14,\n   *      documentTransforms: [\n   *        {\n   *          cache: 14,\n   *        },\n   *        {\n   *          cache: 14,\n   *        },\n   *      ],\n   *    },\n   *    fragmentRegistry: {\n   *      findFragmentSpreads: 34,\n   *      lookup: 20,\n   *      transform: 14,\n   *    },\n   *    cache: {\n   *      fragmentQueryDocuments: 22,\n   *    },\n   *    inMemoryCache: {\n   *      executeSelectionSet: 4345,\n   *      executeSubSelectedArray: 1206,\n   *      maybeBroadcastWatch: 32,\n   *    },\n   *    links: [\n   *      {\n   *        PersistedQueryLink: {\n   *          persistedQueryHashes: 14,\n   *        },\n   *      },\n   *      {\n   *        removeTypenameFromVariables: {\n   *          getVariableDefinitions: 14,\n   *        },\n   *      },\n   *    ],\n   *  },\n   * }\n   *```\n   */\n  public getMemoryInternals?: typeof getApolloClientMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n", "export {};\n//# sourceMappingURL=types.js.map", "import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n", "/* Core */\n\nexport type { ApolloClientOptions, DefaultOptions } from \"./ApolloClient.js\";\nexport { ApolloClient, mergeOptions } from \"./ApolloClient.js\";\nexport type {\n  FetchMoreOptions,\n  UpdateQueryOptions,\n} from \"./ObservableQuery.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  FetchPolicy,\n  WatchQueryFetchPolicy,\n  MutationFetchPolicy,\n  RefetchWritePolicy,\n  ErrorPolicy,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n} from \"./watchQueryOptions.js\";\nexport { NetworkStatus, isNetworkRequestSettled } from \"./networkStatus.js\";\nexport * from \"./types.js\";\nexport type { Resolver, FragmentMatcher } from \"./LocalState.js\";\nexport { isApolloError, ApolloError } from \"../errors/index.js\";\n/* Cache */\n\nexport type {\n  // All the exports (types) from ../cache, minus cacheSlot,\n  // which we want to keep semi-private.\n  Transaction,\n  DataProxy,\n  InMemoryCacheConfig,\n  ReactiveVar,\n  TypePolicies,\n  TypePolicy,\n  FieldPolicy,\n  FieldReadFunction,\n  FieldMergeFunction,\n  FieldFunctionOptions,\n  PossibleTypesMap,\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"../cache/index.js\";\nexport {\n  Cache,\n  ApolloCache,\n  InMemoryCache,\n  MissingFieldError,\n  defaultDataIdFromObject,\n  makeVar,\n} from \"../cache/index.js\";\n\nexport * from \"../cache/inmemory/types.js\";\n\n/* Link */\n\nexport * from \"../link/core/index.js\";\nexport * from \"../link/http/index.js\";\nexport type { ServerError } from \"../link/utils/index.js\";\nexport {\n  fromError,\n  toPromise,\n  fromPromise,\n  throwServerError,\n} from \"../link/utils/index.js\";\n\n/* Utilities */\n\nexport type {\n  DocumentTransformCacheKey,\n  Observer,\n  ObservableSubscription,\n  Reference,\n  StoreObject,\n} from \"../utilities/index.js\";\nexport {\n  DocumentTransform,\n  Observable,\n  isReference,\n  makeReference,\n} from \"../utilities/index.js\";\n\n/* Supporting */\n\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity };\nsetVerbosity(__DEV__ ? \"log\" : \"silent\");\n\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n} from \"graphql-tag\";\n", "\"use strict\";\nif (0) {\n  // Trick cjs-module-lexer into adding named exports for all React exports.\n  // (if imported with `import()`, they will appear in `.default` as well.)\n  // This way, cjs-module-lexer will let all of react's (named) exports through unchanged.\n  module.exports = require(\"react\");\n}\n// We don't want bundlers to error when they encounter usage of any of these exports.\n// It's up to the package author to ensure that if they access React internals,\n// they do so in a safe way that won't break if React changes how they use these internals.\n// (e.g. only access them in development, and only in an optional way that won't\n// break if internals are not there or do not have the expected structure)\n// @ts-ignore\nmodule.exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = undefined;\n// @ts-ignore\nmodule.exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = undefined;\n// @ts-ignore\nmodule.exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = undefined;\n// Here we actually pull in the React library and add everything\n// it exports to our own `module.exports`.\n// If React suddenly were to add one of the above \"polyfilled\" exports,\n// the React version would overwrite our version, so this should be\n// future-proof.\nObject.assign(module.exports, require(\"react\"));\n", "import * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport type { RenderPromises } from \"../ssr/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey =\n  canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\n\nexport function getApolloContext(): ReactTypes.Context<ApolloContextValue> {\n  invariant(\n    \"createContext\" in React,\n    \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" +\n      \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n  );\n\n  let context = (React.createContext as any)[\n    contextKey\n  ] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: (context = React.createContext<ApolloContextValue>({})),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport const resetApolloContext = getApolloContext;\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: ReactTypes.ReactNode | ReactTypes.ReactNode[] | null;\n}\n\nexport const ApolloProvider: ReactTypes.FC<ApolloProviderProps<any>> = ({\n  client,\n  children,\n}) => {\n  const ApolloContext = getApolloContext();\n  const parentContext = React.useContext(ApolloContext);\n\n  const context = React.useMemo(() => {\n    return {\n      ...parentContext,\n      client: client || parentContext.client,\n    };\n  }, [parentContext, client]);\n\n  invariant(\n    context.client,\n    \"ApolloProvider was not passed a client instance. Make \" +\n      'sure you pass in your client via the \"client\" prop.'\n  );\n\n  return (\n    <ApolloContext.Provider value={context}>{children}</ApolloContext.Provider>\n  );\n};\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloConsumerProps {\n  children: (client: ApolloClient<object>) => ReactTypes.ReactNode;\n}\n\nexport const ApolloConsumer: ReactTypes.FC<ApolloConsumerProps> = (props) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any) => {\n        invariant(\n          context && context.client,\n          'Could not find \"client\" in the context of ApolloConsumer. ' +\n            \"Wrap the root component in an <ApolloProvider>.\"\n        );\n        return props.children(context.client);\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n", "import \"../../utilities/globals/index.js\";\n\nexport type { ApolloConsumerProps } from \"./ApolloConsumer.js\";\nexport { ApolloConsumer } from \"./ApolloConsumer.js\";\nexport type { ApolloContextValue } from \"./ApolloContext.js\";\nexport { getApolloContext, resetApolloContext } from \"./ApolloContext.js\";\nexport type { ApolloProviderProps } from \"./ApolloProvider.js\";\nexport { ApolloProvider } from \"./ApolloProvider.js\";\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */\nexport function useApolloClient(\n  override?: ApolloClient<object>\n): ApolloClient<object> {\n  const context = React.useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n      \"Wrap the root component in an <ApolloProvider>, or pass an ApolloClient \" +\n      \"instance in via options.\"\n  );\n\n  return client;\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\n\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType =\n  realHook ||\n  ((subscribe, getSnapshot, getServerSnapshot) => {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (\n      // DEVIATION: Using __DEV__\n      __DEV__ &&\n      !didWarnUncachedGetSnapshot &&\n      // DEVIATION: Not using Object.is because we know our snapshots will never\n      // be exotic primitive values like NaN, which is !== itself.\n      value !== getSnapshot()\n    ) {\n      didWarnUncachedGetSnapshot = true;\n      // DEVIATION: Using invariant.error instead of console.error directly.\n      invariant.error(\n        \"The result of getSnapshot should be cached to avoid an infinite loop\"\n      );\n    }\n\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = React.useState({\n      inst: { value, getSnapshot },\n    });\n\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n      // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n      // which may seem like a conditional hook, but this code ends up behaving\n      // unconditionally (one way or the other) because canUseLayoutEffect is\n      // constant.\n      React.useLayoutEffect(() => {\n        Object.assign(inst, { value, getSnapshot });\n        // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [subscribe, value, getSnapshot]);\n    } else {\n      Object.assign(inst, { value, getSnapshot });\n    }\n\n    React.useEffect(() => {\n      // Check for changes right before subscribing. Subsequent changes will be\n      // detected in the subscription handler.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n\n      // Subscribe to the store and return a clean-up function.\n      return subscribe(function handleStoreChange() {\n        // TODO: Because there is no cross-renderer API for batching updates, it's\n        // up to the consumer of this library to wrap their subscription event\n        // with unstable_batchedUpdates. Should we try to detect when this isn't\n        // the case and print a warning in development?\n\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      });\n      // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subscribe]);\n\n    return value;\n  });\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n", "import type { DependencyList } from \"react\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\n\nexport function useDeepMemo<TValue>(\n  memoFn: () => TValue,\n  deps: DependencyList\n) {\n  const ref = React.useRef<{ deps: DependencyList; value: TValue }>();\n\n  if (!ref.current || !equal(ref.current.deps, deps)) {\n    ref.current = { value: memoFn(), deps };\n  }\n\n  return ref.current.value;\n}\n", "import * as React from \"rehackt\";\nimport { canUseDOM } from \"../../../utilities/index.js\";\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nexport const useIsomorphicLayoutEffect =\n  canUseDOM ? React.useLayoutEffect : React.useEffect;\n", "import * as React from \"rehackt\";\n\nlet Ctx: React.Context<null>;\n\nfunction noop() {}\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n\n  return React.useCallback(\n    /**\n     * @returns true if the hook was called during render\n     */ () => {\n      const orig = console.error;\n      try {\n        console.error = noop;\n\n        /**\n         * `useContext` can be called conditionally during render, so this is safe.\n         * (Also, during render we would want to throw as a reaction to this anyways, so it\n         * wouldn't even matter if we got the order of hooks mixed up...)\n         *\n         * They cannot however be called outside of Render, and that's what we're testing here.\n         *\n         * Different versions of React have different behaviour on an invalid hook call:\n         *\n         * React 16.8 - 17: throws an error\n         * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n         *\n         * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n         * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n         */\n        React[\"useContext\" /* hide this from the linter */](Ctx);\n        return true;\n      } catch (e) {\n        return false;\n      } finally {\n        console.error = orig;\n      }\n    },\n    []\n  );\n}\n", "import * as React from \"rehackt\";\n\nconst INIT = {};\n\nexport function useLazyRef<T>(getInitialValue: () => T) {\n  const ref = React.useRef<T>(INIT as unknown as T);\n\n  if (ref.current === INIT) {\n    ref.current = getInitialValue();\n  }\n\n  return ref;\n}\n", "import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"rehackt\";\n\ntype Use = <T>(promise: Promise<T>) => T;\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nconst useKey = \"use\" as keyof typeof React;\nconst realHook = React[useKey] as Use | undefined;\n\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport const __use =\n  realHook ||\n  function __use<TValue>(promise: Promise<TValue>) {\n    const statefulPromise = wrapPromiseWithState(promise);\n\n    switch (statefulPromise.status) {\n      case \"pending\":\n        throw statefulPromise;\n      case \"rejected\":\n        throw statefulPromise.reason;\n      case \"fulfilled\":\n        return statefulPromise.value;\n    }\n  };\n", "import type {\n  useQuery,\n  useSuspenseQuery,\n  useBackgroundQuery,\n  useReadQuery,\n  useFragment,\n  useQueryRefHandlers,\n} from \"../index.js\";\nimport type { QueryManager } from \"../../../core/QueryManager.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../../core/ObservableQuery.js\";\nimport type { createQueryPreloader } from \"../../query-preloader/createQueryPreloader.js\";\n\nconst wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n\ninterface WrappableHooks {\n  createQueryPreloader: typeof createQueryPreloader;\n  useQuery: typeof useQuery;\n  useSuspenseQuery: typeof useSuspenseQuery;\n  useBackgroundQuery: typeof useBackgroundQuery;\n  useReadQuery: typeof useReadQuery;\n  useFragment: typeof useFragment;\n  useQueryRefHandlers: typeof useQueryRefHandlers;\n}\n\n/**\n * @internal\n * Can be used to correctly type the [Symbol.for(\"apollo.hook.wrappers\")] property of\n * `QueryManager`, to override/wrap hook functionality.\n */\nexport type HookWrappers = {\n  [K in keyof WrappableHooks]?: (\n    originalHook: WrappableHooks[K]\n  ) => WrappableHooks[K];\n};\n\ninterface QueryManagerWithWrappers<T> extends QueryManager<T> {\n  [wrapperSymbol]?: HookWrappers;\n}\n\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */\nexport function wrapHook<Hook extends (...args: any[]) => any>(\n  hookName: keyof WrappableHooks,\n  useHook: Hook,\n  clientOrObsQuery: ObservableQuery<any> | ApolloClient<any>\n): Hook {\n  const queryManager = (\n    clientOrObsQuery as unknown as {\n      // both `ApolloClient` and `ObservableQuery` have a `queryManager` property\n      // but they're both `private`, so we have to cast around for a bit here.\n      queryManager: QueryManagerWithWrappers<any>;\n    }\n  )[\"queryManager\"];\n  const wrappers = queryManager && queryManager[wrapperSymbol];\n  const wrapper: undefined | ((wrap: Hook) => Hook) =\n    wrappers && (wrappers[hookName] as any);\n  return wrapper ? wrapper(useHook) : useHook;\n}\n", "// These hooks are used internally and are not exported publicly by the library\nexport { useDeepMemo } from \"./useDeepMemo.js\";\nexport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect.js\";\nexport { useRenderGuard } from \"./useRenderGuard.js\";\nexport { useLazyRef } from \"./useLazyRef.js\";\nexport { __use } from \"./__use.js\";\nexport { wrapHook } from \"./wrapHook.js\";\n", "/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  ApolloClient,\n  DefaultOptions,\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { RenderPromises } from \"../ssr/RenderPromises.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\ntype InternalQueryResult<TData, TVariables extends OperationVariables> = Omit<\n  QueryResult<TData, TVariables>,\n  Exclude<keyof ObservableQueryFields<TData, TVariables>, \"variables\">\n>;\n\nfunction noop() {}\nexport const lastWatchOptions = Symbol();\n\nexport interface ObsQueryWithMeta<TData, TVariables extends OperationVariables>\n  extends ObservableQuery<TData, TVariables> {\n  [lastWatchOptions]?: WatchQueryOptions<TVariables, TData>;\n}\n\nexport interface InternalResult<TData, TVariables extends OperationVariables> {\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  current?: undefined | InternalQueryResult<TData, TVariables>;\n  previousData?: undefined | TData;\n}\n\ninterface InternalState<TData, TVariables extends OperationVariables> {\n  client: ReturnType<typeof useApolloClient>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  observable: ObsQueryWithMeta<TData, TVariables>;\n  resultData: InternalResult<TData, TVariables>;\n}\n\nexport type UpdateInternalState<\n  TData,\n  TVariables extends OperationVariables,\n> = (state: InternalState<TData, TVariables>) => void;\n\ninterface Callbacks<TData> {\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  onCompleted(data: TData): void;\n  onError(error: ApolloError): void;\n}\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return wrapHook(\n    \"useQuery\",\n    _useQuery,\n    useApolloClient(options && options.client)\n  )(query, options);\n}\n\nfunction _useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const { result, obsQueryFields } = useQueryInternals(query, options);\n  return React.useMemo(\n    () => ({ ...result, ...obsQueryFields }),\n    [result, obsQueryFields]\n  );\n}\n\nfunction useInternalState<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<any, any>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  renderPromises: RenderPromises | undefined,\n  makeWatchQueryOptions: () => WatchQueryOptions<TVariables, TData>\n) {\n  function createInternalState(previous?: InternalState<TData, TVariables>) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    const internalState: InternalState<TData, TVariables> = {\n      client,\n      query,\n      observable:\n        // See if there is an existing observable that was used to fetch the same\n        // data and if so, use it instead since it will contain the proper queryId\n        // to fetch the result set. This is used during SSR.\n        (renderPromises &&\n          renderPromises.getSSRObservable(makeWatchQueryOptions())) ||\n        client.watchQuery(\n          getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())\n        ),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: previous?.resultData.current?.data,\n      },\n    };\n\n    return internalState as InternalState<TData, TVariables>;\n  }\n\n  let [internalState, updateInternalState] =\n    React.useState(createInternalState);\n\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n  function onQueryExecuted(\n    watchQueryOptions: WatchQueryOptions<TVariables, TData>\n  ) {\n    // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n    Object.assign(internalState.observable, {\n      [lastWatchOptions]: watchQueryOptions,\n    });\n    const resultData = internalState.resultData;\n    updateInternalState({\n      ...internalState,\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: resultData.current?.data || resultData.previousData,\n        current: undefined,\n      }),\n    });\n  }\n\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    const newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted] as const;\n  }\n\n  return [internalState, onQueryExecuted] as const;\n}\n\nexport function useQueryInternals<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const client = useApolloClient(options.client);\n\n  const renderPromises = React.useContext(getApolloContext()).renderPromises;\n  const isSyncSSR = !!renderPromises;\n  const disableNetworkFetches = client.disableNetworkFetches;\n  const ssrAllowed = options.ssr !== false && !options.skip;\n  const partialRefetch = options.partialRefetch;\n\n  const makeWatchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    isSyncSSR\n  );\n\n  const [{ observable, resultData }, onQueryExecuted] = useInternalState(\n    client,\n    query,\n    options,\n    renderPromises,\n    makeWatchQueryOptions\n  );\n\n  const watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>> =\n    makeWatchQueryOptions(observable);\n\n  useResubscribeIfNecessary<TData, TVariables>(\n    resultData, // might get mutated during render\n    observable, // might get mutated during render\n    client,\n    options,\n    watchQueryOptions\n  );\n\n  const obsQueryFields = React.useMemo<\n    Omit<ObservableQueryFields<TData, TVariables>, \"variables\">\n  >(() => bindObservableMethods(observable), [observable]);\n\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n\n  const result = useObservableSubscriptionResult<TData, TVariables>(\n    resultData,\n    observable,\n    client,\n    options,\n    watchQueryOptions,\n    disableNetworkFetches,\n    partialRefetch,\n    isSyncSSR,\n    {\n      onCompleted: options.onCompleted || noop,\n      onError: options.onError || noop,\n    }\n  );\n\n  return {\n    result,\n    obsQueryFields,\n    observable,\n    resultData,\n    client,\n    onQueryExecuted,\n  };\n}\n\nfunction useObservableSubscriptionResult<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>,\n  disableNetworkFetches: boolean,\n  partialRefetch: boolean | undefined,\n  isSyncSSR: boolean,\n  callbacks: {\n    onCompleted: (data: TData) => void;\n    onError: (error: ApolloError) => void;\n  }\n) {\n  const callbackRef = React.useRef<Callbacks<TData>>(callbacks);\n  React.useEffect(() => {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    callbackRef.current = callbacks;\n  });\n\n  const resultOverride =\n    (\n      (isSyncSSR || disableNetworkFetches) &&\n      options.ssr === false &&\n      !options.skip\n    ) ?\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      ssrDisabledResult\n    : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      skipStandbyResult\n    : void 0;\n\n  const previousData = resultData.previousData;\n  const currentResultOverride = React.useMemo(\n    () =>\n      resultOverride &&\n      toQueryResult(resultOverride, previousData, observable, client),\n    [client, observable, resultOverride, previousData]\n  );\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (handleStoreChange) => {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n\n        if (isSyncSSR) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = resultData.current;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = observable.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          setResult(\n            result,\n            resultData,\n            observable,\n            client,\n            partialRefetch,\n            handleStoreChange,\n            callbackRef.current\n          );\n        };\n\n        const onError = (error: Error) => {\n          subscription.current.unsubscribe();\n          subscription.current = observable.resubscribeAfterError(\n            onNext,\n            onError\n          );\n\n          if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = resultData.current;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            setResult(\n              {\n                data: (previousResult && previousResult.data) as TData,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              },\n              resultData,\n              observable,\n              client,\n              partialRefetch,\n              handleStoreChange,\n              callbackRef.current\n            );\n          }\n        };\n\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        const subscription = { current: observable.subscribe(onNext, onError) };\n\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return () => {\n          setTimeout(() => subscription.current.unsubscribe());\n        };\n      },\n\n      [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client,\n      ]\n    ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      )\n  );\n}\n\nfunction useRegisterSSRObservable(\n  observable: ObsQueryWithMeta<any, any>,\n  renderPromises: RenderPromises | undefined,\n  ssrAllowed: boolean\n) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n}\n\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  /** this hook will mutate properties on `resultData` */\n  resultData: InternalResult<TData, TVariables>,\n  /** this hook will mutate properties on `observable` */\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>\n) {\n  if (\n    observable[lastWatchOptions] &&\n    !equal(observable[lastWatchOptions], watchQueryOptions)\n  ) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(\n      getObsQueryOptions(observable, client, options, watchQueryOptions)\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    resultData.previousData =\n      resultData.current?.data || resultData.previousData;\n    resultData.current = void 0;\n  }\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {},\n  isSyncSSR: boolean\n) {\n  return (\n    observable?: ObservableQuery<TData, TVariables>\n  ): WatchQueryOptions<TVariables, TData> => {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query });\n\n    if (\n      isSyncSSR &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy =\n        watchQueryOptions.initialFetchPolicy ||\n        watchQueryOptions.fetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        observable?.options.initialFetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n\n    return watchQueryOptions;\n  };\n}\n\nexport function getObsQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  observable: ObservableQuery<TData, TVariables> | undefined,\n  client: ApolloClient<object>,\n  queryHookOptions: QueryHookOptions<TData, TVariables>,\n  watchQueryOptions: Partial<WatchQueryOptions<TVariables, TData>>\n): WatchQueryOptions<TVariables, TData> {\n  const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n  const globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  }\n\n  // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n\n  return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n}\n\nfunction setResult<TData, TVariables extends OperationVariables>(\n  nextResult: ApolloQueryResult<TData>,\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  partialRefetch: boolean | undefined,\n  forceUpdate: () => void,\n  callbacks: Callbacks<TData>\n) {\n  const previousResult = resultData.current;\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({ graphQLErrors: nextResult.errors });\n  }\n\n  resultData.current = toQueryResult(\n    unsafeHandlePartialRefetch(nextResult, observable, partialRefetch),\n    resultData.previousData,\n    observable,\n    client\n  );\n  // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult?.networkStatus, callbacks);\n}\n\nfunction handleErrorOrCompleted<TData>(\n  result: ApolloQueryResult<TData>,\n  previousNetworkStatus: NetworkStatus | undefined,\n  callbacks: Callbacks<TData>\n) {\n  if (!result.loading) {\n    const error = toApolloError(result);\n\n    // wait a tick in case we are in the middle of rendering a component\n    Promise.resolve()\n      .then(() => {\n        if (error) {\n          callbacks.onError(error);\n        } else if (\n          result.data &&\n          previousNetworkStatus !== result.networkStatus &&\n          result.networkStatus === NetworkStatus.ready\n        ) {\n          callbacks.onCompleted(result.data);\n        }\n      })\n      .catch((error) => {\n        invariant.warn(error);\n      });\n  }\n}\n\nfunction getCurrentResult<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  callbacks: Callbacks<TData>,\n  partialRefetch: boolean | undefined,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(\n      observable.getCurrentResult(),\n      resultData,\n      observable,\n      client,\n      partialRefetch,\n      () => {},\n      callbacks\n    );\n  }\n  return resultData.current!;\n}\n\nexport function getDefaultFetchPolicy<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  queryHookDefaultOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n  clientDefaultOptions?: DefaultOptions\n): WatchQueryFetchPolicy {\n  return (\n    queryHookDefaultOptions?.fetchPolicy ||\n    clientDefaultOptions?.watchQuery?.fetchPolicy ||\n    \"cache-first\"\n  );\n}\n\nexport function toApolloError<TData>(\n  result: Pick<ApolloQueryResult<TData>, \"errors\" | \"error\">\n): ApolloError | undefined {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\nexport function toQueryResult<TData, TVariables extends OperationVariables>(\n  result: ApolloQueryResult<TData>,\n  previousData: TData | undefined,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  const { data, partial, ...resultWithoutPartial } = result;\n  const queryResult: InternalQueryResult<TData, TVariables> = {\n    data, // Ensure always defined, even if result.data is missing.\n    ...resultWithoutPartial,\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData,\n  };\n  return queryResult;\n}\n\nfunction unsafeHandlePartialRefetch<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  result: ApolloQueryResult<TData>,\n  observable: ObservableQuery<TData, TVariables>,\n  partialRefetch: boolean | undefined\n): ApolloQueryResult<TData> {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (\n    result.partial &&\n    partialRefetch &&\n    !result.loading &&\n    (!result.data || Object.keys(result.data).length === 0) &&\n    observable.options.fetchPolicy !== \"cache-only\"\n  ) {\n    observable.refetch();\n    return {\n      ...result,\n      loading: true,\n      networkStatus: NetworkStatus.refetch,\n    };\n  }\n  return result;\n}\n\nconst ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.loading,\n});\n\nconst skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.ready,\n});\n\nfunction bindObservableMethods<TData, TVariables extends OperationVariables>(\n  observable: ObservableQuery<TData, TVariables>\n) {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n}\n", "import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryHookOptions,\n  QueryResult,\n} from \"../types/types.js\";\nimport type { InternalResult, ObsQueryWithMeta } from \"./useQuery.js\";\nimport {\n  createMakeWatchQueryOptions,\n  getDefaultFetchPolicy,\n  getObsQueryOptions,\n  toQueryResult,\n  useQueryInternals,\n} from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"stopPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const queryHookOptions = {\n    ...merged,\n    skip: !execOptionsRef.current,\n  };\n  const {\n    obsQueryFields,\n    result: useQueryResult,\n    client,\n    resultData,\n    observable,\n    onQueryExecuted,\n  } = useQueryInternals(document, queryHookOptions);\n\n  const initialFetchPolicy =\n    observable.options.initialFetchPolicy ||\n    getDefaultFetchPolicy(\n      queryHookOptions.defaultOptions,\n      client.defaultOptions\n    );\n\n  const forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods as typeof obsQueryFields;\n  }, [forceUpdateState, obsQueryFields]);\n\n  const called = !!execOptionsRef.current;\n  const result = React.useMemo(\n    () => ({\n      ...useQueryResult,\n      ...eagerMethods,\n      called,\n    }),\n    [useQueryResult, eagerMethods, called]\n  );\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = executeQuery(\n        resultData,\n        observable,\n        client,\n        document,\n        { ...options, skip: false },\n        onQueryExecuted\n      ).then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    [\n      client,\n      document,\n      eagerMethods,\n      initialFetchPolicy,\n      observable,\n      resultData,\n      onQueryExecuted,\n    ]\n  );\n\n  const executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(() => {\n    executeRef.current = execute;\n  });\n\n  const stableExecute = React.useCallback<typeof execute>(\n    (...args) => executeRef.current(...args),\n    []\n  );\n  return [stableExecute, result];\n}\n\nfunction executeQuery<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  currentQuery: DocumentNode,\n  options: QueryHookOptions<TData, TVariables> & {\n    query?: DocumentNode;\n  },\n  onQueryExecuted: (options: WatchQueryOptions<TVariables, TData>) => void\n) {\n  const query = options.query || currentQuery;\n  const watchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    false\n  )(observable);\n\n  const concast = observable.reobserveAsConcast(\n    getObsQueryOptions(observable, client, options, watchQueryOptions)\n  );\n  onQueryExecuted(watchQueryOptions);\n\n  return new Promise<\n    Omit<QueryResult<TData, TVariables>, (typeof EAGER_METHODS)[number]>\n  >((resolve) => {\n    let result: ApolloQueryResult<TData>;\n\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: (value) => {\n        result = value;\n      },\n      error: () => {\n        resolve(\n          toQueryResult(\n            observable.getCurrentResult(),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n      complete: () => {\n        resolve(\n          toQueryResult(result, resultData.previousData, observable, client)\n        );\n      },\n    });\n  });\n}\n", "import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type {\n  ApolloClient,\n  DefaultContext,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SubscriptionHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options.onSubscriptionData) {\n      invariant.warn(\n        options.onData ?\n          \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n        : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete ?\n          \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n        : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const {\n    skip,\n    fetchPolicy,\n    errorPolicy,\n    shouldResubscribe,\n    context,\n    extensions,\n    ignoreResults,\n  } = options;\n  const variables = useDeepMemo(() => options.variables, [options.variables]);\n\n  const recreate = () =>\n    createSubscription(\n      client,\n      subscription,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      context,\n      extensions\n    );\n\n  let [observable, setObservable] = React.useState(\n    options.skip ? null : recreate\n  );\n\n  const recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(() => {\n    recreateRef.current = recreate;\n  });\n\n  if (skip) {\n    if (observable) {\n      setObservable((observable = null));\n    }\n  } else if (\n    !observable ||\n    ((client !== observable.__.client ||\n      subscription !== observable.__.query ||\n      fetchPolicy !== observable.__.fetchPolicy ||\n      errorPolicy !== observable.__.errorPolicy ||\n      !equal(variables, observable.__.variables)) &&\n      (typeof shouldResubscribe === \"function\" ?\n        !!shouldResubscribe(options!)\n      : shouldResubscribe) !== false)\n  ) {\n    setObservable((observable = recreate()));\n  }\n\n  const optionsRef = React.useRef(options);\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n\n  const fallbackLoading = !skip && !ignoreResults;\n  const fallbackResult = React.useMemo<SubscriptionResult<TData, TVariables>>(\n    () => ({\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables,\n    }),\n    [fallbackLoading, variables]\n  );\n\n  const ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(() => {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n\n  const ret = useSyncExternalStore<SubscriptionResult<TData, TVariables>>(\n    React.useCallback(\n      (update) => {\n        if (!observable) {\n          return () => {};\n        }\n\n        let subscriptionStopped = false;\n        const variables = observable.__.variables;\n        const client = observable.__.client;\n        const subscription = observable.subscribe({\n          next(fetchResult) {\n            if (subscriptionStopped) {\n              return;\n            }\n\n            const result = {\n              loading: false,\n              // TODO: fetchResult.data can be null but SubscriptionResult.data\n              // expects TData | undefined only\n              data: fetchResult.data!,\n              error: toApolloError(fetchResult),\n              variables,\n            };\n            observable.__.setResult(result);\n            if (!ignoreResultsRef.current) update();\n\n            if (result.error) {\n              optionsRef.current.onError?.(result.error);\n            } else if (optionsRef.current.onData) {\n              optionsRef.current.onData({\n                client,\n                data: result,\n              });\n            } else if (optionsRef.current.onSubscriptionData) {\n              optionsRef.current.onSubscriptionData({\n                client,\n                subscriptionData: result,\n              });\n            }\n          },\n          error(error) {\n            error =\n              error instanceof ApolloError ? error : (\n                new ApolloError({ protocolErrors: [error] })\n              );\n            if (!subscriptionStopped) {\n              observable.__.setResult({\n                loading: false,\n                data: void 0,\n                error,\n                variables,\n              });\n              if (!ignoreResultsRef.current) update();\n              optionsRef.current.onError?.(error);\n            }\n          },\n          complete() {\n            if (!subscriptionStopped) {\n              if (optionsRef.current.onComplete) {\n                optionsRef.current.onComplete();\n              } else if (optionsRef.current.onSubscriptionComplete) {\n                optionsRef.current.onSubscriptionComplete();\n              }\n            }\n          },\n        });\n\n        return () => {\n          // immediately stop receiving subscription values, but do not unsubscribe\n          // until after a short delay in case another useSubscription hook is\n          // reusing the same underlying observable and is about to subscribe\n          subscriptionStopped = true;\n          setTimeout(() => {\n            subscription.unsubscribe();\n          });\n        };\n      },\n      [observable]\n    ),\n    () =>\n      observable && !skip && !ignoreResults ?\n        observable.__.result\n      : fallbackResult\n  );\n  return React.useMemo(\n    () => ({\n      ...ret,\n      restart() {\n        invariant(\n          !optionsRef.current.skip,\n          \"A subscription that is skipped cannot be restarted.\"\n        );\n        setObservable(recreateRef.current());\n      },\n    }),\n    [ret]\n  );\n}\n\nfunction createSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<any>,\n  query: TypedDocumentNode<TData, TVariables>,\n  variables: TVariables | undefined,\n  fetchPolicy: FetchPolicy | undefined,\n  errorPolicy: ErrorPolicy | undefined,\n  context: DefaultContext | undefined,\n  extensions: Record<string, any> | undefined\n) {\n  const options = {\n    query,\n    variables,\n    fetchPolicy,\n    errorPolicy,\n    context,\n    extensions,\n  };\n  const __ = {\n    ...options,\n    client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables,\n    } as SubscriptionResult<TData, TVariables>,\n    setResult(result: SubscriptionResult<TData, TVariables>) {\n      __.result = result;\n    },\n  };\n\n  let observable: Observable<FetchResult<TData>> | null = null;\n  return Object.assign(\n    new Observable<FetchResult<TData>>((observer) => {\n      // lazily start the subscription when the first observer subscribes\n      // to get around strict mode\n      if (!observable) {\n        observable = client.subscribe(options);\n      }\n      const sub = observable.subscribe(observer);\n      return () => sub.unsubscribe();\n    }),\n    {\n      /**\n       * A tracking object to store details about the observable and the latest result of the subscription.\n       */\n      __,\n    }\n  );\n}\n", "import * as React from \"rehackt\";\nimport type { ReactiveVar } from \"../../core/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  return useSyncExternalStore(\n    React.useCallback(\n      (update) => {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n          update();\n          rv.onNextChange(onNext);\n        });\n      },\n      [rv]\n    ),\n    rv,\n    rv\n  );\n}\n", "import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, useLazyRef, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    _useFragment,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction _useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient(options.client);\n\n  const diffOptions = useDeepMemo<Cache.DiffOptions<TData, TVars>>(() => {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...rest\n    } = options;\n\n    return {\n      ...rest,\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    };\n  }, [options]);\n\n  const resultRef = useLazyRef<UseFragmentResult<TData>>(() =>\n    diffToResult(cache.diff<TData>(diffOptions))\n  );\n\n  const stableOptions = useDeepMemo(() => options, [options]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  React.useMemo(() => {\n    resultRef.current = diffToResult(cache.diff<TData>(diffOptions));\n  }, [diffOptions, cache]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => resultRef.current, []);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const subscription = cache.watchFragment(stableOptions).subscribe({\n          next: (result) => {\n            if (equal(result, resultRef.current)) return;\n            resultRef.current = result;\n            // If we get another update before we've re-rendered, bail out of\n            // the update and try again. This ensures that the relative timing\n            // between useQuery and useFragment stays roughly the same as\n            // fixed in https://github.com/apollographql/apollo-client/pull/11083\n            clearTimeout(lastTimeout);\n            lastTimeout = setTimeout(forceUpdate) as any;\n          },\n        });\n        return () => {\n          subscription.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, stableOptions]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n", "import { equal } from \"@wry/equality\";\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../../core/index.js\";\nimport type {\n  ObservableSubscription,\n  PromiseWithState,\n} from \"../../../utilities/index.js\";\nimport {\n  createFulfilledPromise,\n  createRejectedPromise,\n} from \"../../../utilities/index.js\";\nimport type { QueryKey } from \"./types.js\";\nimport { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport { invariant } from \"../../../utilities/globals/invariantWrappers.js\";\n\ntype QueryRefPromise<TData> = PromiseWithState<ApolloQueryResult<TData>>;\n\ntype Listener<TData> = (promise: QueryRefPromise<TData>) => void;\n\ntype FetchMoreOptions<TData> = Parameters<\n  ObservableQuery<TData>[\"fetchMore\"]\n>[0];\n\nconst QUERY_REFERENCE_SYMBOL: unique symbol = Symbol();\nconst PROMISE_SYMBOL: unique symbol = Symbol();\ndeclare const QUERY_REF_BRAND: unique symbol;\n/**\n * A `QueryReference` is an opaque object returned by `useBackgroundQuery`.\n * A child component reading the `QueryReference` via `useReadQuery` will\n * suspend until the promise resolves.\n */\nexport interface QueryRef<TData = unknown, TVariables = unknown> {\n  /** @internal */\n  [QUERY_REF_BRAND]?(variables: TVariables): TData;\n}\n\n/**\n * @internal\n * For usage in internal helpers only.\n */\ninterface WrappedQueryRef<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /** @internal */\n  readonly [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;\n  /** @internal */\n  [PROMISE_SYMBOL]: QueryRefPromise<TData>;\n  /** @internal */\n  toPromise?(): Promise<unknown>;\n}\n\n/**\n * @deprecated Please use the `QueryRef` interface instead of `QueryReference`.\n *\n * {@inheritDoc @apollo/client!QueryRef:interface}\n */\nexport interface QueryReference<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /**\n   * @deprecated Please use the `QueryRef` interface instead of `QueryReference`.\n   *\n   * {@inheritDoc @apollo/client!PreloadedQueryRef#toPromise:member(1)}\n   */\n  toPromise?: unknown;\n}\n\n/**\n * {@inheritDoc @apollo/client!QueryRef:interface}\n */\nexport interface PreloadedQueryRef<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /**\n   * A function that returns a promise that resolves when the query has finished\n   * loading. The promise resolves with the `QueryReference` itself.\n   *\n   * @remarks\n   * This method is useful for preloading queries in data loading routers, such\n   * as [React Router](https://reactrouter.com/en/main) or [TanStack Router](https://tanstack.com/router),\n   * to prevent routes from transitioning until the query has finished loading.\n   * `data` is not exposed on the promise to discourage using the data in\n   * `loader` functions and exposing it to your route components. Instead, we\n   * prefer you rely on `useReadQuery` to access the data to ensure your\n   * component can rerender with cache updates. If you need to access raw query\n   * data, use `client.query()` directly.\n   *\n   * @example\n   * Here's an example using React Router's `loader` function:\n   * ```ts\n   * import { createQueryPreloader } from \"@apollo/client\";\n   *\n   * const preloadQuery = createQueryPreloader(client);\n   *\n   * export async function loader() {\n   *   const queryRef = preloadQuery(GET_DOGS_QUERY);\n   *\n   *   return queryRef.toPromise();\n   * }\n   *\n   * export function RouteComponent() {\n   *   const queryRef = useLoaderData();\n   *   const { data } = useReadQuery(queryRef);\n   *\n   *   // ...\n   * }\n   * ```\n   *\n   * @since 3.9.0\n   */\n  toPromise(): Promise<PreloadedQueryRef<TData, TVariables>>;\n}\n\ninterface InternalQueryReferenceOptions {\n  onDispose?: () => void;\n  autoDisposeTimeoutMs?: number;\n}\n\nexport function wrapQueryRef<TData, TVariables extends OperationVariables>(\n  internalQueryRef: InternalQueryReference<TData>\n) {\n  const ref: WrappedQueryRef<TData, TVariables> = {\n    toPromise() {\n      // We avoid resolving this promise with the query data because we want to\n      // discourage using the server data directly from the queryRef. Instead,\n      // the data should be accessed through `useReadQuery`. When the server\n      // data is needed, its better to use `client.query()` directly.\n      //\n      // Here we resolve with the ref itself to make using this in React Router\n      // or TanStack Router `loader` functions a bit more ergonomic e.g.\n      //\n      // function loader() {\n      //   return { queryRef: await preloadQuery(query).toPromise() }\n      // }\n      return getWrappedPromise(ref).then(() => ref);\n    },\n    [QUERY_REFERENCE_SYMBOL]: internalQueryRef,\n    [PROMISE_SYMBOL]: internalQueryRef.promise,\n  };\n\n  return ref;\n}\n\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables>\n): asserts queryRef is WrappedQueryRef<TData, TVariables>;\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables> | undefined | null\n): asserts queryRef is WrappedQueryRef<TData, TVariables> | undefined | null;\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables> | undefined | null\n) {\n  invariant(\n    !queryRef || QUERY_REFERENCE_SYMBOL in queryRef,\n    \"Expected a QueryRef object, but got something else instead.\"\n  );\n}\n\nexport function getWrappedPromise<TData>(\n  queryRef: WrappedQueryRef<TData, any>\n) {\n  const internalQueryRef = unwrapQueryRef(queryRef);\n\n  return internalQueryRef.promise.status === \"fulfilled\" ?\n      internalQueryRef.promise\n    : queryRef[PROMISE_SYMBOL];\n}\n\nexport function unwrapQueryRef<TData>(\n  queryRef: WrappedQueryRef<TData>\n): InternalQueryReference<TData>;\nexport function unwrapQueryRef<TData>(\n  queryRef: Partial<WrappedQueryRef<TData>>\n): undefined | InternalQueryReference<TData>;\nexport function unwrapQueryRef<TData>(\n  queryRef: Partial<WrappedQueryRef<TData>>\n) {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\n\nexport function updateWrappedQueryRef<TData>(\n  queryRef: WrappedQueryRef<TData>,\n  promise: QueryRefPromise<TData>\n) {\n  queryRef[PROMISE_SYMBOL] = promise;\n}\n\nconst OBSERVED_CHANGED_OPTIONS = [\n  \"canonizeResults\",\n  \"context\",\n  \"errorPolicy\",\n  \"fetchPolicy\",\n  \"refetchWritePolicy\",\n  \"returnPartialData\",\n] as const;\n\ntype ObservedOptions = Pick<\n  WatchQueryOptions,\n  (typeof OBSERVED_CHANGED_OPTIONS)[number]\n>;\n\nexport class InternalQueryReference<TData = unknown> {\n  public result!: ApolloQueryResult<TData>;\n  public readonly key: QueryKey = {};\n  public readonly observable: ObservableQuery<TData>;\n\n  public promise!: QueryRefPromise<TData>;\n\n  private subscription!: ObservableSubscription;\n  private listeners = new Set<Listener<TData>>();\n  private autoDisposeTimeoutId?: NodeJS.Timeout;\n\n  private resolve: ((result: ApolloQueryResult<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private references = 0;\n  private softReferences = 0;\n\n  constructor(\n    observable: ObservableQuery<TData, any>,\n    options: InternalQueryReferenceOptions\n  ) {\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    this.setResult();\n    this.subscribeToQuery();\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this queryRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    const startDisposeTimer = () => {\n      if (!this.references) {\n        this.autoDisposeTimeoutId = setTimeout(\n          this.dispose,\n          options.autoDisposeTimeoutMs ?? 30_000\n        );\n      }\n    };\n\n    // We wait until the request has settled to ensure we don't dispose of the\n    // query ref before the request finishes, otherwise we would leave the\n    // promise in a pending state rendering the suspense boundary indefinitely.\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n\n  get disposed() {\n    return this.subscription.closed;\n  }\n\n  get watchQueryOptions() {\n    return this.observable.options;\n  }\n\n  reinitialize() {\n    const { observable } = this;\n\n    const originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n    const avoidNetworkRequests =\n      originalFetchPolicy === \"no-cache\" || originalFetchPolicy === \"standby\";\n\n    try {\n      if (avoidNetworkRequests) {\n        observable.silentSetOptions({ fetchPolicy: \"standby\" });\n      } else {\n        observable.resetLastResults();\n        observable.silentSetOptions({ fetchPolicy: \"cache-first\" });\n      }\n\n      this.subscribeToQuery();\n\n      if (avoidNetworkRequests) {\n        return;\n      }\n\n      observable.resetDiff();\n      this.setResult();\n    } finally {\n      observable.silentSetOptions({ fetchPolicy: originalFetchPolicy });\n    }\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  softRetain() {\n    this.softReferences++;\n    let disposed = false;\n\n    return () => {\n      // Tracking if this has already been called helps ensure that\n      // multiple calls to this function won't decrement the reference\n      // counter more than it should. Subsequent calls just result in a noop.\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.softReferences--;\n      setTimeout(() => {\n        if (!this.softReferences && !this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  didChangeOptions(watchQueryOptions: ObservedOptions) {\n    return OBSERVED_CHANGED_OPTIONS.some(\n      (option) =>\n        option in watchQueryOptions &&\n        !equal(this.watchQueryOptions[option], watchQueryOptions[option])\n    );\n  }\n\n  applyOptions(watchQueryOptions: ObservedOptions) {\n    const {\n      fetchPolicy: currentFetchPolicy,\n      canonizeResults: currentCanonizeResults,\n    } = this.watchQueryOptions;\n\n    // \"standby\" is used when `skip` is set to `true`. Detect when we've\n    // enabled the query (i.e. `skip` is `false`) to execute a network request.\n    if (\n      currentFetchPolicy === \"standby\" &&\n      currentFetchPolicy !== watchQueryOptions.fetchPolicy\n    ) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = { ...this.result, ...this.observable.getCurrentResult() };\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  }\n\n  listen(listener: Listener<TData>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  refetch(variables: OperationVariables | undefined) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  }\n\n  fetchMore(options: FetchMoreOptions<TData>) {\n    return this.initiateFetch(this.observable.fetchMore<TData>(options));\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private handleNext(result: ApolloQueryResult<TData>) {\n    switch (this.promise.status) {\n      case \"pending\": {\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n        this.result = result;\n        this.resolve?.(result);\n        break;\n      }\n      default: {\n        // This occurs when switching to a result that is fully cached when this\n        // class is instantiated. ObservableQuery will run reobserve when\n        // subscribing, which delivers a result from the cache.\n        if (\n          result.data === this.result.data &&\n          result.networkStatus === this.result.networkStatus\n        ) {\n          return;\n        }\n\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n\n        this.result = result;\n        this.promise = createFulfilledPromise(result);\n        this.deliver(this.promise);\n        break;\n      }\n    }\n  }\n\n  private handleError(error: ApolloError) {\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(\n      this.handleNext,\n      this.handleError\n    );\n\n    switch (this.promise.status) {\n      case \"pending\": {\n        this.reject?.(error);\n        break;\n      }\n      default: {\n        this.promise = createRejectedPromise<ApolloQueryResult<TData>>(error);\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private deliver(promise: QueryRefPromise<TData>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private initiateFetch(returnedPromise: Promise<ApolloQueryResult<TData>>) {\n    this.promise = this.createPendingPromise();\n    this.promise.catch(() => {});\n\n    // If the data returned from the fetch is deeply equal to the data already\n    // in the cache, `handleNext` will not be triggered leaving the promise we\n    // created in a pending state forever. To avoid this situtation, we attempt\n    // to resolve the promise if `handleNext` hasn't been run to ensure the\n    // promise is resolved correctly.\n    returnedPromise\n      .then(() => {\n        // In the case of `fetchMore`, this promise is resolved before a cache\n        // result is emitted due to the fact that `fetchMore` sets a `no-cache`\n        // fetch policy and runs `cache.batch` in its `.then` handler. Because\n        // the timing is different, we accidentally run this update twice\n        // causing an additional re-render with the `fetchMore` result by\n        // itself. By wrapping in `setTimeout`, this should provide a short\n        // delay to allow the `QueryInfo.notify` handler to run before this\n        // promise is checked.\n        // See https://github.com/apollographql/apollo-client/issues/11315 for\n        // more information\n        setTimeout(() => {\n          if (this.promise.status === \"pending\") {\n            // Use the current result from the observable instead of the value\n            // resolved from the promise. This avoids issues in some cases where\n            // the raw resolved value should not be the emitted value, such as\n            // when a `fetchMore` call returns an empty array after it has\n            // reached the end of the list.\n            //\n            // See the following for more information:\n            // https://github.com/apollographql/apollo-client/issues/11642\n            this.result = this.observable.getCurrentResult();\n            this.resolve?.(this.result);\n          }\n        });\n      })\n      .catch(() => {});\n\n    return returnedPromise;\n  }\n\n  private subscribeToQuery() {\n    this.subscription = this.observable\n      .filter(\n        (result) => !equal(result.data, {}) && !equal(result, this.result)\n      )\n      .subscribe(this.handleNext, this.handleError);\n  }\n\n  private setResult() {\n    // Don't save this result as last result to prevent delivery of last result\n    // when first subscribing\n    const result = this.observable.getCurrentResult(false);\n\n    if (equal(result, this.result)) {\n      return;\n    }\n\n    this.result = result;\n    this.promise =\n      (\n        result.data &&\n        (!result.partial || this.watchQueryOptions.returnPartialData)\n      ) ?\n        createFulfilledPromise(result)\n      : this.createPendingPromise();\n  }\n\n  private createPendingPromise() {\n    return wrapPromiseWithState(\n      new Promise<ApolloQueryResult<TData>>((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      })\n    );\n  }\n}\n", "import { Trie } from \"@wry/trie\";\nimport type { ObservableQuery } from \"../../../core/index.js\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey } from \"./types.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  add(cacheKey: CacheKey, queryRef: InternalQueryReference<unknown>) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  }\n}\n", "import type { SuspenseCacheOptions } from \"../index.js\";\nimport { SuspenseCache } from \"./SuspenseCache.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\n\ndeclare module \"../../../core/ApolloClient.js\" {\n  interface DefaultOptions {\n    react?: {\n      suspense?: Readonly<SuspenseCacheOptions>;\n    };\n  }\n}\n\nconst suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\n\nexport function getSuspenseCache(\n  client: ApolloClient<object> & {\n    [suspenseCacheSymbol]?: SuspenseCache;\n  }\n) {\n  if (!client[suspenseCacheSymbol]) {\n    client[suspenseCacheSymbol] = new SuspenseCache(\n      client.defaultOptions.react?.suspense\n    );\n  }\n\n  return client[suspenseCacheSymbol];\n}\n", "export { getSuspenseCache } from \"./cache/getSuspenseCache.js\";\nexport type { CacheKey, QueryKey } from \"./cache/types.js\";\nexport type {\n  QueryReference,\n  QueryRef,\n  PreloadedQueryRef,\n} from \"./cache/QueryReference.js\";\nexport {\n  InternalQueryReference,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n  assertWrappedQueryRef,\n} from \"./cache/QueryReference.js\";\nexport type { SuspenseCacheOptions } from \"./cache/SuspenseCache.js\";\nexport type { HookWrappers } from \"../hooks/internal/wrapHook.js\";\n", "export const skipToken = Symbol.for(\"apollo.skipToken\");\nexport type SkipToken = typeof skipToken;\n", "import * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  FetchMoreQueryOptions,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  SuspenseQueryHookOptions,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nimport type { SkipToken } from \"./constants.js\";\nimport type { CacheKey, QueryKey } from \"../internal/index.js\";\n\nexport interface UseSuspenseQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  client: ApolloClient<any>;\n  data: TData;\n  error: ApolloError | undefined;\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  networkStatus: NetworkStatus;\n  refetch: RefetchFunction<TData, TVariables>;\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\nexport type FetchMoreFunction<TData, TVariables extends OperationVariables> = (\n  fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TData;\n        variables: TVariables;\n      }\n    ) => TData;\n  }\n) => Promise<ApolloQueryResult<TData>>;\n\nexport type RefetchFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"refetch\"];\n\nexport type SubscribeToMoreFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"subscribeToMore\"];\n\nexport function useSuspenseQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<SuspenseQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> &\n    TOptions\n): UseSuspenseQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ?\n    TOptions[\"skip\"] extends boolean ?\n      DeepPartial<TData> | undefined\n    : DeepPartial<TData>\n  : TOptions[\"skip\"] extends boolean ? TData | undefined\n  : TData,\n  TVariables\n>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData>, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n        returnPartialData: true;\n      })\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?:\n    | SkipToken\n    | SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables> = Object.create(null)\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  return wrapHook(\n    \"useSuspenseQuery\",\n    _useSuspenseQuery,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(query, options);\n}\n\nfunction _useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables>\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions<any, any>({\n    client,\n    query,\n    options,\n  });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  let [current, setPromise] = React.useState<\n    [QueryKey, Promise<ApolloQueryResult<any>>]\n  >([queryRef.key, queryRef.promise]);\n\n  // This saves us a re-execution of the render function when a variable changed.\n  if (current[0] !== queryRef.key) {\n    current[0] = queryRef.key;\n    current[1] = queryRef.promise;\n  }\n  let promise = current[1];\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n  }\n\n  React.useEffect(() => {\n    const dispose = queryRef.retain();\n\n    const removeListener = queryRef.listen((promise) => {\n      setPromise([queryRef.key, promise]);\n    });\n\n    return () => {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n\n  const skipResult = React.useMemo(() => {\n    const error = toApolloError(queryRef.result);\n\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error,\n    };\n  }, [queryRef.result]);\n\n  const result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n\n  const fetchMore = React.useCallback<\n    FetchMoreFunction<unknown, OperationVariables>\n  >(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n      setPromise([queryRef.key, queryRef.promise]);\n\n      return promise;\n    },\n    [queryRef]\n  ) as FetchMoreFunction<TData | undefined, TVariables>;\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n      setPromise([queryRef.key, queryRef.promise]);\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const subscribeToMore = queryRef.observable.subscribeToMore;\n\n  return React.useMemo<\n    UseSuspenseQueryResult<TData | undefined, TVariables>\n  >(() => {\n    return {\n      client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore,\n      refetch,\n      subscribeToMore,\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\n\nfunction validateOptions(options: WatchQueryOptions) {\n  const { query, fetchPolicy, returnPartialData } = options;\n\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\n\nfunction validateFetchPolicy(\n  fetchPolicy: WatchQueryFetchPolicy = \"cache-first\"\n) {\n  const supportedFetchPolicies: WatchQueryFetchPolicy[] = [\n    \"cache-first\",\n    \"network-only\",\n    \"no-cache\",\n    \"cache-and-network\",\n  ];\n\n  invariant(\n    supportedFetchPolicies.includes(fetchPolicy),\n    `The fetch policy \\`%s\\` is not supported with suspense.`,\n    fetchPolicy\n  );\n}\n\nfunction validatePartialDataReturn(\n  fetchPolicy: WatchQueryFetchPolicy | undefined,\n  returnPartialData: boolean | undefined\n) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    invariant.warn(\n      \"Using `returnPartialData` with a `no-cache` fetch policy has no effect. To read partial data from the cache, consider using an alternate fetch policy.\"\n    );\n  }\n}\n\nexport function toApolloError(result: ApolloQueryResult<any>) {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\ninterface UseWatchQueryOptionsHookOptions<\n  TData,\n  TVariables extends OperationVariables,\n> {\n  client: ApolloClient<unknown>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  options: SkipToken | SuspenseQueryHookOptions<TData, TVariables>;\n}\n\nexport function useWatchQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>({\n  client,\n  query,\n  options,\n}: UseWatchQueryOptionsHookOptions<TData, TVariables>): WatchQueryOptions<\n  TVariables,\n  TData\n> {\n  return useDeepMemo<WatchQueryOptions<TVariables, TData>>(() => {\n    if (options === skipToken) {\n      return { query, fetchPolicy: \"standby\" };\n    }\n\n    const fetchPolicy =\n      options.fetchPolicy ||\n      client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\";\n\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0,\n    };\n\n    if (__DEV__) {\n      validateOptions(watchQueryOptions);\n    }\n\n    // Assign the updated fetch policy after our validation since `standby` is\n    // not a supported fetch policy on its own without the use of `skip`.\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n\n    return watchQueryOptions;\n  }, [client, options, query]);\n}\n", "import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { BackgroundQueryHookOptions, NoInfer } from \"../types/types.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type {\n  FetchMoreFunction,\n  RefetchFunction,\n  SubscribeToMoreFunction,\n} from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport type { SkipToken } from \"./constants.js\";\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#fetchMore:member(1)} */\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#refetch:member(1)} */\n  refetch: RefetchFunction<TData, TVariables>;\n};\n\ntype BackgroundQueryHookOptionsNoInfer<\n  TData,\n  TVariables extends OperationVariables,\n> = BackgroundQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>;\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<BackgroundQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & TOptions\n): [\n  (\n    | QueryRef<\n        TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n          TOptions[\"returnPartialData\"] extends true ?\n            DeepPartial<TData> | undefined\n          : TData | undefined\n        : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n        : TData,\n        TVariables\n      >\n    | (TOptions[\"skip\"] extends boolean ? undefined : never)\n  ),\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryRef<DeepPartial<TData> | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryRef<TData | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): [\n  QueryRef<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n  }\n): [\n  QueryRef<DeepPartial<TData>, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n  }\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [QueryRef<TData, TVariables>, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SkipToken\n): [undefined, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n        returnPartialData: true;\n      })\n): [\n  QueryRef<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SkipToken | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables> = Object.create(null)\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  return wrapHook(\n    \"useBackgroundQuery\",\n    _useBackgroundQuery,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(query, options);\n}\n\nfunction _useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  const didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current ||= fetchPolicy !== \"standby\";\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions as WatchQueryOptions<any, any>)\n  );\n\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(\n    wrapQueryRef(queryRef)\n  );\n  if (unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n  }\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    const promise = queryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(wrappedQueryRef, promise);\n  }\n\n  // This prevents issues where rerendering useBackgroundQuery after the\n  // queryRef has been disposed would cause the hook to return a new queryRef\n  // instance since disposal also removes it from the suspense cache. We add\n  // the queryRef back in the suspense cache so that the next render will reuse\n  // this queryRef rather than initializing a new instance.\n  React.useEffect(() => {\n    // Since the queryRef is disposed async via `setTimeout`, we have to wait a\n    // tick before checking it and adding back to the suspense cache.\n    const id = setTimeout(() => {\n      if (queryRef.disposed) {\n        suspenseCache.add(cacheKey, queryRef);\n      }\n    });\n\n    return () => clearTimeout(id);\n    // Omitting the deps is intentional. This avoids stale closures and the\n    // conditional ensures we aren't running the logic on each render.\n  });\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options as FetchMoreQueryOptions<any>);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  React.useEffect(() => queryRef.softRetain(), [queryRef]);\n\n  return [\n    didFetchResult.current ? wrappedQueryRef : void 0,\n    {\n      fetchMore,\n      refetch,\n      subscribeToMore: queryRef.observable.subscribeToMore,\n    },\n  ];\n}\n", "import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  assertWrappedQueryRef,\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { LoadableQueryHookOptions } from \"../types/types.js\";\nimport { __use, useRenderGuard } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type {\n  FetchMoreFunction,\n  RefetchFunction,\n  SubscribeToMoreFunction,\n} from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport type LoadQueryFunction<TVariables extends OperationVariables> = (\n  // Use variadic args to handle cases where TVariables is type `never`, in\n  // which case we don't want to allow a variables argument. In other\n  // words, we don't want to allow variables to be passed as an argument to this\n  // function if the query does not expect variables in the document.\n  ...args: [TVariables] extends [never] ? []\n  : {} extends OnlyRequiredProperties<TVariables> ? [variables?: TVariables]\n  : [variables: TVariables]\n) => void;\n\ntype ResetFunction = () => void;\n\nexport type UseLoadableQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = [\n  loadQuery: LoadQueryFunction<TVariables>,\n  queryRef: QueryRef<TData, TVariables> | null,\n  handlers: {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#fetchMore:member} */\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#refetch:member} */\n    refetch: RefetchFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n    subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n    /**\n     * A function that resets the `queryRef` back to `null`.\n     */\n    reset: ResetFunction;\n  },\n];\n\nexport function useLoadableQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends LoadableQueryHookOptions,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions & TOptions\n): UseLoadableQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n  : TData,\n  TVariables\n>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<TData | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n  }\n): UseLoadableQueryResult<DeepPartial<TData>, TVariables>;\n\n/**\n * A hook for imperatively loading a query, such as responding to a user\n * interaction.\n *\n * > Refer to the [Suspense - Fetching in response to user interaction](https://www.apollographql.com/docs/react/data/suspense#fetching-in-response-to-user-interaction) section for a more in-depth overview of `useLoadableQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLoadableQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function App() {\n *   const [loadGreeting, queryRef] = useLoadableQuery(GET_GREETING);\n *\n *   return (\n *     <>\n *       <button onClick={() => loadGreeting({ language: \"english\" })}>\n *         Load greeting\n *       </button>\n *       <Suspense fallback={<div>Loading...</div>}>\n *         {queryRef && <Hello queryRef={queryRef} />}\n *       </Suspense>\n *     </>\n *   );\n * }\n *\n * function Hello({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.greeting.message}</div>;\n * }\n * ```\n *\n * @since 3.9.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns A tuple in the form of `[loadQuery, queryRef, handlers]`\n */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions\n): UseLoadableQueryResult<TData, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions = Object.create(null)\n): UseLoadableQueryResult<TData, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { queryKey = [] } = options;\n\n  const [queryRef, setQueryRef] = React.useState<QueryRef<\n    TData,\n    TVariables\n  > | null>(null);\n\n  assertWrappedQueryRef(queryRef);\n\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  const calledDuringRender = useRenderGuard();\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<TVariables, TData>\n      );\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.refetch(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const loadQuery: LoadQueryFunction<TVariables> = React.useCallback(\n    (...args) => {\n      invariant(\n        !calledDuringRender(),\n        \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n      );\n\n      const [variables] = args;\n\n      const cacheKey: CacheKey = [\n        query,\n        canonicalStringify(variables),\n        ...([] as any[]).concat(queryKey),\n      ];\n\n      const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n        client.watchQuery({\n          ...watchQueryOptions,\n          variables,\n        } as WatchQueryOptions<any, any>)\n      );\n\n      setQueryRef(wrapQueryRef(queryRef));\n    },\n    [\n      query,\n      queryKey,\n      suspenseCache,\n      watchQueryOptions,\n      calledDuringRender,\n      client,\n    ]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => {\n        invariant(\n          internalQueryRef,\n          \"The query has not been loaded. Please load the query.\"\n        );\n\n        return internalQueryRef.observable.subscribeToMore(options);\n      },\n      [internalQueryRef]\n    );\n\n  const reset: ResetFunction = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n\n  return [loadQuery, queryRef, { fetchMore, refetch, reset, subscribeToMore }];\n}\n", "import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport type { OperationVariables } from \"../../core/types.js\";\nimport type {\n  RefetchFunction,\n  FetchMoreFunction,\n  SubscribeToMoreFunction,\n} from \"./useSuspenseQuery.js\";\nimport type { FetchMoreQueryOptions } from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\n\nexport interface UseQueryRefHandlersResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  /** {@inheritDoc @apollo/client!ObservableQuery#refetch:member(1)} */\n  refetch: RefetchFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#fetchMore:member(1)} */\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  const unwrapped = unwrapQueryRef(queryRef);\n\n  return wrapHook(\n    \"useQueryRefHandlers\",\n    _useQueryRefHandlers,\n    unwrapped ?\n      unwrapped[\"observable\"]\n      // in the case of a \"transported\" queryRef object, we need to use the\n      // client that's available to us at the current position in the React tree\n      // that ApolloClient will then have the job to recreate a real queryRef from\n      // the transported object\n      // This is just a context read - it's fine to do this conditionally.\n      // This hook wrapper also shouldn't be optimized by React Compiler.\n      // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n    : useApolloClient()\n  )(queryRef);\n}\n\nfunction _useQueryRefHandlers<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  assertWrappedQueryRef(queryRef);\n  const [previousQueryRef, setPreviousQueryRef] = React.useState(queryRef);\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(queryRef);\n  const internalQueryRef = unwrapQueryRef(queryRef);\n\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = internalQueryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<any, any>\n      );\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  return {\n    refetch,\n    fetchMore,\n    subscribeToMore: internalQueryRef.observable.subscribeToMore,\n  };\n}\n", "import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloError } from \"../../errors/index.js\";\nimport type { NetworkStatus } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport interface UseReadQueryResult<TData = unknown> {\n  /**\n   * An object containing the result of your GraphQL query after it completes.\n   *\n   * This value might be `undefined` if a query results in one or more errors\n   * (depending on the query's `errorPolicy`).\n   */\n  data: TData;\n  /**\n   * If the query produces one or more errors, this object contains either an\n   * array of `graphQLErrors` or a single `networkError`. Otherwise, this value\n   * is `undefined`.\n   *\n   * This property can be ignored when using the default `errorPolicy` or an\n   * `errorPolicy` of `none`. The hook will throw the error instead of setting\n   * this property.\n   */\n  error: ApolloError | undefined;\n  /**\n   * A number indicating the current network state of the query's associated\n   * request. {@link https://github.com/apollographql/apollo-client/blob/d96f4578f89b933c281bb775a39503f6cdb59ee8/src/core/networkStatus.ts#L4 | See possible values}.\n   */\n  networkStatus: NetworkStatus;\n}\n\nexport function useReadQuery<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  const unwrapped = unwrapQueryRef(queryRef);\n\n  return wrapHook(\n    \"useReadQuery\",\n    _useReadQuery,\n    unwrapped ?\n      unwrapped[\"observable\"]\n      // in the case of a \"transported\" queryRef object, we need to use the\n      // client that's available to us at the current position in the React tree\n      // that ApolloClient will then have the job to recreate a real queryRef from\n      // the transported object\n      // This is just a context read - it's fine to do this conditionally.\n      // This hook wrapper also shouldn't be optimized by React Compiler.\n      // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n    : useApolloClient()\n  )(queryRef);\n}\n\nfunction _useReadQuery<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = React.useMemo(\n    () => unwrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  const getPromise = React.useCallback(\n    () => getWrappedPromise(queryRef),\n    [queryRef]\n  );\n\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n\n  React.useEffect(() => internalQueryRef.retain(), [internalQueryRef]);\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          updateWrappedQueryRef(queryRef, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef, queryRef]\n    ),\n    getPromise,\n    getPromise\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n", "import \"../../utilities/globals/index.js\";\n\nexport * from \"./useApolloClient.js\";\nexport * from \"./useLazyQuery.js\";\nexport * from \"./useMutation.js\";\nexport { useQuery } from \"./useQuery.js\";\nexport * from \"./useSubscription.js\";\nexport * from \"./useReactiveVar.js\";\nexport * from \"./useFragment.js\";\nexport type { UseSuspenseQueryResult } from \"./useSuspenseQuery.js\";\nexport { useSuspenseQuery } from \"./useSuspenseQuery.js\";\nexport type { UseBackgroundQueryResult } from \"./useBackgroundQuery.js\";\nexport { useBackgroundQuery } from \"./useBackgroundQuery.js\";\nexport type {\n  LoadQueryFunction,\n  UseLoadableQueryResult,\n} from \"./useLoadableQuery.js\";\nexport { useLoadableQuery } from \"./useLoadableQuery.js\";\nexport type { UseQueryRefHandlersResult } from \"./useQueryRefHandlers.js\";\nexport { useQueryRefHandlers } from \"./useQueryRefHandlers.js\";\nexport type { UseReadQueryResult } from \"./useReadQuery.js\";\nexport { useReadQuery } from \"./useReadQuery.js\";\nexport { skipToken } from \"./constants.js\";\nexport type { SkipToken } from \"./constants.js\";\n", "import type {\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  ErrorPolicy,\n  OperationVariables,\n  RefetchWritePolicy,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { InternalQueryReference, wrapQueryRef } from \"../internal/index.js\";\nimport type { PreloadedQueryRef } from \"../internal/index.js\";\nimport type { NoInfer } from \"../index.js\";\nimport { wrapHook } from \"../hooks/internal/index.js\";\n\ntype VariablesOption<TVariables extends OperationVariables> =\n  [TVariables] extends [never] ?\n    {\n      /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#variables:member} */\n      variables?: Record<string, never>;\n    }\n  : {} extends OnlyRequiredProperties<TVariables> ?\n    {\n      /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#variables:member} */\n      variables?: TVariables;\n    }\n  : {\n      /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#variables:member} */\n      variables: TVariables;\n    };\n\nexport type PreloadQueryFetchPolicy = Extract<\n  WatchQueryFetchPolicy,\n  \"cache-first\" | \"network-only\" | \"no-cache\" | \"cache-and-network\"\n>;\n\nexport type PreloadQueryOptions<\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#canonizeResults:member} */\n  canonizeResults?: boolean;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n  context?: DefaultContext;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n  errorPolicy?: ErrorPolicy;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n  fetchPolicy?: PreloadQueryFetchPolicy;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#returnPartialData:member} */\n  returnPartialData?: boolean;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#refetchWritePolicy:member} */\n  refetchWritePolicy?: RefetchWritePolicy;\n} & VariablesOption<TVariables>;\n\ntype PreloadQueryOptionsArg<\n  TVariables extends OperationVariables,\n  TOptions = unknown,\n> = [TVariables] extends [never] ?\n  [options?: PreloadQueryOptions<never> & TOptions]\n: {} extends OnlyRequiredProperties<TVariables> ?\n  [\n    options?: PreloadQueryOptions<NoInfer<TVariables>> &\n      Omit<TOptions, \"variables\">,\n  ]\n: [\n    options: PreloadQueryOptions<NoInfer<TVariables>> &\n      Omit<TOptions, \"variables\">,\n  ];\n\n/**\n * A function that will begin loading a query when called. It's result can be\n * read by `useReadQuery` which will suspend until the query is loaded.\n * This is useful when you want to start loading a query as early as possible\n * outside of a React component.\n *\n * @example\n * ```js\n * const preloadQuery = createQueryPreloader(client);\n * const queryRef = preloadQuery(query, { variables, ...otherOptions });\n *\n * function App() {\n *   return (\n *     <Suspense fallback={<div>Loading</div>}>\n *       <MyQuery />\n *     </Suspense>\n *   );\n * }\n *\n * function MyQuery() {\n *   const { data } = useReadQuery(queryRef);\n *\n *   // do something with `data`\n * }\n * ```\n */\nexport interface PreloadQueryFunction {\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <\n    TData,\n    TVariables extends OperationVariables,\n    TOptions extends Omit<PreloadQueryOptions, \"variables\">,\n  >(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    ...[options]: PreloadQueryOptionsArg<NoInfer<TVariables>, TOptions>\n  ): PreloadedQueryRef<\n    TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n      TOptions[\"returnPartialData\"] extends true ?\n        DeepPartial<TData> | undefined\n      : TData | undefined\n    : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n    : TData,\n    TVariables\n  >;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      returnPartialData: true;\n      errorPolicy: \"ignore\" | \"all\";\n    }\n  ): PreloadedQueryRef<DeepPartial<TData> | undefined, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      errorPolicy: \"ignore\" | \"all\";\n    }\n  ): PreloadedQueryRef<TData | undefined, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      returnPartialData: true;\n    }\n  ): PreloadedQueryRef<DeepPartial<TData>, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    ...[options]: PreloadQueryOptionsArg<NoInfer<TVariables>>\n  ): PreloadedQueryRef<TData, TVariables>;\n}\n\n/**\n * A higher order function that returns a `preloadQuery` function which\n * can be used to begin loading a query with the given `client`. This is useful\n * when you want to start loading a query as early as possible outside of a\n * React component.\n *\n * > Refer to the [Suspense - Initiating queries outside React](https://www.apollographql.com/docs/react/data/suspense#initiating-queries-outside-react) section for a more in-depth overview.\n *\n * @param client - The `ApolloClient` instance that will be used to load queries\n * from the returned `preloadQuery` function.\n * @returns The `preloadQuery` function.\n *\n * @example\n * ```js\n * const preloadQuery = createQueryPreloader(client);\n * ```\n * @since 3.9.0\n */\nexport function createQueryPreloader(\n  client: ApolloClient<any>\n): PreloadQueryFunction {\n  return wrapHook(\n    \"createQueryPreloader\",\n    _createQueryPreloader,\n    client\n  )(client);\n}\n\nconst _createQueryPreloader: typeof createQueryPreloader = (client) => {\n  return function preloadQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> &\n      VariablesOption<TVariables> = Object.create(null)\n  ): PreloadedQueryRef<TData, TVariables> {\n    const queryRef = new InternalQueryReference(\n      client.watchQuery({\n        ...options,\n        query,\n      } as WatchQueryOptions<any, any>),\n      {\n        autoDisposeTimeoutMs:\n          client.defaultOptions.react?.suspense?.autoDisposeTimeoutMs,\n      }\n    );\n\n    return wrapQueryRef(queryRef) as PreloadedQueryRef<TData, TVariables>;\n  };\n};\n", "export {};\n//# sourceMappingURL=types.js.map", "import \"../utilities/globals/index.js\";\n\nexport type { ApolloContextValue } from \"./context/index.js\";\nexport {\n  ApolloProvider,\n  ApolloConsumer,\n  getApolloContext,\n  resetApolloContext,\n} from \"./context/index.js\";\n\nexport * from \"./hooks/index.js\";\n\nexport type { IDocumentDefinition } from \"./parser/index.js\";\nexport { DocumentType, operationName, parser } from \"./parser/index.js\";\n\nexport type {\n  PreloadQueryOptions,\n  PreloadQueryFetchPolicy,\n  PreloadQueryFunction,\n} from \"./query-preloader/createQueryPreloader.js\";\nexport { createQueryPreloader } from \"./query-preloader/createQueryPreloader.js\";\n\nexport * from \"./types/types.js\";\n", "export * from \"./core/index.js\";\nexport * from \"./react/index.js\";\n", "export var version = \"3.11.1\";\n//# sourceMappingURL=version.js.map", "export function maybe(thunk) {\n    try {\n        return thunk();\n    }\n    catch (_a) { }\n}\n//# sourceMappingURL=maybe.js.map", "import { maybe } from \"./maybe.js\";\nexport default (maybe(function () { return globalThis; }) ||\n    maybe(function () { return window; }) ||\n    maybe(function () { return self; }) ||\n    maybe(function () { return global; }) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\nmaybe(function () {\n    return maybe.constructor(\"return this\")();\n}));\n//# sourceMappingURL=global.js.map", "var prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n//# sourceMappingURL=makeUniqueId.js.map", "import { makeUniqueId } from \"./makeUniqueId.js\";\nexport function stringifyForDisplay(value, space) {\n    if (space === void 0) { space = 0; }\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }, space)\n        .split(JSON.stringify(undefId))\n        .join(\"<undefined>\");\n}\n//# sourceMappingURL=stringifyForDisplay.js.map", "import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return stringifyForDisplay(arg, 2).slice(0, 1000);\n    }\n    catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n//# sourceMappingURL=invariantWrappers.js.map", "import { invariant, newInvariantError, InvariantError, } from \"./invariantWrappers.js\";\nexport { maybe } from \"./maybe.js\";\nexport { default as global } from \"./global.js\";\nexport { invariant, newInvariantError, InvariantError };\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */\n// this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nexport var DEV = globalThis.__DEV__ !== false;\nexport { DEV as __DEV__ };\n//# sourceMappingURL=index.js.map", "import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue =\n                variables && variables[ifArgument.value.name.value];\n            invariant(evaledValue !== void 0, 69, directive.name.value);\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(root) {\n    var names = [];\n    visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n    return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n    return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    visit(root, {\n        Directive: function (node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return BREAK;\n            }\n        },\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n    return document && hasDirectives([\"client\", \"export\"], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nexport function getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            invariant(directiveArguments && directiveArguments.length === 1, 70, directiveName);\n            var ifArgument = directiveArguments[0];\n            invariant(ifArgument.name && ifArgument.name.value === \"if\", 71, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            invariant(ifValue &&\n                (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 72, directiveName);\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=directives.js.map", "import { maybe } from \"../globals/index.js\";\nvar isReactNative = maybe(function () { return navigator.product; }) == \"ReactNative\";\nexport var canUseWeakMap = typeof WeakMap === \"function\" &&\n    !(isReactNative && !global.HermesInternal);\nexport var canUseWeakSet = typeof WeakSet === \"function\";\nexport var canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nexport var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nexport var canUseDOM = typeof maybe(function () { return window.document.createElement; }) === \"function\";\nvar usingJSDOM = \n// Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\nmaybe(function () { return navigator.userAgent.indexOf(\"jsdom\") >= 0; }) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport var canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;\n//# sourceMappingURL=canUse.js.map", "export function isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nexport function isPlainObject(obj) {\n    return (obj !== null &&\n        typeof obj === \"object\" &&\n        (Object.getPrototypeOf(obj) === Object.prototype ||\n            Object.getPrototypeOf(obj) === null));\n}\n//# sourceMappingURL=objects.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw newInvariantError(\n                73,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\"\n            );\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        invariant(fragments.length === 1, 74, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\": {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 75, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map", "import { WeakCache, StrongCache } from \"@wry/caches\";\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (cache.size <= (cache.max || -1)) {\n        return;\n    }\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function () {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport var AutoCleanedWeakCache = function (max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */\n    var cache = new WeakCache(max, dispose);\n    cache.set = function (key, value) {\n        var ret = WeakCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport var AutoCleanedStrongCache = function (max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */\n    var cache = new StrongCache(max, dispose);\n    cache.set = function (key, value) {\n        var ret = StrongCache.prototype.set.call(this, key, value);\n        schedule(this);\n        return ret;\n    };\n    return cache;\n};\n//# sourceMappingURL=caches.js.map", "import { __assign } from \"tslib\";\nimport { global } from \"../globals/index.js\";\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */\nexport var cacheSizes = __assign({}, global[cacheSizeSymbol]);\n//# sourceMappingURL=sizes.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { cacheSizes } from \"./sizes.js\";\nvar globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloClientMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getInMemoryCacheMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloCacheMemoryInternals\n    : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */,\n        print: 2000 /* defaultCacheSizes[\"print\"] */,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n    };\n    return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            cacheSizes[k] || v,\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false))\n        throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: __assign({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform),\n            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n        },\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]), inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n        }, fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),\n        } });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        __spreadArray(__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ?\n        __spreadArray(__spreadArray([\n            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)\n        : [];\n}\n//# sourceMappingURL=getMemoryInternals.js.map", "import { AutoCleanedStrongCache, cacheSizes, } from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */\nexport var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function () {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new AutoCleanedStrongCache(cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */);\n    },\n});\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"canonicalStringify\", function () { return sortingMap.size; });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder))\n                return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function (key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n}\n//# sourceMappingURL=canonicalStringify.js.map", "import { newInvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\nexport function makeReference(id) {\n    return { __ref: String(id) };\n}\nexport function isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nexport function isDocumentNode(value) {\n    return (isNonNullObject(value) &&\n        value.kind === \"Document\" &&\n        Array.isArray(value.definitions));\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw newInvariantError(84, name.value, value.kind);\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\",\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = canonicalStringify;\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n    if (args &&\n        directives &&\n        directives[\"connection\"] &&\n        directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] &&\n            directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ?\n                directives[\"connection\"][\"filter\"]\n                : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        }\n        else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            }\n            else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function (s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    },\n});\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        }\n        else if (fragments) {\n            fragments.push(selection);\n        }\n        else {\n            fragments = [selection];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nexport function isField(selection) {\n    return selection.kind === \"Field\";\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n}\n//# sourceMappingURL=storeUtils.js.map", "import { invariant, newInvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc) {\n    invariant(doc && doc.kind === \"Document\", 76);\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== \"FragmentDefinition\"; })\n        .map(function (definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw newInvariantError(77, definition.kind);\n        }\n        return definition;\n    });\n    invariant(operations.length <= 1, 78, operations.length);\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    invariant(queryDef && queryDef.operation === \"query\", 79);\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    invariant(doc.kind === \"Document\", 80);\n    invariant(doc.definitions.length <= 1, 81);\n    var fragmentDef = doc.definitions[0];\n    invariant(fragmentDef.kind === \"FragmentDefinition\", 82);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" ||\n                operation === \"mutation\" ||\n                operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw newInvariantError(83);\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n//# sourceMappingURL=getFromAST.js.map", "import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ (function () {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) { options = Object.create(null); }\n        this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function (document) {\n        return [document];\n    };\n    DocumentTransform.identity = function () {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, { cache: false });\n    };\n    DocumentTransform.split = function (predicate, left, right) {\n        if (right === void 0) { right = DocumentTransform.identity(); }\n        return Object.assign(new DocumentTransform(function (document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, \n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }), { left: left, right: right });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */\n    DocumentTransform.prototype.resetCache = function () {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new Trie(canUseWeakMap);\n            this.performWork = wrap(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function (document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        invariant(Array.isArray(cacheKeys), 68);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: cacheSizes[\"documentTransform.cache\"],\n                cache: (WeakCache),\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function (document) {\n        checkDocument(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function (document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function (otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function (document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, \n        // Reasonably assume both transforms handle their own caching\n        { cache: false }), {\n            left: this,\n            right: otherTransform,\n        });\n    };\n    return DocumentTransform;\n}());\nexport { DocumentTransform };\n//# sourceMappingURL=DocumentTransform.js.map", "import { print as origPrint } from \"graphql\";\nimport { AutoCleanedWeakCache, cacheSizes, } from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\nvar printCache;\nexport var print = Object.assign(function (ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = origPrint(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function () {\n        printCache = new AutoCleanedWeakCache(cacheSizes.print || 2000 /* defaultCacheSizes.print */);\n    },\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"print\", function () { return (printCache ? printCache.size : 0); });\n}\n//# sourceMappingURL=print.js.map", "// A version of Array.isArray that works better with readonly arrays.\nexport var isArray = Array.isArray;\nexport function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n//# sourceMappingURL=arrays.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, Kind } from \"graphql\";\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nimport { isArray, isNonEmptyArray } from \"../common/arrays.js\";\nvar TYPENAME_FIELD = {\n    kind: Kind.FIELD,\n    name: {\n        kind: Kind.NAME,\n        value: \"__typename\",\n    },\n};\nfunction isEmpty(op, fragmentMap) {\n    return (!op ||\n        op.selectionSet.selections.every(function (selection) {\n            return selection.kind === Kind.FRAGMENT_SPREAD &&\n                isEmpty(fragmentMap[selection.name.value], fragmentMap);\n        }));\n}\nfunction nullIfDocIsEmpty(doc) {\n    return (isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))) ?\n        null\n        : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function (directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            }\n            else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function (directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function (testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) { key = defaultKey; }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, (inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set(),\n            }));\n        }\n        return inUse;\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function (ancestors) {\n        for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {\n            if (isArray(ancestor))\n                continue;\n            if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && invariant.error(85);\n        return null;\n    };\n    var operationCount = 0;\n    for (var i = doc.definitions.length - 1; i >= 0; --i) {\n        if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function (nodeDirectives) {\n        return isNonEmptyArray(nodeDirectives) &&\n            nodeDirectives\n                .map(directiveMatcher)\n                .some(function (config) { return config && config.remove; });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function (node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        },\n    };\n    var docWithoutDirectiveSubtrees = visit(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function () {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            },\n        },\n        Variable: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n                // We might like to remove this FragmentSpread by returning null here if\n                // the corresponding FragmentDefinition node is also going to be removed\n                // by the logic below, but we can't control the relative order of those\n                // events, so we have to postpone the removal of dangling FragmentSpread\n                // nodes until after the current visit of the document has finished.\n            },\n        },\n        FragmentDefinition: {\n            enter: function (node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function (node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (\n                // This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 &&\n                    node.selectionSet.selections.every(function (selection) {\n                        return selection.kind === Kind.FIELD &&\n                            selection.name.value === \"__typename\";\n                    })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n        Directive: {\n            leave: function (node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            },\n        },\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function (inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function (childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function (def) {\n        if (def.kind === Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        }\n        else if (def.kind === Kind.FRAGMENT_DEFINITION &&\n            // If there are no operations in the document, then all fragment\n            // definitions count as usages of their own fragment names. This heuristic\n            // prevents accidentally removing all fragment definitions from the\n            // document just because it contains no operations that use the fragments.\n            operationCount === 0 &&\n            !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function (fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function (fragmentName) {\n        return !!(\n        // A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) ||\n            getInUseByFragmentName(fragmentName).removed));\n    };\n    var enterVisitor = {\n        enter: function (node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        },\n    };\n    return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function (node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(\n                    // If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            }) });\n                    }\n                }\n            },\n        },\n    }));\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n    return visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent &&\n                    parent.kind ===\n                        Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === \"__typename\" ||\n                            selection.name.value.lastIndexOf(\"__\", 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === \"export\"; })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });\n            },\n        },\n    });\n}, {\n    added: function (field) {\n        return field === TYPENAME_FIELD;\n    },\n});\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === \"key\"; })) {\n                globalThis.__DEV__ !== false && invariant.warn(86);\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === Kind.VARIABLE &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { \n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ?\n                        node.variableDefinitions.filter(function (varDef) {\n                            return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                        })\n                        : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: \"query\" });\n            },\n        },\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === \"client\"; },\n            remove: true,\n        },\n    ], document);\n    return modifiedDoc;\n}\n//# sourceMappingURL=transform.js.map", "import { getOperationDefinition } from \"./getFromAST.js\";\nfunction isOperation(document, operation) {\n    var _a;\n    return ((_a = getOperationDefinition(document)) === null || _a === void 0 ? void 0 : _a.operation) === operation;\n}\nexport function isMutationOperation(document) {\n    return isOperation(document, \"mutation\");\n}\nexport function isQueryOperation(document) {\n    return isOperation(document, \"query\");\n}\nexport function isSubscriptionOperation(document) {\n    return isOperation(document, \"subscription\");\n}\n//# sourceMappingURL=operations.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArray([target,\n                            source,\n                            sourceKey], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                }\n                else {\n                    value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n//# sourceMappingURL=mergeDeep.js.map", "import { __assign, __rest as __rest_1, __spreadArray } from \"tslib\";\nimport { __rest } from \"tslib\";\nimport { mergeDeep } from \"../common/mergeDeep.js\";\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nexport function concatPagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        merge: function (existing, incoming) {\n            return existing ? __spreadArray(__spreadArray([], existing, true), incoming, true) : incoming;\n        },\n    };\n}\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nexport function offsetLimitPagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        merge: function (existing, incoming, _a) {\n            var args = _a.args;\n            var merged = existing ? existing.slice(0) : [];\n            if (incoming) {\n                if (args) {\n                    // Assume an offset of 0 if args.offset omitted.\n                    var _b = args.offset, offset = _b === void 0 ? 0 : _b;\n                    for (var i = 0; i < incoming.length; ++i) {\n                        merged[offset + i] = incoming[i];\n                    }\n                }\n                else {\n                    // It's unusual (probably a mistake) for a paginated field not\n                    // to receive any arguments, so you might prefer to throw an\n                    // exception here, instead of recovering by appending incoming\n                    // onto the existing array.\n                    merged.push.apply(merged, incoming);\n                }\n            }\n            return merged;\n        },\n    };\n}\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nexport function relayStylePagination(keyArgs) {\n    if (keyArgs === void 0) { keyArgs = false; }\n    return {\n        keyArgs: keyArgs,\n        read: function (existing, _a) {\n            var canRead = _a.canRead, readField = _a.readField;\n            if (!existing)\n                return existing;\n            var edges = [];\n            var firstEdgeCursor = \"\";\n            var lastEdgeCursor = \"\";\n            existing.edges.forEach(function (edge) {\n                // Edges themselves could be Reference objects, so it's important\n                // to use readField to access the edge.edge.node property.\n                if (canRead(readField(\"node\", edge))) {\n                    edges.push(edge);\n                    if (edge.cursor) {\n                        firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n                        lastEdgeCursor = edge.cursor || lastEdgeCursor;\n                    }\n                }\n            });\n            if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {\n                firstEdgeCursor = \"\";\n            }\n            var _b = existing.pageInfo || {}, startCursor = _b.startCursor, endCursor = _b.endCursor;\n            return __assign(__assign({}, getExtras(existing)), { edges: edges, pageInfo: __assign(__assign({}, existing.pageInfo), { \n                    // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n                    // to firstEdgeCursor and/or lastEdgeCursor.\n                    startCursor: startCursor || firstEdgeCursor, endCursor: endCursor || lastEdgeCursor }) });\n        },\n        merge: function (existing, incoming, _a) {\n            var args = _a.args, isReference = _a.isReference, readField = _a.readField;\n            if (!existing) {\n                existing = makeEmptyData();\n            }\n            if (!incoming) {\n                return existing;\n            }\n            var incomingEdges = incoming.edges ?\n                incoming.edges.map(function (edge) {\n                    if (isReference((edge = __assign({}, edge)))) {\n                        // In case edge is a Reference, we read out its cursor field and\n                        // store it as an extra property of the Reference object.\n                        edge.cursor = readField(\"cursor\", edge);\n                    }\n                    return edge;\n                })\n                : [];\n            if (incoming.pageInfo) {\n                var pageInfo_1 = incoming.pageInfo;\n                var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;\n                var firstEdge = incomingEdges[0];\n                var lastEdge = incomingEdges[incomingEdges.length - 1];\n                // In case we did not request the cursor field for edges in this\n                // query, we can still infer cursors from pageInfo.\n                if (firstEdge && startCursor) {\n                    firstEdge.cursor = startCursor;\n                }\n                if (lastEdge && endCursor) {\n                    lastEdge.cursor = endCursor;\n                }\n                // Cursors can also come from edges, so we default\n                // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n                var firstCursor = firstEdge && firstEdge.cursor;\n                if (firstCursor && !startCursor) {\n                    incoming = mergeDeep(incoming, {\n                        pageInfo: {\n                            startCursor: firstCursor,\n                        },\n                    });\n                }\n                var lastCursor = lastEdge && lastEdge.cursor;\n                if (lastCursor && !endCursor) {\n                    incoming = mergeDeep(incoming, {\n                        pageInfo: {\n                            endCursor: lastCursor,\n                        },\n                    });\n                }\n            }\n            var prefix = existing.edges;\n            var suffix = [];\n            if (args && args.after) {\n                // This comparison does not need to use readField(\"cursor\", edge),\n                // because we stored the cursor field of any Reference edges as an\n                // extra property of the Reference object.\n                var index = prefix.findIndex(function (edge) { return edge.cursor === args.after; });\n                if (index >= 0) {\n                    prefix = prefix.slice(0, index + 1);\n                    // suffix = []; // already true\n                }\n            }\n            else if (args && args.before) {\n                var index = prefix.findIndex(function (edge) { return edge.cursor === args.before; });\n                suffix = index < 0 ? prefix : prefix.slice(index);\n                prefix = [];\n            }\n            else if (incoming.edges) {\n                // If we have neither args.after nor args.before, the incoming\n                // edges cannot be spliced into the existing edges, so they must\n                // replace the existing edges. See #6592 for a motivating example.\n                prefix = [];\n            }\n            var edges = __spreadArray(__spreadArray(__spreadArray([], prefix, true), incomingEdges, true), suffix, true);\n            var pageInfo = __assign(__assign({}, incoming.pageInfo), existing.pageInfo);\n            if (incoming.pageInfo) {\n                var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = __rest_1(_b, [\"hasPreviousPage\", \"hasNextPage\", \"startCursor\", \"endCursor\"]);\n                // If incoming.pageInfo had any extra non-standard properties,\n                // assume they should take precedence over any existing properties\n                // of the same name, regardless of where this page falls with\n                // respect to the existing data.\n                Object.assign(pageInfo, extras);\n                // Keep existing.pageInfo.has{Previous,Next}Page unless the\n                // placement of the incoming edges means incoming.hasPreviousPage\n                // or incoming.hasNextPage should become the new values for those\n                // properties in existing.pageInfo. Note that these updates are\n                // only permitted when the beginning or end of the incoming page\n                // coincides with the beginning or end of the existing data, as\n                // determined using prefix.length and suffix.length.\n                if (!prefix.length) {\n                    if (void 0 !== hasPreviousPage)\n                        pageInfo.hasPreviousPage = hasPreviousPage;\n                    if (void 0 !== startCursor)\n                        pageInfo.startCursor = startCursor;\n                }\n                if (!suffix.length) {\n                    if (void 0 !== hasNextPage)\n                        pageInfo.hasNextPage = hasNextPage;\n                    if (void 0 !== endCursor)\n                        pageInfo.endCursor = endCursor;\n                }\n            }\n            return __assign(__assign(__assign({}, getExtras(existing)), getExtras(incoming)), { edges: edges, pageInfo: pageInfo });\n        },\n    };\n}\n// Returns any unrecognized properties of the given object.\nvar getExtras = function (obj) { return __rest(obj, notExtras); };\nvar notExtras = [\"edges\", \"pageInfo\"];\nfunction makeEmptyData() {\n    return {\n        edges: [],\n        pageInfo: {\n            hasPreviousPage: false,\n            hasNextPage: true,\n            startCursor: \"\",\n            endCursor: \"\",\n        },\n    };\n}\n//# sourceMappingURL=pagination.js.map", "export function createFulfilledPromise(value) {\n    var promise = Promise.resolve(value);\n    promise.status = \"fulfilled\";\n    promise.value = value;\n    return promise;\n}\nexport function createRejectedPromise(reason) {\n    var promise = Promise.reject(reason);\n    // prevent potential edge cases leaking unhandled error rejections\n    promise.catch(function () { });\n    promise.status = \"rejected\";\n    promise.reason = reason;\n    return promise;\n}\nexport function isStatefulPromise(promise) {\n    return \"status\" in promise;\n}\nexport function wrapPromiseWithState(promise) {\n    if (isStatefulPromise(promise)) {\n        return promise;\n    }\n    var pendingPromise = promise;\n    pendingPromise.status = \"pending\";\n    pendingPromise.then(function (value) {\n        if (pendingPromise.status === \"pending\") {\n            var fulfilledPromise = pendingPromise;\n            fulfilledPromise.status = \"fulfilled\";\n            fulfilledPromise.value = value;\n        }\n    }, function (reason) {\n        if (pendingPromise.status === \"pending\") {\n            var rejectedPromise = pendingPromise;\n            rejectedPromise.status = \"rejected\";\n            rejectedPromise.reason = reason;\n        }\n    });\n    return promise;\n}\n//# sourceMappingURL=decoration.js.map", "var toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            seen = seen || new Map();\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            seen = seen || new Map();\n            if (seen.has(val))\n                return seen.get(val);\n            // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n            // possible in all JS environments, so we will assume they exist/work.\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n//# sourceMappingURL=cloneDeep.js.map", "import { isNonNullObject } from \"./objects.js\";\nfunction deepFreeze(value) {\n    var workSet = new Set([value]);\n    workSet.forEach(function (obj) {\n        if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function (name) {\n                if (isNonNullObject(obj[name]))\n                    workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        }\n        catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError)\n                return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nexport function maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n}\n//# sourceMappingURL=maybeDeepFreeze.js.map", "export function iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\n//# sourceMappingURL=iteration.js.map", "import { Observable } from \"./Observable.js\";\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap(observable, mapFn, catchFn) {\n    return new Observable(function (observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function (callback) {\n                return new Promise(function (resolve) { return resolve(callback()); });\n            },\n        };\n        function makeCallback(examiner, key) {\n            return function (arg) {\n                if (examiner) {\n                    var both = function () {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ?\n                            /* will be swallowed */ 0\n                            : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function (result) { return observer.next(result); }, function (error) { return observer.error(error); });\n                }\n                else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function () {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function () { return observer.complete(); });\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n//# sourceMappingURL=asyncMap.js.map", "import { Observable } from \"./Observable.js\";\nimport { canUseSymbol } from \"../common/canUse.js\";\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, { value: Observable });\n    }\n    if (canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n}\n//# sourceMappingURL=subclassing.js.map", "import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ (function (_super) {\n    __extends(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function (observer) {\n            _this.addObserver(observer);\n            return function () { return _this.removeObserver(observer); };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function (result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\"next\", result];\n                    _this.notify(\"next\", result);\n                    iterateObserversSafely(_this.observers, \"next\", result);\n                }\n            },\n            error: function (error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub)\n                        setTimeout(function () { return sub.unsubscribe(); });\n                    _this.sub = null;\n                    _this.latest = [\"error\", error];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    iterateObserversSafely(_this.observers, \"error\", error);\n                }\n            },\n            complete: function () {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub)\n                            setTimeout(function () { return sub.unsubscribe(); });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        }\n                        else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        iterateObserversSafely(_this.observers, \"complete\");\n                    }\n                    else if (isPromiseLike(value)) {\n                        value.then(function (obs) { return (_this.sub = obs.subscribe(_this.handlers)); }, _this.handlers.error);\n                    }\n                    else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            },\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function (reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function (_) { });\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [new Observable(sources)];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);\n        }\n        else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function (sources) {\n        if (this.sub !== void 0)\n            return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function (observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function (observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function (observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function (method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function (listener) { return listener(method, arg); });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function (callback) {\n        var called = false;\n        this.nextResultListeners.add(function (method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(Observable));\nexport { Concast };\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n//# sourceMappingURL=Concast.js.map", "import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n//# sourceMappingURL=incrementalResult.js.map", "import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n}\n//# sourceMappingURL=errorHandling.js.map", "/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact() {\n    var objects = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function (obj) {\n        if (!obj)\n            return;\n        Object.keys(obj).forEach(function (key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=compact.js.map", "var prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n//# sourceMappingURL=makeUniqueId.js.map", "import { makeUniqueId } from \"./makeUniqueId.js\";\nexport function stringifyForDisplay(value, space) {\n    if (space === void 0) { space = 0; }\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }, space)\n        .split(JSON.stringify(undefId))\n        .join(\"<undefined>\");\n}\n//# sourceMappingURL=stringifyForDisplay.js.map", "import { __assign } from \"tslib\";\nimport { compact } from \"./compact.js\";\nexport function mergeOptions(defaults, options) {\n    return compact(defaults, options, options.variables && {\n        variables: compact(__assign(__assign({}, (defaults && defaults.variables)), options.variables)),\n    });\n}\n//# sourceMappingURL=mergeOptions.js.map", "import { isPlainObject } from \"./objects.js\";\nexport function omitDeep(value, key) {\n    return __omitDeep(value, key);\n}\nfunction __omitDeep(value, key, known) {\n    if (known === void 0) { known = new Map(); }\n    if (known.has(value)) {\n        return known.get(value);\n    }\n    var modified = false;\n    if (Array.isArray(value)) {\n        var array_1 = [];\n        known.set(value, array_1);\n        value.forEach(function (value, index) {\n            var result = __omitDeep(value, key, known);\n            modified || (modified = result !== value);\n            array_1[index] = result;\n        });\n        if (modified) {\n            return array_1;\n        }\n    }\n    else if (isPlainObject(value)) {\n        var obj_1 = Object.create(Object.getPrototypeOf(value));\n        known.set(value, obj_1);\n        Object.keys(value).forEach(function (k) {\n            if (k === key) {\n                modified = true;\n                return;\n            }\n            var result = __omitDeep(value[k], key, known);\n            modified || (modified = result !== value[k]);\n            obj_1[k] = result;\n        });\n        if (modified) {\n            return obj_1;\n        }\n    }\n    return value;\n}\n//# sourceMappingURL=omitDeep.js.map", "import { omitDeep } from \"./omitDeep.js\";\nexport function stripTypename(value) {\n    return omitDeep(value, \"__typename\");\n}\n//# sourceMappingURL=stripTypename.js.map", "import { Observable } from \"../../utilities/index.js\";\nexport function fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\n//# sourceMappingURL=fromError.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nexport function toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    globalThis.__DEV__ !== false && invariant.warn(42);\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\n//# sourceMappingURL=toPromise.js.map", "import { Observable } from \"../../utilities/index.js\";\nexport function fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\n//# sourceMappingURL=fromPromise.js.map", "export var throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\n//# sourceMappingURL=throwServerError.js.map", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport function validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\",\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw newInvariantError(43, key);\n        }\n    }\n    return operation;\n}\n//# sourceMappingURL=validateOperation.js.map", "import { __assign } from \"tslib\";\nexport function createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === \"function\") {\n            context = __assign(__assign({}, context), next(context));\n        }\n        else {\n            context = __assign(__assign({}, context), next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext,\n    });\n    return operation;\n}\n//# sourceMappingURL=createOperation.js.map", "import { getOperationName } from \"../../utilities/index.js\";\nexport function transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== \"string\" ?\n                getOperationName(transformedOperation.query) || undefined\n                : \"\";\n    }\n    return transformedOperation;\n}\n//# sourceMappingURL=transformOperation.js.map", "import { __assign } from \"tslib\";\nimport { visit } from \"graphql\";\nexport function filterOperationVariables(variables, query) {\n    var result = __assign({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    visit(query, {\n        Variable: function (node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent &&\n                parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        },\n    });\n    unusedNames.forEach(function (name) {\n        delete result[name];\n    });\n    return result;\n}\n//# sourceMappingURL=filterOperationVariables.js.map", "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation, } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function (operation) {\n                return test(operation) ?\n                    leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return test(operation) ?\n                    leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n        return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n        return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw newInvariantError(36);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var empty = ApolloLink.empty;\n//# sourceMappingURL=empty.js.map", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var from = ApolloLink.from;\n//# sourceMappingURL=from.js.map", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var split = ApolloLink.split;\n//# sourceMappingURL=split.js.map", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var concat = ApolloLink.concat;\n//# sourceMappingURL=concat.js.map", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var execute = ApolloLink.execute;\n//# sourceMappingURL=execute.js.map", "import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nexport function isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function (err) {\n    var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError)\n        errors.push(err.networkError);\n    return (errors\n        // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n        .map(function (err) {\n        return (isNonNullObject(err) && err.message) || \"Error message not found.\";\n    })\n        .join(\"\\n\"));\n};\nvar ApolloError = /** @class */ (function (_super) {\n    __extends(ApolloError, _super);\n    // Constructs an instance of ApolloError given serialized GraphQL errors,\n    // client errors, protocol errors or network errors.\n    // Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.cause =\n            __spreadArray(__spreadArray(__spreadArray([\n                networkError\n            ], (graphQLErrors || []), true), (protocolErrors || []), true), (clientErrors || []), true).find(function (e) { return !!e; }) || null;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n//# sourceMappingURL=index.js.map", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */\nexport default function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n            next: function () {\n                return iterator.next();\n            }\n        },\n        _a[Symbol.asyncIterator] = function () {\n            return this;\n        },\n        _a;\n}\n//# sourceMappingURL=async.js.map", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error)\n            return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({ value: chunk, done: false });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[0]({ value: undefined, done: true });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function () {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function (resolve, reject) {\n            if (error)\n                return reject(error);\n            if (data.length)\n                return resolve({ value: data.shift(), done: false });\n            if (done)\n                return resolve({ value: undefined, done: true });\n            waiting.push([resolve, reject]);\n        });\n    }\n    var iterator = {\n        next: function () {\n            return getNext();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=nodeStream.js.map", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function () {\n            if (resolved)\n                return Promise.resolve({\n                    value: undefined,\n                    done: true,\n                });\n            resolved = true;\n            return new Promise(function (resolve, reject) {\n                promise\n                    .then(function (value) {\n                    resolve({ value: value, done: false });\n                })\n                    .catch(reject);\n            });\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=promise.js.map", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function readerIterator(reader) {\n    var iterator = {\n        next: function () {\n            return reader.read();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n//# sourceMappingURL=reader.js.map", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(canUseAsyncIteratorSymbol &&\n        value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nexport function responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n//# sourceMappingURL=responseIterator.js.map", "export function isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nexport function isPlainObject(obj) {\n    return (obj !== null &&\n        typeof obj === \"object\" &&\n        (Object.getPrototypeOf(obj) === Object.prototype ||\n            Object.getPrototypeOf(obj) === null));\n}\n//# sourceMappingURL=objects.js.map", "import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n//# sourceMappingURL=incrementalResult.js.map", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, nextValue) {\n    return __awaiter(this, void 0, void 0, function () {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _b, _c;\n        var _d;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ?\n                        contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim()\n                        : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = responseIterator(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [3 /*break*/, 3];\n                    return [4 /*yield*/, iterator.next()];\n                case 2:\n                    _a = _e.sent(), value = _a.value, done = _a.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while (bi > -1) {\n                        message = void 0;\n                        _b = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length),\n                        ], message = _b[0], buffer = _b[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 &&\n                            contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 ||\n                                \"data\" in result ||\n                                \"incremental\" in result ||\n                                \"errors\" in result ||\n                                \"payload\" in result) {\n                                if (isApolloPayloadResult(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        if (Object.keys(result).length === 1 && result.payload === null) {\n                                            return [2 /*return*/];\n                                        }\n                                        next = __assign({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = __assign(__assign({}, next), { extensions: __assign(__assign({}, (\"extensions\" in next ? next.extensions : null)), (_c = {}, _c[PROTOCOL_ERRORS_SYMBOL] = result.errors, _c)) });\n                                    }\n                                    nextValue(next);\n                                }\n                                else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            }\n                            else if (\n                            // If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 &&\n                                \"hasNext\" in result &&\n                                !result.hasNext) {\n                                return [2 /*return*/];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function (line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function () {\n            try {\n                return JSON.parse(bodyText);\n            }\n            catch (err) {\n                return bodyText;\n            }\n        };\n        throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    }\n    catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nexport function handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nexport function parseAndCheckHttpResponse(operations) {\n    return function (response) {\n        return response\n            .text()\n            .then(function (bodyText) { return parseJsonBody(response, bodyText); })\n            .then(function (result) {\n            if (!Array.isArray(result) &&\n                !hasOwnProperty.call(result, \"data\") &&\n                !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ?\n                    operations.map(function (op) { return op.operationName; })\n                    : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n}\n//# sourceMappingURL=parseAndCheckHttpResponse.js.map", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = newInvariantError(39, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\n//# sourceMappingURL=serializeFetchParameter.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { print } from \"../../utilities/index.js\";\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\",\n};\nvar defaultOptions = {\n    method: \"POST\",\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var defaultPrinter = function (ast, printer) { return printer(ast); };\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = __assign(__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery)\n        body.query = printer(query, print);\n    return {\n        options: options,\n        body: body,\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name],\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n//# sourceMappingURL=selectHttpOptionsAndBody.js.map", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport var checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw newInvariantError(37);\n    }\n};\n//# sourceMappingURL=checkFetcher.js.map", "/**\n * @deprecated\n * This is not used internally any more and will be removed in\n * the next major version of Apollo Client.\n */\nexport var createSignalIfSupported = function () {\n    if (typeof AbortController === \"undefined\")\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\n//# sourceMappingURL=createSignalIfSupported.js.map", "export var selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || \"/graphql\";\n    }\n};\n//# sourceMappingURL=selectURI.js.map", "import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, \"Variables map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, \"Extensions map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return { newURI: newURI };\n}\n//# sourceMappingURL=rewriteURIForGET.js.map", "import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, parseAndCheckHttpResponse, } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig, } from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport { maybe, getMainDefinition, removeClientSetsFromDocument, } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, \n    // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        if (hasDirectives([\"client\"], operation.query)) {\n            var transformedQuery = removeClientSetsFromDocument(operation.query);\n            if (!transformedQuery) {\n                return fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = filterOperationVariables(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = hasDirectives([\"defer\"], operation.query);\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && invariant.warn(38);\n            }\n            if (isSubscription) {\n                acceptHeader +=\n                    \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            }\n            else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = rewriteURIForGET(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, \"Payload\");\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observerNext);\n                }\n                else {\n                    return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n                }\n            })\n                .then(function () {\n                controller = undefined;\n                observer.complete();\n            })\n                .catch(function (err) {\n                controller = undefined;\n                handleError(err, observer);\n            });\n            return function () {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map", "import { __extends } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { createHttpLink } from \"./createHttpLink.js\";\nvar HttpLink = /** @class */ (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, createHttpLink(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n//# sourceMappingURL=HttpLink.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { cacheSizes } from \"./sizes.js\";\nvar globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloClientMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getInMemoryCacheMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloCacheMemoryInternals\n    : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */,\n        print: 2000 /* defaultCacheSizes[\"print\"] */,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n    };\n    return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            cacheSizes[k] || v,\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false))\n        throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: __assign({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform),\n            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n        },\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]), inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n        }, fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),\n        } });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        __spreadArray(__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ?\n        __spreadArray(__spreadArray([\n            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)\n        : [];\n}\n//# sourceMappingURL=getMemoryInternals.js.map", "import { __rest } from \"tslib\";\nimport equal from \"@wry/equality\";\nimport { createFragmentMap, getFragmentDefinitions, getFragmentFromSelection, getMainDefinition, isField, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = __rest(_a, [\"data\"]);\n    var bData = _b.data, bRest = __rest(_b, [\"data\"]);\n    return (equal(aRest, bRest) &&\n        equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n            variables: variables,\n        }));\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function (selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection))\n            return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!shouldInclude(selection, context.variables))\n            return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection))\n            return true;\n        if (isField(selection)) {\n            var resultKey = resultKeyNameFromField(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return equal(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray)\n                return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for (var i = 0; i < length_1; ++i) {\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        }\n        else {\n            var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment))\n                    return true;\n                return equalBySelectionSet(fragment.selectionSet, \n                // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return (!!selection.directives && selection.directives.some(directiveIsNonreactive));\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n}\n//# sourceMappingURL=equalByQuery.js.map", "import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { Observable, cacheSizes, getFragmentQueryDocument, mergeDeepArray, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nvar ApolloCache = /** @class */ (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n            max: cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n                1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n            cache: WeakCache,\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic\n            : options.optimistic === false ? null\n                : void 0;\n        var updateResult;\n        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || \"ROOT_QUERY\", optimistic: optimistic }));\n    };\n    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n    ApolloCache.prototype.watchFragment = function (options) {\n        var _this = this;\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n        var query = this.getFragmentDoc(fragment, fragmentName);\n        var diffOptions = __assign(__assign({}, otherOptions), { returnPartialData: true, id: typeof from === \"string\" ? from : this.identify(from), query: query, optimistic: optimistic });\n        var latestDiff;\n        return new Observable(function (observer) {\n            return _this.watch(__assign(__assign({}, diffOptions), { immediate: true, callback: function (diff) {\n                    if (\n                    // Always ensure we deliver the first result\n                    latestDiff &&\n                        equalByQuery(query, { data: latestDiff === null || latestDiff === void 0 ? void 0 : latestDiff.result }, { data: diff.result })) {\n                        return;\n                    }\n                    var result = {\n                        data: diff.result,\n                        complete: !!diff.complete,\n                    };\n                    if (diff.missing) {\n                        result.missing = mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n                    }\n                    latestDiff = diff;\n                    observer.next(result);\n                } }));\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n//# sourceMappingURL=cache.js.map", "export var Cache;\n(function (Cache) {\n})(Cache || (Cache = {}));\n//# sourceMappingURL=Cache.js.map", "import { __extends } from \"tslib\";\nvar MissingFieldError = /** @class */ (function (_super) {\n    __extends(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for (var i = _this.path.length - 1; i >= 0; --i) {\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        }\n        else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error));\nexport { MissingFieldError };\n//# sourceMappingURL=common.js.map", "import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, isNonNullObject, compact, createFragmentMap, getFragmentDefinitions, isArray, } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function isNullish(value) {\n    return value === null || value === void 0;\n}\nexport { isArray };\nexport function defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject =\n                !isNullish(id) ? { id: id }\n                    : !isNullish(_id) ? { _id: _id }\n                        : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ?\n                id\n                : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false,\n};\nexport function normalizeConfig(config) {\n    return compact(defaultConfig, config);\n}\nexport function shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n    return isReference(objectOrReference) ?\n        store.get(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n    if (isNonNullObject(result)) {\n        return isArray(result) ?\n            result.every(function (item) {\n                return selectionSetMatchesResult(selectionSet, item, variables);\n            })\n            : selectionSet.selections.every(function (field) {\n                if (isField(field) && shouldInclude(field, variables)) {\n                    var key = resultKeyNameFromField(field);\n                    return (hasOwn.call(result, key) &&\n                        (!field.selectionSet ||\n                            selectionSetMatchesResult(field.selectionSet, result[key], variables)));\n                }\n                // If the selection has been skipped with @skip(true) or\n                // @include(false), it should not count against the matching. If\n                // the selection is not a field, it must be a fragment (inline or\n                // named). We will determine if selectionSetMatchesResult for that\n                // fragment when we get to it, so for now we return true.\n                return true;\n            });\n    }\n    return false;\n}\nexport function storeValueIsStoreObject(value) {\n    return isNonNullObject(value) && !isReference(value) && !isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n    return new DeepMerger();\n}\nexport function extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function (name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        },\n    };\n}\n//# sourceMappingURL=helpers.js.map", "import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function (objectOrReference, storeFieldName) {\n            return maybeDeepFreeze(isReference(objectOrReference) ?\n                _this.get(objectOrReference.__ref, storeFieldName)\n                : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef) ?\n                _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return makeReference(objOrIdOrRef);\n            }\n            if (isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if (isReference(older))\n            older = older.__ref;\n        if (isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming)\n            return;\n        invariant(typeof dataId === \"string\", 1);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing ||\n                        existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    // Since we return default root __typename strings\n                    // automatically from store.get, we don't need to dirty the\n                    // ROOT_QUERY.__typename field if merged.__typename is equal\n                    // to the default string (usually \"Query\").\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ?\n                        {\n                            fieldName: fieldNameOrOptions,\n                            from: from || makeReference(dataId),\n                        }\n                        : fieldNameOrOptions, { store: _this });\n                },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\" ? fields : (fields[storeFieldName] || fields[fieldName]);\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : (modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) })));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function (ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && invariant.warn(2, ref);\n                                        return true;\n                                    }\n                                };\n                                if (isReference(newValue)) {\n                                    checkReference(newValue);\n                                }\n                                else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {\n                                        var value = newValue_1[_i];\n                                        if (isReference(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value))\n                                                break;\n                                        }\n                                        else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && invariant.warn(3, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ?\n                this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = __rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = (this.refs[dataId] = Object.create(null));\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                    // In rare cases, a { __ref } Reference object may have other fields.\n                    // This often indicates a mismerging of References with StoreObjects,\n                    // but garbage collection should not be fooled by a stray __ref\n                    // property in a StoreObject (ignoring all the other fields just\n                    // because the StoreObject looks like a Reference). To avoid this\n                    // premature termination of findChildRefIds recursion, we fall through\n                    // to the code below, which will handle any other properties of obj.\n                }\n                if (isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if (isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? dep() : null;\n        this.keyMaker = new Trie(canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), \n            // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new Trie(canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent)\n            return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p, \n        // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore));\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ (function (_super) {\n    __extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function (older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n//# sourceMappingURL=entityStore.js.map", "import { __assign } from \"tslib\";\nimport { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet, isNonNullObject as isObjectOrArray, } from \"../../utilities/index.js\";\nimport { isArray } from \"./helpers.js\";\nfunction shallowCopy(value) {\n    if (isObjectOrArray(value)) {\n        return isArray(value) ?\n            value.slice(0)\n            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ (function () {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new Trie(canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function (value) {\n        return isObjectOrArray(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function (value) {\n        if (isObjectOrArray(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function (value) {\n        var _this = this;\n        if (isObjectOrArray(value)) {\n            var original = this.passes.get(value);\n            if (original)\n                return original;\n            var proto = Object.getPrototypeOf(value);\n            switch (proto) {\n                case Array.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var array = value.map(this.admit, this);\n                    // Arrays are looked up in the Trie using their recursively\n                    // canonicalized elements, and the known version of the array is\n                    // preserved as node.array.\n                    var node = this.pool.lookupArray(array);\n                    if (!node.array) {\n                        this.known.add((node.array = array));\n                        // Since canonical arrays may be shared widely between\n                        // unrelated consumers, it's important to regard them as\n                        // immutable, even if they are not frozen in production.\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(array);\n                        }\n                    }\n                    return node.array;\n                }\n                case null:\n                case Object.prototype: {\n                    if (this.known.has(value))\n                        return value;\n                    var proto_1 = Object.getPrototypeOf(value);\n                    var array_1 = [proto_1];\n                    var keys = this.sortedKeys(value);\n                    array_1.push(keys.json);\n                    var firstValueIndex_1 = array_1.length;\n                    keys.sorted.forEach(function (key) {\n                        array_1.push(_this.admit(value[key]));\n                    });\n                    // Objects are looked up in the Trie by their prototype (which\n                    // is *not* recursively canonicalized), followed by a JSON\n                    // representation of their (sorted) keys, followed by the\n                    // sequence of recursively canonicalized values corresponding to\n                    // those keys. To keep the final results unambiguous with other\n                    // sequences (such as arrays that just happen to contain [proto,\n                    // keys.json, value1, value2, ...]), the known version of the\n                    // object is stored as node.object.\n                    var node = this.pool.lookupArray(array_1);\n                    if (!node.object) {\n                        var obj_1 = (node.object = Object.create(proto_1));\n                        this.known.add(obj_1);\n                        keys.sorted.forEach(function (key, i) {\n                            obj_1[key] = array_1[firstValueIndex_1 + i];\n                        });\n                        // Since canonical objects may be shared widely between\n                        // unrelated consumers, it's important to regard them as\n                        // immutable, even if they are not frozen in production.\n                        if (globalThis.__DEV__ !== false) {\n                            Object.freeze(obj_1);\n                        }\n                    }\n                    return node.object;\n                }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function (obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, (node.keys = { sorted: keys, json: json }));\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}());\nexport { ObjectCanon };\n//# sourceMappingURL=object-canon.js.map", "import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact, canonicalStringify, cacheSizes, } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching, } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults, } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { ObjectCanon } from \"./object-canon.js\";\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults,\n    ];\n}\nvar StoreReader = /** @class */ (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n        this.config = compact(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: shouldCanonizeResults(config),\n        });\n        this.canon = config.canon || new ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = wrap(function (options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return __assign(__assign({}, other), { \n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result) });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n                50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            },\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n                10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            },\n        });\n    }\n    StoreReader.prototype.resetCanon = function () {\n        this.canon = new ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var rootRef = makeReference(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: __assign({ store: store, query: query, policies: policies, variables: variables, varString: canonicalStringify(variables), canonizeResults: canonizeResults }, extractFragmentContext(query, this.config.fragments)),\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables),\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n        if (supportsResultCaching(context.store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, \n            // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\"),\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new DeepMerger();\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({ __typename: typename });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {},\n                    _a[resultName] = result.missing,\n                    _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {},\n                            _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ?\n                                objectOrReference.__ref + \" object\"\n                                : \"object \" + JSON.stringify(objectOrReference, null, 2)),\n                            _a));\n                    }\n                }\n                else if (isArray(fieldValue)) {\n                    if (fieldValue.length > 0) {\n                        fieldValue = handleMissing(_this.executeSubSelectedArray({\n                            field: selection,\n                            array: fieldValue,\n                            enclosingRef: enclosingRef,\n                            context: context,\n                        }), resultName);\n                    }\n                }\n                else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n                        context: context,\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                    throw newInvariantError(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = mergeDeepArray(objectsToMerge);\n        var finalResult = { result: result, missing: missing };\n        var frozen = context.canonizeResults ?\n            this.canon.admit(finalResult)\n            // Since this.canon is normally responsible for freezing results (only in\n            // development), freeze them manually if canonization is disabled.\n            : maybeDeepFreeze(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function (item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if (isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context,\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: isReference(item) ? item : enclosingRef,\n                    context: context,\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing,\n        };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function (_, value) {\n            if (typeof value === \"string\")\n                throw value;\n            return value;\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (isNonNullObject(value)) {\n                invariant(\n                    !isReference(value),\n                    10,\n                    getTypenameFromStoreObject(store, value),\n                    field.name.value\n                );\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map", "import { dep, Slot } from \"optimism\";\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport var cacheSlot = new Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, (info = {\n            vars: new Set(),\n            dep: dep(),\n        }));\n    }\n    return info;\n}\nexport function forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });\n}\nexport function makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function (newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function (cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function (listener) { return listener(value); });\n            }\n        }\n        else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function (listener) {\n        listeners.add(listener);\n        return function () {\n            listeners.delete(listener);\n        };\n    };\n    var attach = (rv.attachCache = function (cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    });\n    rv.forgetCache = function (cache) { return caches.delete(cache); };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n}\n//# sourceMappingURL=reactiveVars.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return (specifierInfoCache[cacheKey] ||\n        (specifierInfoCache[cacheKey] = Object.create(null)));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n            var extract = function (from, key) {\n                return context.readField(key, from);\n            };\n            var keyObject = (context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n                var extracted = extractKeyPath(context.storeObject, schemaKeyPath, \n                // Using context.readField to extract paths from context.storeObject\n                // allows the extraction to see through Reference objects and respect\n                // custom read functions.\n                extract);\n                if (extracted === void 0 &&\n                    object !== context.storeObject &&\n                    hasOwn.call(object, schemaKeyPath[0])) {\n                    // If context.storeObject fails to provide a value for the requested\n                    // path, fall back to the raw result object, if it has a top-level key\n                    // matching the first key in the path (schemaKeyPath[0]). This allows\n                    // key fields included in the written data to be saved in the cache\n                    // even if they are not selected explicitly in context.selectionSet.\n                    // Not being mentioned by context.selectionSet is convenient here,\n                    // since it means these extra fields cannot be affected by field\n                    // aliasing, which is why we can use extractKey instead of\n                    // context.readField for this extraction.\n                    extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n                }\n                invariant(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n                return extracted;\n            }));\n            return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n        }));\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return (info.keyArgsFn ||\n        (info.keyArgsFn = function (args, _a) {\n            var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n            var collected = collectSpecifierPaths(specifier, function (keyPath) {\n                var firstKey = keyPath[0];\n                var firstChar = firstKey.charAt(0);\n                if (firstChar === \"@\") {\n                    if (field && isNonEmptyArray(field.directives)) {\n                        var directiveName_1 = firstKey.slice(1);\n                        // If the directive appears multiple times, only the first\n                        // occurrence's arguments will be used. TODO Allow repetition?\n                        // TODO Cache this work somehow, a la aliasMap?\n                        var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });\n                        // Fortunately argumentsObjectFromField works for DirectiveNode!\n                        var directiveArgs = d && argumentsObjectFromField(d, variables);\n                        // For directives without arguments (d defined, but directiveArgs ===\n                        // null), the presence or absence of the directive still counts as\n                        // part of the field key, so we return null in those cases. If no\n                        // directive with this name was found for this field (d undefined and\n                        // thus directiveArgs undefined), we return undefined, which causes\n                        // this value to be omitted from the key object returned by\n                        // collectSpecifierPaths.\n                        return (directiveArgs &&\n                            extractKeyPath(directiveArgs, \n                            // If keyPath.length === 1, this code calls extractKeyPath with an\n                            // empty path, which works because it uses directiveArgs as the\n                            // extracted value.\n                            keyPath.slice(1)));\n                    }\n                    // If the key started with @ but there was no corresponding directive,\n                    // we want to omit this value from the key object, not fall through to\n                    // treating @whatever as a normal argument name.\n                    return;\n                }\n                if (firstChar === \"$\") {\n                    var variableName = firstKey.slice(1);\n                    if (variables && hasOwn.call(variables, variableName)) {\n                        var varKeyPath = keyPath.slice(0);\n                        varKeyPath[0] = variableName;\n                        return extractKeyPath(variables, varKeyPath);\n                    }\n                    // If the key started with $ but there was no corresponding variable, we\n                    // want to omit this value from the key object, not fall through to\n                    // treating $whatever as a normal argument name.\n                    return;\n                }\n                if (args) {\n                    return extractKeyPath(args, keyPath);\n                }\n            });\n            var suffix = JSON.stringify(collected);\n            // If no arguments were passed to this field, and it didn't have any other\n            // field key contributions from directives or variables, hide the empty\n            // :{} suffix from the field key. However, a field passed no arguments can\n            // still end up with a non-empty :{...} suffix if its key configuration\n            // refers to directives or variables.\n            if (args || suffix !== \"{}\") {\n                fieldName += \":\" + suffix;\n            }\n            return fieldName;\n        }));\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function (collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for (var i = path.length - 1; i >= 0; --i) {\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = (info.paths = []);\n        var currentPath_1 = [];\n        spec.forEach(function (s, i) {\n            if (isArray(s)) {\n                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });\n                currentPath_1.length = 0;\n            }\n            else {\n                currentPath_1.push(s);\n                if (!isArray(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return isArray(obj) ?\n            obj.map(function (child) { return reducer(child, key); })\n            : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if (isNonNullObject(value)) {\n        if (isArray(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n}\n//# sourceMappingURL=key-extractor.js.map", "import { __assign, __rest } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, isNonNullObject, stringifyForDisplay, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject, isArray, } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier, } from \"./key-extractor.js\";\nfunction argsFromFieldSpecifier(spec) {\n    return (spec.args !== void 0 ? spec.args\n        : spec.field ? argumentsObjectFromField(spec.field, spec.variables)\n            : null);\n}\nvar nullKeyFieldsFn = function () { return void 0; };\nvar simpleKeyArgsFn = function (_args, context) { return context.fieldName; };\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function (existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function (_, incoming) { return incoming; };\nvar Policies = /** @class */ (function () {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = __assign({ dataIdFromObject: defaultDataIdFromObject }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function (object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = (partialContext &&\n            (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename))) ||\n            object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\"ROOT_QUERY\"];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = (partialContext && partialContext.storeObject) || object;\n        var context = __assign(__assign({}, partialContext), { typename: typename, storeObject: storeObject, readField: (partialContext && partialContext.readField) ||\n                function () {\n                    var options = normalizeReadFieldOptions(arguments, storeObject);\n                    return policies.readField(options, {\n                        store: policies.cache[\"data\"],\n                        variables: options.variables,\n                    });\n                } });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = (policy && policy.keyFn) || this.config.dataIdFromObject;\n        while (keyFn) {\n            var specifierOrId = keyFn(__assign(__assign({}, object), storeObject), context);\n            if (isArray(specifierOrId)) {\n                keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n            }\n            else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [id, context.keyObject] : [id];\n    };\n    Policies.prototype.addTypePolicies = function (typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function (typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType)\n                _this.setRootTypename(\"Query\", typename);\n            if (mutationType)\n                _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType)\n                _this.setRootTypename(\"Subscription\", typename);\n            if (hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            }\n            else {\n                _this.toBeAdded[typename] = [incoming];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function (typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge =\n                typeof merge === \"function\" ? merge\n                    // Pass merge:true as a shorthand for a merge implementation\n                    // that returns options.mergeObjects(existing, incoming).\n                    : merge === true ? mergeTrueFn\n                        // Pass merge:false to make incoming always replace existing\n                        // without any warnings about data clobbering.\n                        : merge === false ? mergeFalseFn\n                            : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn =\n            // Pass false to disable normalization for this typename.\n            keyFields === false ? nullKeyFieldsFn\n                // Pass an array of strings to use those fields to compute a\n                // composite ID for objects of this typename.\n                : isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields)\n                    // Pass a function to take full control over identification.\n                    : typeof keyFields === \"function\" ? keyFields\n                        // Leave existing.keyFn unchanged if above cases fail.\n                        : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function (fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                }\n                else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn =\n                        // Pass false to disable argument-based differentiation of\n                        // field identities.\n                        keyArgs === false ? simpleKeyArgsFn\n                            // Pass an array of strings to use named arguments to\n                            // compute a composite identity for the field.\n                            : isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs)\n                                // Pass a function to take full control over field identity.\n                                : typeof keyArgs === \"function\" ? keyArgs\n                                    // Leave existing.keyFn unchanged if above cases fail.\n                                    : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function (which, typename) {\n        if (typename === void 0) { typename = which; }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            invariant(!old || old === which, 5, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old)\n                delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function (possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function (supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function (subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function (typename) {\n        var _this = this;\n        if (!hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = (this.typePolicies[typename] = Object.create(null));\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function (regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function (supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function (supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = __rest(_a, [\"fields\"]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function (policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return (fieldPolicies[fieldName] ||\n                (createIfMissing && (fieldPolicies[fieldName] = Object.create(null))));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, (supertypeSet = new Set()));\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition)\n            return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename)\n            return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype)\n            return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [typenameSupertypeSet];\n            var maybeEnqueue_1 = function (subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet &&\n                    supertypeSet.size &&\n                    workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for (var i = 0; i < workQueue_1.length; ++i) {\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && invariant.warn(6, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes &&\n                    // Start checking fuzzy subtypes only after exhausting all\n                    // non-fuzzy subtypes (after the final iteration of the loop).\n                    i === workQueue_1.length - 1 &&\n                    // We could wait to compare fragment.selectionSet to result\n                    // after we verify the supertype, but this check is often less\n                    // expensive than that search, and we will have to do the\n                    // comparison anyway whenever we find a potential match.\n                    selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function (fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables,\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while (keyFn) {\n                var specifierOrString = keyFn(args, context);\n                if (isArray(specifierOrString)) {\n                    keyFn = keyArgsFnFromSpecifier(specifierOrString);\n                }\n                else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName =\n                fieldSpec.field ?\n                    storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n                    : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName\n            : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function (options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference)\n            return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField)\n            return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename)\n                options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ?\n                objectOrReference.__ref\n                : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions,\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function (typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, \n        // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables,\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}());\nexport { Policies };\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function () {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store),\n    };\n}\nexport function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference,\n        };\n    }\n    else {\n        options = __assign({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && invariant.warn(7, stringifyForDisplay(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if (isArray(existing) || isArray(incoming)) {\n            throw newInvariantError(8);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if (storeValueIsStoreObject(existing) &&\n                storeValueIsStoreObject(incoming)) {\n                return __assign(__assign({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n}\n//# sourceMappingURL=policies.js.map", "import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { Kind } from \"graphql\";\nimport { getFragmentFromSelection, getDefaultValues, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField, canonicalStringify, } from \"../../utilities/index.js\";\nimport { isArray, makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, extractFragmentContext, } from \"./helpers.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, (flavored =\n            context.clientOnly === clientOnly && context.deferred === deferred ?\n                context\n                : __assign(__assign({}, context), { clientOnly: clientOnly, deferred: deferred })));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ (function () {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function (store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = getOperationDefinition(query);\n        var merger = makeProcessedFieldsMerger();\n        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n        var context = __assign(__assign({ store: store, written: Object.create(null), merge: function (existing, incoming) {\n                return merger.merge(existing, incoming);\n            }, variables: variables, varString: canonicalStringify(variables) }, extractFragmentContext(query, this.fragments)), { overwrite: !!overwrite, incomingById: new Map(), clientOnly: false, deferred: false, flavors: new Map() });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: { map: new Map() },\n            context: context,\n        });\n        if (!isReference(ref)) {\n            throw newInvariantError(11, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function (_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = makeReference(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if (isReference(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function (field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function (storeFieldName) {\n                    return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] ===\n                        true;\n                };\n                var hasMergeFunction_1 = function (storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function (storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) &&\n                        !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, \n        // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = (dataId && policies.rootTypenamesById[dataId]) ||\n            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            (dataId && context.store.get(dataId, \"__typename\"));\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function () {\n            var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n            if (isReference(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField(__assign(__assign({}, options), { from: info.storeObject }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, \n        // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function (context, field) {\n            var _a;\n            var resultFieldKey = resultKeyNameFromField(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables,\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, \n                // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ?\n                    getContextFlavor(context, false, false)\n                    : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet &&\n                    (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge,\n                    };\n                }\n                else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {},\n                    _a[storeFieldName] = incomingValue,\n                    _a));\n            }\n            else if (globalThis.__DEV__ !== false &&\n                !context.clientOnly &&\n                !context.deferred &&\n                !addTypenameToDocument.added(field) &&\n                // If the field has a read function, it may be a synthetic field or\n                // provide a default value, so its absence from the written data should\n                // not be cause for alarm.\n                !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && invariant.error(12, resultKeyNameFromField(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField,\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        }\n        catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId)\n                throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = makeReference(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0)\n                return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader &&\n                this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });\n            }\n            else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet,\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? cloneDeep(value) : value;\n        }\n        if (isArray(value)) {\n            return value.map(function (item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree,\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n        if (typename === void 0) { typename = getTypenameFromResult(result, selectionSet, context.fragmentMap); }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, \n            // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited)\n                return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function (selection) {\n                if (!shouldInclude(selection, context.variables))\n                    return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (\n                // Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) &&\n                    isNonEmptyArray(selection.directives)) {\n                    selection.directives.forEach(function (dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\")\n                            clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = argumentsObjectFromField(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                            // TODO In the future, we may want to record args.label using\n                            // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if (isField(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                }\n                else {\n                    var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n                        throw newInvariantError(13, selection.name.value);\n                    }\n                    if (fragment &&\n                        policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !isReference(incoming)) {\n            var e_1 = \n            // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            (!isArray(incoming) &&\n                // Likewise, existing must be either a Reference or a StoreObject\n                // in order for its fields to be safe to merge with the fields of\n                // the incoming object.\n                (isReference(existing) || storeValueIsStoreObject(existing))) ?\n                existing\n                : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function (from, name) {\n                return (isArray(from) ?\n                    typeof name === \"number\" ?\n                        from[name]\n                        : void 0\n                    : context.store.getFieldValue(from, String(name)));\n            };\n            mergeTree.map.forEach(function (childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal)\n                    return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    invariant(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (isArray(i_1) ? i_1.slice(0) : __assign({}, i_1));\n                changedFields_1.forEach(function (value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right))\n        return left;\n    if (!left || mergeTreeIsEmpty(left))\n        return right;\n    var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map()\n        : left.map.size ? left.map\n            : right.map;\n    var merged = { info: info, map: map };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function (leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function (key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function (objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing)\n        return;\n    var incoming = getChild(incomingObj);\n    if (!incoming)\n        return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if (isReference(existing))\n        return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if (equal(existing, incoming))\n        return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") ||\n        store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName))\n        return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!isArray(existing) && !isArray(incoming)) {\n        [existing, incoming].forEach(function (child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && invariant.warn(14, fieldName, parentType, childTypenames.length ?\n        \"either ensure all objects of type \" +\n            childTypenames.join(\" and \") +\n            \" have an ID or a custom merge function, or \"\n        : \"\", typeDotName, __assign({}, existing), __assign({}, incoming));\n}\n//# sourceMappingURL=writeToStore.js.map", "import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport \"./fixPolyfills.js\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference, DocumentTransform, canonicalStringify, print, cacheSizes, } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { getInMemoryCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nvar InMemoryCache = /** @class */ (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = makeVar;\n        _this.txCount = 0;\n        _this.config = normalizeConfig(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies,\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function () {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = (this.data = new EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching,\n        }));\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new StoreWriter(this, (this.storeReader = new StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: shouldCanonizeResults(this.config),\n            canon: resetResultIdentities ? void 0 : (previousReader && previousReader.canon),\n            fragments: fragments,\n        })), fragments);\n        this.maybeBroadcastWatch = wrap(function (c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize ||\n                cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] ||\n                5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n            makeCacheKey: function (c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if (supportsResultCaching(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, \n                    // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, canonicalStringify({ optimistic: optimistic, id: id, variables: variables }));\n                }\n            },\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function (data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        var \n        // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, \n        // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return (this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null);\n        }\n        catch (e) {\n            if (e instanceof MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function (options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function (options) {\n        if (hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = ((options.optimistic) // Defaults to false.\n        ) ?\n            this.optimisticData\n            : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function (options) {\n        return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || \"ROOT_QUERY\", config: this.config }));\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            recallCache(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function () {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                forgetCache(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function (options) {\n        var _a;\n        canonicalStringify.reset();\n        print.reset();\n        this.addTypenameTransform.resetCache();\n        (_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.resetCaches();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            }\n            else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function (object) {\n        if (isReference(object))\n            return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        }\n        catch (e) {\n            globalThis.__DEV__ !== false && invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function (options) {\n        if (!options.id) {\n            if (hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = __assign(__assign({}, options), { id: \"ROOT_QUERY\" });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function (options) {\n        var _this = this;\n        this.init();\n        canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });\n            this.watches.clear();\n            forgetCache(this);\n        }\n        else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function (options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function (layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return (updateResult = update(_this));\n            }\n            finally {\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                } }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        }\n        else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        }\n        else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                } }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });\n            }\n        }\n        else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null,\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.broadcastWatches = function (options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function (document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function (document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function (c, options) {\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated &&\n                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n            c.callback((c.lastDiff = diff), lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(ApolloCache));\nexport { InMemoryCache };\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}\n//# sourceMappingURL=inMemoryCache.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentDefinitions, } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry() {\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fragments[_i] = arguments[_i];\n    }\n    return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar FragmentRegistry = /** @class */ (function () {\n    // Call `createFragmentRegistry` instead of invoking the\n    // FragmentRegistry constructor directly. This reserves the constructor for\n    // future configuration of the FragmentRegistry.\n    function FragmentRegistry() {\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        this.registry = Object.create(null);\n        this.resetCaches();\n        if (fragments.length) {\n            this.register.apply(this, fragments);\n        }\n    }\n    FragmentRegistry.prototype.register = function () {\n        var _this = this;\n        var fragments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fragments[_i] = arguments[_i];\n        }\n        var definitions = new Map();\n        fragments.forEach(function (doc) {\n            getFragmentDefinitions(doc).forEach(function (node) {\n                definitions.set(node.name.value, node);\n            });\n        });\n        definitions.forEach(function (node, name) {\n            if (node !== _this.registry[name]) {\n                _this.registry[name] = node;\n                _this.invalidate(name);\n            }\n        });\n        return this;\n    };\n    // Overridden in the resetCaches method below.\n    FragmentRegistry.prototype.invalidate = function (name) { };\n    FragmentRegistry.prototype.resetCaches = function () {\n        var proto = FragmentRegistry.prototype;\n        this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n            makeCacheKey: function (arg) { return arg; },\n            max: cacheSizes[\"fragmentRegistry.lookup\"] ||\n                1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        })).dirty; // This dirty function is bound to the wrapped lookup method.\n        this.transform = wrap(proto.transform.bind(this), {\n            cache: WeakCache,\n            max: cacheSizes[\"fragmentRegistry.transform\"] ||\n                2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        });\n        this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n            cache: WeakCache,\n            max: cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n                4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        });\n    };\n    /*\n     * Note:\n     * This method is only memoized so it can serve as a dependency to `tranform`,\n     * so calling `invalidate` will invalidate cache entries for `transform`.\n     */\n    FragmentRegistry.prototype.lookup = function (fragmentName) {\n        return this.registry[fragmentName] || null;\n    };\n    FragmentRegistry.prototype.transform = function (document) {\n        var _this = this;\n        var defined = new Map();\n        getFragmentDefinitions(document).forEach(function (def) {\n            defined.set(def.name.value, def);\n        });\n        var unbound = new Set();\n        var enqueue = function (spreadName) {\n            if (!defined.has(spreadName)) {\n                unbound.add(spreadName);\n            }\n        };\n        var enqueueChildSpreads = function (node) {\n            return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n        };\n        enqueueChildSpreads(document);\n        var missing = [];\n        var map = Object.create(null);\n        // This Set forEach loop can be extended during iteration by adding\n        // additional strings to the unbound set.\n        unbound.forEach(function (fragmentName) {\n            var knownFragmentDef = defined.get(fragmentName);\n            if (knownFragmentDef) {\n                enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n            }\n            else {\n                missing.push(fragmentName);\n                var def = _this.lookup(fragmentName);\n                if (def) {\n                    enqueueChildSpreads((map[fragmentName] = def));\n                }\n            }\n        });\n        if (missing.length) {\n            var defsToAppend_1 = [];\n            missing.forEach(function (name) {\n                var def = map[name];\n                if (def) {\n                    defsToAppend_1.push(def);\n                }\n            });\n            if (defsToAppend_1.length) {\n                document = __assign(__assign({}, document), { definitions: document.definitions.concat(defsToAppend_1) });\n            }\n        }\n        return document;\n    };\n    FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n        var spreads = Object.create(null);\n        visit(root, {\n            FragmentSpread: function (node) {\n                spreads[node.name.value] = node;\n            },\n        });\n        return spreads;\n    };\n    return FragmentRegistry;\n}());\n//# sourceMappingURL=fragmentRegistry.js.map", "export var version = \"3.11.1\";\n//# sourceMappingURL=version.js.map", "export function isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nexport function isPlainObject(obj) {\n    return (obj !== null &&\n        typeof obj === \"object\" &&\n        (Object.getPrototypeOf(obj) === Object.prototype ||\n            Object.getPrototypeOf(obj) === null));\n}\n//# sourceMappingURL=objects.js.map", "// A version of Array.isArray that works better with readonly arrays.\nexport var isArray = Array.isArray;\nexport function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n//# sourceMappingURL=arrays.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArray([target,\n                            source,\n                            sourceKey], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                }\n                else {\n                    value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n//# sourceMappingURL=mergeDeep.js.map", "import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(value) {\n    return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n//# sourceMappingURL=incrementalResult.js.map", "/**\n * The current status of a query’s execution in our system.\n */\nexport var NetworkStatus;\n(function (NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */\nexport function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n}\n//# sourceMappingURL=networkStatus.js.map", "import { __rest } from \"tslib\";\nimport equal from \"@wry/equality\";\nimport { createFragmentMap, getFragmentDefinitions, getFragmentFromSelection, getMainDefinition, isField, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = __rest(_a, [\"data\"]);\n    var bData = _b.data, bRest = __rest(_b, [\"data\"]);\n    return (equal(aRest, bRest) &&\n        equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n            variables: variables,\n        }));\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function (selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection))\n            return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!shouldInclude(selection, context.variables))\n            return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection))\n            return true;\n        if (isField(selection)) {\n            var resultKey = resultKeyNameFromField(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return equal(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray)\n                return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for (var i = 0; i < length_1; ++i) {\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        }\n        else {\n            var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment))\n                    return true;\n                return equalBySelectionSet(fragment.selectionSet, \n                // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return (!!selection.directives && selection.directives.some(directiveIsNonreactive));\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n}\n//# sourceMappingURL=equalByQuery.js.map", "import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition, } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : (fetchPolicy) : _f;\n        _this.options = __assign(__assign({}, options), { \n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy, \n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function () {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */\n    ObservableQuery.prototype.resetDiff = function () {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            NetworkStatus.ready;\n        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (\n        // These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) ||\n            // If this.options.query has @client(always: true) fields, we cannot\n            // trust diff.result, since it was read from the cache without running\n            // local resolvers (and it's too late to run resolvers now, since we must\n            // return a result synchronously).\n            this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n            // Fall through.\n        }\n        else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete &&\n                    result.networkStatus === NetworkStatus.loading &&\n                    (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ?\n            !equalByQuery(this.query, this.last.result, newResult, this.variables)\n            : !equal(this.last.result, newResult);\n        return (resultIsDifferent || (variables && !equal(this.last.variables, variables)));\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0,\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        }\n        else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                globalThis.__DEV__ !== false && invariant.warn(\n                    20,\n                    variables,\n                    ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef\n                );\n            }\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : (__assign(__assign(__assign(__assign({}, this.options), { query: this.options.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) })))), { \n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\" });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery =\n            fetchMoreOptions.query ?\n                this.transformDocument(this.options.query)\n                : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n            .then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            // Performing this cache update inside a cache.batch transaction ensures\n            // any affected cache.watch watchers are notified at most once about any\n            // updates. Most watchers will be using the QueryInfo class, which\n            // responds to notifications by calling reobserveCacheFirst to deliver\n            // fetchMore cache results back to this ObservableQuery.\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables,\n                            });\n                        });\n                    }\n                    else {\n                        // If we're using a field policy instead of updateQuery, the only\n                        // thing we need to do is write the new data to the cache using\n                        // combinedOptions.variables (instead of this.variables, which is\n                        // what this.updateQuery uses, because it works by abusing the\n                        // original field value, keyed by the original variables).\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    // Record the DocumentNode associated with any watched query whose\n                    // data were updated by the cache writes above.\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        })\n            .finally(function () {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && invariant.error(21, err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n        var mergedOptions = compact(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, \n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n                // Do nothing, leaving options.fetchPolicy unchanged.\n            }\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval || !this.hasObservers()) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        invariant(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus) &&\n                    !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ?\n                            \"no-cache\"\n                            : \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !equal(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return (this.last = __assign({ result: this.queryManager.assumeImmutableResults ?\n                newResult\n                : cloneDeep(newResult), variables: variables }, (error ? { error: error } : null)));\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = \n        // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === NetworkStatus.refetch ||\n            // The fetchMore method does not actually call the reobserve method, but,\n            // if it did, it would definitely use a disposable Concast.\n            newNetworkStatus === NetworkStatus.fetchMore ||\n            // Polling uses a disposable Concast so the polling options (which force\n            // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n            newNetworkStatus === NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = compact(this.options, newOptions || {});\n        var options = useDisposableConcast ?\n            // Disposable Concast fetches receive a shallow copy of this.options\n            // (merged with newOptions), leaving this.options unmodified.\n            mergedOptions\n            : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions &&\n                newOptions.variables &&\n                !equal(newOptions.variables, oldVariables) &&\n                // Don't mess with the fetchPolicy if it's currently \"standby\".\n                options.fetchPolicy !== \"standby\" &&\n                // If we're changing the fetchPolicy anyway, don't try to change it here\n                // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n                (options.fetchPolicy === oldFetchPolicy ||\n                    // A `nextFetchPolicy` function has even higher priority, though,\n                    // so in that case `applyNextFetchPolicy` must be called.\n                    typeof options.nextFetchPolicy === \"function\")) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function () {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && __assign({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function (result) {\n                if (equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function (error) {\n                if (equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            },\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus)\n            .promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(\n        // Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            iterateObserversSafely(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        iterateObserversSafely(this.observers, \"error\", (this.last.error = error));\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function (document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function (currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && invariant.error(23, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n    return (fetchPolicy === \"network-only\" ||\n        fetchPolicy === \"no-cache\" ||\n        fetchPolicy === \"standby\");\n}\n//# sourceMappingURL=ObservableQuery.js.map", "import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, \n            // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = (this.cache = queryManager.cache);\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function () {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function () {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff =\n            diff ?\n                {\n                    diff: diff,\n                    options: options || this.getDiffOptions(),\n                }\n                : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var _a;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        // If we are trying to deliver an incomplete cache result, we avoid\n        // reporting it if the query has errored, otherwise we let the broadcast try\n        // and repair the partial result by refetching the query. This check avoids\n        // a situation where a query that errors and another succeeds with\n        // overlapping data does not report the partial data result to the errored\n        // query.\n        //\n        // See https://github.com/apollographql/apollo-client/issues/11400 for more\n        // information on this issue.\n        if (diff && !diff.complete && ((_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.getLastError())) {\n            return;\n        }\n        this.updateLastDiff(diff);\n        if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add((this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    oq[\"observe\"]();\n                }\n                else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    reobserveCacheFirst(oq);\n                }\n            }));\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            this.reset();\n            this.cancel();\n            // Revert back to the no-op version of cancel inherited from\n            // QueryInfo.prototype.\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    // This method is a no-op by default, until/unless overridden by the\n    // updateWatch method.\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch((this.lastWatch = watchOptions));\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            // If cache.evict has been called since the last time we wrote this\n            // data into the cache, there's a chance writing this result into\n            // the cache will repair what was evicted.\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var merger = new DeepMerger();\n        var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        this.reset();\n        if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n            var mergedData = mergeIncrementalData(this.getDiff().result, result);\n            result.data = mergedData;\n            // Detect the first chunk of a deferred query and merge it with existing\n            // cache data. This ensures a `cache-first` fetch policy that returns\n            // partial cache data or a `cache-and-network` fetch policy that already\n            // has full data in the cache does not complain when trying to merge the\n            // initial deferred server data with existing cache data.\n        }\n        else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                        // If the previous this.diff was incomplete, fall through to\n                        // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && equal(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return (this.networkStatus = NetworkStatus.ready);\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n//# sourceMappingURL=QueryInfo.js.map", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument, } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform, } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors, } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */ (function () {\n    function QueryManager(options) {\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] ||\n            2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new Trie(false);\n        var defaultDocumentTransform = new DocumentTransform(function (document) { return _this.cache.transformDocument(document); }, \n        // Allow the apollo cache to manage its own transform caches\n        { cache: false });\n        this.cache = options.cache;\n        this.link = options.link;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientAwareness = options.clientAwareness;\n        this.localState = options.localState;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        var documentTransform = options.documentTransform;\n        this.documentTransform =\n            documentTransform ?\n                defaultDocumentTransform\n                    .concat(documentTransform)\n                    // The custom document transform may add new fragment spreads or new\n                    // field selections, so we want to give the cache a chance to run\n                    // again. For example, the InMemoryCache adds __typename to field\n                    // selections and fragments from the fragment registry.\n                    .concat(defaultDocumentTransform)\n                : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || Object.create(null);\n        if ((this.onBroadcast = options.onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(newInvariantError(25));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        return __awaiter(this, arguments, void 0, function (_b) {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            var _c, _d;\n            var mutation = _b.mutation, variables = _b.variables, optimisticResponse = _b.optimisticResponse, updateQueries = _b.updateQueries, _e = _b.refetchQueries, refetchQueries = _e === void 0 ? [] : _e, _f = _b.awaitRefetchQueries, awaitRefetchQueries = _f === void 0 ? false : _f, updateWithProxyFn = _b.update, onQueryUpdated = _b.onQueryUpdated, _g = _b.fetchPolicy, fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g, _h = _b.errorPolicy, errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h, keepRootFields = _b.keepRootFields, context = _b.context;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        invariant(mutation, 26);\n                        invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_j.sent());\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        isOptimistic = optimisticResponse &&\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: isOptimistic ? optimisticResponse : void 0 }), variables, {}, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : (new ApolloError({\n                                            networkError: err,\n                                        })));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) &&\n                isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: (document && getOperationName(document)) || void 0,\n                            queryVariables: variables,\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            (mutation.refetchQueries || \"\").length > 0 ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ?\n            optimisticResponse(mutation.variables, { IGNORE: IGNORE })\n            : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                globalThis.__DEV__ !== false && invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n            .promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: hasClientExports(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: removeDirectivesFromDocument([\n                    { name: \"client\", remove: true },\n                    { name: \"connection\" },\n                    { name: \"nonreactive\" },\n                ], document),\n                defaultVars: getDefaultValues(getOperationDefinition(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: __assign(__assign({}, document), { definitions: document.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) }),\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = __assign(__assign({}, options), { variables: this.getVariables(query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        invariant(options.query, 28);\n        invariant(options.query.kind === \"Document\", 29);\n        invariant(!options.returnPartialData, 30);\n        invariant(!options.pollInterval, 31);\n        return this.fetchQuery(queryId, __assign(__assign({}, options), { query: this.transform(options.query) })).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches(newInvariantError(32));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c, _d = _a.extensions, extensions = _d === void 0 ? {} : _d;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables, extensions).map(function (result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = graphQLResultHasError(result);\n                var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState\n                .addExportedVariables(query, variables, context)\n                .then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return (sub = observable.subscribe(observer)); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, extensions, \n    // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n                extensions: extensions,\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = print(serverQuery);\n                var varJson_1 = canonicalStringify(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation),\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function () {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation),\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([Observable.of({ data: {} })]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = (queryInfo.lastRequestId = this.generateRequestId());\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError) ? networkError : (new ApolloError({ networkError: networkError }));\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        if (query === void 0) { query = options.query; }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? (defaults && defaults.fetchPolicy) || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? (defaults && defaults.errorPolicy) || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (\n            // If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" &&\n                // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n                // this is another way to detect when nothing was done/fetched.\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables)\n                .then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: (optimistic && removeOptimistic) || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) {\n                return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true })));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState\n                    .runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                })\n                    .then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n            // Watched queries must opt into overwriting existing data on refetch,\n            // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n            : (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ?\n                1 /* CacheWriteBehavior.OVERWRITE */\n                : 2 /* CacheWriteBehavior.MERGE */;\n        var resultsFromLink = function () {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return {\n                        fromLink: false,\n                        sources: [resultsFromCache(diff, queryInfo.markReady())],\n                    };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(readCache()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign(__assign({}, this.defaultContext), newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = /** @class */ (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function (_a) {\n        return __awaiter(this, arguments, void 0, function (_b) {\n            var document = _b.document, remoteResult = _b.remoteResult, context = _b.context, variables = _b.variables, _c = _b.onlyRunForcedResolvers, onlyRunForcedResolvers = _c === void 0 ? false : _c;\n            return __generator(this, function (_d) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2 /*return*/, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives([\"client\"], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, \n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function (document_1) {\n        return __awaiter(this, arguments, void 0, function (document, variables, context) {\n            if (variables === void 0) { variables = {}; }\n            if (context === void 0) { context = {}; }\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2 /*return*/, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === \"always\" &&\n                                arg.value.kind === \"BooleanValue\" &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document_1, rootValue_1) {\n        return __awaiter(this, arguments, void 0, function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            if (context === void 0) { context = {}; }\n            if (variables === void 0) { variables = {}; }\n            if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n            if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ?\n                    definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2 /*return*/, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!isClientFieldDescendant &&\n                            !execContext.selectionsToResolve.has(selection)) {\n                            // Skip selections without @client directives\n                            // (still processing if one of the ancestors or one of the child fields has @client directive)\n                            return [2 /*return*/];\n                        }\n                        if (!shouldInclude(selection, variables)) {\n                            // Skip this entirely.\n                            return [2 /*return*/];\n                        }\n                        if (isField(selection)) {\n                            return [2 /*return*/, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== \"undefined\") {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            // This is a named fragment.\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, 18, selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2 /*return*/, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2 /*return*/];\n                    });\n                }); };\n                return [2 /*return*/, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2 /*return*/, null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(\n                            // In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2 /*return*/, resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === \"client\"; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        invariant(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    },\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\nexport { LocalState };\n//# sourceMappingURL=LocalState.js.map", "import { __assign } from \"tslib\";\nimport { global } from \"../globals/index.js\";\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */\nexport var cacheSizes = __assign({}, global[cacheSizeSymbol]);\n//# sourceMappingURL=sizes.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { cacheSizes } from \"./sizes.js\";\nvar globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloClientMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getInMemoryCacheMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloCacheMemoryInternals\n    : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */,\n        print: 2000 /* defaultCacheSizes[\"print\"] */,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n    };\n    return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            cacheSizes[k] || v,\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false))\n        throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: __assign({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform),\n            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n        },\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]), inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n        }, fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),\n        } });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        __spreadArray(__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ?\n        __spreadArray(__spreadArray([\n            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)\n        : [];\n}\n//# sourceMappingURL=getMemoryInternals.js.map", "import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nimport { getApolloClientMemoryInternals } from \"../utilities/caching/getMemoryInternals.js\";\nexport { mergeOptions };\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */\nvar ApolloClient = /** @class */ (function () {\n    /**\n     * Constructs an instance of `ApolloClient`.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */\n    function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw newInvariantError(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, \n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? cache.assumeImmutableResults : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version, devtools = options.devtools;\n        var link = options.link;\n        if (!link) {\n            link =\n                uri ? new HttpLink({ uri: uri, credentials: credentials, headers: headers }) : ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        this.devtoolsConfig = __assign(__assign({}, devtools), { enabled: (devtools === null || devtools === void 0 ? void 0 : devtools.enabled) || connectToDevTools });\n        if (this.devtoolsConfig.enabled === undefined) {\n            this.devtoolsConfig.enabled = globalThis.__DEV__ !== false;\n        }\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.watchFragment = this.watchFragment.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: this.devtoolsConfig.enabled ?\n                function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager.getQueryStore(),\n                                mutations: _this.queryManager.mutationStore || {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                }\n                : void 0,\n        });\n        if (this.devtoolsConfig.enabled)\n            this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function () {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        var windowWithDevTools = window;\n        var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n        (windowWithDevTools[devtoolsSymbol] =\n            windowWithDevTools[devtoolsSymbol] || []).push(this);\n        windowWithDevTools.__APOLLO_CLIENT__ = this;\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */\n        if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            if (window.document &&\n                window.top === window.self &&\n                /^(https?|file):$/.test(window.location.protocol)) {\n                setTimeout(function () {\n                    if (!window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                        var nav = window.navigator;\n                        var ua = nav && nav.userAgent;\n                        var url = void 0;\n                        if (typeof ua === \"string\") {\n                            if (ua.indexOf(\"Chrome/\") > -1) {\n                                url =\n                                    \"https://chrome.google.com/webstore/detail/\" +\n                                        \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                            }\n                            else if (ua.indexOf(\"Firefox/\") > -1) {\n                                url =\n                                    \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                            }\n                        }\n                        if (url) {\n                            globalThis.__DEV__ !== false && invariant.log(\"Download the Apollo DevTools for a better development \" +\n                                \"experience: %s\", url);\n                        }\n                    }\n                }, 10000);\n            }\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */\n        get: function () {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n     * receive updated results through an observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === \"network-only\" ||\n                options.fetchPolicy === \"cache-and-network\")) {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type `QueryOptions` that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = mergeOptions(this.defaultOptions.query, options);\n        }\n        invariant(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * `Observable` which either emits received data or an error.\n     */\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Watches the cache store of the fragment according to the options specified\n     * and returns an `Observable`. We can subscribe to this\n     * `Observable` and receive updated results through an\n     * observer when the cache store changes.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @since 3.10.0\n     * @param options - An object of type `WatchFragmentOptions` that allows\n     * the cache to identify the fragment and optionally specify whether to react\n     * to optimistic updates.\n     */\n    ApolloClient.prototype.watchFragment = function (options) {\n        return this.cache.watchFragment(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: false,\n            });\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: true,\n            });\n        })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function (error) {\n            globalThis.__DEV__ !== false && invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function () {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}());\nexport { ApolloClient };\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n//# sourceMappingURL=ApolloClient.js.map", "/* Core */\nexport { ApolloClient, mergeOptions } from \"./ApolloClient.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport { NetworkStatus, isNetworkRequestSettled } from \"./networkStatus.js\";\nexport * from \"./types.js\";\nexport { isApolloError, ApolloError } from \"../errors/index.js\";\nexport { Cache, ApolloCache, InMemoryCache, MissingFieldError, defaultDataIdFromObject, makeVar, } from \"../cache/index.js\";\nexport * from \"../cache/inmemory/types.js\";\n/* Link */\nexport * from \"../link/core/index.js\";\nexport * from \"../link/http/index.js\";\nexport { fromError, toPromise, fromPromise, throwServerError, } from \"../link/utils/index.js\";\nexport { DocumentTransform, Observable, isReference, makeReference, } from \"../utilities/index.js\";\n/* Supporting */\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity };\nsetVerbosity(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport { gql, resetCaches, disableFragmentWarnings, enableExperimentalFragmentVariables, disableExperimentalFragmentVariables, } from \"graphql-tag\";\n//# sourceMappingURL=index.js.map", "import * as React from \"rehackt\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nexport function getApolloContext() {\n    invariant(\"createContext\" in React, 45);\n    var context = React.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(React.createContext, contextKey, {\n            value: (context = React.createContext({})),\n            enumerable: false,\n            writable: false,\n            configurable: true,\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport var resetApolloContext = getApolloContext;\n//# sourceMappingURL=ApolloContext.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { getApolloContext } from \"./ApolloContext.js\";\nexport var ApolloConsumer = function (props) {\n    var ApolloContext = getApolloContext();\n    return (React.createElement(ApolloContext.Consumer, null, function (context) {\n        invariant(context && context.client, 44);\n        return props.children(context.client);\n    }));\n};\n//# sourceMappingURL=ApolloConsumer.js.map", "import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { getApolloContext } from \"./ApolloContext.js\";\nexport var ApolloProvider = function (_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = getApolloContext();\n    var parentContext = React.useContext(ApolloContext);\n    var context = React.useMemo(function () {\n        return __assign(__assign({}, parentContext), { client: client || parentContext.client });\n    }, [parentContext, client]);\n    invariant(context.client, 46);\n    return (React.createElement(ApolloContext.Provider, { value: context }, children));\n};\n//# sourceMappingURL=ApolloProvider.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport { cacheSizes } from \"./sizes.js\";\nvar globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloClientMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getInMemoryCacheMemoryInternals\n    : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?\n    _getApolloCacheMemoryInternals\n    : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */,\n        print: 2000 /* defaultCacheSizes[\"print\"] */,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */,\n    };\n    return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            cacheSizes[k] || v,\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false))\n        throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: __assign({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform),\n            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n        },\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]), inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n        }, fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),\n        } });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ?\n        __spreadArray(__spreadArray([\n            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined)\n        : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ?\n        __spreadArray(__spreadArray([\n            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)\n        : [];\n}\n//# sourceMappingURL=getMemoryInternals.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nimport { AutoCleanedWeakCache, cacheSizes, } from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document) {\n    if (!cache) {\n        cache = new AutoCleanedWeakCache(cacheSizes.parser || 1000 /* defaultCacheSizes.parser */);\n    }\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, 61, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch (x.operation) {\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    invariant(!fragments.length ||\n        queries.length ||\n        mutations.length ||\n        subscriptions.length, 62);\n    invariant(\n        queries.length + mutations.length + subscriptions.length <= 1,\n        63,\n        document,\n        queries.length,\n        subscriptions.length,\n        mutations.length\n    );\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length ? queries\n        : mutations.length ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, 64, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    }\n    else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function () {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    registerGlobalCache(\"parser\", function () { return (cache ? cache.size : 0); });\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    invariant(\n        operation.type === type,\n        65,\n        requiredOperationName,\n        requiredOperationName,\n        usedOperationName\n    );\n}\n//# sourceMappingURL=index.js.map", "export var version = \"3.11.1\";\n//# sourceMappingURL=version.js.map", "export function maybe(thunk) {\n    try {\n        return thunk();\n    }\n    catch (_a) { }\n}\n//# sourceMappingURL=maybe.js.map", "import { maybe } from \"./maybe.js\";\nexport default (maybe(function () { return globalThis; }) ||\n    maybe(function () { return window; }) ||\n    maybe(function () { return self; }) ||\n    maybe(function () { return global; }) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\nmaybe(function () {\n    return maybe.constructor(\"return this\")();\n}));\n//# sourceMappingURL=global.js.map", "var prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}\n//# sourceMappingURL=makeUniqueId.js.map", "import { makeUniqueId } from \"./makeUniqueId.js\";\nexport function stringifyForDisplay(value, space) {\n    if (space === void 0) { space = 0; }\n    var undefId = makeUniqueId(\"stringifyForDisplay\");\n    return JSON.stringify(value, function (key, value) {\n        return value === void 0 ? undefId : value;\n    }, space)\n        .split(JSON.stringify(undefId))\n        .join(\"<undefined>\");\n}\n//# sourceMappingURL=stringifyForDisplay.js.map", "import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\nfunction wrap(fn) {\n    return function (message) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [message].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(message) {\n    var optionalParams = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new InvariantError(getHandledErrorMsg(message, optionalParams) ||\n        getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\nfunction stringify(arg) {\n    if (typeof arg == \"string\") {\n        return arg;\n    }\n    try {\n        return stringifyForDisplay(arg, 2).slice(0, 1000);\n    }\n    catch (_a) {\n        return \"<non-serializable>\";\n    }\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return (global[ApolloErrorMessageHandler] &&\n        global[ApolloErrorMessageHandler](message, messageArgs.map(stringify)));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) { messageArgs = []; }\n    if (!message)\n        return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: version,\n        message: message,\n        args: messageArgs.map(stringify),\n    })));\n}\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler, };\n//# sourceMappingURL=invariantWrappers.js.map", "import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { createFulfilledPromise, createRejectedPromise, } from \"../../../utilities/index.js\";\nimport { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport { invariant } from \"../../../utilities/globals/invariantWrappers.js\";\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nvar PROMISE_SYMBOL = Symbol();\nexport function wrapQueryRef(internalQueryRef) {\n    var _a;\n    var ref = (_a = {\n            toPromise: function () {\n                // We avoid resolving this promise with the query data because we want to\n                // discourage using the server data directly from the queryRef. Instead,\n                // the data should be accessed through `useReadQuery`. When the server\n                // data is needed, its better to use `client.query()` directly.\n                //\n                // Here we resolve with the ref itself to make using this in React Router\n                // or TanStack Router `loader` functions a bit more ergonomic e.g.\n                //\n                // function loader() {\n                //   return { queryRef: await preloadQuery(query).toPromise() }\n                // }\n                return getWrappedPromise(ref).then(function () { return ref; });\n            }\n        },\n        _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef,\n        _a[PROMISE_SYMBOL] = internalQueryRef.promise,\n        _a);\n    return ref;\n}\nexport function assertWrappedQueryRef(queryRef) {\n    invariant(!queryRef || QUERY_REFERENCE_SYMBOL in queryRef, 60);\n}\nexport function getWrappedPromise(queryRef) {\n    var internalQueryRef = unwrapQueryRef(queryRef);\n    return internalQueryRef.promise.status === \"fulfilled\" ?\n        internalQueryRef.promise\n        : queryRef[PROMISE_SYMBOL];\n}\nexport function unwrapQueryRef(queryRef) {\n    return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nexport function updateWrappedQueryRef(queryRef, promise) {\n    queryRef[PROMISE_SYMBOL] = promise;\n}\nvar OBSERVED_CHANGED_OPTIONS = [\n    \"canonizeResults\",\n    \"context\",\n    \"errorPolicy\",\n    \"fetchPolicy\",\n    \"refetchWritePolicy\",\n    \"returnPartialData\",\n];\nvar InternalQueryReference = /** @class */ (function () {\n    function InternalQueryReference(observable, options) {\n        var _this = this;\n        this.key = {};\n        this.listeners = new Set();\n        this.references = 0;\n        this.softReferences = 0;\n        this.handleNext = this.handleNext.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.dispose = this.dispose.bind(this);\n        this.observable = observable;\n        if (options.onDispose) {\n            this.onDispose = options.onDispose;\n        }\n        this.setResult();\n        this.subscribeToQuery();\n        // Start a timer that will automatically dispose of the query if the\n        // suspended resource does not use this queryRef in the given time. This\n        // helps prevent memory leaks when a component has unmounted before the\n        // query has finished loading.\n        var startDisposeTimer = function () {\n            var _a;\n            if (!_this.references) {\n                _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n            }\n        };\n        // We wait until the request has settled to ensure we don't dispose of the\n        // query ref before the request finishes, otherwise we would leave the\n        // promise in a pending state rendering the suspense boundary indefinitely.\n        this.promise.then(startDisposeTimer, startDisposeTimer);\n    }\n    Object.defineProperty(InternalQueryReference.prototype, \"disposed\", {\n        get: function () {\n            return this.subscription.closed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n        get: function () {\n            return this.observable.options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    InternalQueryReference.prototype.reinitialize = function () {\n        var observable = this.observable;\n        var originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n        var avoidNetworkRequests = originalFetchPolicy === \"no-cache\" || originalFetchPolicy === \"standby\";\n        try {\n            if (avoidNetworkRequests) {\n                observable.silentSetOptions({ fetchPolicy: \"standby\" });\n            }\n            else {\n                observable.resetLastResults();\n                observable.silentSetOptions({ fetchPolicy: \"cache-first\" });\n            }\n            this.subscribeToQuery();\n            if (avoidNetworkRequests) {\n                return;\n            }\n            observable.resetDiff();\n            this.setResult();\n        }\n        finally {\n            observable.silentSetOptions({ fetchPolicy: originalFetchPolicy });\n        }\n    };\n    InternalQueryReference.prototype.retain = function () {\n        var _this = this;\n        this.references++;\n        clearTimeout(this.autoDisposeTimeoutId);\n        var disposed = false;\n        return function () {\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            _this.references--;\n            setTimeout(function () {\n                if (!_this.references) {\n                    _this.dispose();\n                }\n            });\n        };\n    };\n    InternalQueryReference.prototype.softRetain = function () {\n        var _this = this;\n        this.softReferences++;\n        var disposed = false;\n        return function () {\n            // Tracking if this has already been called helps ensure that\n            // multiple calls to this function won't decrement the reference\n            // counter more than it should. Subsequent calls just result in a noop.\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            _this.softReferences--;\n            setTimeout(function () {\n                if (!_this.softReferences && !_this.references) {\n                    _this.dispose();\n                }\n            });\n        };\n    };\n    InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {\n        var _this = this;\n        return OBSERVED_CHANGED_OPTIONS.some(function (option) {\n            return option in watchQueryOptions &&\n                !equal(_this.watchQueryOptions[option], watchQueryOptions[option]);\n        });\n    };\n    InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {\n        var _a = this.watchQueryOptions, currentFetchPolicy = _a.fetchPolicy, currentCanonizeResults = _a.canonizeResults;\n        // \"standby\" is used when `skip` is set to `true`. Detect when we've\n        // enabled the query (i.e. `skip` is `false`) to execute a network request.\n        if (currentFetchPolicy === \"standby\" &&\n            currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n            this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n        }\n        else {\n            this.observable.silentSetOptions(watchQueryOptions);\n            if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n                this.result = __assign(__assign({}, this.result), this.observable.getCurrentResult());\n                this.promise = createFulfilledPromise(this.result);\n            }\n        }\n        return this.promise;\n    };\n    InternalQueryReference.prototype.listen = function (listener) {\n        var _this = this;\n        this.listeners.add(listener);\n        return function () {\n            _this.listeners.delete(listener);\n        };\n    };\n    InternalQueryReference.prototype.refetch = function (variables) {\n        return this.initiateFetch(this.observable.refetch(variables));\n    };\n    InternalQueryReference.prototype.fetchMore = function (options) {\n        return this.initiateFetch(this.observable.fetchMore(options));\n    };\n    InternalQueryReference.prototype.dispose = function () {\n        this.subscription.unsubscribe();\n        this.onDispose();\n    };\n    InternalQueryReference.prototype.onDispose = function () {\n        // noop. overridable by options\n    };\n    InternalQueryReference.prototype.handleNext = function (result) {\n        var _a;\n        switch (this.promise.status) {\n            case \"pending\": {\n                // Maintain the last successful `data` value if the next result does not\n                // have one.\n                if (result.data === void 0) {\n                    result.data = this.result.data;\n                }\n                this.result = result;\n                (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n                break;\n            }\n            default: {\n                // This occurs when switching to a result that is fully cached when this\n                // class is instantiated. ObservableQuery will run reobserve when\n                // subscribing, which delivers a result from the cache.\n                if (result.data === this.result.data &&\n                    result.networkStatus === this.result.networkStatus) {\n                    return;\n                }\n                // Maintain the last successful `data` value if the next result does not\n                // have one.\n                if (result.data === void 0) {\n                    result.data = this.result.data;\n                }\n                this.result = result;\n                this.promise = createFulfilledPromise(result);\n                this.deliver(this.promise);\n                break;\n            }\n        }\n    };\n    InternalQueryReference.prototype.handleError = function (error) {\n        var _a;\n        this.subscription.unsubscribe();\n        this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n        switch (this.promise.status) {\n            case \"pending\": {\n                (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                break;\n            }\n            default: {\n                this.promise = createRejectedPromise(error);\n                this.deliver(this.promise);\n            }\n        }\n    };\n    InternalQueryReference.prototype.deliver = function (promise) {\n        this.listeners.forEach(function (listener) { return listener(promise); });\n    };\n    InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {\n        var _this = this;\n        this.promise = this.createPendingPromise();\n        this.promise.catch(function () { });\n        // If the data returned from the fetch is deeply equal to the data already\n        // in the cache, `handleNext` will not be triggered leaving the promise we\n        // created in a pending state forever. To avoid this situtation, we attempt\n        // to resolve the promise if `handleNext` hasn't been run to ensure the\n        // promise is resolved correctly.\n        returnedPromise\n            .then(function () {\n            // In the case of `fetchMore`, this promise is resolved before a cache\n            // result is emitted due to the fact that `fetchMore` sets a `no-cache`\n            // fetch policy and runs `cache.batch` in its `.then` handler. Because\n            // the timing is different, we accidentally run this update twice\n            // causing an additional re-render with the `fetchMore` result by\n            // itself. By wrapping in `setTimeout`, this should provide a short\n            // delay to allow the `QueryInfo.notify` handler to run before this\n            // promise is checked.\n            // See https://github.com/apollographql/apollo-client/issues/11315 for\n            // more information\n            setTimeout(function () {\n                var _a;\n                if (_this.promise.status === \"pending\") {\n                    // Use the current result from the observable instead of the value\n                    // resolved from the promise. This avoids issues in some cases where\n                    // the raw resolved value should not be the emitted value, such as\n                    // when a `fetchMore` call returns an empty array after it has\n                    // reached the end of the list.\n                    //\n                    // See the following for more information:\n                    // https://github.com/apollographql/apollo-client/issues/11642\n                    _this.result = _this.observable.getCurrentResult();\n                    (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, _this.result);\n                }\n            });\n        })\n            .catch(function () { });\n        return returnedPromise;\n    };\n    InternalQueryReference.prototype.subscribeToQuery = function () {\n        var _this = this;\n        this.subscription = this.observable\n            .filter(function (result) { return !equal(result.data, {}) && !equal(result, _this.result); })\n            .subscribe(this.handleNext, this.handleError);\n    };\n    InternalQueryReference.prototype.setResult = function () {\n        // Don't save this result as last result to prevent delivery of last result\n        // when first subscribing\n        var result = this.observable.getCurrentResult(false);\n        if (equal(result, this.result)) {\n            return;\n        }\n        this.result = result;\n        this.promise =\n            (result.data &&\n                (!result.partial || this.watchQueryOptions.returnPartialData)) ?\n                createFulfilledPromise(result)\n                : this.createPendingPromise();\n    };\n    InternalQueryReference.prototype.createPendingPromise = function () {\n        var _this = this;\n        return wrapPromiseWithState(new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        }));\n    };\n    return InternalQueryReference;\n}());\nexport { InternalQueryReference };\n//# sourceMappingURL=QueryReference.js.map", "import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nvar SuspenseCache = /** @class */ (function () {\n    function SuspenseCache(options) {\n        if (options === void 0) { options = Object.create(null); }\n        this.queryRefs = new Trie(canUseWeakMap);\n        this.options = options;\n    }\n    SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n        var ref = this.queryRefs.lookupArray(cacheKey);\n        if (!ref.current) {\n            ref.current = new InternalQueryReference(createObservable(), {\n                autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n                onDispose: function () {\n                    delete ref.current;\n                },\n            });\n        }\n        return ref.current;\n    };\n    SuspenseCache.prototype.add = function (cacheKey, queryRef) {\n        var ref = this.queryRefs.lookupArray(cacheKey);\n        ref.current = queryRef;\n    };\n    return SuspenseCache;\n}());\nexport { SuspenseCache };\n//# sourceMappingURL=SuspenseCache.js.map", "import { SuspenseCache } from \"./SuspenseCache.js\";\nvar suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\nexport function getSuspenseCache(client) {\n    var _a;\n    if (!client[suspenseCacheSymbol]) {\n        client[suspenseCacheSymbol] = new SuspenseCache((_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense);\n    }\n    return client[suspenseCacheSymbol];\n}\n//# sourceMappingURL=getSuspenseCache.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { getApolloContext } from \"../context/index.js\";\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */\nexport function useApolloClient(override) {\n    var context = React.useContext(getApolloContext());\n    var client = override || context.client;\n    invariant(!!client, 49);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport var useSyncExternalStore = realHook ||\n    (function (subscribe, getSnapshot, getServerSnapshot) {\n        // Read the current snapshot from the store on every render. Again, this\n        // breaks the rules of React, and only works here because of specific\n        // implementation details, most importantly that updates are\n        // always synchronous.\n        var value = getSnapshot();\n        if (\n        // DEVIATION: Using __DEV__\n        globalThis.__DEV__ !== false &&\n            !didWarnUncachedGetSnapshot &&\n            // DEVIATION: Not using Object.is because we know our snapshots will never\n            // be exotic primitive values like NaN, which is !== itself.\n            value !== getSnapshot()) {\n            didWarnUncachedGetSnapshot = true;\n            // DEVIATION: Using invariant.error instead of console.error directly.\n            globalThis.__DEV__ !== false && invariant.error(59);\n        }\n        // Because updates are synchronous, we don't queue them. Instead we force a\n        // re-render whenever the subscribed state changes by updating an some\n        // arbitrary useState hook. Then, during render, we call getSnapshot to read\n        // the current value.\n        //\n        // Because we don't actually use the state returned by the useState hook, we\n        // can save a bit of memory by storing other stuff in that slot.\n        //\n        // To implement the early bailout, we need to track some things on a mutable\n        // object. Usually, we would put that in a useRef hook, but we can stash it in\n        // our useState hook instead.\n        //\n        // To force a re-render, we call forceUpdate({inst}). That works because the\n        // new object always fails an equality check.\n        var _a = React.useState({\n            inst: { value: value, getSnapshot: getSnapshot },\n        }), inst = _a[0].inst, forceUpdate = _a[1];\n        // Track the latest getSnapshot function with a ref. This needs to be updated\n        // in the layout phase so we can access it during the tearing check that\n        // happens on subscribe.\n        if (canUseLayoutEffect) {\n            // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n            // which may seem like a conditional hook, but this code ends up behaving\n            // unconditionally (one way or the other) because canUseLayoutEffect is\n            // constant.\n            React.useLayoutEffect(function () {\n                Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n                // Whenever getSnapshot or subscribe changes, we need to check in the\n                // commit phase if there was an interleaved mutation. In concurrent mode\n                // this can happen all the time, but even in synchronous mode, an earlier\n                // effect may have mutated the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({ inst: inst });\n                }\n                // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n            }, [subscribe, value, getSnapshot]);\n        }\n        else {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n        }\n        React.useEffect(function () {\n            // Check for changes right before subscribing. Subsequent changes will be\n            // detected in the subscription handler.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({ inst: inst });\n            }\n            // Subscribe to the store and return a clean-up function.\n            return subscribe(function handleStoreChange() {\n                // TODO: Because there is no cross-renderer API for batching updates, it's\n                // up to the consumer of this library to wrap their subscription event\n                // with unstable_batchedUpdates. Should we try to detect when this isn't\n                // the case and print a warning in development?\n                // The store changed. Check if the snapshot changed since the last time we\n                // read from the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({ inst: inst });\n                }\n            });\n            // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [subscribe]);\n        return value;\n    });\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map", "import * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nexport function useDeepMemo(memoFn, deps) {\n    var ref = React.useRef();\n    if (!ref.current || !equal(ref.current.deps, deps)) {\n        ref.current = { value: memoFn(), deps: deps };\n    }\n    return ref.current.value;\n}\n//# sourceMappingURL=useDeepMemo.js.map", "import * as React from \"rehackt\";\nimport { canUseDOM } from \"../../../utilities/index.js\";\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nexport var useIsomorphicLayoutEffect = canUseDOM ? React.useLayoutEffect : React.useEffect;\n//# sourceMappingURL=useIsomorphicLayoutEffect.js.map", "import * as React from \"rehackt\";\nvar Ctx;\nfunction noop() { }\nexport function useRenderGuard() {\n    if (!Ctx) {\n        // we want the intialization to be lazy because `createContext` would error on import in a RSC\n        Ctx = React.createContext(null);\n    }\n    return React.useCallback(\n    /**\n     * @returns true if the hook was called during render\n     */ function () {\n        var orig = console.error;\n        try {\n            console.error = noop;\n            /**\n             * `useContext` can be called conditionally during render, so this is safe.\n             * (Also, during render we would want to throw as a reaction to this anyways, so it\n             * wouldn't even matter if we got the order of hooks mixed up...)\n             *\n             * They cannot however be called outside of Render, and that's what we're testing here.\n             *\n             * Different versions of React have different behaviour on an invalid hook call:\n             *\n             * React 16.8 - 17: throws an error\n             * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n             *\n             * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n             * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n             */\n            React[\"useContext\" /* hide this from the linter */](Ctx);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n        finally {\n            console.error = orig;\n        }\n    }, []);\n}\n//# sourceMappingURL=useRenderGuard.js.map", "import * as React from \"rehackt\";\nvar INIT = {};\nexport function useLazyRef(getInitialValue) {\n    var ref = React.useRef(INIT);\n    if (ref.current === INIT) {\n        ref.current = getInitialValue();\n    }\n    return ref;\n}\n//# sourceMappingURL=useLazyRef.js.map", "import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"rehackt\";\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nvar useKey = \"use\";\nvar realHook = React[useKey];\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport var __use = realHook ||\n    function __use(promise) {\n        var statefulPromise = wrapPromiseWithState(promise);\n        switch (statefulPromise.status) {\n            case \"pending\":\n                throw statefulPromise;\n            case \"rejected\":\n                throw statefulPromise.reason;\n            case \"fulfilled\":\n                return statefulPromise.value;\n        }\n    };\n//# sourceMappingURL=__use.js.map", "var wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */\nexport function wrapHook(hookName, useHook, clientOrObsQuery) {\n    var queryManager = clientOrObsQuery[\"queryManager\"];\n    var wrappers = queryManager && queryManager[wrapperSymbol];\n    var wrapper = wrappers && wrappers[hookName];\n    return wrapper ? wrapper(useHook) : useHook;\n}\n//# sourceMappingURL=wrapHook.js.map", "import { __assign, __rest } from \"tslib\";\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { compact, isNonEmptyArray, maybeDeepFreeze, } from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction noop() { }\nexport var lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return wrapHook(\"useQuery\", _useQuery, useApolloClient(options && options.client))(query, options);\n}\nfunction _useQuery(query, options) {\n    var _a = useQueryInternals(query, options), result = _a.result, obsQueryFields = _a.obsQueryFields;\n    return React.useMemo(function () { return (__assign(__assign({}, result), obsQueryFields)); }, [result, obsQueryFields]);\n}\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n    function createInternalState(previous) {\n        var _a;\n        verifyDocumentType(query, DocumentType.Query);\n        var internalState = {\n            client: client,\n            query: query,\n            observable: \n            // See if there is an existing observable that was used to fetch the same\n            // data and if so, use it instead since it will contain the proper queryId\n            // to fetch the result set. This is used during SSR.\n            (renderPromises &&\n                renderPromises.getSSRObservable(makeWatchQueryOptions())) ||\n                client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())),\n            resultData: {\n                // Reuse previousData from previous InternalState (if any) to provide\n                // continuity of previousData even if/when the query or client changes.\n                previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data,\n            },\n        };\n        return internalState;\n    }\n    var _a = React.useState(createInternalState), internalState = _a[0], updateInternalState = _a[1];\n    /**\n     * Used by `useLazyQuery` when a new query is executed.\n     * We keep this logic here since it needs to update things in unsafe\n     * ways and here we at least can keep track of that in a single place.\n     */\n    function onQueryExecuted(watchQueryOptions) {\n        var _a;\n        var _b;\n        // this needs to be set to prevent an immediate `resubscribe` in the\n        // next rerender of the `useQuery` internals\n        Object.assign(internalState.observable, (_a = {},\n            _a[lastWatchOptions] = watchQueryOptions,\n            _a));\n        var resultData = internalState.resultData;\n        updateInternalState(__assign(__assign({}, internalState), { \n            // might be a different query\n            query: watchQueryOptions.query, resultData: Object.assign(resultData, {\n                // We need to modify the previous `resultData` object as we rely on the\n                // object reference in other places\n                previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n                current: undefined,\n            }) }));\n    }\n    if (client !== internalState.client || query !== internalState.query) {\n        // If the client or query have changed, we need to create a new InternalState.\n        // This will trigger a re-render with the new state, but it will also continue\n        // to run the current render function to completion.\n        // Since we sometimes trigger some side-effects in the render function, we\n        // re-assign `state` to the new state to ensure that those side-effects are\n        // triggered with the new state.\n        var newInternalState = createInternalState(internalState);\n        updateInternalState(newInternalState);\n        return [newInternalState, onQueryExecuted];\n    }\n    return [internalState, onQueryExecuted];\n}\nexport function useQueryInternals(query, options) {\n    var client = useApolloClient(options.client);\n    var renderPromises = React.useContext(getApolloContext()).renderPromises;\n    var isSyncSSR = !!renderPromises;\n    var disableNetworkFetches = client.disableNetworkFetches;\n    var ssrAllowed = options.ssr !== false && !options.skip;\n    var partialRefetch = options.partialRefetch;\n    var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n    var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions), _b = _a[0], observable = _b.observable, resultData = _b.resultData, onQueryExecuted = _a[1];\n    var watchQueryOptions = makeWatchQueryOptions(observable);\n    useResubscribeIfNecessary(resultData, // might get mutated during render\n    observable, // might get mutated during render\n    client, options, watchQueryOptions);\n    var obsQueryFields = React.useMemo(function () { return bindObservableMethods(observable); }, [observable]);\n    useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n    var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n        onCompleted: options.onCompleted || noop,\n        onError: options.onError || noop,\n    });\n    return {\n        result: result,\n        obsQueryFields: obsQueryFields,\n        observable: observable,\n        resultData: resultData,\n        client: client,\n        onQueryExecuted: onQueryExecuted,\n    };\n}\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n    var callbackRef = React.useRef(callbacks);\n    React.useEffect(function () {\n        // Make sure state.onCompleted and state.onError always reflect the latest\n        // options.onCompleted and options.onError callbacks provided to useQuery,\n        // since those functions are often recreated every time useQuery is called.\n        // Like the forceUpdate method, the versions of these methods inherited from\n        // InternalState.prototype are empty no-ops, but we can override them on the\n        // base state object (without modifying the prototype).\n        callbackRef.current = callbacks;\n    });\n    var resultOverride = ((isSyncSSR || disableNetworkFetches) &&\n        options.ssr === false &&\n        !options.skip) ?\n        // If SSR has been explicitly disabled, and this function has been called\n        // on the server side, return the default loading state.\n        ssrDisabledResult\n        : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n            // When skipping a query (ie. we're not querying for data but still want to\n            // render children), make sure the `data` is cleared out and `loading` is\n            // set to `false` (since we aren't loading anything).\n            //\n            // NOTE: We no longer think this is the correct behavior. Skipping should\n            // not automatically set `data` to `undefined`, but instead leave the\n            // previous data in place. In other words, skipping should not mandate that\n            // previously received data is all of a sudden removed. Unfortunately,\n            // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n            // to address this.\n            skipStandbyResult\n            : void 0;\n    var previousData = resultData.previousData;\n    var currentResultOverride = React.useMemo(function () {\n        return resultOverride &&\n            toQueryResult(resultOverride, previousData, observable, client);\n    }, [client, observable, resultOverride, previousData]);\n    return useSyncExternalStore(React.useCallback(function (handleStoreChange) {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n        if (isSyncSSR) {\n            return function () { };\n        }\n        var onNext = function () {\n            var previousResult = resultData.current;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            var result = observable.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (previousResult &&\n                previousResult.loading === result.loading &&\n                previousResult.networkStatus === result.networkStatus &&\n                equal(previousResult.data, result.data)) {\n                return;\n            }\n            setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n        };\n        var onError = function (error) {\n            subscription.current.unsubscribe();\n            subscription.current = observable.resubscribeAfterError(onNext, onError);\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                // The error is not a GraphQL error\n                throw error;\n            }\n            var previousResult = resultData.current;\n            if (!previousResult ||\n                (previousResult && previousResult.loading) ||\n                !equal(error, previousResult.error)) {\n                setResult({\n                    data: (previousResult && previousResult.data),\n                    error: error,\n                    loading: false,\n                    networkStatus: NetworkStatus.error,\n                }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n            }\n        };\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        var subscription = { current: observable.subscribe(onNext, onError) };\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return function () {\n            setTimeout(function () { return subscription.current.unsubscribe(); });\n        };\n    }, [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client,\n    ]), function () {\n        return currentResultOverride ||\n            getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    }, function () {\n        return currentResultOverride ||\n            getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n    });\n}\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n    if (renderPromises && ssrAllowed) {\n        renderPromises.registerSSRObservable(observable);\n        if (observable.getCurrentResult().loading) {\n            // TODO: This is a legacy API which could probably be cleaned up\n            renderPromises.addObservableQueryPromise(observable);\n        }\n    }\n}\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary(\n/** this hook will mutate properties on `resultData` */\nresultData, \n/** this hook will mutate properties on `observable` */\nobservable, client, options, watchQueryOptions) {\n    var _a;\n    if (observable[lastWatchOptions] &&\n        !equal(observable[lastWatchOptions], watchQueryOptions)) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions));\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        resultData.previousData =\n            ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n        resultData.current = void 0;\n    }\n    observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n    if (_a === void 0) { _a = {}; }\n    var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, \n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n    return function (observable) {\n        // This Object.assign is safe because otherOptions is a fresh ...rest object\n        // that did not exist until just now, so modifications are still allowed.\n        var watchQueryOptions = Object.assign(otherOptions, { query: query });\n        if (isSyncSSR &&\n            (watchQueryOptions.fetchPolicy === \"network-only\" ||\n                watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            // this behavior was added to react-apollo without explanation in this PR\n            // https://github.com/apollographql/react-apollo/pull/1579\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            // When skipping, we set watchQueryOptions.fetchPolicy initially to\n            // \"standby\", but we also need/want to preserve the initial non-standby\n            // fetchPolicy that would have been used if not skipping.\n            watchQueryOptions.initialFetchPolicy =\n                watchQueryOptions.initialFetchPolicy ||\n                    watchQueryOptions.fetchPolicy ||\n                    getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) ||\n                    getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n        }\n        return watchQueryOptions;\n    };\n}\nexport function getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n    var toMerge = [];\n    var globalDefaults = client.defaultOptions.watchQuery;\n    if (globalDefaults)\n        toMerge.push(globalDefaults);\n    if (queryHookOptions.defaultOptions) {\n        toMerge.push(queryHookOptions.defaultOptions);\n    }\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(observable && observable.options, watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n}\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n    var previousResult = resultData.current;\n    if (previousResult && previousResult.data) {\n        resultData.previousData = previousResult.data;\n    }\n    if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n        // Until a set naming convention for networkError and graphQLErrors is\n        // decided upon, we map errors (graphQLErrors) to the error options.\n        // TODO: Is it possible for both result.error and result.errors to be\n        // defined here?\n        nextResult.error = new ApolloError({ graphQLErrors: nextResult.errors });\n    }\n    resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client);\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    forceUpdate();\n    handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n    if (!result.loading) {\n        var error_1 = toApolloError(result);\n        // wait a tick in case we are in the middle of rendering a component\n        Promise.resolve()\n            .then(function () {\n            if (error_1) {\n                callbacks.onError(error_1);\n            }\n            else if (result.data &&\n                previousNetworkStatus !== result.networkStatus &&\n                result.networkStatus === NetworkStatus.ready) {\n                callbacks.onCompleted(result.data);\n            }\n        })\n            .catch(function (error) {\n            globalThis.__DEV__ !== false && invariant.warn(error);\n        });\n    }\n}\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!resultData.current) {\n        // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n        // this could call unsafeHandlePartialRefetch\n        setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function () { }, callbacks);\n    }\n    return resultData.current;\n}\nexport function getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n    var _a;\n    return ((queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) ||\n        ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n        \"cache-first\");\n}\nexport function toApolloError(result) {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n        : result.error;\n}\nexport function toQueryResult(result, previousData, observable, client) {\n    var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n    var queryResult = __assign(__assign({ data: data }, resultWithoutPartial), { client: client, observable: observable, variables: observable.variables, called: result !== ssrDisabledResult && result !== skipStandbyResult, previousData: previousData });\n    return queryResult;\n}\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (result.partial &&\n        partialRefetch &&\n        !result.loading &&\n        (!result.data || Object.keys(result.data).length === 0) &&\n        observable.options.fetchPolicy !== \"cache-only\") {\n        observable.refetch();\n        return __assign(__assign({}, result), { loading: true, networkStatus: NetworkStatus.refetch });\n    }\n    return result;\n}\nvar ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n});\nvar skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n});\nfunction bindObservableMethods(observable) {\n    return {\n        refetch: observable.refetch.bind(observable),\n        reobserve: observable.reobserve.bind(observable),\n        fetchMore: observable.fetchMore.bind(observable),\n        updateQuery: observable.updateQuery.bind(observable),\n        startPolling: observable.startPolling.bind(observable),\n        stopPolling: observable.stopPolling.bind(observable),\n        subscribeToMore: observable.subscribeToMore.bind(observable),\n    };\n}\n//# sourceMappingURL=useQuery.js.map", "import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { createMakeWatchQueryOptions, getDefaultFetchPolicy, getObsQueryOptions, toQueryResult, useQueryInternals, } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\n    \"refetch\",\n    \"reobserve\",\n    \"fetchMore\",\n    \"updateQuery\",\n    \"startPolling\",\n    \"stopPolling\",\n    \"subscribeToMore\",\n];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery(query, options) {\n    var _a;\n    var execOptionsRef = React.useRef();\n    var optionsRef = React.useRef();\n    var queryRef = React.useRef();\n    var merged = mergeOptions(options, execOptionsRef.current || {});\n    var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n    // Use refs to track options and the used query to ensure the `execute`\n    // function remains referentially stable between renders.\n    optionsRef.current = options;\n    queryRef.current = document;\n    var queryHookOptions = __assign(__assign({}, merged), { skip: !execOptionsRef.current });\n    var _b = useQueryInternals(document, queryHookOptions), obsQueryFields = _b.obsQueryFields, useQueryResult = _b.result, client = _b.client, resultData = _b.resultData, observable = _b.observable, onQueryExecuted = _b.onQueryExecuted;\n    var initialFetchPolicy = observable.options.initialFetchPolicy ||\n        getDefaultFetchPolicy(queryHookOptions.defaultOptions, client.defaultOptions);\n    var forceUpdateState = React.useReducer(function (tick) { return tick + 1; }, 0)[1];\n    // We use useMemo here to make sure the eager methods have a stable identity.\n    var eagerMethods = React.useMemo(function () {\n        var eagerMethods = {};\n        var _loop_1 = function (key) {\n            var method = obsQueryFields[key];\n            eagerMethods[key] = function () {\n                if (!execOptionsRef.current) {\n                    execOptionsRef.current = Object.create(null);\n                    // Only the first time populating execOptionsRef.current matters here.\n                    forceUpdateState();\n                }\n                // @ts-expect-error this is just too generic to type\n                return method.apply(this, arguments);\n            };\n        };\n        for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n            var key = EAGER_METHODS_1[_i];\n            _loop_1(key);\n        }\n        return eagerMethods;\n    }, [forceUpdateState, obsQueryFields]);\n    var called = !!execOptionsRef.current;\n    var result = React.useMemo(function () { return (__assign(__assign(__assign({}, useQueryResult), eagerMethods), { called: called })); }, [useQueryResult, eagerMethods, called]);\n    var execute = React.useCallback(function (executeOptions) {\n        execOptionsRef.current =\n            executeOptions ? __assign(__assign({}, executeOptions), { fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy }) : {\n                fetchPolicy: initialFetchPolicy,\n            };\n        var options = mergeOptions(optionsRef.current, __assign({ query: queryRef.current }, execOptionsRef.current));\n        var promise = executeQuery(resultData, observable, client, document, __assign(__assign({}, options), { skip: false }), onQueryExecuted).then(function (queryResult) { return Object.assign(queryResult, eagerMethods); });\n        // Because the return value of `useLazyQuery` is usually floated, we need\n        // to catch the promise to prevent unhandled rejections.\n        promise.catch(function () { });\n        return promise;\n    }, [\n        client,\n        document,\n        eagerMethods,\n        initialFetchPolicy,\n        observable,\n        resultData,\n        onQueryExecuted,\n    ]);\n    var executeRef = React.useRef(execute);\n    useIsomorphicLayoutEffect(function () {\n        executeRef.current = execute;\n    });\n    var stableExecute = React.useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return executeRef.current.apply(executeRef, args);\n    }, []);\n    return [stableExecute, result];\n}\nfunction executeQuery(resultData, observable, client, currentQuery, options, onQueryExecuted) {\n    var query = options.query || currentQuery;\n    var watchQueryOptions = createMakeWatchQueryOptions(client, query, options, false)(observable);\n    var concast = observable.reobserveAsConcast(getObsQueryOptions(observable, client, options, watchQueryOptions));\n    onQueryExecuted(watchQueryOptions);\n    return new Promise(function (resolve) {\n        var result;\n        // Subscribe to the concast independently of the ObservableQuery in case\n        // the component gets unmounted before the promise resolves. This prevents\n        // the concast from terminating early and resolving with `undefined` when\n        // there are no more subscribers for the concast.\n        concast.subscribe({\n            next: function (value) {\n                result = value;\n            },\n            error: function () {\n                resolve(toQueryResult(observable.getCurrentResult(), resultData.previousData, observable, client));\n            },\n            complete: function () {\n                resolve(toQueryResult(result, resultData.previousData, observable, client));\n            },\n        });\n    });\n}\n//# sourceMappingURL=useLazyQuery.js.map", "import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation(mutation, options) {\n    var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n    verifyDocumentType(mutation, DocumentType.Mutation);\n    var _a = React.useState({\n        called: false,\n        loading: false,\n        client: client,\n    }), result = _a[0], setResult = _a[1];\n    var ref = React.useRef({\n        result: result,\n        mutationId: 0,\n        isMounted: true,\n        client: client,\n        mutation: mutation,\n        options: options,\n    });\n    useIsomorphicLayoutEffect(function () {\n        Object.assign(ref.current, { client: client, options: options, mutation: mutation });\n    });\n    var execute = React.useCallback(function (executeOptions) {\n        if (executeOptions === void 0) { executeOptions = {}; }\n        var _a = ref.current, options = _a.options, mutation = _a.mutation;\n        var baseOptions = __assign(__assign({}, options), { mutation: mutation });\n        var client = executeOptions.client || ref.current.client;\n        if (!ref.current.result.loading &&\n            !baseOptions.ignoreResults &&\n            ref.current.isMounted) {\n            setResult((ref.current.result = {\n                loading: true,\n                error: void 0,\n                data: void 0,\n                called: true,\n                client: client,\n            }));\n        }\n        var mutationId = ++ref.current.mutationId;\n        var clientOptions = mergeOptions(baseOptions, executeOptions);\n        return client\n            .mutate(clientOptions)\n            .then(function (response) {\n            var _a, _b;\n            var data = response.data, errors = response.errors;\n            var error = errors && errors.length > 0 ?\n                new ApolloError({ graphQLErrors: errors })\n                : void 0;\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (error && onError) {\n                onError(error, clientOptions);\n            }\n            if (mutationId === ref.current.mutationId &&\n                !clientOptions.ignoreResults) {\n                var result_1 = {\n                    called: true,\n                    loading: false,\n                    data: data,\n                    error: error,\n                    client: client,\n                };\n                if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n                    setResult((ref.current.result = result_1));\n                }\n            }\n            var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n            if (!error) {\n                onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n            }\n            return response;\n        })\n            .catch(function (error) {\n            var _a;\n            if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n                var result_2 = {\n                    loading: false,\n                    error: error,\n                    data: void 0,\n                    called: true,\n                    client: client,\n                };\n                if (!equal(ref.current.result, result_2)) {\n                    setResult((ref.current.result = result_2));\n                }\n            }\n            var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n            if (onError) {\n                onError(error, clientOptions);\n                // TODO(brian): why are we returning this here???\n                return { data: void 0, errors: error };\n            }\n            throw error;\n        });\n    }, []);\n    var reset = React.useCallback(function () {\n        if (ref.current.isMounted) {\n            var result_3 = {\n                called: false,\n                loading: false,\n                client: ref.current.client,\n            };\n            Object.assign(ref.current, { mutationId: 0, result: result_3 });\n            setResult(result_3);\n        }\n    }, []);\n    React.useEffect(function () {\n        var current = ref.current;\n        current.isMounted = true;\n        return function () {\n            current.isMounted = false;\n        };\n    }, []);\n    return [execute, __assign({ reset: reset }, result)];\n}\n//# sourceMappingURL=useMutation.js.map", "import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription(subscription, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var hasIssuedDeprecationWarningRef = React.useRef(false);\n    var client = useApolloClient(options.client);\n    verifyDocumentType(subscription, DocumentType.Subscription);\n    if (!hasIssuedDeprecationWarningRef.current) {\n        hasIssuedDeprecationWarningRef.current = true;\n        if (options.onSubscriptionData) {\n            globalThis.__DEV__ !== false && invariant.warn(options.onData ? 52 : 53);\n        }\n        if (options.onSubscriptionComplete) {\n            globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 54 : 55);\n        }\n    }\n    var skip = options.skip, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, shouldResubscribe = options.shouldResubscribe, context = options.context, extensions = options.extensions, ignoreResults = options.ignoreResults;\n    var variables = useDeepMemo(function () { return options.variables; }, [options.variables]);\n    var recreate = function () {\n        return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n    };\n    var _a = React.useState(options.skip ? null : recreate), observable = _a[0], setObservable = _a[1];\n    var recreateRef = React.useRef(recreate);\n    useIsomorphicLayoutEffect(function () {\n        recreateRef.current = recreate;\n    });\n    if (skip) {\n        if (observable) {\n            setObservable((observable = null));\n        }\n    }\n    else if (!observable ||\n        ((client !== observable.__.client ||\n            subscription !== observable.__.query ||\n            fetchPolicy !== observable.__.fetchPolicy ||\n            errorPolicy !== observable.__.errorPolicy ||\n            !equal(variables, observable.__.variables)) &&\n            (typeof shouldResubscribe === \"function\" ?\n                !!shouldResubscribe(options)\n                : shouldResubscribe) !== false)) {\n        setObservable((observable = recreate()));\n    }\n    var optionsRef = React.useRef(options);\n    React.useEffect(function () {\n        optionsRef.current = options;\n    });\n    var fallbackLoading = !skip && !ignoreResults;\n    var fallbackResult = React.useMemo(function () { return ({\n        loading: fallbackLoading,\n        error: void 0,\n        data: void 0,\n        variables: variables,\n    }); }, [fallbackLoading, variables]);\n    var ignoreResultsRef = React.useRef(ignoreResults);\n    useIsomorphicLayoutEffect(function () {\n        // We cannot reference `ignoreResults` directly in the effect below\n        // it would add a dependency to the `useEffect` deps array, which means the\n        // subscription would be recreated if `ignoreResults` changes\n        // As a result, on resubscription, the last result would be re-delivered,\n        // rendering the component one additional time, and re-triggering `onData`.\n        // The same applies to `fetchPolicy`, which results in a new `observable`\n        // being created. We cannot really avoid it in that case, but we can at least\n        // avoid it for `ignoreResults`.\n        ignoreResultsRef.current = ignoreResults;\n    });\n    var ret = useSyncExternalStore(React.useCallback(function (update) {\n        if (!observable) {\n            return function () { };\n        }\n        var subscriptionStopped = false;\n        var variables = observable.__.variables;\n        var client = observable.__.client;\n        var subscription = observable.subscribe({\n            next: function (fetchResult) {\n                var _a, _b;\n                if (subscriptionStopped) {\n                    return;\n                }\n                var result = {\n                    loading: false,\n                    // TODO: fetchResult.data can be null but SubscriptionResult.data\n                    // expects TData | undefined only\n                    data: fetchResult.data,\n                    error: toApolloError(fetchResult),\n                    variables: variables,\n                };\n                observable.__.setResult(result);\n                if (!ignoreResultsRef.current)\n                    update();\n                if (result.error) {\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n                }\n                else if (optionsRef.current.onData) {\n                    optionsRef.current.onData({\n                        client: client,\n                        data: result,\n                    });\n                }\n                else if (optionsRef.current.onSubscriptionData) {\n                    optionsRef.current.onSubscriptionData({\n                        client: client,\n                        subscriptionData: result,\n                    });\n                }\n            },\n            error: function (error) {\n                var _a, _b;\n                error =\n                    error instanceof ApolloError ? error : (new ApolloError({ protocolErrors: [error] }));\n                if (!subscriptionStopped) {\n                    observable.__.setResult({\n                        loading: false,\n                        data: void 0,\n                        error: error,\n                        variables: variables,\n                    });\n                    if (!ignoreResultsRef.current)\n                        update();\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n                }\n            },\n            complete: function () {\n                if (!subscriptionStopped) {\n                    if (optionsRef.current.onComplete) {\n                        optionsRef.current.onComplete();\n                    }\n                    else if (optionsRef.current.onSubscriptionComplete) {\n                        optionsRef.current.onSubscriptionComplete();\n                    }\n                }\n            },\n        });\n        return function () {\n            // immediately stop receiving subscription values, but do not unsubscribe\n            // until after a short delay in case another useSubscription hook is\n            // reusing the same underlying observable and is about to subscribe\n            subscriptionStopped = true;\n            setTimeout(function () {\n                subscription.unsubscribe();\n            });\n        };\n    }, [observable]), function () {\n        return observable && !skip && !ignoreResults ?\n            observable.__.result\n            : fallbackResult;\n    });\n    return React.useMemo(function () { return (__assign(__assign({}, ret), { restart: function () {\n            invariant(!optionsRef.current.skip, 56);\n            setObservable(recreateRef.current());\n        } })); }, [ret]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n    var options = {\n        query: query,\n        variables: variables,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy,\n        context: context,\n        extensions: extensions,\n    };\n    var __ = __assign(__assign({}, options), { client: client, result: {\n            loading: true,\n            data: void 0,\n            error: void 0,\n            variables: variables,\n        }, setResult: function (result) {\n            __.result = result;\n        } });\n    var observable = null;\n    return Object.assign(new Observable(function (observer) {\n        // lazily start the subscription when the first observer subscribes\n        // to get around strict mode\n        if (!observable) {\n            observable = client.subscribe(options);\n        }\n        var sub = observable.subscribe(observer);\n        return function () { return sub.unsubscribe(); };\n    }), {\n        /**\n         * A tracking object to store details about the observable and the latest result of the subscription.\n         */\n        __: __,\n    });\n}\n//# sourceMappingURL=useSubscription.js.map", "import * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */\nexport function useReactiveVar(rv) {\n    return useSyncExternalStore(React.useCallback(function (update) {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n            update();\n            rv.onNextChange(onNext);\n        });\n    }, [rv]), rv, rv);\n}\n//# sourceMappingURL=useReactiveVar.js.map", "import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useLazyRef, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n    return wrapHook(\"useFragment\", _useFragment, useApolloClient(options.client))(options);\n}\nfunction _useFragment(options) {\n    var cache = useApolloClient(options.client).cache;\n    var diffOptions = useDeepMemo(function () {\n        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n        return __assign(__assign({}, rest), { returnPartialData: true, id: typeof from === \"string\" ? from : cache.identify(from), query: cache[\"getFragmentDoc\"](fragment, fragmentName), optimistic: optimistic });\n    }, [options]);\n    var resultRef = useLazyRef(function () {\n        return diffToResult(cache.diff(diffOptions));\n    });\n    var stableOptions = useDeepMemo(function () { return options; }, [options]);\n    // Since .next is async, we need to make sure that we\n    // get the correct diff on the next render given new diffOptions\n    React.useMemo(function () {\n        resultRef.current = diffToResult(cache.diff(diffOptions));\n    }, [diffOptions, cache]);\n    // Used for both getSnapshot and getServerSnapshot\n    var getSnapshot = React.useCallback(function () { return resultRef.current; }, []);\n    return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n        var lastTimeout = 0;\n        var subscription = cache.watchFragment(stableOptions).subscribe({\n            next: function (result) {\n                if (equal(result, resultRef.current))\n                    return;\n                resultRef.current = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate);\n            },\n        });\n        return function () {\n            subscription.unsubscribe();\n            clearTimeout(lastTimeout);\n        };\n    }, [cache, stableOptions]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n    var result = {\n        data: diff.result,\n        complete: !!diff.complete,\n    };\n    if (diff.missing) {\n        result.missing = mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n    }\n    return result;\n}\n//# sourceMappingURL=useFragment.js.map", "export var skipToken = Symbol.for(\"apollo.skipToken\");\n//# sourceMappingURL=constants.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return wrapHook(\"useSuspenseQuery\", _useSuspenseQuery, useApolloClient(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n    var client = useApolloClient(options.client);\n    var suspenseCache = getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({\n        client: client,\n        query: query,\n        options: options,\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var cacheKey = __spreadArray([\n        query,\n        canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\n    // This saves us a re-execution of the render function when a variable changed.\n    if (current[0] !== queryRef.key) {\n        current[0] = queryRef.key;\n        current[1] = queryRef.promise;\n    }\n    var promise = current[1];\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n    }\n    React.useEffect(function () {\n        var dispose = queryRef.retain();\n        var removeListener = queryRef.listen(function (promise) {\n            setPromise([queryRef.key, promise]);\n        });\n        return function () {\n            removeListener();\n            dispose();\n        };\n    }, [queryRef]);\n    var skipResult = React.useMemo(function () {\n        var error = toApolloError(queryRef.result);\n        return {\n            loading: false,\n            data: queryRef.result.data,\n            networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n            error: error,\n        };\n    }, [queryRef.result]);\n    var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n    var fetchMore = React.useCallback(function (options) {\n        var promise = queryRef.fetchMore(options);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var refetch = React.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var subscribeToMore = queryRef.observable.subscribeToMore;\n    return React.useMemo(function () {\n        return {\n            client: client,\n            data: result.data,\n            error: toApolloError(result),\n            networkStatus: result.networkStatus,\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: subscribeToMore,\n        };\n    }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n    verifyDocumentType(query, DocumentType.Query);\n    validateFetchPolicy(fetchPolicy);\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n    if (fetchPolicy === void 0) { fetchPolicy = \"cache-first\"; }\n    var supportedFetchPolicies = [\n        \"cache-first\",\n        \"network-only\",\n        \"no-cache\",\n        \"cache-and-network\",\n    ];\n    invariant(supportedFetchPolicies.includes(fetchPolicy), 57, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n    if (fetchPolicy === \"no-cache\" && returnPartialData) {\n        globalThis.__DEV__ !== false && invariant.warn(58);\n    }\n}\nexport function toApolloError(result) {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n        : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n    var client = _a.client, query = _a.query, options = _a.options;\n    return useDeepMemo(function () {\n        var _a;\n        if (options === skipToken) {\n            return { query: query, fetchPolicy: \"standby\" };\n        }\n        var fetchPolicy = options.fetchPolicy ||\n            ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            \"cache-first\";\n        var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy: fetchPolicy, query: query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\n        if (globalThis.__DEV__ !== false) {\n            validateOptions(watchQueryOptions);\n        }\n        // Assign the updated fetch policy after our validation since `standby` is\n        // not a supported fetch policy on its own without the use of `skip`.\n        if (options.skip) {\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        return watchQueryOptions;\n    }, [client, options, query]);\n}\n//# sourceMappingURL=useSuspenseQuery.js.map", "import { __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef, } from \"../internal/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nexport function useBackgroundQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return wrapHook(\"useBackgroundQuery\", _useBackgroundQuery, useApolloClient(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useBackgroundQuery(query, options) {\n    var client = useApolloClient(options.client);\n    var suspenseCache = getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({ client: client, query: query, options: options });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    // This ref tracks the first time query execution is enabled to determine\n    // whether to return a query ref or `undefined`. When initialized\n    // in a skipped state (either via `skip: true` or `skipToken`) we return\n    // `undefined` for the `queryRef` until the query has been enabled. Once\n    // enabled, a query ref is always returned regardless of whether the query is\n    // skipped again later.\n    var didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n    didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n    var cacheKey = __spreadArray([\n        query,\n        canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React.useState(wrapQueryRef(queryRef)), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    if (unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n        setWrappedQueryRef(wrapQueryRef(queryRef));\n    }\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        var promise = queryRef.applyOptions(watchQueryOptions);\n        updateWrappedQueryRef(wrappedQueryRef, promise);\n    }\n    // This prevents issues where rerendering useBackgroundQuery after the\n    // queryRef has been disposed would cause the hook to return a new queryRef\n    // instance since disposal also removes it from the suspense cache. We add\n    // the queryRef back in the suspense cache so that the next render will reuse\n    // this queryRef rather than initializing a new instance.\n    React.useEffect(function () {\n        // Since the queryRef is disposed async via `setTimeout`, we have to wait a\n        // tick before checking it and adding back to the suspense cache.\n        var id = setTimeout(function () {\n            if (queryRef.disposed) {\n                suspenseCache.add(cacheKey, queryRef);\n            }\n        });\n        return function () { return clearTimeout(id); };\n        // Omitting the deps is intentional. This avoids stale closures and the\n        // conditional ensures we aren't running the logic on each render.\n    });\n    var fetchMore = React.useCallback(function (options) {\n        var promise = queryRef.fetchMore(options);\n        setWrappedQueryRef(wrapQueryRef(queryRef));\n        return promise;\n    }, [queryRef]);\n    var refetch = React.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setWrappedQueryRef(wrapQueryRef(queryRef));\n        return promise;\n    }, [queryRef]);\n    React.useEffect(function () { return queryRef.softRetain(); }, [queryRef]);\n    return [\n        didFetchResult.current ? wrappedQueryRef : void 0,\n        {\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: queryRef.observable.subscribeToMore,\n        },\n    ];\n}\n//# sourceMappingURL=useBackgroundQuery.js.map", "import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { assertWrappedQueryRef, getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef, } from \"../internal/index.js\";\nimport { useRenderGuard } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nexport function useLoadableQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var client = useApolloClient(options.client);\n    var suspenseCache = getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({ client: client, query: query, options: options });\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var _b = React.useState(null), queryRef = _b[0], setQueryRef = _b[1];\n    assertWrappedQueryRef(queryRef);\n    var internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n    if (queryRef && (internalQueryRef === null || internalQueryRef === void 0 ? void 0 : internalQueryRef.didChangeOptions(watchQueryOptions))) {\n        var promise = internalQueryRef.applyOptions(watchQueryOptions);\n        updateWrappedQueryRef(queryRef, promise);\n    }\n    var calledDuringRender = useRenderGuard();\n    var fetchMore = React.useCallback(function (options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.fetchMore(options);\n        setQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var refetch = React.useCallback(function (options) {\n        if (!internalQueryRef) {\n            throw new Error(\"The query has not been loaded. Please load the query.\");\n        }\n        var promise = internalQueryRef.refetch(options);\n        setQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var loadQuery = React.useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        invariant(!calledDuringRender(), 50);\n        var variables = args[0];\n        var cacheKey = __spreadArray([\n            query,\n            canonicalStringify(variables)\n        ], [].concat(queryKey), true);\n        var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n            return client.watchQuery(__assign(__assign({}, watchQueryOptions), { variables: variables }));\n        });\n        setQueryRef(wrapQueryRef(queryRef));\n    }, [\n        query,\n        queryKey,\n        suspenseCache,\n        watchQueryOptions,\n        calledDuringRender,\n        client,\n    ]);\n    var subscribeToMore = React.useCallback(function (options) {\n        invariant(internalQueryRef, 51);\n        return internalQueryRef.observable.subscribeToMore(options);\n    }, [internalQueryRef]);\n    var reset = React.useCallback(function () {\n        setQueryRef(null);\n    }, []);\n    return [loadQuery, queryRef, { fetchMore: fetchMore, refetch: refetch, reset: reset, subscribeToMore: subscribeToMore }];\n}\n//# sourceMappingURL=useLoadableQuery.js.map", "import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef, } from \"../internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers(queryRef) {\n    var unwrapped = unwrapQueryRef(queryRef);\n    return wrapHook(\"useQueryRefHandlers\", _useQueryRefHandlers, unwrapped ?\n        unwrapped[\"observable\"]\n        // in the case of a \"transported\" queryRef object, we need to use the\n        // client that's available to us at the current position in the React tree\n        // that ApolloClient will then have the job to recreate a real queryRef from\n        // the transported object\n        // This is just a context read - it's fine to do this conditionally.\n        // This hook wrapper also shouldn't be optimized by React Compiler.\n        // eslint-disable-next-line react-compiler/react-compiler\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        : useApolloClient())(queryRef);\n}\nfunction _useQueryRefHandlers(queryRef) {\n    assertWrappedQueryRef(queryRef);\n    var _a = React.useState(queryRef), previousQueryRef = _a[0], setPreviousQueryRef = _a[1];\n    var _b = React.useState(queryRef), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    var internalQueryRef = unwrapQueryRef(queryRef);\n    // To ensure we can support React transitions, this hook needs to manage the\n    // queryRef state and apply React's state value immediately to the existing\n    // queryRef since this hook doesn't return the queryRef directly\n    if (previousQueryRef !== queryRef) {\n        setPreviousQueryRef(queryRef);\n        setWrappedQueryRef(queryRef);\n    }\n    else {\n        updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n    }\n    var refetch = React.useCallback(function (variables) {\n        var promise = internalQueryRef.refetch(variables);\n        setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var fetchMore = React.useCallback(function (options) {\n        var promise = internalQueryRef.fetchMore(options);\n        setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    return {\n        refetch: refetch,\n        fetchMore: fetchMore,\n        subscribeToMore: internalQueryRef.observable.subscribeToMore,\n    };\n}\n//# sourceMappingURL=useQueryRefHandlers.js.map", "import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useReadQuery(queryRef) {\n    var unwrapped = unwrapQueryRef(queryRef);\n    return wrapHook(\"useReadQuery\", _useReadQuery, unwrapped ?\n        unwrapped[\"observable\"]\n        // in the case of a \"transported\" queryRef object, we need to use the\n        // client that's available to us at the current position in the React tree\n        // that ApolloClient will then have the job to recreate a real queryRef from\n        // the transported object\n        // This is just a context read - it's fine to do this conditionally.\n        // This hook wrapper also shouldn't be optimized by React Compiler.\n        // eslint-disable-next-line react-compiler/react-compiler\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        : useApolloClient())(queryRef);\n}\nfunction _useReadQuery(queryRef) {\n    assertWrappedQueryRef(queryRef);\n    var internalQueryRef = React.useMemo(function () { return unwrapQueryRef(queryRef); }, [queryRef]);\n    var getPromise = React.useCallback(function () { return getWrappedPromise(queryRef); }, [queryRef]);\n    if (internalQueryRef.disposed) {\n        internalQueryRef.reinitialize();\n        updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n    }\n    React.useEffect(function () { return internalQueryRef.retain(); }, [internalQueryRef]);\n    var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n        return internalQueryRef.listen(function (promise) {\n            updateWrappedQueryRef(queryRef, promise);\n            forceUpdate();\n        });\n    }, [internalQueryRef, queryRef]), getPromise, getPromise);\n    var result = __use(promise);\n    return React.useMemo(function () {\n        return {\n            data: result.data,\n            networkStatus: result.networkStatus,\n            error: toApolloError(result),\n        };\n    }, [result]);\n}\n//# sourceMappingURL=useReadQuery.js.map"],
  "mappings": "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",
  "names": ["result", "from", "v", "import_dist", "d", "b", "__assign", "InvariantError", "invariant", "import_dist", "_a", "import_dist", "import_dist", "import_dist", "value", "import_dist", "_a", "import_dist", "invariant", "import_dist", "import_dist", "version", "init_version", "import_dist", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "invariant", "import_dist", "init_invariant", "import_dist", "import_dist", "import_dist", "import_dist", "OperationTypeNode", "import_dist", "DirectiveLocation", "import_dist", "Kind", "import_dist", "indent", "result", "import_dist", "import_dist", "TokenKind", "import_dist", "import_dist", "import_dist", "instanceOf", "import_dist", "parser", "import_dist", "import_dist", "import_dist", "result", "import_dist", "result", "import_dist", "result", "import_dist", "isDigit", "import_dist", "import_dist", "import_dist", "import_dist", "root", "result", "import_dist", "wrap", "import_dist", "import_dist", "import_dist", "import_dist", "parseValue", "enumValue", "import_dist", "import_dist", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "import_dist", "init_invariant", "invariant", "TypeKind", "import_dist", "import_dist", "import_dist", "result", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "result", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "import_dist", "import_dist", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "result", "invariant", "import_dist", "init_invariant", "import_dist", "import_dist", "operationName", "import_dist", "result", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "operationName", "import_dist", "import_dist", "import_dist", "import_dist", "isVariable", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "init_validate", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "result", "operationName", "getFieldDef", "invariant", "collectSubfields", "import_dist", "init_invariant", "result", "operationName", "syntaxError", "import_dist", "init_validate", "import_dist", "import_dist", "import_dist", "result", "import_dist", "getFieldDef", "import_dist", "import_dist", "invariant", "import_dist", "init_invariant", "import_dist", "import_dist", "init_validate", "import_dist", "import_dist", "operationName", "import_dist", "import_dist", "result", "invariant", "import_dist", "init_invariant", "getNamedType", "import_dist", "invariant", "getNamedType", "import_dist", "init_invariant", "init_validate", "import_dist", "init_validate", "sortFields", "invariant", "import_dist", "init_invariant", "invariant", "import_dist", "init_invariant", "import_dist", "operationName", "import_dist", "import_dist", "import_dist", "stringifyValue", "invariant", "import_dist", "init_invariant", "BreakingChangeType", "DangerousChangeType", "import_dist", "version", "import_dist", "init_graphql", "init_version", "_a", "invariant", "root", "result", "import_dist", "init_directives", "init_graphql", "import_dist", "hasOwnProperty", "import_dist", "import_dist", "invariant", "import_dist", "import_dist", "defaultDispose", "lib_exports", "import_dist", "init_lib", "cache", "import_dist", "init_lib", "import_dist", "_a", "cache", "key", "import_dist", "canonicalStringify", "_a", "result", "import_dist", "invariant", "_a", "import_dist", "isObjRef", "import_dist", "defaultMakeData", "forEach", "slice", "hasOwnProperty", "Trie", "init_lib", "maybe", "import_dist", "Slot", "result", "import_dist", "init_lib", "import_dist", "init_lib", "import_dist", "hasOwnProperty", "_a", "import_dist", "dep", "subscribe", "dep", "hasOwnProperty", "import_dist", "lib_exports", "Trie", "wrap", "subscribe", "cache", "import_dist", "init_lib", "import_dist", "init_lib", "DocumentTransform", "wrap", "invariant", "import_dist", "print", "init_graphql", "result", "import_dist", "invariant", "init_graphql", "import_dist", "hasOwnProperty", "DeepMerger", "result", "import_dist", "Subscription", "SubscriptionObserver", "Observable", "subscribe", "forEach", "concat", "value", "from", "root", "result", "Symbol", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "result", "import_dist", "import_dist", "isPromiseLike", "Concast", "result", "_a", "sources", "result", "_a", "import_dist", "result", "import_dist", "result", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "init_utilities", "init_directives", "import_dist", "init_utilities", "invariant", "import_dist", "import_dist", "init_utilities", "import_dist", "result", "_a", "import_dist", "import_dist", "init_utilities", "result", "init_graphql", "import_dist", "import_dist", "init_utilities", "ApolloLink", "invariant", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "execute", "init_execute", "import_dist", "import_dist", "init_execute", "lib_exports", "toString", "hasOwnProperty", "import_dist", "init_lib", "_a", "init_lib", "init_utilities", "init_lib", "init_utilities", "ApolloCache", "wrap", "from", "_a", "diff", "result", "cache", "MissingFieldError", "_a", "_a", "result", "import_dist", "init_helpers", "init_utilities", "init_lib", "init_utilities", "init_helpers", "EntityStore", "invariant", "from", "_a", "root", "CacheGroup", "Root", "Layer", "Stump", "init_utilities", "init_helpers", "ObjectCanon", "result", "invariant", "init_graphql", "init_lib", "init_utilities", "init_helpers", "StoreReader", "wrap", "_a", "cache", "caches", "import_dist", "init_lib", "from", "invariant", "_a", "d", "import_dist", "init_utilities", "init_helpers", "_a", "from", "invariant", "init_utilities", "init_helpers", "Policies", "existing", "incoming", "result", "supertypeSet", "_a", "invariant", "init_lib", "init_graphql", "init_utilities", "init_helpers", "StoreWriter", "cache", "result", "dataId", "context", "value", "selectionSet", "from", "init_lib", "init_utilities", "init_helpers", "InMemoryCache", "wrap", "_a", "print", "invariant", "diff", "result", "import_dist", "Cache", "init_graphql", "init_lib", "init_utilities", "FragmentRegistry", "wrap", "enqueue", "root", "import_dist", "init_types", "import_dist", "init_cache", "init_utilities", "init_helpers", "init_types", "_a", "import_dist", "import_dist", "init_utilities", "import_dist", "init_utilities", "import_dist", "init_utilities", "import_dist", "init_utilities", "result", "init_utilities", "err", "ApolloError", "_a", "_a", "result", "hasOwnProperty", "import_dist", "operationName", "print", "init_utilities", "import_dist", "import_dist", "import_dist", "import_dist", "init_utilities", "_a", "print", "version", "_b", "invariant", "_c", "parseError", "HttpLink", "import_dist", "import_dist", "NetworkStatus", "_a", "invariant", "hasOwnProperty", "init_lib", "init_utilities", "ObservableQuery", "result", "diff", "cache", "info", "cache", "result", "init_lib", "init_utilities", "QueryInfo", "diff", "_a", "hasOwnProperty", "init_lib", "init_utilities", "init_cache", "QueryManager", "_a", "invariant", "hasClientExports", "self", "result", "cache", "diff", "DELETE", "variables", "print", "execute", "sourcesWithInfo", "networkStatus", "data", "init_graphql", "init_utilities", "init_cache", "LocalState", "_a", "cache", "result", "execute", "invariant", "node", "init_utilities", "ApolloClient", "cache", "_a", "defaultOptions", "invariant", "execute", "result", "import_dist", "init_types", "normalize", "result", "lib_default", "init_graphql", "import_dist", "init_core", "init_types", "init_cache", "init_utilities", "init_lib", "module", "import_dist", "invariant", "import_dist", "init_utilities", "React", "_a", "invariant", "import_dist", "React", "invariant", "import_dist", "init_context", "invariant", "import_dist", "React", "init_context", "_a", "import_dist", "React", "init_utilities", "subscribe", "invariant", "invariant", "_a", "import_dist", "init_parser", "init_utilities", "DocumentType", "import_dist", "React", "init_lib", "import_dist", "React", "init_utilities", "noop", "import_dist", "React", "import_dist", "React", "import_dist", "React", "realHook", "init_utilities", "__use", "import_dist", "import_dist", "noop", "_a", "result", "internalState", "hasOwnProperty", "defaultOptions", "invariant", "React", "init_lib", "init_utilities", "init_context", "init_core", "init_parser", "_a", "eagerMethods", "key", "result", "execute", "options", "React", "init_utilities", "_a", "result", "setResult", "execute", "options", "mutation", "client", "React", "init_utilities", "init_lib", "init_parser", "invariant", "_a", "variables", "client", "subscription", "result", "React", "init_lib", "init_parser", "init_core", "import_dist", "React", "cache", "from", "_a", "result", "diff", "React", "init_utilities", "init_lib", "_a", "invariant", "init_lib", "init_utilities", "InternalQueryReference", "result", "import_dist", "init_utilities", "SuspenseCache", "_a", "import_dist", "import_dist", "init_internal", "import_dist", "_a", "promise", "toApolloError", "result", "options", "variables", "invariant", "React", "init_core", "init_utilities", "init_parser", "init_internal", "init_cache", "_a", "options", "promise", "variables", "React", "init_internal", "init_cache", "_a", "options", "promise", "invariant", "queryRef", "React", "init_internal", "init_cache", "_a", "import_dist", "React", "init_internal", "promise", "result", "toApolloError", "import_dist", "React", "init_internal", "import_dist", "init_internal", "_a", "import_dist", "init_types", "import_dist", "init_context", "init_parser", "init_types", "execute", "import_dist", "init_core", "version", "maybe", "_a", "prefixCounts", "makeUniqueId", "stringifyForDisplay", "value", "wrap", "getHandledErrorMsg", "getFallbackErrorMsg", "invariant", "originalInvariant", "newInvariantError", "InvariantError", "ApolloErrorMessageHandler", "stringify", "global", "DEV", "shouldInclude", "_a", "getInclusionDirectives", "invariant", "getDirectiveNames", "root", "visit", "hasAnyDirectives", "hasDirectives", "hasAllDirectives", "BREAK", "hasClientExports", "isInclusionDirective", "result", "isReactNative", "maybe", "canUseWeakMap", "canUseWeakSet", "canUseSymbol", "canUseAsyncIteratorSymbol", "canUseDOM", "usingJSDOM", "canUseLayoutEffect", "isNonNullObject", "isPlainObject", "getFragmentQueryDocument", "newInvariantError", "__assign", "__spreadArray", "createFragmentMap", "getFragmentFromSelection", "scheduledCleanup", "schedule", "cache", "AutoCleanedWeakCache", "WeakCache", "AutoCleanedStrongCache", "StrongCache", "cacheSizeSymbol", "cacheSizes", "global", "globalCaches", "registerGlobalCache", "canonicalStringify", "stableObjectReplacer", "sortingMap", "everyKeyInOrder", "key", "makeReference", "isReference", "isDocumentNode", "isStringValue", "isBooleanValue", "isIntValue", "isFloatValue", "isVariable", "isObjectValue", "isListValue", "isEnumValue", "isNullValue", "valueToObjectRepresentation", "storeKeyNameFromField", "getStoreKeyName", "KNOWN_DIRECTIVES", "storeKeyNameStringify", "argumentsObjectFromField", "resultKeyNameFromField", "getTypenameFromResult", "isField", "isInlineFragment", "checkDocument", "getOperationDefinition", "getOperationName", "getFragmentDefinitions", "getQueryDefinition", "getFragmentDefinition", "getMainDefinition", "getDefaultValues", "identity", "DocumentTransform", "Trie", "wrap", "printCache", "print", "origPrint", "isArray", "isNonEmptyArray", "TYPENAME_FIELD", "Kind", "isEmpty", "nullIfDocIsEmpty", "getDirectiveMatcher", "makeInUseGetterFunction", "removeDirectivesFromDocument", "addTypenameToDocument", "removeConnectionDirectiveFromDocument", "removeArgumentsFromDocument", "removeFragmentSpreadFromDocument", "buildQueryFromSelectionSet", "removeClientSetsFromDocument", "isMutationOperation", "isQueryOperation", "isSubscriptionOperation", "hasOwnProperty", "mergeDeep", "mergeDeepArray", "DeepMerger", "defaultReconciler", "concatPagination", "offsetLimitPagination", "relayStylePagination", "extras", "__rest_1", "__rest", "createFulfilledPromise", "createRejectedPromise", "isStatefulPromise", "wrapPromiseWithState", "toString", "cloneDeep", "cloneDeepHelper", "deepFreeze", "shallowFreeze", "maybeDeepFreeze", "iterateObserversSafely", "asyncMap", "Observable", "fixObservableSubclass", "isPromiseLike", "Concast", "__extends", "sources", "isExecutionPatchIncrementalResult", "isExecutionPatchInitialResult", "isExecutionPatchResult", "isApolloPayloadResult", "mergeIncrementalData", "graphQLResultHasError", "getGraphQLErrorsFromResult", "compact", "prefixCounts", "makeUniqueId", "stringifyForDisplay", "value", "mergeOptions", "omitDeep", "stripTypename", "fromError", "Observable", "toPromise", "invariant", "fromPromise", "throwServerError", "result", "validateOperation", "_a", "newInvariantError", "createOperation", "__assign", "transformOperation", "getOperationName", "filterOperationVariables", "visit", "passthrough", "Observable", "toLink", "ApolloLink", "isTerminating", "createOperation", "transformOperation", "validateOperation", "invariant", "newInvariantError", "empty", "from", "split", "concat", "execute", "PROTOCOL_ERRORS_SYMBOL", "graphQLResultHasProtocolErrors", "result", "isApolloError", "generateErrorMessage", "__spreadArray", "err", "isNonNullObject", "ApolloError", "__extends", "_a", "asyncIterator", "_a", "nodeStreamIterator", "canUseAsyncIteratorSymbol", "promiseIterator", "readerIterator", "isNodeResponse", "isReadableStream", "isAsyncIterableIterator", "isStreamableBlob", "isBlob", "isNodeReadableStream", "responseIterator", "isNonNullObject", "isApolloPayloadResult", "hasOwnProperty", "readMultipartBody", "__awaiter", "result", "__generator", "parseHeaders", "parseJsonBody", "__assign", "PROTOCOL_ERRORS_SYMBOL", "throwServerError", "handleError", "parseAndCheckHttpResponse", "serializeFetchParameter", "newInvariantError", "defaultHttpOptions", "defaultHeaders", "defaultOptions", "fallbackHttpConfig", "defaultPrinter", "selectHttpOptionsAndBody", "selectHttpOptionsAndBodyInternal", "__spreadArray", "removeDuplicateHeaders", "operationName", "print", "checkFetcher", "createSignalIfSupported", "selectURI", "rewriteURIForGET", "backupFetch", "maybe", "createHttpLink", "__rest", "ApolloLink", "version", "hasDirectives", "removeClientSetsFromDocument", "fromError", "_b", "filterOperationVariables", "getMainDefinition", "invariant", "_c", "parseError", "Observable", "HttpLink", "__extends", "getInMemoryCacheMemoryInternals", "_getInMemoryCacheMemoryInternals", "getApolloCacheMemoryInternals", "_getApolloCacheMemoryInternals", "getWrapperInformation", "__assign", "transformInfo", "isWrapper", "isDefined", "recurseTransformInfo", "cache", "__spreadArray", "equalByQuery", "_a", "__rest", "equal", "equalBySelectionSet", "getMainDefinition", "createFragmentMap", "getFragmentDefinitions", "shouldInclude", "selectionHasNonreactiveDirective", "isField", "resultKeyNameFromField", "getFragmentFromSelection", "directiveIsNonreactive", "ApolloCache", "wrap", "getFragmentQueryDocument", "cacheSizes", "WeakCache", "from", "Observable", "diff", "result", "mergeDeepArray", "Cache", "MissingFieldError", "__extends", "hasOwn", "isNullish", "defaultDataIdFromObject", "defaultConfig", "normalizeConfig", "compact", "shouldCanonizeResults", "getTypenameFromStoreObject", "isReference", "TypeOrFieldNameRegExp", "fieldNameFromStoreName", "selectionSetMatchesResult", "isNonNullObject", "isArray", "storeValueIsStoreObject", "makeProcessedFieldsMerger", "DeepMerger", "extractFragmentContext", "DELETE", "delModifier", "INVALIDATE", "EntityStore", "maybeDeepFreeze", "makeReference", "Layer", "invariant", "storeObjectReconciler", "root", "CacheGroup", "dep", "Trie", "canUseWeakMap", "makeDepKey", "maybeDependOnExistenceOfEntity", "supportsResultCaching", "Root", "Stump", "shallowCopy", "isObjectOrArray", "ObjectCanon", "canUseWeakSet", "execSelectionSetKeyArgs", "StoreReader", "getDefaultValues", "getQueryDefinition", "canonicalStringify", "firstMissing", "addTypenameToDocument", "Kind", "newInvariantError", "assertSelectionSetForIdValue", "cacheSlot", "Slot", "cacheInfoMap", "getCacheInfo", "forgetCache", "recallCache", "makeVar", "caches", "broadcast", "specifierInfoCache", "lookupSpecifierInfo", "keyFieldsFnFromSpecifier", "collectSpecifierPaths", "extractKeyPath", "extractKey", "keyArgsFnFromSpecifier", "isNonEmptyArray", "d", "argumentsObjectFromField", "getSpecifierPaths", "normalize", "argsFromFieldSpecifier", "nullKeyFieldsFn", "simpleKeyArgsFn", "mergeTrueFn", "mergeFalseFn", "Policies", "normalizeReadFieldOptions", "existing", "incoming", "supertypeSet", "storeKeyNameFromField", "getStoreKeyName", "makeFieldFunctionOptions", "makeMergeObjectsFunction", "stringifyForDisplay", "getContextFlavor", "StoreWriter", "getOperationDefinition", "dataId", "warnAboutDataLoss", "getTypenameFromResult", "context", "getChildMergeTree", "maybeRecycleChildMergeTree", "mergeMergeTrees", "mergeTreeIsEmpty", "cloneDeep", "value", "selectionSet", "emptyMergeTreePool", "warnings", "InMemoryCache", "DocumentTransform", "print", "createFragmentRegistry", "FragmentRegistry", "enqueue", "visit", "version", "isNonNullObject", "isNonEmptyArray", "hasOwnProperty", "defaultReconciler", "DeepMerger", "result", "__spreadArray", "__assign", "isExecutionPatchIncrementalResult", "mergeIncrementalData", "_a", "NetworkStatus", "isNetworkRequestInFlight", "isNetworkRequestSettled", "equalByQuery", "__rest", "equal", "equalBySelectionSet", "getMainDefinition", "createFragmentMap", "getFragmentDefinitions", "shouldInclude", "selectionHasNonreactiveDirective", "isField", "resultKeyNameFromField", "getFragmentFromSelection", "directiveIsNonreactive", "assign", "ObservableQuery", "__extends", "defaultSubscriptionObserverErrorCallback", "skipCacheDataFor", "getOperationDefinition", "diff", "logMissingFieldErrors", "getQueryDefinition", "invariant", "cache", "reobserveCacheFirst", "compact", "info", "cloneDeep", "iterateObserversSafely", "Observable", "fixObservableSubclass", "destructiveMethodCounts", "canUseWeakMap", "wrapDestructiveCacheMethod", "cancelNotifyTimeout", "QueryInfo", "shouldWriteResult", "graphQLResultHasError", "IGNORE", "QueryManager", "AutoCleanedWeakCache", "cacheSizes", "Trie", "DocumentTransform", "newInvariantError", "__awaiter", "hasClientExports", "self", "__generator", "asyncMap", "ApolloError", "getGraphQLErrorsFromResult", "getOperationName", "isExecutionPatchResult", "DELETE", "hasDirectives", "removeDirectivesFromDocument", "getDefaultValues", "isDocumentNode", "makeUniqueId", "variables", "graphQLResultHasProtocolErrors", "errors", "PROTOCOL_ERRORS_SYMBOL", "print", "canonicalStringify", "Concast", "execute", "isApolloError", "sourcesWithInfo", "networkStatus", "data", "LocalState", "mergeDeep", "removeClientSetsFromDocument", "visit", "BREAK", "buildQueryFromSelectionSet", "isInlineFragment", "mergeDeepArray", "cacheSlot", "argumentsObjectFromField", "node", "isSelectionNode", "cacheSizeSymbol", "global", "globalCaches", "getApolloClientMemoryInternals", "_getApolloClientMemoryInternals", "getCurrentCacheSizes", "k", "linkInfo", "transformInfo", "isWrapper", "getWrapperInformation", "isDefined", "recurseTransformInfo", "hasSuggestedDevtools", "ApolloClient", "defaultOptions", "HttpLink", "ApolloLink", "mergeOptions", "setVerbosity", "contextKey", "canUseSymbol", "getApolloContext", "invariant", "React", "resetApolloContext", "ApolloConsumer", "ApolloProvider", "_a", "__assign", "globalCaches", "registerGlobalCache", "DocumentType", "cache", "operationName", "parser", "AutoCleanedWeakCache", "cacheSizes", "invariant", "_a", "verifyDocumentType", "version", "maybe", "_a", "prefixCounts", "makeUniqueId", "stringifyForDisplay", "value", "wrap", "getHandledErrorMsg", "getFallbackErrorMsg", "invariant", "originalInvariant", "ApolloErrorMessageHandler", "stringify", "global", "QUERY_REFERENCE_SYMBOL", "PROMISE_SYMBOL", "wrapQueryRef", "getWrappedPromise", "assertWrappedQueryRef", "unwrapQueryRef", "updateWrappedQueryRef", "OBSERVED_CHANGED_OPTIONS", "InternalQueryReference", "equal", "__assign", "createFulfilledPromise", "result", "createRejectedPromise", "wrapPromiseWithState", "SuspenseCache", "Trie", "canUseWeakMap", "suspenseCacheSymbol", "getSuspenseCache", "useApolloClient", "context", "React", "getApolloContext", "invariant", "didWarnUncachedGetSnapshot", "uSESKey", "realHook", "useSyncExternalStore", "subscribe", "_a", "canUseLayoutEffect", "checkIfSnapshotChanged", "useDeepMemo", "equal", "useIsomorphicLayoutEffect", "canUseDOM", "Ctx", "noop", "useRenderGuard", "INIT", "useLazyRef", "useKey", "__use", "wrapPromiseWithState", "wrapperSymbol", "wrapHook", "hasOwnProperty", "lastWatchOptions", "useQuery", "_useQuery", "useQueryInternals", "result", "__assign", "useInternalState", "verifyDocumentType", "DocumentType", "internalState", "getObsQueryOptions", "createMakeWatchQueryOptions", "useResubscribeIfNecessary", "bindObservableMethods", "useRegisterSSRObservable", "useObservableSubscriptionResult", "ssrDisabledResult", "skipStandbyResult", "toQueryResult", "setResult", "NetworkStatus", "getCurrentResult", "defaultOptions", "__rest", "getDefaultFetchPolicy", "compact", "mergeOptions", "isNonEmptyArray", "ApolloError", "unsafeHandlePartialRefetch", "handleErrorOrCompleted", "toApolloError", "maybeDeepFreeze", "EAGER_METHODS", "useLazyQuery", "eagerMethods", "key", "execute", "options", "executeQuery", "useMutation", "mutation", "client", "errors", "useSubscription", "createSubscription", "variables", "subscription", "Observable", "useReactiveVar", "useFragment", "_useFragment", "cache", "from", "diffToResult", "diff", "mergeDeepArray", "skipToken", "useSuspenseQuery", "_useSuspenseQuery", "getSuspenseCache", "useWatchQueryOptions", "__spreadArray", "canonicalStringify", "promise", "validateOptions", "validateFetchPolicy", "validatePartialDataReturn", "useBackgroundQuery", "_useBackgroundQuery", "wrapQueryRef", "unwrapQueryRef", "updateWrappedQueryRef", "useLoadableQuery", "assertWrappedQueryRef", "queryRef", "useQueryRefHandlers", "_useQueryRefHandlers", "getWrappedPromise", "useReadQuery", "_useReadQuery"]
}
