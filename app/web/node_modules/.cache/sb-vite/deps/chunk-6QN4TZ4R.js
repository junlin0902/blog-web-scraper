import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  index_esm_exports,
  init_index_esm
} from "./chunk-FOZITCPI.js";
import {
  require_context,
  require_persisted_queries,
  require_printer
} from "./chunk-2S742LIG.js";
import {
  client_exports,
  graphql_exports,
  init_client,
  init_graphql,
  require_cache,
  require_core,
  require_core2,
  require_hooks,
  require_utilities
} from "./chunk-3TST5VV5.js";
import {
  require_is_arguments,
  require_shams as require_shams2,
  require_source,
  require_stream,
  require_util,
  require_which_typed_array
} from "./chunk-QW32TVZP.js";
import {
  require_callBound,
  require_call_bind,
  require_define_data_property,
  require_get_intrinsic,
  require_has_property_descriptors,
  require_has_symbols,
  require_hasown,
  require_shams,
  require_side_channel,
  require_type
} from "./chunk-R322LJ4I.js";
import {
  require_client
} from "./chunk-IN4XXK5G.js";
import {
  require_react_dom
} from "./chunk-X5AO4J6U.js";
import {
  require_react
} from "./chunk-52LGRYSO.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __require,
  __toCommonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-QGZREBOA.js";

// ../node_modules/@redwoodjs/testing/dist/web/global.js
var require_global = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/global.js"() {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
  }
});

// ../node_modules/react-dom/cjs/react-dom-test-utils.production.min.js
var require_react_dom_test_utils_production_min = __commonJS({
  "../node_modules/react-dom/cjs/react-dom-test-utils.production.min.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var k = require_react();
    var l = require_react_dom();
    function m(a) {
      var b = a, c = a;
      if (a.alternate) for (; b.return; ) b = b.return;
      else {
        a = b;
        do
          b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
      }
      return 3 === b.tag ? c : null;
    }
    function n(a) {
      if (m(a) !== a) throw Error("Unable to find node on an unmounted component.");
    }
    function p(a) {
      var b = a.alternate;
      if (!b) {
        b = m(a);
        if (null === b) throw Error("Unable to find node on an unmounted component.");
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var f = c.return;
        if (null === f) break;
        var g = f.alternate;
        if (null === g) {
          d = f.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (f.child === g.child) {
          for (g = f.child; g; ) {
            if (g === c) return n(f), a;
            if (g === d) return n(f), b;
            g = g.sibling;
          }
          throw Error("Unable to find node on an unmounted component.");
        }
        if (c.return !== d.return) c = f, d = g;
        else {
          for (var e = false, h = f.child; h; ) {
            if (h === c) {
              e = true;
              c = f;
              d = g;
              break;
            }
            if (h === d) {
              e = true;
              d = f;
              c = g;
              break;
            }
            h = h.sibling;
          }
          if (!e) {
            for (h = g.child; h; ) {
              if (h === c) {
                e = true;
                c = g;
                d = f;
                break;
              }
              if (h === d) {
                e = true;
                d = g;
                c = f;
                break;
              }
              h = h.sibling;
            }
            if (!e) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (c.alternate !== d) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (3 !== c.tag) throw Error("Unable to find node on an unmounted component.");
      return c.stateNode.current === c ? a : b;
    }
    var q = Object.assign;
    function r(a) {
      var b = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function t() {
      return true;
    }
    function u() {
      return false;
    }
    function v(a) {
      function b(c, b2, f, g, e) {
        this._reactName = c;
        this._targetInst = f;
        this.type = b2;
        this.nativeEvent = g;
        this.target = e;
        this.currentTarget = null;
        for (var d in a) a.hasOwnProperty(d) && (c = a[d], this[d] = c ? c(g) : g[d]);
        this.isDefaultPrevented = (null != g.defaultPrevented ? g.defaultPrevented : false === g.returnValue) ? t : u;
        this.isPropagationStopped = u;
        return this;
      }
      q(b.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = t);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = t);
      }, persist: function() {
      }, isPersistent: t });
      return b;
    }
    var w = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var x = v(w);
    var y = q({}, w, { view: 0, detail: 0 });
    v(y);
    var z;
    var A;
    var B;
    var D = q({}, y, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: C, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a) return a.movementX;
      a !== B && (B && "mousemove" === a.type ? (z = a.screenX - B.screenX, A = a.screenY - B.screenY) : A = z = 0, B = a);
      return z;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : A;
    } });
    v(D);
    var E = q({}, D, { dataTransfer: 0 });
    v(E);
    var F = q({}, y, { relatedTarget: 0 });
    v(F);
    var aa = q({}, w, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    v(aa);
    var ba = q({}, w, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } });
    v(ba);
    var ca = q({}, w, { data: 0 });
    v(ca);
    var da = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" };
    var ea = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var fa = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function ha(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = fa[a]) ? !!b[a] : false;
    }
    function C() {
      return ha;
    }
    var ia = q({}, y, { key: function(a) {
      if (a.key) {
        var b = da[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }
      return "keypress" === a.type ? (a = r(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? ea[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: C, charCode: function(a) {
      return "keypress" === a.type ? r(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? r(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } });
    v(ia);
    var ja = q({}, D, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    v(ja);
    var ka = q({}, y, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: C });
    v(ka);
    var la = q({}, w, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    v(la);
    var ma = q({}, D, { deltaX: function(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    }, deltaY: function(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    }, deltaZ: 0, deltaMode: 0 });
    v(ma);
    function na(a, b, c, d, f, g, e, h, N) {
      var G = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, G);
      } catch (oa) {
        this.onError(oa);
      }
    }
    var H = false;
    var I = null;
    var J = false;
    var K = null;
    var pa = { onError: function(a) {
      H = true;
      I = a;
    } };
    function qa(a, b, c, d, f, g, e, h, N) {
      H = false;
      I = null;
      na.apply(pa, arguments);
    }
    function ra(a, b, c, d, f, g, e, h, N) {
      qa.apply(this, arguments);
      if (H) {
        if (H) {
          var G = I;
          H = false;
          I = null;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        J || (J = true, K = G);
      }
    }
    var L = Array.isArray;
    var M = l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Events;
    var sa = M[0];
    var ta = M[1];
    var ua = M[2];
    var va = M[3];
    var wa = M[4];
    var xa = k.unstable_act;
    function ya() {
    }
    function za(a, b) {
      if (!a) return [];
      a = p(a);
      if (!a) return [];
      for (var c = a, d = []; ; ) {
        if (5 === c.tag || 6 === c.tag || 1 === c.tag || 0 === c.tag) {
          var f = c.stateNode;
          b(f) && d.push(f);
        }
        if (c.child) c.child.return = c, c = c.child;
        else {
          if (c === a) return d;
          for (; !c.sibling; ) {
            if (!c.return || c.return === a) return d;
            c = c.return;
          }
          c.sibling.return = c.return;
          c = c.sibling;
        }
      }
    }
    function O(a, b) {
      if (a && !a._reactInternals) {
        var c = String(a);
        a = L(a) ? "an array" : a && 1 === a.nodeType && a.tagName ? "a DOM node" : "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c;
        throw Error(b + "(...): the first argument must be a React class instance. Instead received: " + (a + "."));
      }
    }
    function P(a) {
      return !(!a || 1 !== a.nodeType || !a.tagName);
    }
    function Q(a) {
      return P(a) ? false : null != a && "function" === typeof a.render && "function" === typeof a.setState;
    }
    function R(a, b) {
      return Q(a) ? a._reactInternals.type === b : false;
    }
    function S(a, b) {
      O(a, "findAllInRenderedTree");
      return a ? za(a._reactInternals, b) : [];
    }
    function T(a, b) {
      O(a, "scryRenderedDOMComponentsWithClass");
      return S(a, function(a2) {
        if (P(a2)) {
          var c = a2.className;
          "string" !== typeof c && (c = a2.getAttribute("class") || "");
          var f = c.split(/\s+/);
          if (!L(b)) {
            if (void 0 === b) throw Error("TestUtils.scryRenderedDOMComponentsWithClass expects a className as a second argument.");
            b = b.split(/\s+/);
          }
          return b.every(function(a3) {
            return -1 !== f.indexOf(a3);
          });
        }
        return false;
      });
    }
    function U(a, b) {
      O(a, "scryRenderedDOMComponentsWithTag");
      return S(a, function(a2) {
        return P(a2) && a2.tagName.toUpperCase() === b.toUpperCase();
      });
    }
    function V(a, b) {
      O(a, "scryRenderedComponentsWithType");
      return S(a, function(a2) {
        return R(a2, b);
      });
    }
    function W(a, b, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = ta(c);
      ra(d, b, void 0, a);
      a.currentTarget = null;
    }
    function X(a, b, c) {
      for (var d = []; a; ) {
        d.push(a);
        do
          a = a.return;
        while (a && 5 !== a.tag);
        a = a ? a : null;
      }
      for (a = d.length; 0 < a--; ) b(d[a], "captured", c);
      for (a = 0; a < d.length; a++) b(d[a], "bubbled", c);
    }
    function Y(a, b) {
      var c = a.stateNode;
      if (!c) return null;
      var d = ua(c);
      if (!d) return null;
      c = d[b];
      a: switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
          a = !d;
          break a;
        default:
          a = false;
      }
      if (a) return null;
      if (c && "function" !== typeof c) throw Error("Expected `" + b + "` listener to be a function, instead got a value of `" + typeof c + "` type.");
      return c;
    }
    function Aa(a, b, c) {
      a && c && c._reactName && (b = Y(a, c._reactName)) && (null == c._dispatchListeners && (c._dispatchListeners = []), null == c._dispatchInstances && (c._dispatchInstances = []), c._dispatchListeners.push(b), c._dispatchInstances.push(a));
    }
    function Ba(a, b, c) {
      var d = c._reactName;
      "captured" === b && (d += "Capture");
      if (b = Y(a, d)) null == c._dispatchListeners && (c._dispatchListeners = []), null == c._dispatchInstances && (c._dispatchInstances = []), c._dispatchListeners.push(b), c._dispatchInstances.push(a);
    }
    var Z = {};
    var Ca = /* @__PURE__ */ new Set(["mouseEnter", "mouseLeave", "pointerEnter", "pointerLeave"]);
    function Da(a) {
      return function(b, c) {
        if (k.isValidElement(b)) throw Error("TestUtils.Simulate expected a DOM node as the first argument but received a React element. Pass the DOM node you wish to simulate the event on instead. Note that TestUtils.Simulate will not work if you are using shallow rendering.");
        if (Q(b)) throw Error("TestUtils.Simulate expected a DOM node as the first argument but received a component instance. Pass the DOM node you wish to simulate the event on instead.");
        var d = "on" + a[0].toUpperCase() + a.slice(1), f = new ya();
        f.target = b;
        f.type = a.toLowerCase();
        var g = sa(b), e = new x(d, f.type, g, f, b);
        e.persist();
        q(e, c);
        Ca.has(a) ? e && e._reactName && Aa(e._targetInst, null, e) : e && e._reactName && X(e._targetInst, Ba, e);
        l.unstable_batchedUpdates(function() {
          va(b);
          if (e) {
            var a2 = e._dispatchListeners, c2 = e._dispatchInstances;
            if (L(a2)) for (var d2 = 0; d2 < a2.length && !e.isPropagationStopped(); d2++) W(e, a2[d2], c2[d2]);
            else a2 && W(e, a2, c2);
            e._dispatchListeners = null;
            e._dispatchInstances = null;
            e.isPersistent() || e.constructor.release(e);
          }
          if (J) throw a2 = K, J = false, K = null, a2;
        });
        wa();
      };
    }
    "blur cancel click close contextMenu copy cut auxClick doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play pointerCancel pointerDown pointerUp rateChange reset resize seeked submit touchCancel touchEnd touchStart volumeChange drag dragEnter dragExit dragLeave dragOver mouseMove mouseOut mouseOver pointerMove pointerOut pointerOver scroll toggle touchMove wheel abort animationEnd animationIteration animationStart canPlay canPlayThrough durationChange emptied encrypted ended error gotPointerCapture load loadedData loadedMetadata loadStart lostPointerCapture playing progress seeking stalled suspend timeUpdate transitionEnd waiting mouseEnter mouseLeave pointerEnter pointerLeave change select beforeInput compositionEnd compositionStart compositionUpdate".split(" ").forEach(function(a) {
      Z[a] = Da(a);
    });
    exports.Simulate = Z;
    exports.act = xa;
    exports.findAllInRenderedTree = S;
    exports.findRenderedComponentWithType = function(a, b) {
      O(a, "findRenderedComponentWithType");
      a = V(a, b);
      if (1 !== a.length) throw Error("Did not find exactly one match (found: " + a.length + ") for componentType:" + b);
      return a[0];
    };
    exports.findRenderedDOMComponentWithClass = function(a, b) {
      O(a, "findRenderedDOMComponentWithClass");
      a = T(a, b);
      if (1 !== a.length) throw Error("Did not find exactly one match (found: " + a.length + ") for class:" + b);
      return a[0];
    };
    exports.findRenderedDOMComponentWithTag = function(a, b) {
      O(a, "findRenderedDOMComponentWithTag");
      a = U(a, b);
      if (1 !== a.length) throw Error("Did not find exactly one match (found: " + a.length + ") for tag:" + b);
      return a[0];
    };
    exports.isCompositeComponent = Q;
    exports.isCompositeComponentWithType = R;
    exports.isDOMComponent = P;
    exports.isDOMComponentElement = function(a) {
      return !!(a && k.isValidElement(a) && a.tagName);
    };
    exports.isElement = function(a) {
      return k.isValidElement(a);
    };
    exports.isElementOfType = function(a, b) {
      return k.isValidElement(a) && a.type === b;
    };
    exports.mockComponent = function(a, b) {
      b = b || a.mockTagName || "div";
      a.prototype.render.mockImplementation(function() {
        return k.createElement(b, null, this.props.children);
      });
      return this;
    };
    exports.nativeTouchData = function(a, b) {
      return { touches: [{ pageX: a, pageY: b }] };
    };
    exports.renderIntoDocument = function(a) {
      var b = document.createElement("div");
      return l.render(a, b);
    };
    exports.scryRenderedComponentsWithType = V;
    exports.scryRenderedDOMComponentsWithClass = T;
    exports.scryRenderedDOMComponentsWithTag = U;
    exports.traverseTwoPhase = X;
  }
});

// ../node_modules/react-dom/cjs/react-dom-test-utils.development.js
var require_react_dom_test_utils_development = __commonJS({
  "../node_modules/react-dom/cjs/react-dom-test-utils.development.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React2 = require_react();
        var ReactDOM2 = require_react_dom();
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format2) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format2, args);
            }
          }
        }
        function error(format2) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format2, args);
            }
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var HostRoot = 3;
        var HostComponent = 5;
        var HostText = 6;
        var NoFlags = (
          /*                      */
          0
        );
        var Placement = (
          /*                    */
          2
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        var assign = Object.assign;
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize2 = Interface[_propName];
              if (normalize2) {
                this[_propName] = normalize2(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var ELEMENT_NODE2 = 1;
        function invokeGuardedCallbackProd(name, func, context2, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context2, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context2, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var SecretInternals = ReactDOM2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var EventInternals = SecretInternals.Events;
        var getInstanceFromNode = EventInternals[0];
        var getNodeFromInstance = EventInternals[1];
        var getFiberCurrentPropsFromNode = EventInternals[2];
        var enqueueStateRestore = EventInternals[3];
        var restoreStateIfNeeded = EventInternals[4];
        var reactAct2 = React2.unstable_act;
        function Event(suffix) {
        }
        var hasWarnedAboutDeprecatedMockComponent = false;
        function findAllInRenderedFiberTreeInternal(fiber, test) {
          if (!fiber) {
            return [];
          }
          var currentParent = findCurrentFiberUsingSlowPath(fiber);
          if (!currentParent) {
            return [];
          }
          var node = currentParent;
          var ret = [];
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === ClassComponent || node.tag === FunctionComponent) {
              var publicInst = node.stateNode;
              if (test(publicInst)) {
                ret.push(publicInst);
              }
            }
            if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return ret;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return ret;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function validateClassInstance(inst, methodName) {
          if (!inst) {
            return;
          }
          if (get(inst)) {
            return;
          }
          var received;
          var stringified = String(inst);
          if (isArray(inst)) {
            received = "an array";
          } else if (inst && inst.nodeType === ELEMENT_NODE2 && inst.tagName) {
            received = "a DOM node";
          } else if (stringified === "[object Object]") {
            received = "object with keys {" + Object.keys(inst).join(", ") + "}";
          } else {
            received = stringified;
          }
          throw new Error(methodName + "(...): the first argument must be a React class instance. " + ("Instead received: " + received + "."));
        }
        var didWarnAboutReactTestUtilsDeprecation = false;
        function renderIntoDocument(element) {
          {
            if (!didWarnAboutReactTestUtilsDeprecation) {
              didWarnAboutReactTestUtilsDeprecation = true;
              error("ReactDOMTestUtils is deprecated and will be removed in a future major release, because it exposes internal implementation details that are highly likely to change between releases. Upgrade to a modern testing library, such as @testing-library/react. See https://react.dev/warnings/react-dom-test-utils for more info.");
            }
          }
          var div = document.createElement("div");
          return ReactDOM2.render(element, div);
        }
        function isElement2(element) {
          return React2.isValidElement(element);
        }
        function isElementOfType(inst, convenienceConstructor) {
          return React2.isValidElement(inst) && inst.type === convenienceConstructor;
        }
        function isDOMComponent(inst) {
          return !!(inst && inst.nodeType === ELEMENT_NODE2 && inst.tagName);
        }
        function isDOMComponentElement(inst) {
          return !!(inst && React2.isValidElement(inst) && !!inst.tagName);
        }
        function isCompositeComponent(inst) {
          if (isDOMComponent(inst)) {
            return false;
          }
          return inst != null && typeof inst.render === "function" && typeof inst.setState === "function";
        }
        function isCompositeComponentWithType(inst, type) {
          if (!isCompositeComponent(inst)) {
            return false;
          }
          var internalInstance = get(inst);
          var constructor = internalInstance.type;
          return constructor === type;
        }
        function findAllInRenderedTree(inst, test) {
          validateClassInstance(inst, "findAllInRenderedTree");
          if (!inst) {
            return [];
          }
          var internalInstance = get(inst);
          return findAllInRenderedFiberTreeInternal(internalInstance, test);
        }
        function scryRenderedDOMComponentsWithClass(root, classNames) {
          validateClassInstance(root, "scryRenderedDOMComponentsWithClass");
          return findAllInRenderedTree(root, function(inst) {
            if (isDOMComponent(inst)) {
              var className = inst.className;
              if (typeof className !== "string") {
                className = inst.getAttribute("class") || "";
              }
              var classList = className.split(/\s+/);
              if (!isArray(classNames)) {
                if (classNames === void 0) {
                  throw new Error("TestUtils.scryRenderedDOMComponentsWithClass expects a className as a second argument.");
                }
                classNames = classNames.split(/\s+/);
              }
              return classNames.every(function(name) {
                return classList.indexOf(name) !== -1;
              });
            }
            return false;
          });
        }
        function findRenderedDOMComponentWithClass(root, className) {
          validateClassInstance(root, "findRenderedDOMComponentWithClass");
          var all = scryRenderedDOMComponentsWithClass(root, className);
          if (all.length !== 1) {
            throw new Error("Did not find exactly one match (found: " + all.length + ") for class:" + className);
          }
          return all[0];
        }
        function scryRenderedDOMComponentsWithTag(root, tagName) {
          validateClassInstance(root, "scryRenderedDOMComponentsWithTag");
          return findAllInRenderedTree(root, function(inst) {
            return isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
          });
        }
        function findRenderedDOMComponentWithTag(root, tagName) {
          validateClassInstance(root, "findRenderedDOMComponentWithTag");
          var all = scryRenderedDOMComponentsWithTag(root, tagName);
          if (all.length !== 1) {
            throw new Error("Did not find exactly one match (found: " + all.length + ") for tag:" + tagName);
          }
          return all[0];
        }
        function scryRenderedComponentsWithType(root, componentType) {
          validateClassInstance(root, "scryRenderedComponentsWithType");
          return findAllInRenderedTree(root, function(inst) {
            return isCompositeComponentWithType(inst, componentType);
          });
        }
        function findRenderedComponentWithType(root, componentType) {
          validateClassInstance(root, "findRenderedComponentWithType");
          var all = scryRenderedComponentsWithType(root, componentType);
          if (all.length !== 1) {
            throw new Error("Did not find exactly one match (found: " + all.length + ") for componentType:" + componentType);
          }
          return all[0];
        }
        function mockComponent(module3, mockTagName) {
          {
            if (!hasWarnedAboutDeprecatedMockComponent) {
              hasWarnedAboutDeprecatedMockComponent = true;
              warn("ReactTestUtils.mockComponent() is deprecated. Use shallow rendering or jest.mock() instead.\n\nSee https://reactjs.org/link/test-utils-mock-component for more information.");
            }
          }
          mockTagName = mockTagName || module3.mockTagName || "div";
          module3.prototype.render.mockImplementation(function() {
            return React2.createElement(mockTagName, null, this.props.children);
          });
          return this;
        }
        function nativeTouchData(x, y) {
          return {
            touches: [{
              pageX: x,
              pageY: y
            }]
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          if (isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event._reactName;
          if (propagationPhase === "captured") {
            registrationName += "Capture";
          }
          return getListener(inst, registrationName);
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event._reactName) {
            var registrationName = event._reactName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              if (event._dispatchListeners == null) {
                event._dispatchListeners = [];
              }
              if (event._dispatchInstances == null) {
                event._dispatchInstances = [];
              }
              event._dispatchListeners.push(listener);
              event._dispatchInstances.push(inst);
            }
          }
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            if (event._dispatchListeners == null) {
              event._dispatchListeners = [];
            }
            if (event._dispatchInstances == null) {
              event._dispatchInstances = [];
            }
            event._dispatchListeners.push(listener);
            event._dispatchInstances.push(inst);
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event._reactName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event._reactName) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        var Simulate = {};
        var directDispatchEventTypes = /* @__PURE__ */ new Set(["mouseEnter", "mouseLeave", "pointerEnter", "pointerLeave"]);
        function makeSimulator(eventType) {
          return function(domNode, eventData) {
            if (React2.isValidElement(domNode)) {
              throw new Error("TestUtils.Simulate expected a DOM node as the first argument but received a React element. Pass the DOM node you wish to simulate the event on instead. Note that TestUtils.Simulate will not work if you are using shallow rendering.");
            }
            if (isCompositeComponent(domNode)) {
              throw new Error("TestUtils.Simulate expected a DOM node as the first argument but received a component instance. Pass the DOM node you wish to simulate the event on instead.");
            }
            var reactName = "on" + eventType[0].toUpperCase() + eventType.slice(1);
            var fakeNativeEvent = new Event();
            fakeNativeEvent.target = domNode;
            fakeNativeEvent.type = eventType.toLowerCase();
            var targetInst = getInstanceFromNode(domNode);
            var event = new SyntheticEvent(reactName, fakeNativeEvent.type, targetInst, fakeNativeEvent, domNode);
            event.persist();
            assign(event, eventData);
            if (directDispatchEventTypes.has(eventType)) {
              accumulateDirectDispatchesSingle(event);
            } else {
              accumulateTwoPhaseDispatchesSingle(event);
            }
            ReactDOM2.unstable_batchedUpdates(function() {
              enqueueStateRestore(domNode);
              executeDispatchesAndRelease(event);
              rethrowCaughtError();
            });
            restoreStateIfNeeded();
          };
        }
        var simulatedEventTypes = ["blur", "cancel", "click", "close", "contextMenu", "copy", "cut", "auxClick", "doubleClick", "dragEnd", "dragStart", "drop", "focus", "input", "invalid", "keyDown", "keyPress", "keyUp", "mouseDown", "mouseUp", "paste", "pause", "play", "pointerCancel", "pointerDown", "pointerUp", "rateChange", "reset", "resize", "seeked", "submit", "touchCancel", "touchEnd", "touchStart", "volumeChange", "drag", "dragEnter", "dragExit", "dragLeave", "dragOver", "mouseMove", "mouseOut", "mouseOver", "pointerMove", "pointerOut", "pointerOver", "scroll", "toggle", "touchMove", "wheel", "abort", "animationEnd", "animationIteration", "animationStart", "canPlay", "canPlayThrough", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "playing", "progress", "seeking", "stalled", "suspend", "timeUpdate", "transitionEnd", "waiting", "mouseEnter", "mouseLeave", "pointerEnter", "pointerLeave", "change", "select", "beforeInput", "compositionEnd", "compositionStart", "compositionUpdate"];
        function buildSimulators() {
          simulatedEventTypes.forEach(function(eventType) {
            Simulate[eventType] = makeSimulator(eventType);
          });
        }
        buildSimulators();
        var didWarnAboutUsingAct = false;
        var act4 = function actWithWarning(callback) {
          {
            if (!didWarnAboutUsingAct) {
              didWarnAboutUsingAct = true;
              error("`ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.");
            }
          }
          return reactAct2(callback);
        };
        exports.Simulate = Simulate;
        exports.act = act4;
        exports.findAllInRenderedTree = findAllInRenderedTree;
        exports.findRenderedComponentWithType = findRenderedComponentWithType;
        exports.findRenderedDOMComponentWithClass = findRenderedDOMComponentWithClass;
        exports.findRenderedDOMComponentWithTag = findRenderedDOMComponentWithTag;
        exports.isCompositeComponent = isCompositeComponent;
        exports.isCompositeComponentWithType = isCompositeComponentWithType;
        exports.isDOMComponent = isDOMComponent;
        exports.isDOMComponentElement = isDOMComponentElement;
        exports.isElement = isElement2;
        exports.isElementOfType = isElementOfType;
        exports.mockComponent = mockComponent;
        exports.nativeTouchData = nativeTouchData;
        exports.renderIntoDocument = renderIntoDocument;
        exports.scryRenderedComponentsWithType = scryRenderedComponentsWithType;
        exports.scryRenderedDOMComponentsWithClass = scryRenderedDOMComponentsWithClass;
        exports.scryRenderedDOMComponentsWithTag = scryRenderedDOMComponentsWithTag;
        exports.traverseTwoPhase = traverseTwoPhase;
      })();
    }
  }
});

// ../node_modules/react-dom/test-utils.js
var require_test_utils = __commonJS({
  "../node_modules/react-dom/test-utils.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_dom_test_utils_production_min();
    } else {
      module2.exports = require_react_dom_test_utils_development();
    }
  }
});

// ../node_modules/@testing-library/dom/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/ansi-styles/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var ANSI_BACKGROUND_OFFSET = 10;
    var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
    var wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          overline: [53, 55],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          // Bright color
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi256 = wrapAnsi256();
      styles.color.ansi16m = wrapAnsi16m();
      styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
      styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
      Object.defineProperties(styles, {
        rgbToAnsi256: {
          value: (red, green, blue) => {
            if (red === green && green === blue) {
              if (red < 8) {
                return 16;
              }
              if (red > 248) {
                return 231;
              }
              return Math.round((red - 8) / 247 * 24) + 232;
            }
            return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
          },
          enumerable: false
        },
        hexToRgb: {
          value: (hex) => {
            const matches2 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
            if (!matches2) {
              return [0, 0, 0];
            }
            let { colorString } = matches2.groups;
            if (colorString.length === 3) {
              colorString = colorString.split("").map((character) => character + character).join("");
            }
            const integer = Number.parseInt(colorString, 16);
            return [
              integer >> 16 & 255,
              integer >> 8 & 255,
              integer & 255
            ];
          },
          enumerable: false
        },
        hexToAnsi256: {
          value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
          enumerable: false
        }
      });
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/collections.js
var require_collections = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/collections.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printIteratorEntries = printIteratorEntries;
    exports.printIteratorValues = printIteratorValues;
    exports.printListItems = printListItems;
    exports.printObjectProperties = printObjectProperties;
    var getKeysOfEnumerableProperties = (object, compareKeys) => {
      const keys = Object.keys(object).sort(compareKeys);
      if (Object.getOwnPropertySymbols) {
        Object.getOwnPropertySymbols(object).forEach((symbol) => {
          if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
            keys.push(symbol);
          }
        });
      }
      return keys;
    };
    function printIteratorEntries(iterator, config2, indentation, depth, refs, printer, separator = ": ") {
      let result = "";
      let current = iterator.next();
      if (!current.done) {
        result += config2.spacingOuter;
        const indentationNext = indentation + config2.indent;
        while (!current.done) {
          const name = printer(
            current.value[0],
            config2,
            indentationNext,
            depth,
            refs
          );
          const value = printer(
            current.value[1],
            config2,
            indentationNext,
            depth,
            refs
          );
          result += indentationNext + name + separator + value;
          current = iterator.next();
          if (!current.done) {
            result += "," + config2.spacingInner;
          } else if (!config2.min) {
            result += ",";
          }
        }
        result += config2.spacingOuter + indentation;
      }
      return result;
    }
    function printIteratorValues(iterator, config2, indentation, depth, refs, printer) {
      let result = "";
      let current = iterator.next();
      if (!current.done) {
        result += config2.spacingOuter;
        const indentationNext = indentation + config2.indent;
        while (!current.done) {
          result += indentationNext + printer(current.value, config2, indentationNext, depth, refs);
          current = iterator.next();
          if (!current.done) {
            result += "," + config2.spacingInner;
          } else if (!config2.min) {
            result += ",";
          }
        }
        result += config2.spacingOuter + indentation;
      }
      return result;
    }
    function printListItems(list, config2, indentation, depth, refs, printer) {
      let result = "";
      if (list.length) {
        result += config2.spacingOuter;
        const indentationNext = indentation + config2.indent;
        for (let i = 0; i < list.length; i++) {
          result += indentationNext;
          if (i in list) {
            result += printer(list[i], config2, indentationNext, depth, refs);
          }
          if (i < list.length - 1) {
            result += "," + config2.spacingInner;
          } else if (!config2.min) {
            result += ",";
          }
        }
        result += config2.spacingOuter + indentation;
      }
      return result;
    }
    function printObjectProperties(val, config2, indentation, depth, refs, printer) {
      let result = "";
      const keys = getKeysOfEnumerableProperties(val, config2.compareKeys);
      if (keys.length) {
        result += config2.spacingOuter;
        const indentationNext = indentation + config2.indent;
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const name = printer(key, config2, indentationNext, depth, refs);
          const value = printer(val[key], config2, indentationNext, depth, refs);
          result += indentationNext + name + ": " + value;
          if (i < keys.length - 1) {
            result += "," + config2.spacingInner;
          } else if (!config2.min) {
            result += ",";
          }
        }
        result += config2.spacingOuter + indentation;
      }
      return result;
    }
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/AsymmetricMatcher.js
var require_AsymmetricMatcher = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _collections = require_collections();
    var global2 = function() {
      if (typeof globalThis !== "undefined") {
        return globalThis;
      } else if (typeof global2 !== "undefined") {
        return global2;
      } else if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    }();
    var Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol;
    var asymmetricMatcher = typeof Symbol2 === "function" && Symbol2.for ? Symbol2.for("jest.asymmetricMatcher") : 1267621;
    var SPACE = " ";
    var serialize = (val, config2, indentation, depth, refs, printer) => {
      const stringedValue = val.toString();
      if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining") {
        if (++depth > config2.maxDepth) {
          return "[" + stringedValue + "]";
        }
        return stringedValue + SPACE + "[" + (0, _collections.printListItems)(
          val.sample,
          config2,
          indentation,
          depth,
          refs,
          printer
        ) + "]";
      }
      if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining") {
        if (++depth > config2.maxDepth) {
          return "[" + stringedValue + "]";
        }
        return stringedValue + SPACE + "{" + (0, _collections.printObjectProperties)(
          val.sample,
          config2,
          indentation,
          depth,
          refs,
          printer
        ) + "}";
      }
      if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching") {
        return stringedValue + SPACE + printer(val.sample, config2, indentation, depth, refs);
      }
      if (stringedValue === "StringContaining" || stringedValue === "StringNotContaining") {
        return stringedValue + SPACE + printer(val.sample, config2, indentation, depth, refs);
      }
      return val.toAsymmetricMatcher();
    };
    exports.serialize = serialize;
    var test = (val) => val && val.$$typeof === asymmetricMatcher;
    exports.test = test;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "../node_modules/ansi-regex/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = ({ onlyFirst = false } = {}) => {
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, onlyFirst ? void 0 : "g");
    };
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ConvertAnsi.js
var require_ConvertAnsi = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ConvertAnsi.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _ansiRegex = _interopRequireDefault(require_ansi_regex());
    var _ansiStyles = _interopRequireDefault(require_ansi_styles());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var toHumanReadableAnsi = (text) => text.replace((0, _ansiRegex.default)(), (match2) => {
      switch (match2) {
        case _ansiStyles.default.red.close:
        case _ansiStyles.default.green.close:
        case _ansiStyles.default.cyan.close:
        case _ansiStyles.default.gray.close:
        case _ansiStyles.default.white.close:
        case _ansiStyles.default.yellow.close:
        case _ansiStyles.default.bgRed.close:
        case _ansiStyles.default.bgGreen.close:
        case _ansiStyles.default.bgYellow.close:
        case _ansiStyles.default.inverse.close:
        case _ansiStyles.default.dim.close:
        case _ansiStyles.default.bold.close:
        case _ansiStyles.default.reset.open:
        case _ansiStyles.default.reset.close:
          return "</>";
        case _ansiStyles.default.red.open:
          return "<red>";
        case _ansiStyles.default.green.open:
          return "<green>";
        case _ansiStyles.default.cyan.open:
          return "<cyan>";
        case _ansiStyles.default.gray.open:
          return "<gray>";
        case _ansiStyles.default.white.open:
          return "<white>";
        case _ansiStyles.default.yellow.open:
          return "<yellow>";
        case _ansiStyles.default.bgRed.open:
          return "<bgRed>";
        case _ansiStyles.default.bgGreen.open:
          return "<bgGreen>";
        case _ansiStyles.default.bgYellow.open:
          return "<bgYellow>";
        case _ansiStyles.default.inverse.open:
          return "<inverse>";
        case _ansiStyles.default.dim.open:
          return "<dim>";
        case _ansiStyles.default.bold.open:
          return "<bold>";
        default:
          return "";
      }
    });
    var test = (val) => typeof val === "string" && !!val.match((0, _ansiRegex.default)());
    exports.test = test;
    var serialize = (val, config2, indentation, depth, refs, printer) => printer(toHumanReadableAnsi(val), config2, indentation, depth, refs);
    exports.serialize = serialize;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMCollection.js
var require_DOMCollection = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMCollection.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _collections = require_collections();
    var SPACE = " ";
    var OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"];
    var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
    var testName = (name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
    var test = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
    exports.test = test;
    var isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap";
    var serialize = (collection, config2, indentation, depth, refs, printer) => {
      const name = collection.constructor.name;
      if (++depth > config2.maxDepth) {
        return "[" + name + "]";
      }
      return (config2.min ? "" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? "{" + (0, _collections.printObjectProperties)(
        isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
          props[attribute.name] = attribute.value;
          return props;
        }, {}) : { ...collection },
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "}" : "[" + (0, _collections.printListItems)(
        Array.from(collection),
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "]");
    };
    exports.serialize = serialize;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/lib/escapeHTML.js
var require_escapeHTML = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escapeHTML2;
    function escapeHTML2(str) {
      return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/lib/markup.js
var require_markup = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/lib/markup.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printText = exports.printProps = exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printChildren = void 0;
    var _escapeHTML = _interopRequireDefault(require_escapeHTML());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var printProps2 = (keys, props, config2, indentation, depth, refs, printer) => {
      const indentationNext = indentation + config2.indent;
      const colors = config2.colors;
      return keys.map((key) => {
        const value = props[key];
        let printed = printer(value, config2, indentationNext, depth, refs);
        if (typeof value !== "string") {
          if (printed.indexOf("\n") !== -1) {
            printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation;
          }
          printed = "{" + printed + "}";
        }
        return config2.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
      }).join("");
    };
    exports.printProps = printProps2;
    var printChildren2 = (children, config2, indentation, depth, refs, printer) => children.map(
      (child) => config2.spacingOuter + indentation + (typeof child === "string" ? printText2(child, config2) : printer(child, config2, indentation, depth, refs))
    ).join("");
    exports.printChildren = printChildren2;
    var printText2 = (text, config2) => {
      const contentColor = config2.colors.content;
      return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
    };
    exports.printText = printText2;
    var printComment2 = (comment, config2) => {
      const commentColor = config2.colors.comment;
      return commentColor.open + "<!--" + (0, _escapeHTML.default)(comment) + "-->" + commentColor.close;
    };
    exports.printComment = printComment2;
    var printElement2 = (type, printedProps, printedChildren, config2, indentation) => {
      const tagColor = config2.colors.tag;
      return tagColor.open + "<" + type + (printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config2.spacingOuter + indentation + tagColor.open + "</" + type : (printedProps && !config2.min ? "" : " ") + "/") + ">" + tagColor.close;
    };
    exports.printElement = printElement2;
    var printElementAsLeaf2 = (type, config2) => {
      const tagColor = config2.colors.tag;
      return tagColor.open + "<" + type + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
    };
    exports.printElementAsLeaf = printElementAsLeaf2;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMElement.js
var require_DOMElement = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMElement.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _markup = require_markup();
    var ELEMENT_NODE2 = 1;
    var TEXT_NODE2 = 3;
    var COMMENT_NODE2 = 8;
    var FRAGMENT_NODE2 = 11;
    var ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/;
    var testHasAttribute = (val) => {
      try {
        return typeof val.hasAttribute === "function" && val.hasAttribute("is");
      } catch {
        return false;
      }
    };
    var testNode2 = (val) => {
      const constructorName = val.constructor.name;
      const { nodeType, tagName } = val;
      const isCustomElement = typeof tagName === "string" && tagName.includes("-") || testHasAttribute(val);
      return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
    };
    var test = (val) => {
      var _val$constructor;
      return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode2(val);
    };
    exports.test = test;
    function nodeIsText2(node) {
      return node.nodeType === TEXT_NODE2;
    }
    function nodeIsComment2(node) {
      return node.nodeType === COMMENT_NODE2;
    }
    function nodeIsFragment2(node) {
      return node.nodeType === FRAGMENT_NODE2;
    }
    var serialize = (node, config2, indentation, depth, refs, printer) => {
      if (nodeIsText2(node)) {
        return (0, _markup.printText)(node.data, config2);
      }
      if (nodeIsComment2(node)) {
        return (0, _markup.printComment)(node.data, config2);
      }
      const type = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
      if (++depth > config2.maxDepth) {
        return (0, _markup.printElementAsLeaf)(type, config2);
      }
      return (0, _markup.printElement)(
        type,
        (0, _markup.printProps)(
          nodeIsFragment2(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),
          nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
            props[attribute.name] = attribute.value;
            return props;
          }, {}),
          config2,
          indentation + config2.indent,
          depth,
          refs,
          printer
        ),
        (0, _markup.printChildren)(
          Array.prototype.slice.call(node.childNodes || node.children),
          config2,
          indentation + config2.indent,
          depth,
          refs,
          printer
        ),
        config2,
        indentation
      );
    };
    exports.serialize = serialize;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/Immutable.js
var require_Immutable = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/Immutable.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _collections = require_collections();
    var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
    var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
    var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
    var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
    var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
    var IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@";
    var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
    var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
    var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
    var getImmutableName = (name) => "Immutable." + name;
    var printAsLeaf = (name) => "[" + name + "]";
    var SPACE = " ";
    var LAZY = "…";
    var printImmutableEntries = (val, config2, indentation, depth, refs, printer, type) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + "{" + (0, _collections.printIteratorEntries)(
      val.entries(),
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "}";
    function getRecordEntries(val) {
      let i = 0;
      return {
        next() {
          if (i < val._keys.length) {
            const key = val._keys[i++];
            return {
              done: false,
              value: [key, val.get(key)]
            };
          }
          return {
            done: true,
            value: void 0
          };
        }
      };
    }
    var printImmutableRecord = (val, config2, indentation, depth, refs, printer) => {
      const name = getImmutableName(val._name || "Record");
      return ++depth > config2.maxDepth ? printAsLeaf(name) : name + SPACE + "{" + (0, _collections.printIteratorEntries)(
        getRecordEntries(val),
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "}";
    };
    var printImmutableSeq = (val, config2, indentation, depth, refs, printer) => {
      const name = getImmutableName("Seq");
      if (++depth > config2.maxDepth) {
        return printAsLeaf(name);
      }
      if (val[IS_KEYED_SENTINEL]) {
        return name + SPACE + "{" + // from Immutable collection of entries or from ECMAScript object
        (val._iter || val._object ? (0, _collections.printIteratorEntries)(
          val.entries(),
          config2,
          indentation,
          depth,
          refs,
          printer
        ) : LAZY) + "}";
      }
      return name + SPACE + "[" + (val._iter || // from Immutable collection of values
      val._array || // from ECMAScript array
      val._collection || // from ECMAScript collection in immutable v4
      val._iterable ? (0, _collections.printIteratorValues)(
        val.values(),
        config2,
        indentation,
        depth,
        refs,
        printer
      ) : LAZY) + "]";
    };
    var printImmutableValues = (val, config2, indentation, depth, refs, printer, type) => ++depth > config2.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + "[" + (0, _collections.printIteratorValues)(
      val.values(),
      config2,
      indentation,
      depth,
      refs,
      printer
    ) + "]";
    var serialize = (val, config2, indentation, depth, refs, printer) => {
      if (val[IS_MAP_SENTINEL]) {
        return printImmutableEntries(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer,
          val[IS_ORDERED_SENTINEL] ? "OrderedMap" : "Map"
        );
      }
      if (val[IS_LIST_SENTINEL]) {
        return printImmutableValues(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer,
          "List"
        );
      }
      if (val[IS_SET_SENTINEL]) {
        return printImmutableValues(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer,
          val[IS_ORDERED_SENTINEL] ? "OrderedSet" : "Set"
        );
      }
      if (val[IS_STACK_SENTINEL]) {
        return printImmutableValues(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer,
          "Stack"
        );
      }
      if (val[IS_SEQ_SENTINEL]) {
        return printImmutableSeq(val, config2, indentation, depth, refs, printer);
      }
      return printImmutableRecord(val, config2, indentation, depth, refs, printer);
    };
    exports.serialize = serialize;
    var test = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
    exports.test = test;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/react-is/cjs/react-is.production.min.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var b = 60103;
    var c = 60106;
    var d = 60107;
    var e = 60108;
    var f = 60114;
    var g = 60109;
    var h = 60110;
    var k = 60112;
    var l = 60113;
    var m = 60120;
    var n = 60115;
    var p = 60116;
    var q = 60121;
    var r = 60122;
    var u = 60117;
    var v = 60129;
    var w = 60131;
    if ("function" === typeof Symbol && Symbol.for) {
      x = Symbol.for;
      b = x("react.element");
      c = x("react.portal");
      d = x("react.fragment");
      e = x("react.strict_mode");
      f = x("react.profiler");
      g = x("react.provider");
      h = x("react.context");
      k = x("react.forward_ref");
      l = x("react.suspense");
      m = x("react.suspense_list");
      n = x("react.memo");
      p = x("react.lazy");
      q = x("react.block");
      r = x("react.server.block");
      u = x("react.fundamental");
      v = x("react.debug_trace_mode");
      w = x("react.legacy_hidden");
    }
    var x;
    function y(a) {
      if ("object" === typeof a && null !== a) {
        var t = a.$$typeof;
        switch (t) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case l:
              case m:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case h:
                  case k:
                  case p:
                  case n:
                  case g:
                    return a;
                  default:
                    return t;
                }
            }
          case c:
            return t;
        }
      }
    }
    var z = g;
    var A = b;
    var B = k;
    var C = d;
    var D = p;
    var E = n;
    var F = c;
    var G = f;
    var H = e;
    var I = l;
    exports.ContextConsumer = h;
    exports.ContextProvider = z;
    exports.Element = A;
    exports.ForwardRef = B;
    exports.Fragment = C;
    exports.Lazy = D;
    exports.Memo = E;
    exports.Portal = F;
    exports.Profiler = G;
    exports.StrictMode = H;
    exports.Suspense = I;
    exports.isAsyncMode = function() {
      return false;
    };
    exports.isConcurrentMode = function() {
      return false;
    };
    exports.isContextConsumer = function(a) {
      return y(a) === h;
    };
    exports.isContextProvider = function(a) {
      return y(a) === g;
    };
    exports.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    exports.isForwardRef = function(a) {
      return y(a) === k;
    };
    exports.isFragment = function(a) {
      return y(a) === d;
    };
    exports.isLazy = function(a) {
      return y(a) === p;
    };
    exports.isMemo = function(a) {
      return y(a) === n;
    };
    exports.isPortal = function(a) {
      return y(a) === c;
    };
    exports.isProfiler = function(a) {
      return y(a) === f;
    };
    exports.isStrictMode = function(a) {
      return y(a) === e;
    };
    exports.isSuspense = function(a) {
      return y(a) === l;
    };
    exports.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === v || a === e || a === l || a === m || a === w || "object" === typeof a && null !== a && (a.$$typeof === p || a.$$typeof === n || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u || a.$$typeof === q || a[0] === r) ? true : false;
    };
    exports.typeOf = y;
  }
});

// ../node_modules/@testing-library/dom/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../node_modules/@testing-library/dom/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_is_production_min();
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactElement.js
var require_ReactElement = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactElement.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var ReactIs = _interopRequireWildcard(require_react_is());
    var _markup = require_markup();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var getChildren = (arg, children = []) => {
      if (Array.isArray(arg)) {
        arg.forEach((item) => {
          getChildren(item, children);
        });
      } else if (arg != null && arg !== false) {
        children.push(arg);
      }
      return children;
    };
    var getType = (element) => {
      const type = element.type;
      if (typeof type === "string") {
        return type;
      }
      if (typeof type === "function") {
        return type.displayName || type.name || "Unknown";
      }
      if (ReactIs.isFragment(element)) {
        return "React.Fragment";
      }
      if (ReactIs.isSuspense(element)) {
        return "React.Suspense";
      }
      if (typeof type === "object" && type !== null) {
        if (ReactIs.isContextProvider(element)) {
          return "Context.Provider";
        }
        if (ReactIs.isContextConsumer(element)) {
          return "Context.Consumer";
        }
        if (ReactIs.isForwardRef(element)) {
          if (type.displayName) {
            return type.displayName;
          }
          const functionName = type.render.displayName || type.render.name || "";
          return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
        }
        if (ReactIs.isMemo(element)) {
          const functionName = type.displayName || type.type.displayName || type.type.name || "";
          return functionName !== "" ? "Memo(" + functionName + ")" : "Memo";
        }
      }
      return "UNDEFINED";
    };
    var getPropKeys = (element) => {
      const { props } = element;
      return Object.keys(props).filter((key) => key !== "children" && props[key] !== void 0).sort();
    };
    var serialize = (element, config2, indentation, depth, refs, printer) => ++depth > config2.maxDepth ? (0, _markup.printElementAsLeaf)(getType(element), config2) : (0, _markup.printElement)(
      getType(element),
      (0, _markup.printProps)(
        getPropKeys(element),
        element.props,
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ),
      (0, _markup.printChildren)(
        getChildren(element.props.children),
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ),
      config2,
      indentation
    );
    exports.serialize = serialize;
    var test = (val) => val != null && ReactIs.isElement(val);
    exports.test = test;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactTestComponent.js
var require_ReactTestComponent = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.test = exports.serialize = exports.default = void 0;
    var _markup = require_markup();
    var global2 = function() {
      if (typeof globalThis !== "undefined") {
        return globalThis;
      } else if (typeof global2 !== "undefined") {
        return global2;
      } else if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    }();
    var Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol;
    var testSymbol = typeof Symbol2 === "function" && Symbol2.for ? Symbol2.for("react.test.json") : 245830487;
    var getPropKeys = (object) => {
      const { props } = object;
      return props ? Object.keys(props).filter((key) => props[key] !== void 0).sort() : [];
    };
    var serialize = (object, config2, indentation, depth, refs, printer) => ++depth > config2.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config2) : (0, _markup.printElement)(
      object.type,
      object.props ? (0, _markup.printProps)(
        getPropKeys(object),
        object.props,
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ) : "",
      object.children ? (0, _markup.printChildren)(
        object.children,
        config2,
        indentation + config2.indent,
        depth,
        refs,
        printer
      ) : "",
      config2,
      indentation
    );
    exports.serialize = serialize;
    var test = (val) => val && val.$$typeof === testSymbol;
    exports.test = test;
    var plugin = {
      serialize,
      test
    };
    var _default = plugin;
    exports.default = _default;
  }
});

// ../node_modules/@testing-library/dom/node_modules/pretty-format/build/index.js
var require_build = __commonJS({
  "../node_modules/@testing-library/dom/node_modules/pretty-format/build/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.DEFAULT_OPTIONS = void 0;
    exports.format = format2;
    exports.plugins = void 0;
    var _ansiStyles = _interopRequireDefault(require_ansi_styles());
    var _collections = require_collections();
    var _AsymmetricMatcher = _interopRequireDefault(
      require_AsymmetricMatcher()
    );
    var _ConvertAnsi = _interopRequireDefault(require_ConvertAnsi());
    var _DOMCollection = _interopRequireDefault(require_DOMCollection());
    var _DOMElement = _interopRequireDefault(require_DOMElement());
    var _Immutable = _interopRequireDefault(require_Immutable());
    var _ReactElement = _interopRequireDefault(require_ReactElement());
    var _ReactTestComponent = _interopRequireDefault(
      require_ReactTestComponent()
    );
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var toString = Object.prototype.toString;
    var toISOString = Date.prototype.toISOString;
    var errorToString = Error.prototype.toString;
    var regExpToString = RegExp.prototype.toString;
    var getConstructorName = (val) => typeof val.constructor === "function" && val.constructor.name || "Object";
    var isWindow = (val) => typeof window !== "undefined" && val === window;
    var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
    var NEWLINE_REGEXP = /\n/gi;
    var PrettyFormatPluginError = class extends Error {
      constructor(message, stack) {
        super(message);
        this.stack = stack;
        this.name = this.constructor.name;
      }
    };
    function isToStringedArrayType(toStringed) {
      return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
    }
    function printNumber(val) {
      return Object.is(val, -0) ? "-0" : String(val);
    }
    function printBigInt(val) {
      return String(`${val}n`);
    }
    function printFunction(val, printFunctionName) {
      if (!printFunctionName) {
        return "[Function]";
      }
      return "[Function " + (val.name || "anonymous") + "]";
    }
    function printSymbol(val) {
      return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
    }
    function printError(val) {
      return "[" + errorToString.call(val) + "]";
    }
    function printBasicValue(val, printFunctionName, escapeRegex, escapeString2) {
      if (val === true || val === false) {
        return "" + val;
      }
      if (val === void 0) {
        return "undefined";
      }
      if (val === null) {
        return "null";
      }
      const typeOf = typeof val;
      if (typeOf === "number") {
        return printNumber(val);
      }
      if (typeOf === "bigint") {
        return printBigInt(val);
      }
      if (typeOf === "string") {
        if (escapeString2) {
          return '"' + val.replace(/"|\\/g, "\\$&") + '"';
        }
        return '"' + val + '"';
      }
      if (typeOf === "function") {
        return printFunction(val, printFunctionName);
      }
      if (typeOf === "symbol") {
        return printSymbol(val);
      }
      const toStringed = toString.call(val);
      if (toStringed === "[object WeakMap]") {
        return "WeakMap {}";
      }
      if (toStringed === "[object WeakSet]") {
        return "WeakSet {}";
      }
      if (toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]") {
        return printFunction(val, printFunctionName);
      }
      if (toStringed === "[object Symbol]") {
        return printSymbol(val);
      }
      if (toStringed === "[object Date]") {
        return isNaN(+val) ? "Date { NaN }" : toISOString.call(val);
      }
      if (toStringed === "[object Error]") {
        return printError(val);
      }
      if (toStringed === "[object RegExp]") {
        if (escapeRegex) {
          return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        return regExpToString.call(val);
      }
      if (val instanceof Error) {
        return printError(val);
      }
      return null;
    }
    function printComplexValue(val, config2, indentation, depth, refs, hasCalledToJSON) {
      if (refs.indexOf(val) !== -1) {
        return "[Circular]";
      }
      refs = refs.slice();
      refs.push(val);
      const hitMaxDepth = ++depth > config2.maxDepth;
      const min = config2.min;
      if (config2.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === "function" && !hasCalledToJSON) {
        return printer(val.toJSON(), config2, indentation, depth, refs, true);
      }
      const toStringed = toString.call(val);
      if (toStringed === "[object Arguments]") {
        return hitMaxDepth ? "[Arguments]" : (min ? "" : "Arguments ") + "[" + (0, _collections.printListItems)(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer
        ) + "]";
      }
      if (isToStringedArrayType(toStringed)) {
        return hitMaxDepth ? "[" + val.constructor.name + "]" : (min ? "" : !config2.printBasicPrototype && val.constructor.name === "Array" ? "" : val.constructor.name + " ") + "[" + (0, _collections.printListItems)(
          val,
          config2,
          indentation,
          depth,
          refs,
          printer
        ) + "]";
      }
      if (toStringed === "[object Map]") {
        return hitMaxDepth ? "[Map]" : "Map {" + (0, _collections.printIteratorEntries)(
          val.entries(),
          config2,
          indentation,
          depth,
          refs,
          printer,
          " => "
        ) + "}";
      }
      if (toStringed === "[object Set]") {
        return hitMaxDepth ? "[Set]" : "Set {" + (0, _collections.printIteratorValues)(
          val.values(),
          config2,
          indentation,
          depth,
          refs,
          printer
        ) + "}";
      }
      return hitMaxDepth || isWindow(val) ? "[" + getConstructorName(val) + "]" : (min ? "" : !config2.printBasicPrototype && getConstructorName(val) === "Object" ? "" : getConstructorName(val) + " ") + "{" + (0, _collections.printObjectProperties)(
        val,
        config2,
        indentation,
        depth,
        refs,
        printer
      ) + "}";
    }
    function isNewPlugin(plugin) {
      return plugin.serialize != null;
    }
    function printPlugin(plugin, val, config2, indentation, depth, refs) {
      let printed;
      try {
        printed = isNewPlugin(plugin) ? plugin.serialize(val, config2, indentation, depth, refs, printer) : plugin.print(
          val,
          (valChild) => printer(valChild, config2, indentation, depth, refs),
          (str) => {
            const indentationNext = indentation + config2.indent;
            return indentationNext + str.replace(NEWLINE_REGEXP, "\n" + indentationNext);
          },
          {
            edgeSpacing: config2.spacingOuter,
            min: config2.min,
            spacing: config2.spacingInner
          },
          config2.colors
        );
      } catch (error) {
        throw new PrettyFormatPluginError(error.message, error.stack);
      }
      if (typeof printed !== "string") {
        throw new Error(
          `pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`
        );
      }
      return printed;
    }
    function findPlugin(plugins3, val) {
      for (let p = 0; p < plugins3.length; p++) {
        try {
          if (plugins3[p].test(val)) {
            return plugins3[p];
          }
        } catch (error) {
          throw new PrettyFormatPluginError(error.message, error.stack);
        }
      }
      return null;
    }
    function printer(val, config2, indentation, depth, refs, hasCalledToJSON) {
      const plugin = findPlugin(config2.plugins, val);
      if (plugin !== null) {
        return printPlugin(plugin, val, config2, indentation, depth, refs);
      }
      const basicResult = printBasicValue(
        val,
        config2.printFunctionName,
        config2.escapeRegex,
        config2.escapeString
      );
      if (basicResult !== null) {
        return basicResult;
      }
      return printComplexValue(
        val,
        config2,
        indentation,
        depth,
        refs,
        hasCalledToJSON
      );
    }
    var DEFAULT_THEME = {
      comment: "gray",
      content: "reset",
      prop: "yellow",
      tag: "cyan",
      value: "green"
    };
    var DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
    var DEFAULT_OPTIONS = {
      callToJSON: true,
      compareKeys: void 0,
      escapeRegex: false,
      escapeString: true,
      highlight: false,
      indent: 2,
      maxDepth: Infinity,
      min: false,
      plugins: [],
      printBasicPrototype: true,
      printFunctionName: true,
      theme: DEFAULT_THEME
    };
    exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
    function validateOptions(options) {
      Object.keys(options).forEach((key) => {
        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
          throw new Error(`pretty-format: Unknown option "${key}".`);
        }
      });
      if (options.min && options.indent !== void 0 && options.indent !== 0) {
        throw new Error(
          'pretty-format: Options "min" and "indent" cannot be used together.'
        );
      }
      if (options.theme !== void 0) {
        if (options.theme === null) {
          throw new Error('pretty-format: Option "theme" must not be null.');
        }
        if (typeof options.theme !== "object") {
          throw new Error(
            `pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`
          );
        }
      }
    }
    var getColorsHighlight = (options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {
      const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];
      const color = value && _ansiStyles.default[value];
      if (color && typeof color.close === "string" && typeof color.open === "string") {
        colors[key] = color;
      } else {
        throw new Error(
          `pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`
        );
      }
      return colors;
    }, /* @__PURE__ */ Object.create(null));
    var getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key) => {
      colors[key] = {
        close: "",
        open: ""
      };
      return colors;
    }, /* @__PURE__ */ Object.create(null));
    var getPrintFunctionName = (options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
    var getEscapeRegex = (options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
    var getEscapeString = (options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString;
    var getConfig3 = (options) => {
      var _options$printBasicPr;
      return {
        callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
        colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
        compareKeys: options && typeof options.compareKeys === "function" ? options.compareKeys : DEFAULT_OPTIONS.compareKeys,
        escapeRegex: getEscapeRegex(options),
        escapeString: getEscapeString(options),
        indent: options && options.min ? "" : createIndent(
          options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent
        ),
        maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
        min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,
        plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,
        printBasicPrototype: (_options$printBasicPr = options === null || options === void 0 ? void 0 : options.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true,
        printFunctionName: getPrintFunctionName(options),
        spacingInner: options && options.min ? " " : "\n",
        spacingOuter: options && options.min ? "" : "\n"
      };
    };
    function createIndent(indent) {
      return new Array(indent + 1).join(" ");
    }
    function format2(val, options) {
      if (options) {
        validateOptions(options);
        if (options.plugins) {
          const plugin = findPlugin(options.plugins, val);
          if (plugin !== null) {
            return printPlugin(plugin, val, getConfig3(options), "", 0, []);
          }
        }
      }
      const basicResult = printBasicValue(
        val,
        getPrintFunctionName(options),
        getEscapeRegex(options),
        getEscapeString(options)
      );
      if (basicResult !== null) {
        return basicResult;
      }
      return printComplexValue(val, getConfig3(options), "", 0, []);
    }
    var plugins2 = {
      AsymmetricMatcher: _AsymmetricMatcher.default,
      ConvertAnsi: _ConvertAnsi.default,
      DOMCollection: _DOMCollection.default,
      DOMElement: _DOMElement.default,
      Immutable: _Immutable.default,
      ReactElement: _ReactElement.default,
      ReactTestComponent: _ReactTestComponent.default
    };
    exports.plugins = plugins2;
    var _default = format2;
    exports.default = _default;
  }
});

// ../node_modules/dom-accessibility-api/dist/polyfills/array.from.mjs
function isCallable(fn) {
  return typeof fn === "function" || toStr.call(fn) === "[object Function]";
}
function toInteger(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}
function arrayFrom(arrayLike, mapFn) {
  var C = Array;
  var items = Object(arrayLike);
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }
  if (typeof mapFn !== "undefined") {
    if (!isCallable(mapFn)) {
      throw new TypeError("Array.from: when provided, the second argument must be a function");
    }
  }
  var len = toLength(items.length);
  var A = isCallable(C) ? Object(new C(len)) : new Array(len);
  var k = 0;
  var kValue;
  while (k < len) {
    kValue = items[k];
    if (mapFn) {
      A[k] = mapFn(kValue, k);
    } else {
      A[k] = kValue;
    }
    k += 1;
  }
  A.length = len;
  return A;
}
var import_dist, import_dist2, import_dist3, toStr, maxSafeInteger;
var init_array_from = __esm({
  "../node_modules/dom-accessibility-api/dist/polyfills/array.from.mjs"() {
    import_dist = __toESM(require_dist(), 1);
    import_dist2 = __toESM(require_dist2(), 1);
    import_dist3 = __toESM(require_dist3(), 1);
    toStr = Object.prototype.toString;
    maxSafeInteger = Math.pow(2, 53) - 1;
  }
});

// ../node_modules/dom-accessibility-api/dist/polyfills/SetLike.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var import_dist4, import_dist5, import_dist6, SetLike, SetLike_default;
var init_SetLike = __esm({
  "../node_modules/dom-accessibility-api/dist/polyfills/SetLike.mjs"() {
    import_dist4 = __toESM(require_dist(), 1);
    import_dist5 = __toESM(require_dist2(), 1);
    import_dist6 = __toESM(require_dist3(), 1);
    SetLike = function() {
      function SetLike2() {
        var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        _classCallCheck(this, SetLike2);
        _defineProperty(this, "items", void 0);
        this.items = items;
      }
      _createClass(SetLike2, [{
        key: "add",
        value: function add(value) {
          if (this.has(value) === false) {
            this.items.push(value);
          }
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.items = [];
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var previousLength = this.items.length;
          this.items = this.items.filter(function(item) {
            return item !== value;
          });
          return previousLength !== this.items.length;
        }
      }, {
        key: "forEach",
        value: function forEach(callbackfn) {
          var _this = this;
          this.items.forEach(function(item) {
            callbackfn(item, item, _this);
          });
        }
      }, {
        key: "has",
        value: function has(value) {
          return this.items.indexOf(value) !== -1;
        }
      }, {
        key: "size",
        get: function get() {
          return this.items.length;
        }
      }]);
      return SetLike2;
    }();
    SetLike_default = typeof Set === "undefined" ? Set : SetLike;
  }
});

// ../node_modules/dom-accessibility-api/dist/getRole.mjs
function getLocalName(element) {
  var _element$localName;
  return (
    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : (
      // eslint-disable-next-line no-restricted-properties -- required for the fallback
      element.tagName.toLowerCase()
    )
  );
}
function hasGlobalAriaAttributes(element, role) {
  return [
    "aria-atomic",
    "aria-busy",
    "aria-controls",
    "aria-current",
    "aria-describedby",
    "aria-details",
    // "disabled",
    "aria-dropeffect",
    // "errormessage",
    "aria-flowto",
    "aria-grabbed",
    // "haspopup",
    "aria-hidden",
    // "invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-live",
    "aria-owns",
    "aria-relevant",
    "aria-roledescription"
  ].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole(element, implicitRole) {
  return hasGlobalAriaAttributes(element, implicitRole);
}
function getRole(element) {
  var explicitRole = getExplicitRole(element);
  if (explicitRole === null || explicitRole === "presentation") {
    var implicitRole = getImplicitRole(element);
    if (explicitRole !== "presentation" || ignorePresentationalRole(element, implicitRole || "")) {
      return implicitRole;
    }
  }
  return explicitRole;
}
function getImplicitRole(element) {
  var mappedByTag = localNameToRoleMappings[getLocalName(element)];
  if (mappedByTag !== void 0) {
    return mappedByTag;
  }
  switch (getLocalName(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) {
        return "link";
      }
      break;
    case "img":
      if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
        return "presentation";
      }
      return "img";
    case "input": {
      var _ref = element, type = _ref.type;
      switch (type) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "textbox";
        case "search":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      if (element.hasAttribute("multiple") || element.size > 1) {
        return "listbox";
      }
      return "combobox";
  }
  return null;
}
function getExplicitRole(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) {
      return explicitRole;
    }
  }
  return null;
}
var import_dist7, import_dist8, import_dist9, localNameToRoleMappings, prohibitedAttributes;
var init_getRole = __esm({
  "../node_modules/dom-accessibility-api/dist/getRole.mjs"() {
    import_dist7 = __toESM(require_dist(), 1);
    import_dist8 = __toESM(require_dist2(), 1);
    import_dist9 = __toESM(require_dist3(), 1);
    localNameToRoleMappings = {
      article: "article",
      aside: "complementary",
      button: "button",
      datalist: "listbox",
      dd: "definition",
      details: "group",
      dialog: "dialog",
      dt: "term",
      fieldset: "group",
      figure: "figure",
      // WARNING: Only with an accessible name
      form: "form",
      footer: "contentinfo",
      h1: "heading",
      h2: "heading",
      h3: "heading",
      h4: "heading",
      h5: "heading",
      h6: "heading",
      header: "banner",
      hr: "separator",
      html: "document",
      legend: "legend",
      li: "listitem",
      math: "math",
      main: "main",
      menu: "list",
      nav: "navigation",
      ol: "list",
      optgroup: "group",
      // WARNING: Only in certain context
      option: "option",
      output: "status",
      progress: "progressbar",
      // WARNING: Only with an accessible name
      section: "region",
      summary: "button",
      table: "table",
      tbody: "rowgroup",
      textarea: "textbox",
      tfoot: "rowgroup",
      // WARNING: Only in certain context
      td: "cell",
      th: "columnheader",
      thead: "rowgroup",
      tr: "row",
      ul: "list"
    };
    prohibitedAttributes = {
      caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
      insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
      superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"])
    };
  }
});

// ../node_modules/dom-accessibility-api/dist/util.mjs
function isElement(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement(node) {
  return isElement(node) && getLocalName(node) === "caption";
}
function isHTMLInputElement(node) {
  return isElement(node) && getLocalName(node) === "input";
}
function isHTMLOptGroupElement(node) {
  return isElement(node) && getLocalName(node) === "optgroup";
}
function isHTMLSelectElement(node) {
  return isElement(node) && getLocalName(node) === "select";
}
function isHTMLTableElement(node) {
  return isElement(node) && getLocalName(node) === "table";
}
function isHTMLTextAreaElement(node) {
  return isElement(node) && getLocalName(node) === "textarea";
}
function safeWindow(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) {
    throw new TypeError("no window available");
  }
  return defaultView;
}
function isHTMLFieldSetElement(node) {
  return isElement(node) && getLocalName(node) === "fieldset";
}
function isHTMLLegendElement(node) {
  return isElement(node) && getLocalName(node) === "legend";
}
function isHTMLSlotElement(node) {
  return isElement(node) && getLocalName(node) === "slot";
}
function isSVGElement(node) {
  return isElement(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement(node) {
  return isElement(node) && getLocalName(node) === "svg";
}
function isSVGTitleElement(node) {
  return isSVGElement(node) && getLocalName(node) === "title";
}
function queryIdRefs(node, attributeName) {
  if (isElement(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" ");
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(
      function(element) {
        return element !== null;
      }
      // TODO: why does this not narrow?
    );
  }
  return [];
}
function hasAnyConcreteRoles(node, roles2) {
  if (isElement(node)) {
    return roles2.indexOf(getRole(node)) !== -1;
  }
  return false;
}
var import_dist10, import_dist11, import_dist12;
var init_util = __esm({
  "../node_modules/dom-accessibility-api/dist/util.mjs"() {
    import_dist10 = __toESM(require_dist(), 1);
    import_dist11 = __toESM(require_dist2(), 1);
    import_dist12 = __toESM(require_dist3(), 1);
    init_getRole();
    init_getRole();
  }
});

// ../node_modules/dom-accessibility-api/dist/accessible-name-and-description.mjs
function asFlatString(s) {
  return s.trim().replace(/\s\s+/g, " ");
}
function isHidden(node, getComputedStyleImplementation) {
  if (!isElement(node)) {
    return false;
  }
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
    return true;
  }
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl(node) {
  return hasAnyConcreteRoles(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
}
function hasAbstractRole(node, role) {
  if (!isElement(node)) {
    return false;
  }
  switch (role) {
    case "range":
      return hasAnyConcreteRoles(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree(element, selectors) {
  var elements = arrayFrom(element.querySelectorAll(selectors));
  queryIdRefs(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom(root.querySelectorAll(selectors)));
  });
  return elements;
}
function querySelectedOptions(listbox) {
  if (isHTMLSelectElement(listbox)) {
    return listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]");
  }
  return querySelectorAllSubtree(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational(node) {
  return hasAnyConcreteRoles(node, ["none", "presentation"]);
}
function isNativeHostLanguageTextAlternativeElement(node) {
  return isHTMLTableCaptionElement(node);
}
function allowsNameFromContent(node) {
  return hasAnyConcreteRoles(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement(node) {
  return false;
}
function getValueOfTextbox(element) {
  if (isHTMLInputElement(element) || isHTMLTextAreaElement(element)) {
    return element.value;
  }
  return element.textContent || "";
}
function getTextualContent(declaration) {
  var content = declaration.getPropertyValue("content");
  if (/^["'].*["']$/.test(content)) {
    return content.slice(1, -1);
  }
  return "";
}
function isLabelableElement(element) {
  var localName = getLocalName(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement(element) {
  if (isLabelableElement(element)) {
    return element;
  }
  var labelableElement = null;
  element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement(childNode)) {
      var descendantLabelableElement = findLabelableElement(childNode);
      if (descendantLabelableElement !== null) {
        labelableElement = descendantLabelableElement;
      }
    }
  });
  return labelableElement;
}
function getControlOfLabel(label) {
  if (label.control !== void 0) {
    return label.control;
  }
  var htmlFor = label.getAttribute("for");
  if (htmlFor !== null) {
    return label.ownerDocument.getElementById(htmlFor);
  }
  return findLabelableElement(label);
}
function getLabels(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) {
    return labelsProperty;
  }
  if (labelsProperty !== void 0) {
    return arrayFrom(labelsProperty);
  }
  if (!isLabelableElement(element)) {
    return null;
  }
  var document2 = element.ownerDocument;
  return arrayFrom(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel(label) === element;
  });
}
function getSlotContents(slot) {
  var assignedNodes = slot.assignedNodes();
  if (assignedNodes.length === 0) {
    return arrayFrom(slot.childNodes);
  }
  return assignedNodes;
}
function computeTextAlternative(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var consultedNodes = new SetLike_default();
  var window2 = safeWindow(root);
  var _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context2) {
    var accumulatedText = "";
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before");
      var beforeContent = getTextualContent(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : arrayFrom(node.childNodes).concat(queryIdRefs(node, "aria-owns"));
    childNodes.forEach(function(child) {
      var result = computeTextAlternative2(child, {
        isEmbeddedInLabel: context2.isEmbeddedInLabel,
        isReferenced: false,
        recursion: true
      });
      var display = isElement(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
      var separator = display !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    });
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after");
      var afterContent = getTextualContent(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
      consultedNodes.add(attribute);
      return attribute.value;
    }
    return null;
  }
  function computeTooltipAttributeValue(node) {
    if (!isElement(node)) {
      return null;
    }
    return useAttribute(node, "title");
  }
  function computeElementTextAlternative(node) {
    if (!isElement(node)) {
      return null;
    }
    if (isHTMLFieldSetElement(node)) {
      consultedNodes.add(node);
      var children = arrayFrom(node.childNodes);
      for (var i = 0; i < children.length; i += 1) {
        var child = children[i];
        if (isHTMLLegendElement(child)) {
          return computeTextAlternative2(child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isHTMLTableElement(node)) {
      consultedNodes.add(node);
      var _children = arrayFrom(node.childNodes);
      for (var _i = 0; _i < _children.length; _i += 1) {
        var _child = _children[_i];
        if (isHTMLTableCaptionElement(_child)) {
          return computeTextAlternative2(_child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isSVGSVGElement(node)) {
      consultedNodes.add(node);
      var _children2 = arrayFrom(node.childNodes);
      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {
        var _child2 = _children2[_i2];
        if (isSVGTitleElement(_child2)) {
          return _child2.textContent;
        }
      }
      return null;
    } else if (getLocalName(node) === "img" || getLocalName(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) {
        return nameFromAlt;
      }
    } else if (isHTMLOptGroupElement(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) {
        return nameFromLabel;
      }
    }
    if (isHTMLInputElement(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) {
        return nameFromValue;
      }
      if (node.type === "submit") {
        return "Submit";
      }
      if (node.type === "reset") {
        return "Reset";
      }
    }
    var labels = getLabels(node);
    if (labels !== null && labels.length !== 0) {
      consultedNodes.add(node);
      return arrayFrom(labels).map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: true,
          isReferenced: false,
          recursion: true
        });
      }).filter(function(label) {
        return label.length > 0;
      }).join(" ");
    }
    if (isHTMLInputElement(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) {
        return _nameFromAlt;
      }
      var nameFromTitle = useAttribute(node, "title");
      if (nameFromTitle !== null) {
        return nameFromTitle;
      }
      return "Submit Query";
    }
    if (hasAnyConcreteRoles(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, {
        isEmbeddedInLabel: false,
        isReferenced: false
      });
      if (nameFromSubTree !== "") {
        return nameFromSubTree;
      }
    }
    return null;
  }
  function computeTextAlternative2(current, context2) {
    if (consultedNodes.has(current)) {
      return "";
    }
    if (!hidden && isHidden(current, getComputedStyle) && !context2.isReferenced) {
      consultedNodes.add(current);
      return "";
    }
    var labelAttributeNode = isElement(current) ? current.getAttributeNode("aria-labelledby") : null;
    var labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs(current, "aria-labelledby") : [];
    if (compute === "name" && !context2.isReferenced && labelElements.length > 0) {
      consultedNodes.add(labelAttributeNode);
      return labelElements.map(function(element) {
        return computeTextAlternative2(element, {
          isEmbeddedInLabel: context2.isEmbeddedInLabel,
          isReferenced: true,
          // this isn't recursion as specified, otherwise we would skip
          // `aria-label` in
          // <input id="myself" aria-label="foo" aria-labelledby="myself"
          recursion: false
        });
      }).join(" ");
    }
    var skipToStep2E = context2.recursion && isControl(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") {
        consultedNodes.add(current);
        return ariaLabel;
      }
      if (!isMarkedPresentational(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) {
          consultedNodes.add(current);
          return elementTextAlternative;
        }
      }
    }
    if (hasAnyConcreteRoles(current, ["menu"])) {
      consultedNodes.add(current);
      return "";
    }
    if (skipToStep2E || context2.isEmbeddedInLabel || context2.isReferenced) {
      if (hasAnyConcreteRoles(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions(current);
        if (selectedOptions.length === 0) {
          return isHTMLInputElement(current) ? current.value : "";
        }
        return arrayFrom(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative2(selectedOption, {
            isEmbeddedInLabel: context2.isEmbeddedInLabel,
            isReferenced: false,
            recursion: true
          });
        }).join(" ");
      }
      if (hasAbstractRole(current, "range")) {
        consultedNodes.add(current);
        if (current.hasAttribute("aria-valuetext")) {
          return current.getAttribute("aria-valuetext");
        }
        if (current.hasAttribute("aria-valuenow")) {
          return current.getAttribute("aria-valuenow");
        }
        return current.getAttribute("value") || "";
      }
      if (hasAnyConcreteRoles(current, ["textbox"])) {
        consultedNodes.add(current);
        return getValueOfTextbox(current);
      }
    }
    if (allowsNameFromContent(current) || isElement(current) && context2.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement(current)) {
      var accumulatedText2F = computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context2.isEmbeddedInLabel,
        isReferenced: false
      });
      if (accumulatedText2F !== "") {
        consultedNodes.add(current);
        return accumulatedText2F;
      }
    }
    if (current.nodeType === current.TEXT_NODE) {
      consultedNodes.add(current);
      return current.textContent || "";
    }
    if (context2.recursion) {
      consultedNodes.add(current);
      return computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context2.isEmbeddedInLabel,
        isReferenced: false
      });
    }
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    if (tooltipAttributeValue !== null) {
      consultedNodes.add(current);
      return tooltipAttributeValue;
    }
    consultedNodes.add(current);
    return "";
  }
  return asFlatString(computeTextAlternative2(root, {
    isEmbeddedInLabel: false,
    // by spec computeAccessibleDescription starts with the referenced elements as roots
    isReferenced: compute === "description",
    recursion: false
  }));
}
var import_dist13, import_dist14, import_dist15;
var init_accessible_name_and_description = __esm({
  "../node_modules/dom-accessibility-api/dist/accessible-name-and-description.mjs"() {
    import_dist13 = __toESM(require_dist(), 1);
    import_dist14 = __toESM(require_dist2(), 1);
    import_dist15 = __toESM(require_dist3(), 1);
    init_array_from();
    init_SetLike();
    init_util();
  }
});

// ../node_modules/dom-accessibility-api/dist/accessible-description.mjs
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return _typeof2(key) === "symbol" ? key : String(key);
}
function _toPrimitive2(input, hint) {
  if (_typeof2(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof2(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function computeAccessibleDescription(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var description = queryIdRefs(root, "aria-describedby").map(function(element) {
    return computeTextAlternative(element, _objectSpread(_objectSpread({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
var import_dist16, import_dist17, import_dist18;
var init_accessible_description = __esm({
  "../node_modules/dom-accessibility-api/dist/accessible-description.mjs"() {
    import_dist16 = __toESM(require_dist(), 1);
    import_dist17 = __toESM(require_dist2(), 1);
    import_dist18 = __toESM(require_dist3(), 1);
    init_accessible_name_and_description();
    init_util();
  }
});

// ../node_modules/dom-accessibility-api/dist/accessible-name.mjs
function prohibitsNaming(node) {
  return hasAnyConcreteRoles(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (prohibitsNaming(root)) {
    return "";
  }
  return computeTextAlternative(root, options);
}
var import_dist19, import_dist20, import_dist21;
var init_accessible_name = __esm({
  "../node_modules/dom-accessibility-api/dist/accessible-name.mjs"() {
    import_dist19 = __toESM(require_dist(), 1);
    import_dist20 = __toESM(require_dist2(), 1);
    import_dist21 = __toESM(require_dist3(), 1);
    init_accessible_name_and_description();
    init_util();
  }
});

// ../node_modules/dom-accessibility-api/dist/is-inaccessible.mjs
var import_dist22, import_dist23, import_dist24;
var init_is_inaccessible = __esm({
  "../node_modules/dom-accessibility-api/dist/is-inaccessible.mjs"() {
    import_dist22 = __toESM(require_dist(), 1);
    import_dist23 = __toESM(require_dist2(), 1);
    import_dist24 = __toESM(require_dist3(), 1);
  }
});

// ../node_modules/dom-accessibility-api/dist/index.mjs
var import_dist25, import_dist26, import_dist27;
var init_dist = __esm({
  "../node_modules/dom-accessibility-api/dist/index.mjs"() {
    import_dist25 = __toESM(require_dist(), 1);
    import_dist26 = __toESM(require_dist2(), 1);
    import_dist27 = __toESM(require_dist3(), 1);
    init_accessible_description();
    init_accessible_name();
    init_getRole();
    init_is_inaccessible();
  }
});

// ../node_modules/aria-query/lib/util/iteratorProxy.js
var require_iteratorProxy = __commonJS({
  "../node_modules/aria-query/lib/util/iteratorProxy.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function iteratorProxy() {
      var values = this;
      var index = 0;
      var iter = {
        "@@iterator": function iterator() {
          return iter;
        },
        next: function next() {
          if (index < values.length) {
            var value = values[index];
            index = index + 1;
            return {
              done: false,
              value
            };
          } else {
            return {
              done: true
            };
          }
        }
      };
      return iter;
    }
    var _default = iteratorProxy;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/util/iterationDecorator.js
var require_iterationDecorator = __commonJS({
  "../node_modules/aria-query/lib/util/iterationDecorator.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = iterationDecorator;
    var _iteratorProxy = _interopRequireDefault(require_iteratorProxy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof3(obj);
    }
    function iterationDecorator(collection, entries) {
      if (typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol") {
        Object.defineProperty(collection, Symbol.iterator, {
          value: _iteratorProxy.default.bind(entries)
        });
      }
      return collection;
    }
  }
});

// ../node_modules/aria-query/lib/ariaPropsMap.js
var require_ariaPropsMap = __commonJS({
  "../node_modules/aria-query/lib/ariaPropsMap.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var properties = [["aria-activedescendant", {
      "type": "id"
    }], ["aria-atomic", {
      "type": "boolean"
    }], ["aria-autocomplete", {
      "type": "token",
      "values": ["inline", "list", "both", "none"]
    }], ["aria-busy", {
      "type": "boolean"
    }], ["aria-checked", {
      "type": "tristate"
    }], ["aria-colcount", {
      type: "integer"
    }], ["aria-colindex", {
      type: "integer"
    }], ["aria-colspan", {
      type: "integer"
    }], ["aria-controls", {
      "type": "idlist"
    }], ["aria-current", {
      type: "token",
      values: ["page", "step", "location", "date", "time", true, false]
    }], ["aria-describedby", {
      "type": "idlist"
    }], ["aria-details", {
      "type": "id"
    }], ["aria-disabled", {
      "type": "boolean"
    }], ["aria-dropeffect", {
      "type": "tokenlist",
      "values": ["copy", "execute", "link", "move", "none", "popup"]
    }], ["aria-errormessage", {
      "type": "id"
    }], ["aria-expanded", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-flowto", {
      "type": "idlist"
    }], ["aria-grabbed", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-haspopup", {
      "type": "token",
      "values": [false, true, "menu", "listbox", "tree", "grid", "dialog"]
    }], ["aria-hidden", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-invalid", {
      "type": "token",
      "values": ["grammar", false, "spelling", true]
    }], ["aria-keyshortcuts", {
      type: "string"
    }], ["aria-label", {
      "type": "string"
    }], ["aria-labelledby", {
      "type": "idlist"
    }], ["aria-level", {
      "type": "integer"
    }], ["aria-live", {
      "type": "token",
      "values": ["assertive", "off", "polite"]
    }], ["aria-modal", {
      type: "boolean"
    }], ["aria-multiline", {
      "type": "boolean"
    }], ["aria-multiselectable", {
      "type": "boolean"
    }], ["aria-orientation", {
      "type": "token",
      "values": ["vertical", "undefined", "horizontal"]
    }], ["aria-owns", {
      "type": "idlist"
    }], ["aria-placeholder", {
      type: "string"
    }], ["aria-posinset", {
      "type": "integer"
    }], ["aria-pressed", {
      "type": "tristate"
    }], ["aria-readonly", {
      "type": "boolean"
    }], ["aria-relevant", {
      "type": "tokenlist",
      "values": ["additions", "all", "removals", "text"]
    }], ["aria-required", {
      "type": "boolean"
    }], ["aria-roledescription", {
      type: "string"
    }], ["aria-rowcount", {
      type: "integer"
    }], ["aria-rowindex", {
      type: "integer"
    }], ["aria-rowspan", {
      type: "integer"
    }], ["aria-selected", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-setsize", {
      "type": "integer"
    }], ["aria-sort", {
      "type": "token",
      "values": ["ascending", "descending", "none", "other"]
    }], ["aria-valuemax", {
      "type": "number"
    }], ["aria-valuemin", {
      "type": "number"
    }], ["aria-valuenow", {
      "type": "number"
    }], ["aria-valuetext", {
      "type": "string"
    }]];
    var ariaPropsMap = {
      entries: function entries() {
        return properties;
      },
      forEach: function forEach(fn) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(properties), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn.call(thisArg, values, key, properties);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = properties.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!ariaPropsMap.get(key);
      },
      keys: function keys() {
        return properties.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return properties.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(ariaPropsMap, ariaPropsMap.entries());
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/domMap.js
var require_domMap = __commonJS({
  "../node_modules/aria-query/lib/domMap.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var dom = [["a", {
      reserved: false
    }], ["abbr", {
      reserved: false
    }], ["acronym", {
      reserved: false
    }], ["address", {
      reserved: false
    }], ["applet", {
      reserved: false
    }], ["area", {
      reserved: false
    }], ["article", {
      reserved: false
    }], ["aside", {
      reserved: false
    }], ["audio", {
      reserved: false
    }], ["b", {
      reserved: false
    }], ["base", {
      reserved: true
    }], ["bdi", {
      reserved: false
    }], ["bdo", {
      reserved: false
    }], ["big", {
      reserved: false
    }], ["blink", {
      reserved: false
    }], ["blockquote", {
      reserved: false
    }], ["body", {
      reserved: false
    }], ["br", {
      reserved: false
    }], ["button", {
      reserved: false
    }], ["canvas", {
      reserved: false
    }], ["caption", {
      reserved: false
    }], ["center", {
      reserved: false
    }], ["cite", {
      reserved: false
    }], ["code", {
      reserved: false
    }], ["col", {
      reserved: true
    }], ["colgroup", {
      reserved: true
    }], ["content", {
      reserved: false
    }], ["data", {
      reserved: false
    }], ["datalist", {
      reserved: false
    }], ["dd", {
      reserved: false
    }], ["del", {
      reserved: false
    }], ["details", {
      reserved: false
    }], ["dfn", {
      reserved: false
    }], ["dialog", {
      reserved: false
    }], ["dir", {
      reserved: false
    }], ["div", {
      reserved: false
    }], ["dl", {
      reserved: false
    }], ["dt", {
      reserved: false
    }], ["em", {
      reserved: false
    }], ["embed", {
      reserved: false
    }], ["fieldset", {
      reserved: false
    }], ["figcaption", {
      reserved: false
    }], ["figure", {
      reserved: false
    }], ["font", {
      reserved: false
    }], ["footer", {
      reserved: false
    }], ["form", {
      reserved: false
    }], ["frame", {
      reserved: false
    }], ["frameset", {
      reserved: false
    }], ["h1", {
      reserved: false
    }], ["h2", {
      reserved: false
    }], ["h3", {
      reserved: false
    }], ["h4", {
      reserved: false
    }], ["h5", {
      reserved: false
    }], ["h6", {
      reserved: false
    }], ["head", {
      reserved: true
    }], ["header", {
      reserved: false
    }], ["hgroup", {
      reserved: false
    }], ["hr", {
      reserved: false
    }], ["html", {
      reserved: true
    }], ["i", {
      reserved: false
    }], ["iframe", {
      reserved: false
    }], ["img", {
      reserved: false
    }], ["input", {
      reserved: false
    }], ["ins", {
      reserved: false
    }], ["kbd", {
      reserved: false
    }], ["keygen", {
      reserved: false
    }], ["label", {
      reserved: false
    }], ["legend", {
      reserved: false
    }], ["li", {
      reserved: false
    }], ["link", {
      reserved: true
    }], ["main", {
      reserved: false
    }], ["map", {
      reserved: false
    }], ["mark", {
      reserved: false
    }], ["marquee", {
      reserved: false
    }], ["menu", {
      reserved: false
    }], ["menuitem", {
      reserved: false
    }], ["meta", {
      reserved: true
    }], ["meter", {
      reserved: false
    }], ["nav", {
      reserved: false
    }], ["noembed", {
      reserved: true
    }], ["noscript", {
      reserved: true
    }], ["object", {
      reserved: false
    }], ["ol", {
      reserved: false
    }], ["optgroup", {
      reserved: false
    }], ["option", {
      reserved: false
    }], ["output", {
      reserved: false
    }], ["p", {
      reserved: false
    }], ["param", {
      reserved: true
    }], ["picture", {
      reserved: true
    }], ["pre", {
      reserved: false
    }], ["progress", {
      reserved: false
    }], ["q", {
      reserved: false
    }], ["rp", {
      reserved: false
    }], ["rt", {
      reserved: false
    }], ["rtc", {
      reserved: false
    }], ["ruby", {
      reserved: false
    }], ["s", {
      reserved: false
    }], ["samp", {
      reserved: false
    }], ["script", {
      reserved: true
    }], ["section", {
      reserved: false
    }], ["select", {
      reserved: false
    }], ["small", {
      reserved: false
    }], ["source", {
      reserved: true
    }], ["spacer", {
      reserved: false
    }], ["span", {
      reserved: false
    }], ["strike", {
      reserved: false
    }], ["strong", {
      reserved: false
    }], ["style", {
      reserved: true
    }], ["sub", {
      reserved: false
    }], ["summary", {
      reserved: false
    }], ["sup", {
      reserved: false
    }], ["table", {
      reserved: false
    }], ["tbody", {
      reserved: false
    }], ["td", {
      reserved: false
    }], ["textarea", {
      reserved: false
    }], ["tfoot", {
      reserved: false
    }], ["th", {
      reserved: false
    }], ["thead", {
      reserved: false
    }], ["time", {
      reserved: false
    }], ["title", {
      reserved: true
    }], ["tr", {
      reserved: false
    }], ["track", {
      reserved: true
    }], ["tt", {
      reserved: false
    }], ["u", {
      reserved: false
    }], ["ul", {
      reserved: false
    }], ["var", {
      reserved: false
    }], ["video", {
      reserved: false
    }], ["wbr", {
      reserved: false
    }], ["xmp", {
      reserved: false
    }]];
    var domMap = {
      entries: function entries() {
        return dom;
      },
      forEach: function forEach(fn) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(dom), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn.call(thisArg, values, key, dom);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = dom.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!domMap.get(key);
      },
      keys: function keys() {
        return dom.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return dom.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(domMap, domMap.entries());
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/commandRole.js
var require_commandRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/commandRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var commandRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = commandRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js
var require_compositeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var compositeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = compositeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/inputRole.js
var require_inputRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/inputRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var inputRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null
      },
      relatedConcepts: [{
        concept: {
          name: "input"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = inputRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js
var require_landmarkRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var landmarkRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = landmarkRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js
var require_rangeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rangeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = rangeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js
var require_roletypeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var roletypeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {
        "aria-atomic": null,
        "aria-busy": null,
        "aria-controls": null,
        "aria-current": null,
        "aria-describedby": null,
        "aria-details": null,
        "aria-dropeffect": null,
        "aria-flowto": null,
        "aria-grabbed": null,
        "aria-hidden": null,
        "aria-keyshortcuts": null,
        "aria-label": null,
        "aria-labelledby": null,
        "aria-live": null,
        "aria-owns": null,
        "aria-relevant": null,
        "aria-roledescription": null
      },
      relatedConcepts: [{
        concept: {
          name: "rel"
        },
        module: "HTML"
      }, {
        concept: {
          name: "role"
        },
        module: "XHTML"
      }, {
        concept: {
          name: "type"
        },
        module: "Dublin Core"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: []
    };
    var _default = roletypeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js
var require_sectionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sectionRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "frontmatter"
        },
        module: "DTB"
      }, {
        concept: {
          name: "level"
        },
        module: "DTB"
      }, {
        concept: {
          name: "level"
        },
        module: "SMIL"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = sectionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js
var require_sectionheadRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sectionheadRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = sectionheadRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/selectRole.js
var require_selectRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/selectRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var selectRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]]
    };
    var _default = selectRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/structureRole.js
var require_structureRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/structureRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var structureRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = structureRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js
var require_widgetRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var widgetRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = widgetRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/abstract/windowRole.js
var require_windowRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var windowRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-modal": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = windowRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js
var require_ariaAbstractRoles = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _commandRole = _interopRequireDefault(require_commandRole());
    var _compositeRole = _interopRequireDefault(require_compositeRole());
    var _inputRole = _interopRequireDefault(require_inputRole());
    var _landmarkRole = _interopRequireDefault(require_landmarkRole());
    var _rangeRole = _interopRequireDefault(require_rangeRole());
    var _roletypeRole = _interopRequireDefault(require_roletypeRole());
    var _sectionRole = _interopRequireDefault(require_sectionRole());
    var _sectionheadRole = _interopRequireDefault(require_sectionheadRole());
    var _selectRole = _interopRequireDefault(require_selectRole());
    var _structureRole = _interopRequireDefault(require_structureRole());
    var _widgetRole = _interopRequireDefault(require_widgetRole());
    var _windowRole = _interopRequireDefault(require_windowRole());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaAbstractRoles = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]];
    var _default = ariaAbstractRoles;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/alertRole.js
var require_alertRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/alertRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var alertRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-atomic": "true",
        "aria-live": "assertive"
      },
      relatedConcepts: [{
        concept: {
          name: "alert"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = alertRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js
var require_alertdialogRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var alertdialogRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "alert"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]]
    };
    var _default = alertdialogRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/applicationRole.js
var require_applicationRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/applicationRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var applicationRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "Device Independence Delivery Unit"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = applicationRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/articleRole.js
var require_articleRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/articleRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var articleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "article"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "document"]]
    };
    var _default = articleRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/bannerRole.js
var require_bannerRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/bannerRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var bannerRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of document"],
          name: "header"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = bannerRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js
var require_blockquoteRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var blockquoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = blockquoteRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/buttonRole.js
var require_buttonRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/buttonRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var buttonRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-pressed": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-pressed"
          }, {
            name: "type",
            value: "checkbox"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "aria-expanded",
            value: "false"
          }],
          name: "summary"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "aria-expanded",
            value: "true"
          }],
          constraints: ["direct descendant of details element with the open attribute defined"],
          name: "summary"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "button"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "image"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "reset"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "submit"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "button"
        },
        module: "HTML"
      }, {
        concept: {
          name: "trigger"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = buttonRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/captionRole.js
var require_captionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/captionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var captionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: ["figure", "grid", "table"],
      requiredContextRole: ["figure", "grid", "table"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = captionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/cellRole.js
var require_cellRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/cellRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var cellRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-colindex": null,
        "aria-colspan": null,
        "aria-rowindex": null,
        "aria-rowspan": null
      },
      relatedConcepts: [{
        concept: {
          constraints: ["descendant of table"],
          name: "td"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = cellRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js
var require_checkboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var checkboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "checkbox"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "option"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = checkboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/codeRole.js
var require_codeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/codeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var codeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = codeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js
var require_columnheaderRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var columnheaderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-sort": null
      },
      relatedConcepts: [{
        attributes: [{
          name: "scope",
          value: "col"
        }],
        concept: {
          name: "th"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
    };
    var _default = columnheaderRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js
var require_comboboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var comboboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-autocomplete": null,
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-expanded": "false",
        "aria-haspopup": "listbox"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "email"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "search"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "tel"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "text"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "multiple"
          }, {
            constraints: ["undefined"],
            name: "size"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "multiple"
          }, {
            name: "size",
            value: 1
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-controls": null,
        "aria-expanded": "false"
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = comboboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js
var require_complementaryRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var complementaryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "aside"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = complementaryRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js
var require_contentinfoRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var contentinfoRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of document"],
          name: "footer"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = contentinfoRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/definitionRole.js
var require_definitionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/definitionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var definitionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dd"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = definitionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/deletionRole.js
var require_deletionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/deletionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var deletionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = deletionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/dialogRole.js
var require_dialogRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/dialogRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var dialogRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dialog"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "window"]]
    };
    var _default = dialogRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/directoryRole.js
var require_directoryRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/directoryRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var directoryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        module: "DAISY Guide"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "list"]]
    };
    var _default = directoryRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/documentRole.js
var require_documentRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/documentRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var documentRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "Device Independence Delivery Unit"
        }
      }, {
        concept: {
          name: "body"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = documentRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js
var require_emphasisRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var emphasisRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = emphasisRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/feedRole.js
var require_feedRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/feedRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var feedRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["article"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "list"]]
    };
    var _default = feedRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/figureRole.js
var require_figureRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/figureRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var figureRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "figure"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = figureRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/formRole.js
var require_formRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/formRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var formRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-label"
          }],
          name: "form"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-labelledby"
          }],
          name: "form"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "name"
          }],
          name: "form"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = formRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/genericRole.js
var require_genericRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/genericRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var genericRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "span"
        },
        module: "HTML"
      }, {
        concept: {
          name: "div"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = genericRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/gridRole.js
var require_gridRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/gridRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var gridRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-multiselectable": null,
        "aria-readonly": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "role",
            value: "grid"
          }],
          name: "table"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]]
    };
    var _default = gridRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js
var require_gridcellRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var gridcellRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-selected": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "role",
            value: "gridcell"
          }],
          name: "td"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]]
    };
    var _default = gridcellRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/groupRole.js
var require_groupRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/groupRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var groupRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null
      },
      relatedConcepts: [{
        concept: {
          name: "details"
        },
        module: "HTML"
      }, {
        concept: {
          name: "fieldset"
        },
        module: "HTML"
      }, {
        concept: {
          name: "optgroup"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = groupRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/headingRole.js
var require_headingRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/headingRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var headingRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-level": "2"
      },
      relatedConcepts: [{
        concept: {
          name: "h1"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h2"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h3"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h4"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h5"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h6"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-level": "2"
      },
      superClass: [["roletype", "structure", "sectionhead"]]
    };
    var _default = headingRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/imgRole.js
var require_imgRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/imgRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var imgRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "alt"
          }],
          name: "img"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "alt"
          }],
          name: "img"
        },
        module: "HTML"
      }, {
        concept: {
          name: "imggroup"
        },
        module: "DTB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = imgRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/insertionRole.js
var require_insertionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/insertionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var insertionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = insertionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/linkRole.js
var require_linkRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/linkRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var linkRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "a"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "area"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "link"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = linkRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/listRole.js
var require_listRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/listRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menu"
        },
        module: "HTML"
      }, {
        concept: {
          name: "ol"
        },
        module: "HTML"
      }, {
        concept: {
          name: "ul"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["listitem"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = listRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/listboxRole.js
var require_listboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/listboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-invalid": null,
        "aria-multiselectable": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-orientation": "vertical"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: [">1"],
            name: "size"
          }, {
            name: "multiple"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: [">1"],
            name: "size"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "multiple"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          name: "datalist"
        },
        module: "HTML"
      }, {
        concept: {
          name: "list"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["option", "group"], ["option"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = listboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/listitemRole.js
var require_listitemRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/listitemRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listitemRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-level": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of ol, ul or menu"],
          name: "li"
        },
        module: "HTML"
      }, {
        concept: {
          name: "item"
        },
        module: "XForms"
      }],
      requireContextRole: ["directory", "list"],
      requiredContextRole: ["directory", "list"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = listitemRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/logRole.js
var require_logRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/logRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var logRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-live": "polite"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = logRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/mainRole.js
var require_mainRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/mainRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var mainRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "main"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = mainRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js
var require_marqueeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var marqueeRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = marqueeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/mathRole.js
var require_mathRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/mathRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var mathRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "math"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = mathRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/menuRole.js
var require_menuRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/menuRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "vertical"
      },
      relatedConcepts: [{
        concept: {
          name: "MENU"
        },
        module: "JAPI"
      }, {
        concept: {
          name: "list"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }, {
        concept: {
          name: "sidebar"
        },
        module: "DTB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = menuRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/menubarRole.js
var require_menubarRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/menubarRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menubarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        concept: {
          name: "toolbar"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]]
    };
    var _default = menubarRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js
var require_menuitemRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "MENU_ITEM"
        },
        module: "JAPI"
      }, {
        concept: {
          name: "listitem"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "menuitem"
        },
        module: "HTML"
      }, {
        concept: {
          name: "option"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = menuitemRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js
var require_menuitemcheckboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemcheckboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]]
    };
    var _default = menuitemcheckboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js
var require_menuitemradioRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemradioRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]]
    };
    var _default = menuitemradioRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/meterRole.js
var require_meterRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/meterRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var meterRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuetext": null,
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-valuenow": null
      },
      superClass: [["roletype", "structure", "range"]]
    };
    var _default = meterRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/navigationRole.js
var require_navigationRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/navigationRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var navigationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "nav"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = navigationRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/noneRole.js
var require_noneRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/noneRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var noneRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: []
    };
    var _default = noneRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/noteRole.js
var require_noteRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/noteRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var noteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = noteRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/optionRole.js
var require_optionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/optionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var optionRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-posinset": null,
        "aria-setsize": null,
        "aria-selected": "false"
      },
      relatedConcepts: [{
        concept: {
          name: "item"
        },
        module: "XForms"
      }, {
        concept: {
          name: "listitem"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "option"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-selected": "false"
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = optionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js
var require_paragraphRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var paragraphRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = paragraphRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/presentationRole.js
var require_presentationRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/presentationRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var presentationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = presentationRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js
var require_progressbarRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var progressbarRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuetext": null
      },
      relatedConcepts: [{
        concept: {
          name: "progress"
        },
        module: "HTML"
      }, {
        concept: {
          name: "status"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
    };
    var _default = progressbarRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/radioRole.js
var require_radioRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/radioRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var radioRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "radio"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = radioRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js
var require_radiogroupRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var radiogroupRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          name: "list"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["radio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = radiogroupRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/regionRole.js
var require_regionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/regionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var regionRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-label"
          }],
          name: "section"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-labelledby"
          }],
          name: "section"
        },
        module: "HTML"
      }, {
        concept: {
          name: "Device Independence Glossart perceivable unit"
        }
      }, {
        concept: {
          name: "frame"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = regionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/rowRole.js
var require_rowRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/rowRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-colindex": null,
        "aria-expanded": null,
        "aria-level": null,
        "aria-posinset": null,
        "aria-rowindex": null,
        "aria-selected": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "tr"
        },
        module: "HTML"
      }],
      requireContextRole: ["grid", "rowgroup", "table", "treegrid"],
      requiredContextRole: ["grid", "rowgroup", "table", "treegrid"],
      requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]]
    };
    var _default = rowRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js
var require_rowgroupRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowgroupRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "tbody"
        },
        module: "HTML"
      }, {
        concept: {
          name: "tfoot"
        },
        module: "HTML"
      }, {
        concept: {
          name: "thead"
        },
        module: "HTML"
      }],
      requireContextRole: ["grid", "table", "treegrid"],
      requiredContextRole: ["grid", "table", "treegrid"],
      requiredOwnedElements: [["row"]],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = rowgroupRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js
var require_rowheaderRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowheaderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-sort": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "scope",
            value: "row"
          }],
          name: "th"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "scope",
            value: "rowgroup"
          }],
          name: "th"
        },
        module: "HTML"
      }],
      requireContextRole: ["row", "rowgroup"],
      requiredContextRole: ["row", "rowgroup"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
    };
    var _default = rowheaderRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js
var require_scrollbarRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var scrollbarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-valuetext": null,
        "aria-orientation": "vertical",
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-controls": null,
        "aria-valuenow": null
      },
      superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
    };
    var _default = scrollbarRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/searchRole.js
var require_searchRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/searchRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var searchRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = searchRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js
var require_searchboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var searchboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "search"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "input", "textbox"]]
    };
    var _default = searchboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/separatorRole.js
var require_separatorRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/separatorRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var separatorRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-orientation": "horizontal",
        "aria-valuemax": "100",
        "aria-valuemin": "0",
        "aria-valuenow": null,
        "aria-valuetext": null
      },
      relatedConcepts: [{
        concept: {
          name: "hr"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = separatorRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/sliderRole.js
var require_sliderRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/sliderRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sliderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-valuetext": null,
        "aria-orientation": "horizontal",
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "range"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-valuenow": null
      },
      superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]]
    };
    var _default = sliderRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js
var require_spinbuttonRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var spinbuttonRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-valuetext": null,
        "aria-valuenow": "0"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "number"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]]
    };
    var _default = spinbuttonRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/statusRole.js
var require_statusRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/statusRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var statusRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-atomic": "true",
        "aria-live": "polite"
      },
      relatedConcepts: [{
        concept: {
          name: "output"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = statusRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/strongRole.js
var require_strongRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/strongRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var strongRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = strongRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js
var require_subscriptRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var subscriptRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = subscriptRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js
var require_superscriptRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var superscriptRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = superscriptRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/switchRole.js
var require_switchRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/switchRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var switchRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "button"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox"]]
    };
    var _default = switchRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/tabRole.js
var require_tabRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/tabRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tabRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-posinset": null,
        "aria-setsize": null,
        "aria-selected": "false"
      },
      relatedConcepts: [],
      requireContextRole: ["tablist"],
      requiredContextRole: ["tablist"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]]
    };
    var _default = tabRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/tableRole.js
var require_tableRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/tableRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tableRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-colcount": null,
        "aria-rowcount": null
      },
      relatedConcepts: [{
        concept: {
          name: "table"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tableRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/tablistRole.js
var require_tablistRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/tablistRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tablistRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-level": null,
        "aria-multiselectable": null,
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        module: "DAISY",
        concept: {
          name: "guide"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["tab"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"]]
    };
    var _default = tablistRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js
var require_tabpanelRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tabpanelRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tabpanelRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/termRole.js
var require_termRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/termRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var termRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dfn"
        },
        module: "HTML"
      }, {
        concept: {
          name: "dt"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = termRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/textboxRole.js
var require_textboxRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/textboxRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var textboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-autocomplete": null,
        "aria-errormessage": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-multiline": null,
        "aria-placeholder": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "type"
          }, {
            constraints: ["undefined"],
            name: "list"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "email"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "tel"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "text"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "input"
        },
        module: "XForms"
      }, {
        concept: {
          name: "textarea"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = textboxRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/timeRole.js
var require_timeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/timeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var timeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = timeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/timerRole.js
var require_timerRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/timerRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var timerRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "status"]]
    };
    var _default = timerRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js
var require_toolbarRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var toolbarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        concept: {
          name: "menubar"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"]]
    };
    var _default = toolbarRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js
var require_tooltipRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tooltipRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tooltipRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/treeRole.js
var require_treeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/treeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treeRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-multiselectable": null,
        "aria-required": null,
        "aria-orientation": "vertical"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["treeitem", "group"], ["treeitem"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = treeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/treegridRole.js
var require_treegridRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/treegridRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treegridRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]]
    };
    var _default = treegridRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js
var require_treeitemRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treeitemRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-expanded": null,
        "aria-haspopup": null
      },
      relatedConcepts: [],
      requireContextRole: ["group", "tree"],
      requiredContextRole: ["group", "tree"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-selected": null
      },
      superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]]
    };
    var _default = treeitemRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js
var require_ariaLiteralRoles = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _alertRole = _interopRequireDefault(require_alertRole());
    var _alertdialogRole = _interopRequireDefault(require_alertdialogRole());
    var _applicationRole = _interopRequireDefault(require_applicationRole());
    var _articleRole = _interopRequireDefault(require_articleRole());
    var _bannerRole = _interopRequireDefault(require_bannerRole());
    var _blockquoteRole = _interopRequireDefault(require_blockquoteRole());
    var _buttonRole = _interopRequireDefault(require_buttonRole());
    var _captionRole = _interopRequireDefault(require_captionRole());
    var _cellRole = _interopRequireDefault(require_cellRole());
    var _checkboxRole = _interopRequireDefault(require_checkboxRole());
    var _codeRole = _interopRequireDefault(require_codeRole());
    var _columnheaderRole = _interopRequireDefault(require_columnheaderRole());
    var _comboboxRole = _interopRequireDefault(require_comboboxRole());
    var _complementaryRole = _interopRequireDefault(require_complementaryRole());
    var _contentinfoRole = _interopRequireDefault(require_contentinfoRole());
    var _definitionRole = _interopRequireDefault(require_definitionRole());
    var _deletionRole = _interopRequireDefault(require_deletionRole());
    var _dialogRole = _interopRequireDefault(require_dialogRole());
    var _directoryRole = _interopRequireDefault(require_directoryRole());
    var _documentRole = _interopRequireDefault(require_documentRole());
    var _emphasisRole = _interopRequireDefault(require_emphasisRole());
    var _feedRole = _interopRequireDefault(require_feedRole());
    var _figureRole = _interopRequireDefault(require_figureRole());
    var _formRole = _interopRequireDefault(require_formRole());
    var _genericRole = _interopRequireDefault(require_genericRole());
    var _gridRole = _interopRequireDefault(require_gridRole());
    var _gridcellRole = _interopRequireDefault(require_gridcellRole());
    var _groupRole = _interopRequireDefault(require_groupRole());
    var _headingRole = _interopRequireDefault(require_headingRole());
    var _imgRole = _interopRequireDefault(require_imgRole());
    var _insertionRole = _interopRequireDefault(require_insertionRole());
    var _linkRole = _interopRequireDefault(require_linkRole());
    var _listRole = _interopRequireDefault(require_listRole());
    var _listboxRole = _interopRequireDefault(require_listboxRole());
    var _listitemRole = _interopRequireDefault(require_listitemRole());
    var _logRole = _interopRequireDefault(require_logRole());
    var _mainRole = _interopRequireDefault(require_mainRole());
    var _marqueeRole = _interopRequireDefault(require_marqueeRole());
    var _mathRole = _interopRequireDefault(require_mathRole());
    var _menuRole = _interopRequireDefault(require_menuRole());
    var _menubarRole = _interopRequireDefault(require_menubarRole());
    var _menuitemRole = _interopRequireDefault(require_menuitemRole());
    var _menuitemcheckboxRole = _interopRequireDefault(require_menuitemcheckboxRole());
    var _menuitemradioRole = _interopRequireDefault(require_menuitemradioRole());
    var _meterRole = _interopRequireDefault(require_meterRole());
    var _navigationRole = _interopRequireDefault(require_navigationRole());
    var _noneRole = _interopRequireDefault(require_noneRole());
    var _noteRole = _interopRequireDefault(require_noteRole());
    var _optionRole = _interopRequireDefault(require_optionRole());
    var _paragraphRole = _interopRequireDefault(require_paragraphRole());
    var _presentationRole = _interopRequireDefault(require_presentationRole());
    var _progressbarRole = _interopRequireDefault(require_progressbarRole());
    var _radioRole = _interopRequireDefault(require_radioRole());
    var _radiogroupRole = _interopRequireDefault(require_radiogroupRole());
    var _regionRole = _interopRequireDefault(require_regionRole());
    var _rowRole = _interopRequireDefault(require_rowRole());
    var _rowgroupRole = _interopRequireDefault(require_rowgroupRole());
    var _rowheaderRole = _interopRequireDefault(require_rowheaderRole());
    var _scrollbarRole = _interopRequireDefault(require_scrollbarRole());
    var _searchRole = _interopRequireDefault(require_searchRole());
    var _searchboxRole = _interopRequireDefault(require_searchboxRole());
    var _separatorRole = _interopRequireDefault(require_separatorRole());
    var _sliderRole = _interopRequireDefault(require_sliderRole());
    var _spinbuttonRole = _interopRequireDefault(require_spinbuttonRole());
    var _statusRole = _interopRequireDefault(require_statusRole());
    var _strongRole = _interopRequireDefault(require_strongRole());
    var _subscriptRole = _interopRequireDefault(require_subscriptRole());
    var _superscriptRole = _interopRequireDefault(require_superscriptRole());
    var _switchRole = _interopRequireDefault(require_switchRole());
    var _tabRole = _interopRequireDefault(require_tabRole());
    var _tableRole = _interopRequireDefault(require_tableRole());
    var _tablistRole = _interopRequireDefault(require_tablistRole());
    var _tabpanelRole = _interopRequireDefault(require_tabpanelRole());
    var _termRole = _interopRequireDefault(require_termRole());
    var _textboxRole = _interopRequireDefault(require_textboxRole());
    var _timeRole = _interopRequireDefault(require_timeRole());
    var _timerRole = _interopRequireDefault(require_timerRole());
    var _toolbarRole = _interopRequireDefault(require_toolbarRole());
    var _tooltipRole = _interopRequireDefault(require_tooltipRole());
    var _treeRole = _interopRequireDefault(require_treeRole());
    var _treegridRole = _interopRequireDefault(require_treegridRole());
    var _treeitemRole = _interopRequireDefault(require_treeitemRole());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaLiteralRoles = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]];
    var _default = ariaLiteralRoles;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js
var require_docAbstractRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAbstractRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "abstract [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docAbstractRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js
var require_docAcknowledgmentsRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAcknowledgmentsRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "acknowledgments [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAcknowledgmentsRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js
var require_docAfterwordRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAfterwordRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "afterword [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAfterwordRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js
var require_docAppendixRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAppendixRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "appendix [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAppendixRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js
var require_docBacklinkRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBacklinkRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "content"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "referrer [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docBacklinkRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js
var require_docBiblioentryRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBiblioentryRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "EPUB biblioentry [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: ["doc-bibliography"],
      requiredContextRole: ["doc-bibliography"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "listitem"]]
    };
    var _default = docBiblioentryRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js
var require_docBibliographyRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBibliographyRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "bibliography [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["doc-biblioentry"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docBibliographyRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js
var require_docBibliorefRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBibliorefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "biblioref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docBibliorefRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js
var require_docChapterRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docChapterRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "chapter [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docChapterRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js
var require_docColophonRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docColophonRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "colophon [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docColophonRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js
var require_docConclusionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docConclusionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "conclusion [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docConclusionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js
var require_docCoverRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCoverRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "cover [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "img"]]
    };
    var _default = docCoverRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js
var require_docCreditRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCreditRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "credit [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docCreditRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js
var require_docCreditsRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCreditsRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "credits [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docCreditsRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js
var require_docDedicationRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docDedicationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "dedication [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docDedicationRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js
var require_docEndnoteRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEndnoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "rearnote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: ["doc-endnotes"],
      requiredContextRole: ["doc-endnotes"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "listitem"]]
    };
    var _default = docEndnoteRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js
var require_docEndnotesRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEndnotesRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "rearnotes [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["doc-endnote"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docEndnotesRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js
var require_docEpigraphRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEpigraphRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "epigraph [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docEpigraphRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js
var require_docEpilogueRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEpilogueRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "epilogue [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docEpilogueRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js
var require_docErrataRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docErrataRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "errata [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docErrataRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js
var require_docExampleRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docExampleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docExampleRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js
var require_docFootnoteRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docFootnoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "footnote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docFootnoteRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js
var require_docForewordRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docForewordRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "foreword [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docForewordRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js
var require_docGlossaryRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docGlossaryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "glossary [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["definition"], ["term"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docGlossaryRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js
var require_docGlossrefRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docGlossrefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "glossref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docGlossrefRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js
var require_docIndexRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docIndexRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "index [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docIndexRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js
var require_docIntroductionRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docIntroductionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "introduction [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docIntroductionRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js
var require_docNoterefRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docNoterefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "noteref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docNoterefRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js
var require_docNoticeRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docNoticeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "notice [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "note"]]
    };
    var _default = docNoticeRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js
var require_docPagebreakRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPagebreakRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "pagebreak [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "separator"]]
    };
    var _default = docPagebreakRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js
var require_docPagelistRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPagelistRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "page-list [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docPagelistRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js
var require_docPartRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPartRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "part [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPartRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js
var require_docPrefaceRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPrefaceRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "preface [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPrefaceRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js
var require_docPrologueRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPrologueRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "prologue [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPrologueRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js
var require_docPullquoteRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPullquoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "pullquote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["none"]]
    };
    var _default = docPullquoteRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js
var require_docQnaRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docQnaRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "qna [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docQnaRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js
var require_docSubtitleRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docSubtitleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "subtitle [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "sectionhead"]]
    };
    var _default = docSubtitleRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js
var require_docTipRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docTipRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "help [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "note"]]
    };
    var _default = docTipRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js
var require_docTocRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docTocRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "toc [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docTocRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js
var require_ariaDpubRoles = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _docAbstractRole = _interopRequireDefault(require_docAbstractRole());
    var _docAcknowledgmentsRole = _interopRequireDefault(require_docAcknowledgmentsRole());
    var _docAfterwordRole = _interopRequireDefault(require_docAfterwordRole());
    var _docAppendixRole = _interopRequireDefault(require_docAppendixRole());
    var _docBacklinkRole = _interopRequireDefault(require_docBacklinkRole());
    var _docBiblioentryRole = _interopRequireDefault(require_docBiblioentryRole());
    var _docBibliographyRole = _interopRequireDefault(require_docBibliographyRole());
    var _docBibliorefRole = _interopRequireDefault(require_docBibliorefRole());
    var _docChapterRole = _interopRequireDefault(require_docChapterRole());
    var _docColophonRole = _interopRequireDefault(require_docColophonRole());
    var _docConclusionRole = _interopRequireDefault(require_docConclusionRole());
    var _docCoverRole = _interopRequireDefault(require_docCoverRole());
    var _docCreditRole = _interopRequireDefault(require_docCreditRole());
    var _docCreditsRole = _interopRequireDefault(require_docCreditsRole());
    var _docDedicationRole = _interopRequireDefault(require_docDedicationRole());
    var _docEndnoteRole = _interopRequireDefault(require_docEndnoteRole());
    var _docEndnotesRole = _interopRequireDefault(require_docEndnotesRole());
    var _docEpigraphRole = _interopRequireDefault(require_docEpigraphRole());
    var _docEpilogueRole = _interopRequireDefault(require_docEpilogueRole());
    var _docErrataRole = _interopRequireDefault(require_docErrataRole());
    var _docExampleRole = _interopRequireDefault(require_docExampleRole());
    var _docFootnoteRole = _interopRequireDefault(require_docFootnoteRole());
    var _docForewordRole = _interopRequireDefault(require_docForewordRole());
    var _docGlossaryRole = _interopRequireDefault(require_docGlossaryRole());
    var _docGlossrefRole = _interopRequireDefault(require_docGlossrefRole());
    var _docIndexRole = _interopRequireDefault(require_docIndexRole());
    var _docIntroductionRole = _interopRequireDefault(require_docIntroductionRole());
    var _docNoterefRole = _interopRequireDefault(require_docNoterefRole());
    var _docNoticeRole = _interopRequireDefault(require_docNoticeRole());
    var _docPagebreakRole = _interopRequireDefault(require_docPagebreakRole());
    var _docPagelistRole = _interopRequireDefault(require_docPagelistRole());
    var _docPartRole = _interopRequireDefault(require_docPartRole());
    var _docPrefaceRole = _interopRequireDefault(require_docPrefaceRole());
    var _docPrologueRole = _interopRequireDefault(require_docPrologueRole());
    var _docPullquoteRole = _interopRequireDefault(require_docPullquoteRole());
    var _docQnaRole = _interopRequireDefault(require_docQnaRole());
    var _docSubtitleRole = _interopRequireDefault(require_docSubtitleRole());
    var _docTipRole = _interopRequireDefault(require_docTipRole());
    var _docTocRole = _interopRequireDefault(require_docTocRole());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaDpubRoles = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]];
    var _default = ariaDpubRoles;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js
var require_graphicsDocumentRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsDocumentRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        module: "GRAPHICS",
        concept: {
          name: "graphics-object"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "img"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "article"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "document"]]
    };
    var _default = graphicsDocumentRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js
var require_graphicsObjectRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsObjectRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        module: "GRAPHICS",
        concept: {
          name: "graphics-document"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "group"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "img"
        }
      }, {
        module: "GRAPHICS",
        concept: {
          name: "graphics-symbol"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"]]
    };
    var _default = graphicsObjectRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js
var require_graphicsSymbolRole = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsSymbolRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "img"]]
    };
    var _default = graphicsSymbolRole;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js
var require_ariaGraphicsRoles = __commonJS({
  "../node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _graphicsDocumentRole = _interopRequireDefault(require_graphicsDocumentRole());
    var _graphicsObjectRole = _interopRequireDefault(require_graphicsObjectRole());
    var _graphicsSymbolRole = _interopRequireDefault(require_graphicsSymbolRole());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaGraphicsRoles = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]];
    var _default = ariaGraphicsRoles;
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/rolesMap.js
var require_rolesMap = __commonJS({
  "../node_modules/aria-query/lib/rolesMap.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ariaAbstractRoles = _interopRequireDefault(require_ariaAbstractRoles());
    var _ariaLiteralRoles = _interopRequireDefault(require_ariaLiteralRoles());
    var _ariaDpubRoles = _interopRequireDefault(require_ariaDpubRoles());
    var _ariaGraphicsRoles = _interopRequireDefault(require_ariaGraphicsRoles());
    var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var roles2 = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
    roles2.forEach(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), roleDefinition = _ref2[1];
      var _iterator = _createForOfIteratorHelper(roleDefinition.superClass), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var superClassIter = _step.value;
          var _iterator2 = _createForOfIteratorHelper(superClassIter), _step2;
          try {
            var _loop = function _loop2() {
              var superClassName = _step2.value;
              var superClassRoleTuple = roles2.find(function(_ref3) {
                var _ref4 = _slicedToArray(_ref3, 1), name = _ref4[0];
                return name === superClassName;
              });
              if (superClassRoleTuple) {
                var superClassDefinition = superClassRoleTuple[1];
                for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
                  var prop = _Object$keys[_i2];
                  if (
                    // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
                    !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)
                  ) {
                    Object.assign(roleDefinition.props, _defineProperty3({}, prop, superClassDefinition.props[prop]));
                  }
                }
              }
            };
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              _loop();
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    var rolesMap = {
      entries: function entries() {
        return roles2;
      },
      forEach: function forEach(fn) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator3 = _createForOfIteratorHelper(roles2), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], values = _step3$value[1];
            fn.call(thisArg, values, key, roles2);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      },
      get: function get(key) {
        var item = roles2.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!rolesMap.get(key);
      },
      keys: function keys() {
        return roles2.map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
          return key;
        });
      },
      values: function values() {
        return roles2.map(function(_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2), values2 = _ref8[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(rolesMap, rolesMap.entries());
    exports.default = _default;
  }
});

// ../node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "../node_modules/object-keys/isArguments.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var toStr2 = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr2.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr2.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// ../node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "../node_modules/object-keys/implementation.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr2 = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr2.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr2.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr2;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// ../node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "../node_modules/object-keys/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// ../node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "../node_modules/define-properties/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr2 = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr2.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// ../node_modules/object.assign/implementation.js
var require_implementation2 = __commonJS({
  "../node_modules/object.assign/implementation.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module2.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = toObject(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = toObject(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i = 0; i < keys.length; ++i) {
          var nextKey = keys[i];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// ../node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "../node_modules/object.assign/polyfill.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var implementation = require_implementation2();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i = 0; i < letters.length; ++i) {
        map[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module2.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// ../node_modules/object.assign/shim.js
var require_shim = __commonJS({
  "../node_modules/object.assign/shim.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill();
    module2.exports = function shimAssign() {
      var polyfill = getPolyfill();
      define2(
        Object,
        { assign: polyfill },
        { assign: function() {
          return Object.assign !== polyfill;
        } }
      );
      return polyfill;
    };
  }
});

// ../node_modules/object.assign/index.js
var require_object = __commonJS({
  "../node_modules/object.assign/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var defineProperties = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation2();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind.apply(getPolyfill());
    var bound = function assign(target, source1) {
      return polyfill(Object, arguments);
    };
    defineProperties(bound, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = bound;
  }
});

// ../node_modules/functions-have-names/index.js
var require_functions_have_names = __commonJS({
  "../node_modules/functions-have-names/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var functionsHaveNames = function functionsHaveNames2() {
      return typeof (function f() {
      }).name === "string";
    };
    var gOPD = Object.getOwnPropertyDescriptor;
    if (gOPD) {
      try {
        gOPD([], "length");
      } catch (e) {
        gOPD = null;
      }
    }
    functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
      if (!functionsHaveNames() || !gOPD) {
        return false;
      }
      var desc = gOPD(function() {
      }, "name");
      return !!desc && !!desc.configurable;
    };
    var $bind = Function.prototype.bind;
    functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
      return functionsHaveNames() && typeof $bind === "function" && (function f() {
      }).bind().name !== "";
    };
    module2.exports = functionsHaveNames;
  }
});

// ../node_modules/set-function-name/index.js
var require_set_function_name = __commonJS({
  "../node_modules/set-function-name/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames();
    var $TypeError = require_type();
    module2.exports = function setFunctionName(fn, name) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      if (!loose || functionsHaveConfigurableNames) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "name",
            name,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "name",
            name
          );
        }
      }
      return fn;
    };
  }
});

// ../node_modules/regexp.prototype.flags/implementation.js
var require_implementation3 = __commonJS({
  "../node_modules/regexp.prototype.flags/implementation.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var setFunctionName = require_set_function_name();
    var $TypeError = require_type();
    var $Object = Object;
    module2.exports = setFunctionName(function flags2() {
      if (this == null || this !== $Object(this)) {
        throw new $TypeError("RegExp.prototype.flags getter called on non-object");
      }
      var result = "";
      if (this.hasIndices) {
        result += "d";
      }
      if (this.global) {
        result += "g";
      }
      if (this.ignoreCase) {
        result += "i";
      }
      if (this.multiline) {
        result += "m";
      }
      if (this.dotAll) {
        result += "s";
      }
      if (this.unicode) {
        result += "u";
      }
      if (this.unicodeSets) {
        result += "v";
      }
      if (this.sticky) {
        result += "y";
      }
      return result;
    }, "get flags", true);
  }
});

// ../node_modules/regexp.prototype.flags/polyfill.js
var require_polyfill2 = __commonJS({
  "../node_modules/regexp.prototype.flags/polyfill.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var implementation = require_implementation3();
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var $gOPD = Object.getOwnPropertyDescriptor;
    module2.exports = function getPolyfill() {
      if (supportsDescriptors && /a/mig.flags === "gim") {
        var descriptor = $gOPD(RegExp.prototype, "flags");
        if (descriptor && typeof descriptor.get === "function" && "dotAll" in RegExp.prototype && "hasIndices" in RegExp.prototype) {
          var calls = "";
          var o = {};
          Object.defineProperty(o, "hasIndices", {
            get: function() {
              calls += "d";
            }
          });
          Object.defineProperty(o, "sticky", {
            get: function() {
              calls += "y";
            }
          });
          descriptor.get.call(o);
          if (calls === "dy") {
            return descriptor.get;
          }
        }
      }
      return implementation;
    };
  }
});

// ../node_modules/regexp.prototype.flags/shim.js
var require_shim2 = __commonJS({
  "../node_modules/regexp.prototype.flags/shim.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var getPolyfill = require_polyfill2();
    var gOPD = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto = Object.getPrototypeOf;
    var regex = /a/;
    module2.exports = function shimFlags() {
      if (!supportsDescriptors || !getProto) {
        throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
      }
      var polyfill = getPolyfill();
      var proto = getProto(regex);
      var descriptor = gOPD(proto, "flags");
      if (!descriptor || descriptor.get !== polyfill) {
        defineProperty(proto, "flags", {
          configurable: true,
          enumerable: false,
          get: polyfill
        });
      }
      return polyfill;
    };
  }
});

// ../node_modules/regexp.prototype.flags/index.js
var require_regexp_prototype = __commonJS({
  "../node_modules/regexp.prototype.flags/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var flagsBound = callBind(getPolyfill());
    define2(flagsBound, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = flagsBound;
  }
});

// ../node_modules/internal-slot/index.js
var require_internal_slot = __commonJS({
  "../node_modules/internal-slot/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var hasOwn = require_hasown();
    var channel = require_side_channel()();
    var $TypeError = require_type();
    var SLOT = {
      assert: function(O, slot) {
        if (!O || typeof O !== "object" && typeof O !== "function") {
          throw new $TypeError("`O` is not an object");
        }
        if (typeof slot !== "string") {
          throw new $TypeError("`slot` must be a string");
        }
        channel.assert(O);
        if (!SLOT.has(O, slot)) {
          throw new $TypeError("`" + slot + "` is not present on `O`");
        }
      },
      get: function(O, slot) {
        if (!O || typeof O !== "object" && typeof O !== "function") {
          throw new $TypeError("`O` is not an object");
        }
        if (typeof slot !== "string") {
          throw new $TypeError("`slot` must be a string");
        }
        var slots = channel.get(O);
        return slots && slots["$" + slot];
      },
      has: function(O, slot) {
        if (!O || typeof O !== "object" && typeof O !== "function") {
          throw new $TypeError("`O` is not an object");
        }
        if (typeof slot !== "string") {
          throw new $TypeError("`slot` must be a string");
        }
        var slots = channel.get(O);
        return !!slots && hasOwn(slots, "$" + slot);
      },
      set: function(O, slot, V) {
        if (!O || typeof O !== "object" && typeof O !== "function") {
          throw new $TypeError("`O` is not an object");
        }
        if (typeof slot !== "string") {
          throw new $TypeError("`slot` must be a string");
        }
        var slots = channel.get(O);
        if (!slots) {
          slots = {};
          channel.set(O, slots);
        }
        slots["$" + slot] = V;
      }
    };
    if (Object.freeze) {
      Object.freeze(SLOT);
    }
    module2.exports = SLOT;
  }
});

// ../node_modules/stop-iteration-iterator/index.js
var require_stop_iteration_iterator = __commonJS({
  "../node_modules/stop-iteration-iterator/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var SLOT = require_internal_slot();
    var $SyntaxError = SyntaxError;
    var $StopIteration = typeof StopIteration === "object" ? StopIteration : null;
    module2.exports = function getStopIterationIterator(origIterator) {
      if (!$StopIteration) {
        throw new $SyntaxError("this environment lacks StopIteration");
      }
      SLOT.set(origIterator, "[[Done]]", false);
      var siIterator = {
        next: function next() {
          var iterator = SLOT.get(this, "[[Iterator]]");
          var done = SLOT.get(iterator, "[[Done]]");
          try {
            return {
              done,
              value: done ? void 0 : iterator.next()
            };
          } catch (e) {
            SLOT.set(iterator, "[[Done]]", true);
            if (e !== $StopIteration) {
              throw e;
            }
            return {
              done: true,
              value: void 0
            };
          }
        }
      };
      SLOT.set(siIterator, "[[Iterator]]", origIterator);
      return siIterator;
    };
  }
});

// ../node_modules/isarray/index.js
var require_isarray = __commonJS({
  "../node_modules/isarray/index.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var toString = {}.toString;
    module2.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// ../node_modules/is-string/index.js
var require_is_string = __commonJS({
  "../node_modules/is-string/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject2(value) {
      try {
        strValue.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr2 = Object.prototype.toString;
    var strClass = "[object String]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isString(value) {
      if (typeof value === "string") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryStringObject(value) : toStr2.call(value) === strClass;
    };
  }
});

// ../node_modules/is-map/index.js
var require_is_map = __commonJS({
  "../node_modules/is-map/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Map) {
      exported = function isMap(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isMap(x) {
        return false;
      };
    }
    module2.exports = exported || function isMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x);
        if ($setHas) {
          try {
            $setHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Map;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../node_modules/is-set/index.js
var require_is_set = __commonJS({
  "../node_modules/is-set/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Set) {
      exported = function isSet(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$setHas) {
      exported = function isSet(x) {
        return false;
      };
    }
    module2.exports = exported || function isSet(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $setHas.call(x);
        if ($mapHas) {
          try {
            $mapHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Set;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../node_modules/es-get-iterator/index.js
var require_es_get_iterator = __commonJS({
  "../node_modules/es-get-iterator/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var isArguments = require_is_arguments();
    var getStopIterationIterator = require_stop_iteration_iterator();
    if (require_has_symbols()() || require_shams()()) {
      $iterator = Symbol.iterator;
      module2.exports = function getIterator(iterable) {
        if (iterable != null && typeof iterable[$iterator] !== "undefined") {
          return iterable[$iterator]();
        }
        if (isArguments(iterable)) {
          return Array.prototype[$iterator].call(iterable);
        }
      };
    } else {
      isArray = require_isarray();
      isString = require_is_string();
      GetIntrinsic = require_get_intrinsic();
      $Map = GetIntrinsic("%Map%", true);
      $Set = GetIntrinsic("%Set%", true);
      callBound = require_callBound();
      $arrayPush = callBound("Array.prototype.push");
      $charCodeAt = callBound("String.prototype.charCodeAt");
      $stringSlice = callBound("String.prototype.slice");
      advanceStringIndex = function advanceStringIndex2(S, index) {
        var length = S.length;
        if (index + 1 >= length) {
          return index + 1;
        }
        var first = $charCodeAt(S, index);
        if (first < 55296 || first > 56319) {
          return index + 1;
        }
        var second = $charCodeAt(S, index + 1);
        if (second < 56320 || second > 57343) {
          return index + 1;
        }
        return index + 2;
      };
      getArrayIterator = function getArrayIterator2(arraylike) {
        var i = 0;
        return {
          next: function next() {
            var done = i >= arraylike.length;
            var value;
            if (!done) {
              value = arraylike[i];
              i += 1;
            }
            return {
              done,
              value
            };
          }
        };
      };
      getNonCollectionIterator = function getNonCollectionIterator2(iterable, noPrimordialCollections) {
        if (isArray(iterable) || isArguments(iterable)) {
          return getArrayIterator(iterable);
        }
        if (isString(iterable)) {
          var i = 0;
          return {
            next: function next() {
              var nextIndex = advanceStringIndex(iterable, i);
              var value = $stringSlice(iterable, i, nextIndex);
              i = nextIndex;
              return {
                done: nextIndex > iterable.length,
                value
              };
            }
          };
        }
        if (noPrimordialCollections && typeof iterable["_es6-shim iterator_"] !== "undefined") {
          return iterable["_es6-shim iterator_"]();
        }
      };
      if (!$Map && !$Set) {
        module2.exports = function getIterator(iterable) {
          if (iterable != null) {
            return getNonCollectionIterator(iterable, true);
          }
        };
      } else {
        isMap = require_is_map();
        isSet = require_is_set();
        $mapForEach = callBound("Map.prototype.forEach", true);
        $setForEach = callBound("Set.prototype.forEach", true);
        if (typeof process === "undefined" || !process.versions || !process.versions.node) {
          $mapIterator = callBound("Map.prototype.iterator", true);
          $setIterator = callBound("Set.prototype.iterator", true);
        }
        $mapAtAtIterator = callBound("Map.prototype.@@iterator", true) || callBound("Map.prototype._es6-shim iterator_", true);
        $setAtAtIterator = callBound("Set.prototype.@@iterator", true) || callBound("Set.prototype._es6-shim iterator_", true);
        getCollectionIterator = function getCollectionIterator2(iterable) {
          if (isMap(iterable)) {
            if ($mapIterator) {
              return getStopIterationIterator($mapIterator(iterable));
            }
            if ($mapAtAtIterator) {
              return $mapAtAtIterator(iterable);
            }
            if ($mapForEach) {
              var entries = [];
              $mapForEach(iterable, function(v, k) {
                $arrayPush(entries, [k, v]);
              });
              return getArrayIterator(entries);
            }
          }
          if (isSet(iterable)) {
            if ($setIterator) {
              return getStopIterationIterator($setIterator(iterable));
            }
            if ($setAtAtIterator) {
              return $setAtAtIterator(iterable);
            }
            if ($setForEach) {
              var values = [];
              $setForEach(iterable, function(v) {
                $arrayPush(values, v);
              });
              return getArrayIterator(values);
            }
          }
        };
        module2.exports = function getIterator(iterable) {
          return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
        };
      }
    }
    var $iterator;
    var isArray;
    var isString;
    var GetIntrinsic;
    var $Map;
    var $Set;
    var callBound;
    var $arrayPush;
    var $charCodeAt;
    var $stringSlice;
    var advanceStringIndex;
    var getArrayIterator;
    var getNonCollectionIterator;
    var isMap;
    var isSet;
    var $mapForEach;
    var $setForEach;
    var $mapIterator;
    var $setIterator;
    var $mapAtAtIterator;
    var $setAtAtIterator;
    var getCollectionIterator;
  }
});

// ../node_modules/object-is/implementation.js
var require_implementation4 = __commonJS({
  "../node_modules/object-is/implementation.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// ../node_modules/object-is/polyfill.js
var require_polyfill3 = __commonJS({
  "../node_modules/object-is/polyfill.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var implementation = require_implementation4();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// ../node_modules/object-is/shim.js
var require_shim3 = __commonJS({
  "../node_modules/object-is/shim.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var getPolyfill = require_polyfill3();
    var define2 = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// ../node_modules/object-is/index.js
var require_object_is = __commonJS({
  "../node_modules/object-is/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill3();
    var shim = require_shim3();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// ../node_modules/is-array-buffer/index.js
var require_is_array_buffer = __commonJS({
  "../node_modules/is-array-buffer/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var GetIntrinsic = require_get_intrinsic();
    var $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true);
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var $toString = callBound("Object.prototype.toString");
    var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
    var $abSlice = !!abSlice && callBind(abSlice);
    module2.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        if ($byteLength) {
          $byteLength(obj);
        } else {
          $abSlice(obj, 0);
        }
        return true;
      } catch (e) {
        return false;
      }
    } : $ArrayBuffer ? function isArrayBuffer(obj) {
      return $toString(obj) === "[object ArrayBuffer]";
    } : function isArrayBuffer(obj) {
      return false;
    };
  }
});

// ../node_modules/is-date-object/index.js
var require_is_date_object = __commonJS({
  "../node_modules/is-date-object/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
      try {
        getDay.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr2 = Object.prototype.toString;
    var dateClass = "[object Date]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isDateObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      return hasToStringTag ? tryDateObject(value) : toStr2.call(value) === dateClass;
    };
  }
});

// ../node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "../node_modules/is-regex/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var has;
    var $exec;
    var isRegexMarker;
    var badStringifier;
    if (hasToStringTag) {
      has = callBound("Object.prototype.hasOwnProperty");
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
    }
    var throwRegexMarker;
    var $toString = callBound("Object.prototype.toString");
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = "[object RegExp]";
    module2.exports = hasToStringTag ? function isRegex(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var descriptor = gOPD(value, "lastIndex");
      var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(value, badStringifier);
      } catch (e) {
        return e === isRegexMarker;
      }
    } : function isRegex(value) {
      if (!value || typeof value !== "object" && typeof value !== "function") {
        return false;
      }
      return $toString(value) === regexClass;
    };
  }
});

// ../node_modules/is-shared-array-buffer/index.js
var require_is_shared_array_buffer = __commonJS({
  "../node_modules/is-shared-array-buffer/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var callBound = require_callBound();
    var $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    module2.exports = $byteLength ? function isSharedArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        $byteLength(obj);
        return true;
      } catch (e) {
        return false;
      }
    } : function isSharedArrayBuffer(obj) {
      return false;
    };
  }
});

// ../node_modules/is-number-object/index.js
var require_is_number_object = __commonJS({
  "../node_modules/is-number-object/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var numToStr = Number.prototype.toString;
    var tryNumberObject = function tryNumberObject2(value) {
      try {
        numToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr2 = Object.prototype.toString;
    var numClass = "[object Number]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isNumberObject(value) {
      if (typeof value === "number") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryNumberObject(value) : toStr2.call(value) === numClass;
    };
  }
});

// ../node_modules/is-boolean-object/index.js
var require_is_boolean_object = __commonJS({
  "../node_modules/is-boolean-object/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var callBound = require_callBound();
    var $boolToStr = callBound("Boolean.prototype.toString");
    var $toString = callBound("Object.prototype.toString");
    var tryBooleanObject = function booleanBrandCheck(value) {
      try {
        $boolToStr(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var boolClass = "[object Boolean]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isBoolean(value) {
      if (typeof value === "boolean") {
        return true;
      }
      if (value === null || typeof value !== "object") {
        return false;
      }
      return hasToStringTag && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString(value) === boolClass;
    };
  }
});

// ../node_modules/is-symbol/index.js
var require_is_symbol = __commonJS({
  "../node_modules/is-symbol/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var toStr2 = Object.prototype.toString;
    var hasSymbols = require_has_symbols()();
    if (hasSymbols) {
      symToStr = Symbol.prototype.toString;
      symStringRegex = /^Symbol\(.*\)$/;
      isSymbolObject = function isRealSymbolObject(value) {
        if (typeof value.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value));
      };
      module2.exports = function isSymbol(value) {
        if (typeof value === "symbol") {
          return true;
        }
        if (toStr2.call(value) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value);
        } catch (e) {
          return false;
        }
      };
    } else {
      module2.exports = function isSymbol(value) {
        return false;
      };
    }
    var symToStr;
    var symStringRegex;
    var isSymbolObject;
  }
});

// ../node_modules/has-bigints/index.js
var require_has_bigints = __commonJS({
  "../node_modules/has-bigints/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var $BigInt = typeof BigInt !== "undefined" && BigInt;
    module2.exports = function hasNativeBigInts() {
      return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
    };
  }
});

// ../node_modules/is-bigint/index.js
var require_is_bigint = __commonJS({
  "../node_modules/is-bigint/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var hasBigInts = require_has_bigints()();
    if (hasBigInts) {
      bigIntValueOf = BigInt.prototype.valueOf;
      tryBigInt = function tryBigIntObject(value) {
        try {
          bigIntValueOf.call(value);
          return true;
        } catch (e) {
        }
        return false;
      };
      module2.exports = function isBigInt(value) {
        if (value === null || typeof value === "undefined" || typeof value === "boolean" || typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "function") {
          return false;
        }
        if (typeof value === "bigint") {
          return true;
        }
        return tryBigInt(value);
      };
    } else {
      module2.exports = function isBigInt(value) {
        return false;
      };
    }
    var bigIntValueOf;
    var tryBigInt;
  }
});

// ../node_modules/which-boxed-primitive/index.js
var require_which_boxed_primitive = __commonJS({
  "../node_modules/which-boxed-primitive/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var isString = require_is_string();
    var isNumber = require_is_number_object();
    var isBoolean = require_is_boolean_object();
    var isSymbol = require_is_symbol();
    var isBigInt = require_is_bigint();
    module2.exports = function whichBoxedPrimitive(value) {
      if (value == null || typeof value !== "object" && typeof value !== "function") {
        return null;
      }
      if (isString(value)) {
        return "String";
      }
      if (isNumber(value)) {
        return "Number";
      }
      if (isBoolean(value)) {
        return "Boolean";
      }
      if (isSymbol(value)) {
        return "Symbol";
      }
      if (isBigInt(value)) {
        return "BigInt";
      }
    };
  }
});

// ../node_modules/is-weakmap/index.js
var require_is_weakmap = __commonJS({
  "../node_modules/is-weakmap/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
    var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
    var exported;
    if (!$WeakMap) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
    var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    module2.exports = exported || function isWeakMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x, $mapHas);
        if ($setHas) {
          try {
            $setHas.call(x, $setHas);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $WeakMap;
      } catch (e) {
      }
      return false;
    };
  }
});

// ../node_modules/is-weakset/index.js
var require_is_weakset = __commonJS({
  "../node_modules/is-weakset/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var $WeakSet = GetIntrinsic("%WeakSet%", true);
    var $setHas = callBound("WeakSet.prototype.has", true);
    if ($setHas) {
      $mapHas = callBound("WeakMap.prototype.has", true);
      module2.exports = function isWeakSet(x) {
        if (!x || typeof x !== "object") {
          return false;
        }
        try {
          $setHas(x, $setHas);
          if ($mapHas) {
            try {
              $mapHas(x, $mapHas);
            } catch (e) {
              return true;
            }
          }
          return x instanceof $WeakSet;
        } catch (e) {
        }
        return false;
      };
    } else {
      module2.exports = function isWeakSet(x) {
        return false;
      };
    }
    var $mapHas;
  }
});

// ../node_modules/which-collection/index.js
var require_which_collection = __commonJS({
  "../node_modules/which-collection/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var isMap = require_is_map();
    var isSet = require_is_set();
    var isWeakMap = require_is_weakmap();
    var isWeakSet = require_is_weakset();
    module2.exports = function whichCollection(value) {
      if (value && typeof value === "object") {
        if (isMap(value)) {
          return "Map";
        }
        if (isSet(value)) {
          return "Set";
        }
        if (isWeakMap(value)) {
          return "WeakMap";
        }
        if (isWeakSet(value)) {
          return "WeakSet";
        }
      }
      return false;
    };
  }
});

// ../node_modules/array-buffer-byte-length/index.js
var require_array_buffer_byte_length = __commonJS({
  "../node_modules/array-buffer-byte-length/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var callBound = require_callBound();
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var isArrayBuffer = require_is_array_buffer();
    module2.exports = function byteLength(ab) {
      if (!isArrayBuffer(ab)) {
        return NaN;
      }
      return $byteLength ? $byteLength(ab) : ab.byteLength;
    };
  }
});

// ../node_modules/deep-equal/index.js
var require_deep_equal = __commonJS({
  "../node_modules/deep-equal/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var assign = require_object();
    var callBound = require_callBound();
    var flags2 = require_regexp_prototype();
    var GetIntrinsic = require_get_intrinsic();
    var getIterator = require_es_get_iterator();
    var getSideChannel = require_side_channel();
    var is = require_object_is();
    var isArguments = require_is_arguments();
    var isArray = require_isarray();
    var isArrayBuffer = require_is_array_buffer();
    var isDate = require_is_date_object();
    var isRegex = require_is_regex();
    var isSharedArrayBuffer = require_is_shared_array_buffer();
    var objectKeys = require_object_keys();
    var whichBoxedPrimitive = require_which_boxed_primitive();
    var whichCollection = require_which_collection();
    var whichTypedArray = require_which_typed_array();
    var byteLength = require_array_buffer_byte_length();
    var sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    var $getTime = callBound("Date.prototype.getTime");
    var gPO = Object.getPrototypeOf;
    var $objToString = callBound("Object.prototype.toString");
    var $Set = GetIntrinsic("%Set%", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSize = callBound("Map.prototype.size", true);
    var $setAdd = callBound("Set.prototype.add", true);
    var $setDelete = callBound("Set.prototype.delete", true);
    var $setHas = callBound("Set.prototype.has", true);
    var $setSize = callBound("Set.prototype.size", true);
    function setHasEqualElement(set, val1, opts, channel) {
      var i = getIterator(set);
      var result;
      while ((result = i.next()) && !result.done) {
        if (internalDeepEqual(val1, result.value, opts, channel)) {
          $setDelete(set, result.value);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      if (typeof prim === "undefined") {
        return null;
      }
      if (typeof prim === "object") {
        return void 0;
      }
      if (typeof prim === "symbol") {
        return false;
      }
      if (typeof prim === "string" || typeof prim === "number") {
        return +prim === +prim;
      }
      return true;
    }
    function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = $mapGet(b, altValue);
      var looseOpts = assign({}, opts, { strict: false });
      if (typeof curB === "undefined" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
        return false;
      }
      return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      return $setHas(b, altValue) && !$setHas(a, altValue);
    }
    function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
      var i = getIterator(set);
      var result;
      var key2;
      while ((result = i.next()) && !result.done) {
        key2 = result.value;
        if (
          // eslint-disable-next-line no-use-before-define
          internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
        ) {
          $setDelete(set, key2);
          return true;
        }
      }
      return false;
    }
    function internalDeepEqual(actual, expected, options, channel) {
      var opts = options || {};
      if (opts.strict ? is(actual, expected) : actual === expected) {
        return true;
      }
      var actualBoxed = whichBoxedPrimitive(actual);
      var expectedBoxed = whichBoxedPrimitive(expected);
      if (actualBoxed !== expectedBoxed) {
        return false;
      }
      if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
        return opts.strict ? is(actual, expected) : actual == expected;
      }
      var hasActual = channel.has(actual);
      var hasExpected = channel.has(expected);
      var sentinel;
      if (hasActual && hasExpected) {
        if (channel.get(actual) === channel.get(expected)) {
          return true;
        }
      } else {
        sentinel = {};
      }
      if (!hasActual) {
        channel.set(actual, sentinel);
      }
      if (!hasExpected) {
        channel.set(expected, sentinel);
      }
      return objEquiv(actual, expected, opts, channel);
    }
    function isBuffer(x) {
      if (!x || typeof x !== "object" || typeof x.length !== "number") {
        return false;
      }
      if (typeof x.copy !== "function" || typeof x.slice !== "function") {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== "number") {
        return false;
      }
      return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
    }
    function setEquiv(a, b, opts, channel) {
      if ($setSize(a) !== $setSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      while ((resultA = iA.next()) && !resultA.done) {
        if (resultA.value && typeof resultA.value === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        } else if (!$setHas(b, resultA.value)) {
          if (opts.strict) {
            return false;
          }
          if (!setMightHaveLoosePrim(a, b, resultA.value)) {
            return false;
          }
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          if (resultB.value && typeof resultB.value === "object") {
            if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
              return false;
            }
          } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function mapEquiv(a, b, opts, channel) {
      if ($mapSize(a) !== $mapSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      var key;
      var item1;
      var item2;
      while ((resultA = iA.next()) && !resultA.done) {
        key = resultA.value[0];
        item1 = resultA.value[1];
        if (key && typeof key === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, key);
        } else {
          item2 = $mapGet(b, key);
          if (typeof item2 === "undefined" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict) {
              return false;
            }
            if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
              return false;
            }
            if (!set) {
              set = new $Set();
            }
            $setAdd(set, key);
          }
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          key = resultB.value[0];
          item2 = resultB.value[1];
          if (key && typeof key === "object") {
            if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
              return false;
            }
          } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function objEquiv(a, b, opts, channel) {
      var i, key;
      if (typeof a !== typeof b) {
        return false;
      }
      if (a == null || b == null) {
        return false;
      }
      if ($objToString(a) !== $objToString(b)) {
        return false;
      }
      if (isArguments(a) !== isArguments(b)) {
        return false;
      }
      var aIsArray = isArray(a);
      var bIsArray = isArray(b);
      if (aIsArray !== bIsArray) {
        return false;
      }
      var aIsError = a instanceof Error;
      var bIsError = b instanceof Error;
      if (aIsError !== bIsError) {
        return false;
      }
      if (aIsError || bIsError) {
        if (a.name !== b.name || a.message !== b.message) {
          return false;
        }
      }
      var aIsRegex = isRegex(a);
      var bIsRegex = isRegex(b);
      if (aIsRegex !== bIsRegex) {
        return false;
      }
      if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags2(a) !== flags2(b))) {
        return false;
      }
      var aIsDate = isDate(a);
      var bIsDate = isDate(b);
      if (aIsDate !== bIsDate) {
        return false;
      }
      if (aIsDate || bIsDate) {
        if ($getTime(a) !== $getTime(b)) {
          return false;
        }
      }
      if (opts.strict && gPO && gPO(a) !== gPO(b)) {
        return false;
      }
      var aWhich = whichTypedArray(a);
      var bWhich = whichTypedArray(b);
      if (aWhich !== bWhich) {
        return false;
      }
      if (aWhich || bWhich) {
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      var aIsBuffer = isBuffer(a);
      var bIsBuffer = isBuffer(b);
      if (aIsBuffer !== bIsBuffer) {
        return false;
      }
      if (aIsBuffer || bIsBuffer) {
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      var aIsArrayBuffer = isArrayBuffer(a);
      var bIsArrayBuffer = isArrayBuffer(b);
      if (aIsArrayBuffer !== bIsArrayBuffer) {
        return false;
      }
      if (aIsArrayBuffer || bIsArrayBuffer) {
        if (byteLength(a) !== byteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      var aIsSAB = isSharedArrayBuffer(a);
      var bIsSAB = isSharedArrayBuffer(b);
      if (aIsSAB !== bIsSAB) {
        return false;
      }
      if (aIsSAB || bIsSAB) {
        if (sabByteLength(a) !== sabByteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      if (typeof a !== typeof b) {
        return false;
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      if (ka.length !== kb.length) {
        return false;
      }
      ka.sort();
      kb.sort();
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) {
          return false;
        }
      }
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!internalDeepEqual(a[key], b[key], opts, channel)) {
          return false;
        }
      }
      var aCollection = whichCollection(a);
      var bCollection = whichCollection(b);
      if (aCollection !== bCollection) {
        return false;
      }
      if (aCollection === "Set" || bCollection === "Set") {
        return setEquiv(a, b, opts, channel);
      }
      if (aCollection === "Map") {
        return mapEquiv(a, b, opts, channel);
      }
      return true;
    }
    module2.exports = function deepEqual(a, b, opts) {
      return internalDeepEqual(a, b, opts, getSideChannel());
    };
  }
});

// ../node_modules/aria-query/lib/elementRoleMap.js
var require_elementRoleMap = __commonJS({
  "../node_modules/aria-query/lib/elementRoleMap.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _deepEqual = _interopRequireDefault(require_deep_equal());
    var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
    var _rolesMap = _interopRequireDefault(require_rolesMap());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i2) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i2 = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i2 >= o.length) return { done: true };
            return { done: false, value: o[i2++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var elementRoles2 = [];
    var keys = _rolesMap.default.keys();
    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      role = _rolesMap.default.get(key);
      if (role) {
        concepts = [].concat(role.baseConcepts, role.relatedConcepts);
        for (k = 0; k < concepts.length; k++) {
          relation = concepts[k];
          if (relation.module === "HTML") {
            concept = relation.concept;
            if (concept) {
              (function() {
                var conceptStr = JSON.stringify(concept);
                var elementRoleRelation = elementRoles2.find(function(relation2) {
                  return JSON.stringify(relation2[0]) === conceptStr;
                });
                var roles2 = void 0;
                if (elementRoleRelation) {
                  roles2 = elementRoleRelation[1];
                } else {
                  roles2 = [];
                }
                var isUnique = true;
                for (var _i = 0; _i < roles2.length; _i++) {
                  if (roles2[_i] === key) {
                    isUnique = false;
                    break;
                  }
                }
                if (isUnique) {
                  roles2.push(key);
                }
                elementRoles2.push([concept, roles2]);
              })();
            }
          }
        }
      }
    }
    var key;
    var role;
    var concepts;
    var relation;
    var concept;
    var k;
    var i;
    var elementRoleMap = {
      entries: function entries() {
        return elementRoles2;
      },
      forEach: function forEach(fn) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(elementRoles2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
            fn.call(thisArg, values, _key, elementRoles2);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key2) {
        var item = elementRoles2.find(function(tuple) {
          return (0, _deepEqual.default)(key2, tuple[0]);
        });
        return item && item[1];
      },
      has: function has(key2) {
        return !!elementRoleMap.get(key2);
      },
      keys: function keys2() {
        return elementRoles2.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
          return key2;
        });
      },
      values: function values() {
        return elementRoles2.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(elementRoleMap, elementRoleMap.entries());
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/roleElementMap.js
var require_roleElementMap = __commonJS({
  "../node_modules/aria-query/lib/roleElementMap.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(require_iterationDecorator());
    var _rolesMap = _interopRequireDefault(require_rolesMap());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i2) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i2 = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i2 >= o.length) return { done: true };
            return { done: false, value: o[i2++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var roleElement = [];
    var keys = _rolesMap.default.keys();
    var _loop = function _loop2(i2) {
      var key = keys[i2];
      var role = _rolesMap.default.get(key);
      if (role) {
        var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
        for (var k = 0; k < concepts.length; k++) {
          var relation = concepts[k];
          if (relation.module === "HTML") {
            var concept = relation.concept;
            if (concept) {
              var roleElementRelation = roleElement.find(function(item) {
                return item[0] === key;
              });
              var relationConcepts = void 0;
              if (roleElementRelation) {
                relationConcepts = roleElementRelation[1];
              } else {
                relationConcepts = [];
              }
              relationConcepts.push(concept);
              roleElement.push([key, relationConcepts]);
            }
          }
        }
      }
    };
    for (i = 0; i < keys.length; i++) {
      _loop(i);
    }
    var i;
    var roleElementMap = {
      entries: function entries() {
        return roleElement;
      },
      forEach: function forEach(fn) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(roleElement), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn.call(thisArg, values, key, roleElement);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = roleElement.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!roleElementMap.get(key);
      },
      keys: function keys2() {
        return roleElement.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return roleElement.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(roleElementMap, roleElementMap.entries());
    exports.default = _default;
  }
});

// ../node_modules/aria-query/lib/index.js
var require_lib = __commonJS({
  "../node_modules/aria-query/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.roles = exports.roleElements = exports.elementRoles = exports.dom = exports.aria = void 0;
    var _ariaPropsMap = _interopRequireDefault(require_ariaPropsMap());
    var _domMap = _interopRequireDefault(require_domMap());
    var _rolesMap = _interopRequireDefault(require_rolesMap());
    var _elementRoleMap = _interopRequireDefault(require_elementRoleMap());
    var _roleElementMap = _interopRequireDefault(require_roleElementMap());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var aria = _ariaPropsMap.default;
    exports.aria = aria;
    var dom = _domMap.default;
    exports.dom = dom;
    var roles2 = _rolesMap.default;
    exports.roles = roles2;
    var elementRoles2 = _elementRoleMap.default;
    exports.elementRoles = elementRoles2;
    var roleElements2 = _roleElementMap.default;
    exports.roleElements = roleElements2;
  }
});

// ../node_modules/lz-string/libs/lz-string.js
var require_lz_string = __commonJS({
  "../node_modules/lz-string/libs/lz-string.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var LZString = function() {
      var f = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i = 0; i < alphabet.length; i++) {
            baseReverseDic[alphabet][alphabet.charAt(i)] = i;
          }
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString2 = {
        compressToBase64: function(input) {
          if (input == null) return "";
          var res = LZString2._compress(input, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
            default:
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        },
        decompressFromBase64: function(input) {
          if (input == null) return "";
          if (input == "") return null;
          return LZString2._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrBase64, input.charAt(index));
          });
        },
        compressToUTF16: function(input) {
          if (input == null) return "";
          return LZString2._compress(input, 15, function(a) {
            return f(a + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString2._decompress(compressed.length, 16384, function(index) {
            return compressed.charCodeAt(index) - 32;
          });
        },
        //compress into uint8array (UCS-2 big endian format)
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString2.compress(uncompressed);
          var buf = new Uint8Array(compressed.length * 2);
          for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[i * 2] = current_value >>> 8;
            buf[i * 2 + 1] = current_value % 256;
          }
          return buf;
        },
        //decompress from uint8array (UCS-2 big endian format)
        decompressFromUint8Array: function(compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString2.decompress(compressed);
          } else {
            var buf = new Array(compressed.length / 2);
            for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
              buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
            }
            var result = [];
            buf.forEach(function(c) {
              result.push(f(c));
            });
            return LZString2.decompress(result.join(""));
          }
        },
        //compress into a string that is already URI encoded
        compressToEncodedURIComponent: function(input) {
          if (input == null) return "";
          return LZString2._compress(input, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        },
        //decompress from an output of compressToEncodedURIComponent
        decompressFromEncodedURIComponent: function(input) {
          if (input == null) return "";
          if (input == "") return null;
          input = input.replace(/ /g, "+");
          return LZString2._decompress(input.length, 32, function(index) {
            return getBaseValue(keyStrUriSafe, input.charAt(index));
          });
        },
        compress: function(uncompressed) {
          return LZString2._compress(uncompressed, 16, function(a) {
            return f(a);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null) return "";
          var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
              context_w = context_wc;
            } else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 8; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 16; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i = 0; i < context_numBits; i++) {
            context_data_val = context_data_val << 1 | value & 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          while (true) {
            context_data_val = context_data_val << 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (compressed == null) return "";
          if (compressed == "") return null;
          return LZString2._decompress(compressed.length, 32768, function(index) {
            return compressed.charCodeAt(index);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i = 0; i < 3; i += 1) {
            dictionary[i] = i;
          }
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (next = bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 2:
              return "";
          }
          dictionary[3] = c;
          w = c;
          result.push(c);
          while (true) {
            if (data.index > length) {
              return "";
            }
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 2:
                return result.join("");
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c]) {
              entry = dictionary[c];
            } else {
              if (c === dictSize) {
                entry = w + w.charAt(0);
              } else {
                return null;
              }
            }
            result.push(entry);
            dictionary[dictSize++] = w + entry.charAt(0);
            enlargeIn--;
            w = entry;
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString2;
    }();
    if (typeof define === "function" && define.amd) {
      define(function() {
        return LZString;
      });
    } else if (typeof module2 !== "undefined" && module2 != null) {
      module2.exports = LZString;
    } else if (typeof angular !== "undefined" && angular != null) {
      angular.module("LZString", []).factory("LZString", function() {
        return LZString;
      });
    }
  }
});

// ../node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js
function escapeHTML(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function nodeIsText(node) {
  return node.nodeType === TEXT_NODE$1;
}
function nodeIsComment(node) {
  return node.nodeType === COMMENT_NODE$1;
}
function nodeIsFragment(node) {
  return node.nodeType === FRAGMENT_NODE;
}
function createDOMElementFilter(filterNode) {
  return {
    test: (val) => {
      var _val$constructor2;
      return (val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode(val);
    },
    serialize: (node, config2, indentation, depth, refs, printer) => {
      if (nodeIsText(node)) {
        return printText(node.data, config2);
      }
      if (nodeIsComment(node)) {
        return printComment(node.data, config2);
      }
      const type = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
      if (++depth > config2.maxDepth) {
        return printElementAsLeaf(type, config2);
      }
      return printElement(type, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}), config2, indentation + config2.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config2, indentation + config2.indent, depth, refs, printer), config2, indentation);
    }
  };
}
function getCodeFrame(frame) {
  const locationStart = frame.indexOf("(") + 1;
  const locationEnd = frame.indexOf(")");
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(":");
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = "";
  try {
    rawFileContents = readFileSync(filename, "utf-8");
  } catch {
    return "";
  }
  const codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return chalk.dim(frameLocation) + "\n" + codeFrame + "\n";
}
function getUserCodeFrame() {
  if (!readFileSync || !codeFrameColumns) {
    return "";
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split("\n").slice(1).find((frame) => !frame.includes("node_modules/"));
  return getCodeFrame(firstClientCodeFrame);
}
function jestFakeTimersAreEnabled() {
  if (typeof jest !== "undefined" && jest !== null) {
    return (
      // legacy timers
      setTimeout._isMockFunction === true || // modern timers
      // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix
      Object.prototype.hasOwnProperty.call(setTimeout, "clock")
    );
  }
  return false;
}
function getDocument() {
  if (typeof window === "undefined") {
    throw new Error("Could not find default container");
  }
  return window.document;
}
function getWindowFromNode(node) {
  if (node.defaultView) {
    return node.defaultView;
  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
    return node.ownerDocument.defaultView;
  } else if (node.window) {
    return node.window;
  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
    throw new Error("It looks like the window object is not available for the provided node.");
  } else if (node.then instanceof Function) {
    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
  } else if (Array.isArray(node)) {
    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
  } else if (typeof node.debug === "function" && typeof node.logTestingPlaygroundURL === "function") {
    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
  } else {
    throw new Error("The given node is not an Element, the node type is: " + typeof node + ".");
  }
}
function checkContainerType(container) {
  if (!container || !(typeof container.querySelector === "function") || !(typeof container.querySelectorAll === "function")) {
    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  }
  function getTypeName(object) {
    if (typeof object === "object") {
      return object === null ? "null" : object.constructor.name;
    }
    return typeof object;
  }
}
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches(getConfig().defaultIgnore));
}
function prettyDOM(dom, maxLength, options) {
  if (options === void 0) {
    options = {};
  }
  if (!dom) {
    dom = getDocument().body;
  }
  if (typeof maxLength !== "number") {
    maxLength = typeof process !== "undefined" && process.env.DEBUG_PRINT_LIMIT || 7e3;
  }
  if (maxLength === 0) {
    return "";
  }
  if (dom.documentElement) {
    dom = dom.documentElement;
  }
  let domTypeName = typeof dom;
  if (domTypeName === "object") {
    domTypeName = dom.constructor.name;
  } else {
    dom = {};
  }
  if (!("outerHTML" in dom)) {
    throw new TypeError("Expected an element or document but got " + domTypeName);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = prettyFormat.format(dom, {
    plugins: [createDOMElementFilter(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== void 0 && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
}
function runWithExpensiveErrorDiagnosticsDisabled(callback) {
  try {
    config._disableExpensiveErrorDiagnostics = true;
    return callback();
  } finally {
    config._disableExpensiveErrorDiagnostics = false;
  }
}
function configure(newConfig) {
  if (typeof newConfig === "function") {
    newConfig = newConfig(config);
  }
  config = {
    ...config,
    ...newConfig
  };
}
function getConfig() {
  return config;
}
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return "";
  }
  if (node.nodeType === TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map((childNode) => getTextContent(childNode)).join("");
}
function getLabelContent(element) {
  let textContent;
  if (element.tagName.toLowerCase() === "label") {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}
function getRealLabels(element) {
  if (element.labels !== void 0) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable(element)) return [];
  const labels = element.ownerDocument.querySelectorAll("label");
  return Array.from(labels).filter((label) => label.control === element);
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
}
function getLabels2(container, element, _temp) {
  let {
    selector = "*"
  } = _temp === void 0 ? {} : _temp;
  const ariaLabelledBy = element.getAttribute("aria-labelledby");
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
  return labelsId.length ? labelsId.map((labelId) => {
    const labellingElement = container.querySelector('[id="' + labelId + '"]');
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: "",
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map((label) => {
    const textToMatch = getLabelContent(label);
    const formControlSelector = "button, input, meter, output, progress, select, textarea";
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter((formControlElement) => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
function assertNotNullOrUndefined(matcher) {
  if (matcher === null || matcher === void 0) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`
      "It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?"
    );
  }
}
function fuzzyMatches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (typeof matcher === "string" || typeof matcher === "number") {
    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
  } else if (typeof matcher === "function") {
    return matcher(normalizedText, node);
  } else {
    return matchRegExp(matcher, normalizedText);
  }
}
function matches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (matcher instanceof Function) {
    return matcher(normalizedText, node);
  } else if (matcher instanceof RegExp) {
    return matchRegExp(matcher, normalizedText);
  } else {
    return normalizedText === String(matcher);
  }
}
function getDefaultNormalizer(_temp) {
  let {
    trim = true,
    collapseWhitespace = true
  } = _temp === void 0 ? {} : _temp;
  return (text) => {
    let normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText;
    return normalizedText;
  };
}
function makeNormalizer(_ref) {
  let {
    trim,
    collapseWhitespace,
    normalizer
  } = _ref;
  if (!normalizer) {
    return getDefaultNormalizer({
      trim,
      collapseWhitespace
    });
  }
  if (typeof trim !== "undefined" || typeof collapseWhitespace !== "undefined") {
    throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
  }
  return normalizer;
}
function matchRegExp(matcher, text) {
  const match2 = matcher.test(text);
  if (matcher.global && matcher.lastIndex !== 0) {
    console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.");
    matcher.lastIndex = 0;
  }
  return match2;
}
function getNodeText(node) {
  if (node.matches("input[type=submit], input[type=button], input[type=reset]")) {
    return node.value;
  }
  return Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE && Boolean(child.textContent)).map((c) => c.textContent).join("");
}
function isSubtreeInaccessible(element) {
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute("aria-hidden") === "true") {
    return true;
  }
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).display === "none") {
    return true;
  }
  return false;
}
function isInaccessible(element, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible
  } = options;
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).visibility === "hidden") {
    return true;
  }
  let currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles(currentNode) {
  for (const {
    match: match2,
    roles: roles2
  } of elementRoleList) {
    if (match2(currentNode)) {
      return [...roles2];
    }
  }
  return [];
}
function buildElementRoleList(elementRolesMap) {
  function makeElementSelector(_ref) {
    let {
      name,
      attributes
    } = _ref;
    return "" + name + attributes.map((_ref2) => {
      let {
        name: attributeName,
        value,
        constraints = []
      } = _ref2;
      const shouldNotExist = constraints.indexOf("undefined") !== -1;
      if (shouldNotExist) {
        return ":not([" + attributeName + "])";
      } else if (value) {
        return "[" + attributeName + '="' + value + '"]';
      } else {
        return "[" + attributeName + "]";
      }
    }).join("");
  }
  function getSelectorSpecificity(_ref3) {
    let {
      attributes = []
    } = _ref3;
    return attributes.length;
  }
  function bySelectorSpecificity(_ref4, _ref5) {
    let {
      specificity: leftSpecificity
    } = _ref4;
    let {
      specificity: rightSpecificity
    } = _ref5;
    return rightSpecificity - leftSpecificity;
  }
  function match2(element) {
    let {
      attributes = []
    } = element;
    const typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    if (typeTextIndex >= 0) {
      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];
    }
    const selector = makeElementSelector({
      ...element,
      attributes
    });
    return (node) => {
      if (typeTextIndex >= 0 && node.type !== "text") {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];
  for (const [element, roles2] of elementRolesMap.entries()) {
    result = [...result, {
      match: match2(element),
      roles: Array.from(roles2),
      specificity: getSelectorSpecificity(element)
    }];
  }
  return result.sort(bySelectorSpecificity);
}
function getRoles(container, _temp) {
  let {
    hidden = false
  } = _temp === void 0 ? {} : _temp;
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter((element) => {
    return hidden === false ? isInaccessible(element) === false : true;
  }).reduce((acc, node) => {
    let roles2 = [];
    if (node.hasAttribute("role")) {
      roles2 = node.getAttribute("role").split(" ").slice(0, 1);
    } else {
      roles2 = getImplicitAriaRoles(node);
    }
    return roles2.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {
      ...rolesAcc,
      [role]: [...rolesAcc[role], node]
    } : {
      ...rolesAcc,
      [role]: [node]
    }, acc);
  }, {});
}
function prettyRoles(dom, _ref6) {
  let {
    hidden,
    includeDescription
  } = _ref6;
  const roles2 = getRoles(dom, {
    hidden
  });
  return Object.entries(roles2).filter((_ref7) => {
    let [role] = _ref7;
    return role !== "generic";
  }).map((_ref8) => {
    let [role, elements] = _ref8;
    const delimiterBar = "-".repeat(50);
    const elementsString = elements.map((el) => {
      const nameString = 'Name "' + computeAccessibleName(el, {
        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
      }) + '":\n';
      const domString = prettyDOM(el.cloneNode(false));
      if (includeDescription) {
        const descriptionString = 'Description "' + computeAccessibleDescription(el, {
          computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
        }) + '":\n';
        return "" + nameString + descriptionString + domString;
      }
      return "" + nameString + domString;
    }).join("\n\n");
    return role + ":\n\n" + elementsString + "\n\n" + delimiterBar;
  }).join("\n");
}
function computeAriaSelected(element) {
  if (element.tagName === "OPTION") {
    return element.selected;
  }
  return checkBooleanAttribute(element, "aria-selected");
}
function computeAriaBusy(element) {
  return element.getAttribute("aria-busy") === "true";
}
function computeAriaChecked(element) {
  if ("indeterminate" in element && element.indeterminate) {
    return void 0;
  }
  if ("checked" in element) {
    return element.checked;
  }
  return checkBooleanAttribute(element, "aria-checked");
}
function computeAriaPressed(element) {
  return checkBooleanAttribute(element, "aria-pressed");
}
function computeAriaCurrent(element) {
  var _ref9, _checkBooleanAttribut;
  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
}
function computeAriaExpanded(element) {
  return checkBooleanAttribute(element, "aria-expanded");
}
function checkBooleanAttribute(element, attribute) {
  const attributeValue = element.getAttribute(attribute);
  if (attributeValue === "true") {
    return true;
  }
  if (attributeValue === "false") {
    return false;
  }
  return void 0;
}
function computeHeadingLevel(element) {
  const implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  const ariaLevelAttribute = element.getAttribute("aria-level") && Number(element.getAttribute("aria-level"));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
function computeAriaValueNow(element) {
  const valueNow = element.getAttribute("aria-valuenow");
  return valueNow === null ? void 0 : +valueNow;
}
function computeAriaValueMax(element) {
  const valueMax = element.getAttribute("aria-valuemax");
  return valueMax === null ? void 0 : +valueMax;
}
function computeAriaValueMin(element) {
  const valueMin = element.getAttribute("aria-valuemin");
  return valueMin === null ? void 0 : +valueMin;
}
function computeAriaValueText(element) {
  const valueText = element.getAttribute("aria-valuetext");
  return valueText === null ? void 0 : valueText;
}
function escapeRegExp(string) {
  return string.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
}
function getRegExpMatcher(string) {
  return new RegExp(escapeRegExp(string.toLowerCase()), "i");
}
function makeSuggestion(queryName, element, content, _ref) {
  let {
    variant,
    name
  } = _ref;
  let warning = "";
  const queryOptions = {};
  const queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher(content)];
  if (name) {
    queryOptions.name = getRegExpMatcher(name);
  }
  if (queryName === "Role" && isInaccessible(element)) {
    queryOptions.hidden = true;
    warning = "Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    ";
  }
  if (Object.keys(queryOptions).length > 0) {
    queryArgs.push(queryOptions);
  }
  const queryMethod = variant + "By" + queryName;
  return {
    queryName,
    queryMethod,
    queryArgs,
    variant,
    warning,
    toString() {
      if (warning) {
        console.warn(warning);
      }
      let [text, options] = queryArgs;
      text = typeof text === "string" ? "'" + text + "'" : text;
      options = options ? ", { " + Object.entries(options).map((_ref2) => {
        let [k, v] = _ref2;
        return k + ": " + v;
      }).join(", ") + " }" : "";
      return queryMethod + "(" + text + options + ")";
    }
  };
}
function canSuggest(currentMethod, requestedMethod, data) {
  return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());
}
function getSuggestedQuery(element, variant, method) {
  var _element$getAttribute, _getImplicitAriaRoles;
  if (variant === void 0) {
    variant = "get";
  }
  if (element.matches(getConfig().defaultIgnore)) {
    return void 0;
  }
  const role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles(element)) == null ? void 0 : _getImplicitAriaRoles[0];
  if (role !== "generic" && canSuggest("Role", method, role)) {
    return makeSuggestion("Role", element, role, {
      variant,
      name: computeAccessibleName(element, {
        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
      })
    });
  }
  const labelText = getLabels2(document, element).map((label) => label.content).join(" ");
  if (canSuggest("LabelText", method, labelText)) {
    return makeSuggestion("LabelText", element, labelText, {
      variant
    });
  }
  const placeholderText = element.getAttribute("placeholder");
  if (canSuggest("PlaceholderText", method, placeholderText)) {
    return makeSuggestion("PlaceholderText", element, placeholderText, {
      variant
    });
  }
  const textContent = normalize(getNodeText(element));
  if (canSuggest("Text", method, textContent)) {
    return makeSuggestion("Text", element, textContent, {
      variant
    });
  }
  if (canSuggest("DisplayValue", method, element.value)) {
    return makeSuggestion("DisplayValue", element, normalize(element.value), {
      variant
    });
  }
  const alt = element.getAttribute("alt");
  if (canSuggest("AltText", method, alt)) {
    return makeSuggestion("AltText", element, alt, {
      variant
    });
  }
  const title = element.getAttribute("title");
  if (canSuggest("Title", method, title)) {
    return makeSuggestion("Title", element, title, {
      variant
    });
  }
  const testId = element.getAttribute(getConfig().testIdAttribute);
  if (canSuggest("TestId", method, testId)) {
    return makeSuggestion("TestId", element, testId, {
      variant
    });
  }
  return void 0;
}
function copyStackTrace(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}
function waitFor(callback, _ref) {
  let {
    container = getDocument(),
    timeout = getConfig().asyncUtilTimeout,
    showOriginalStackTrace = getConfig().showOriginalStackTrace,
    stackTraceError,
    interval = 50,
    onTimeout = (error) => {
      Object.defineProperty(error, "message", {
        value: getConfig().getElementError(error.message, container).message
      });
      return error;
    },
    mutationObserverOptions = {
      subtree: true,
      childList: true,
      attributes: true,
      characterData: true
    }
  } = _ref;
  if (typeof callback !== "function") {
    throw new TypeError("Received `callback` arg must be a function");
  }
  return new Promise(async (resolve, reject) => {
    let lastError, intervalId, observer;
    let finished = false;
    let promiseStatus = "idle";
    const overallTimeoutTimer = setTimeout(handleTimeout, timeout);
    const usingJestFakeTimers = jestFakeTimersAreEnabled();
    if (usingJestFakeTimers) {
      const {
        unstable_advanceTimersWrapper: advanceTimersWrapper
      } = getConfig();
      checkCallback();
      while (!finished) {
        if (!jestFakeTimersAreEnabled()) {
          const error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
          reject(error);
          return;
        }
        await advanceTimersWrapper(async () => {
          jest.advanceTimersByTime(interval);
        });
        if (finished) {
          break;
        }
        checkCallback();
      }
    } else {
      try {
        checkContainerType(container);
      } catch (e) {
        reject(e);
        return;
      }
      intervalId = setInterval(checkRealTimersCallback, interval);
      const {
        MutationObserver
      } = getWindowFromNode(container);
      observer = new MutationObserver(checkRealTimersCallback);
      observer.observe(container, mutationObserverOptions);
      checkCallback();
    }
    function onDone(error, result) {
      finished = true;
      clearTimeout(overallTimeoutTimer);
      if (!usingJestFakeTimers) {
        clearInterval(intervalId);
        observer.disconnect();
      }
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function checkRealTimersCallback() {
      if (jestFakeTimersAreEnabled()) {
        const error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
        if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
        return reject(error);
      } else {
        return checkCallback();
      }
    }
    function checkCallback() {
      if (promiseStatus === "pending") return;
      try {
        const result = runWithExpensiveErrorDiagnosticsDisabled(callback);
        if (typeof (result == null ? void 0 : result.then) === "function") {
          promiseStatus = "pending";
          result.then((resolvedValue) => {
            promiseStatus = "resolved";
            onDone(null, resolvedValue);
          }, (rejectedValue) => {
            promiseStatus = "rejected";
            lastError = rejectedValue;
          });
        } else {
          onDone(null, result);
        }
      } catch (error) {
        lastError = error;
      }
    }
    function handleTimeout() {
      let error;
      if (lastError) {
        error = lastError;
        if (!showOriginalStackTrace && error.name === "TestingLibraryElementError") {
          copyStackTrace(error, stackTraceError);
        }
      } else {
        error = new Error("Timed out in waitFor.");
        if (!showOriginalStackTrace) {
          copyStackTrace(error, stackTraceError);
        }
      }
      onDone(onTimeout(error), null);
    }
  });
}
function waitForWrapper(callback, options) {
  const stackTraceError = new Error("STACK_TRACE_MESSAGE");
  return getConfig().asyncWrapper(() => waitFor(callback, {
    stackTraceError,
    ...options
  }));
}
function getElementError(message, container) {
  return getConfig().getElementError(message, container);
}
function getMultipleElementsFoundError(message, container) {
  return getElementError(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
}
function queryAllByAttribute(attribute, container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function queryByAttribute(attribute, container, text, options) {
  const els = queryAllByAttribute(attribute, container, text, options);
  if (els.length > 1) {
    throw getMultipleElementsFoundError("Found multiple elements by [" + attribute + "=" + text + "]", container);
  }
  return els[0] || null;
}
function makeSingleQuery(allQuery, getMultipleError2) {
  return function(container) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    const els = allQuery(container, ...args);
    if (els.length > 1) {
      const elementStrings = els.map((element) => getElementError(null, element).message).join("\n\n");
      throw getMultipleElementsFoundError(getMultipleError2(container, ...args) + "\n\nHere are the matching elements:\n\n" + elementStrings, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError(suggestion, container) {
  return getConfig().getElementError("A better query is available, try this:\n" + suggestion.toString() + "\n", container);
}
function makeGetAllQuery(allQuery, getMissingError2) {
  return function(container) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    const els = allQuery(container, ...args);
    if (!els.length) {
      throw getConfig().getElementError(getMissingError2(container, ...args), container);
    }
    return els;
  };
}
function makeFindQuery(getter) {
  return (container, text, options, waitForOptions) => {
    return waitForWrapper(() => {
      return getter(container, text, options);
    }, {
      container,
      ...waitForOptions
    });
  };
}
function buildQueries(queryAllBy, getMultipleError2, getMissingError2) {
  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError2), queryAllBy.name, "query");
  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError2);
  const getBy = makeSingleQuery(getAllBy, getMultipleError2);
  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "get");
  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace("query", "get"), "getAll");
  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, "findAll"));
  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "find"));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
function queryAllLabels(container) {
  return Array.from(container.querySelectorAll("label,input")).map((node) => {
    return {
      node,
      textToMatch: getLabelContent(node)
    };
  }).filter((_ref) => {
    let {
      textToMatch
    } = _ref;
    return textToMatch !== null;
  });
}
function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
  const htmlFor = label.getAttribute("for");
  if (!htmlFor) {
    return null;
  }
  const element = container.querySelector('[id="' + htmlFor + '"]');
  return element ? element.tagName.toLowerCase() : null;
}
function makeRoleSelector(role) {
  var _roleElements$get;
  const explicitRoleSelector = '*[role~="' + role + '"]';
  const roleRelations = (_roleElements$get = import_aria_query.roleElements.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
    let {
      name
    } = _ref;
    return name;
  }));
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
}
function getQueriesForElement(element, queries$1, initialValue2) {
  if (queries$1 === void 0) {
    queries$1 = queries;
  }
  if (initialValue2 === void 0) {
    initialValue2 = {};
  }
  return Object.keys(queries$1).reduce((helpers, key) => {
    const fn = queries$1[key];
    helpers[key] = fn.bind(null, element);
    return helpers;
  }, initialValue2);
}
function initialCheck(elements) {
  if (isRemoved(elements)) {
    throw new Error("The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.");
  }
}
async function waitForElementToBeRemoved(callback, options) {
  const timeoutError = new Error("Timed out in waitForElementToBeRemoved.");
  if (typeof callback !== "function") {
    initialCheck(callback);
    const elements = Array.isArray(callback) ? callback : [callback];
    const getRemainingElements = elements.map((element) => {
      let parent = element.parentElement;
      if (parent === null) return () => null;
      while (parent.parentElement) parent = parent.parentElement;
      return () => parent.contains(element) ? element : null;
    });
    callback = () => getRemainingElements.map((c) => c()).filter(Boolean);
  }
  initialCheck(callback());
  return waitForWrapper(() => {
    let result;
    try {
      result = callback();
    } catch (error) {
      if (error.name === "TestingLibraryElementError") {
        return void 0;
      }
      throw error;
    }
    if (!isRemoved(result)) {
      throw timeoutError;
    }
    return void 0;
  }, options);
}
function fireEvent(element, event) {
  return getConfig().eventWrapper(() => {
    if (!event) {
      throw new Error("Unable to fire an event - please provide an event object.");
    }
    if (!element) {
      throw new Error('Unable to fire a "' + event.type + '" event - please provide a DOM element.');
    }
    return element.dispatchEvent(event);
  });
}
function createEvent(eventName, node, init, _temp) {
  let {
    EventType = "Event",
    defaultInit = {}
  } = _temp === void 0 ? {} : _temp;
  if (!node) {
    throw new Error('Unable to fire a "' + eventName + '" event - please provide a DOM element.');
  }
  const eventInit = {
    ...defaultInit,
    ...init
  };
  const {
    target: {
      value,
      files,
      ...targetProperties
    } = {}
  } = eventInit;
  if (value !== void 0) {
    setNativeValue(node, value);
  }
  if (files !== void 0) {
    Object.defineProperty(node, "files", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: files
    });
  }
  Object.assign(node, targetProperties);
  const window2 = getWindowFromNode(node);
  const EventConstructor = window2[EventType] || window2.Event;
  let event;
  if (typeof EventConstructor === "function") {
    event = new EventConstructor(eventName, eventInit);
  } else {
    event = window2.document.createEvent(EventType);
    const {
      bubbles,
      cancelable,
      detail,
      ...otherInit
    } = eventInit;
    event.initEvent(eventName, bubbles, cancelable, detail);
    Object.keys(otherInit).forEach((eventKey) => {
      event[eventKey] = otherInit[eventKey];
    });
  }
  const dataTransferProperties = ["dataTransfer", "clipboardData"];
  dataTransferProperties.forEach((dataTransferKey) => {
    const dataTransferValue = eventInit[dataTransferKey];
    if (typeof dataTransferValue === "object") {
      if (typeof window2.DataTransfer === "function") {
        Object.defineProperty(event, dataTransferKey, {
          value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => {
            Object.defineProperty(acc, propName, {
              value: dataTransferValue[propName]
            });
            return acc;
          }, new window2.DataTransfer())
        });
      } else {
        Object.defineProperty(event, dataTransferKey, {
          value: dataTransferValue
        });
      }
    }
  });
  return event;
}
function setNativeValue(element, value) {
  const {
    set: valueSetter
  } = Object.getOwnPropertyDescriptor(element, "value") || {};
  const prototype = Object.getPrototypeOf(element);
  const {
    set: prototypeValueSetter
  } = Object.getOwnPropertyDescriptor(prototype, "value") || {};
  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } else {
    if (valueSetter) {
      valueSetter.call(element, value);
    } else {
      throw new Error("The given element does not have a value setter");
    }
  }
}
function unindent(string) {
  return string.replace(/[ \t]*[\n][ \t]*/g, "\n");
}
function encode(value) {
  return import_lz_string.default.compressToEncodedURIComponent(unindent(value));
}
function getPlaygroundUrl(markup) {
  return "https://testing-playground.com/#markup=" + encode(markup);
}
var import_dist28, import_dist29, import_dist30, prettyFormat, import_aria_query, import_lz_string, printProps, NodeTypeTextNode, printChildren, printText, printComment, printElement, printElementAsLeaf, ELEMENT_NODE$1, TEXT_NODE$1, COMMENT_NODE$1, FRAGMENT_NODE, ELEMENT_REGEXP, testNode, chalk, readFileSync, codeFrameColumns, TEXT_NODE, shouldHighlight, DOMCollection, ELEMENT_NODE, COMMENT_NODE, logDOM, config, labelledNodeNames, elementRoleList, logRoles, normalize, wrapSingleQueryWithSuggestion, wrapAllByQueryWithSuggestion, queryHelpers, queryAllLabelsByText, queryAllByLabelText, getAllByLabelText, getMultipleError$7, queryByLabelText, getByLabelText, findAllByLabelText, findByLabelText, getAllByLabelTextWithSuggestions, getByLabelTextWithSuggestions, queryAllByLabelTextWithSuggestions, queryAllByPlaceholderText, getMultipleError$6, getMissingError$6, queryAllByPlaceholderTextWithSuggestions, queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText, queryAllByText, getMultipleError$5, getMissingError$5, queryAllByTextWithSuggestions, queryByText, getAllByText, getByText, findAllByText, findByText, queryAllByDisplayValue, getMultipleError$4, getMissingError$4, queryAllByDisplayValueWithSuggestions, queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue, VALID_TAG_REGEXP, queryAllByAltText, getMultipleError$3, getMissingError$3, queryAllByAltTextWithSuggestions, queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText, isSvgTitle, queryAllByTitle, getMultipleError$2, getMissingError$2, queryAllByTitleWithSuggestions, queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle, queryAllByRole, getNameHint, getMultipleError$1, getMissingError$1, queryAllByRoleWithSuggestions, queryByRole, getAllByRole, getByRole, findAllByRole, findByRole, getTestIdAttribute, queryAllByTestId, getMultipleError, getMissingError, queryAllByTestIdWithSuggestions, queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId, queries, isRemoved, eventMap, eventAliasMap, debug, logTestingPlaygroundURL, initialValue, screen;
var init_dom_esm = __esm({
  "../node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js"() {
    import_dist28 = __toESM(require_dist());
    import_dist29 = __toESM(require_dist2());
    import_dist30 = __toESM(require_dist3());
    prettyFormat = __toESM(require_build());
    init_dist();
    import_aria_query = __toESM(require_lib());
    import_lz_string = __toESM(require_lz_string());
    printProps = (keys, props, config2, indentation, depth, refs, printer) => {
      const indentationNext = indentation + config2.indent;
      const colors = config2.colors;
      return keys.map((key) => {
        const value = props[key];
        let printed = printer(value, config2, indentationNext, depth, refs);
        if (typeof value !== "string") {
          if (printed.indexOf("\n") !== -1) {
            printed = config2.spacingOuter + indentationNext + printed + config2.spacingOuter + indentation;
          }
          printed = "{" + printed + "}";
        }
        return config2.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
      }).join("");
    };
    NodeTypeTextNode = 3;
    printChildren = (children, config2, indentation, depth, refs, printer) => children.map((child) => {
      const printedChild = typeof child === "string" ? printText(child, config2) : printer(child, config2, indentation, depth, refs);
      if (printedChild === "" && typeof child === "object" && child !== null && child.nodeType !== NodeTypeTextNode) {
        return "";
      }
      return config2.spacingOuter + indentation + printedChild;
    }).join("");
    printText = (text, config2) => {
      const contentColor = config2.colors.content;
      return contentColor.open + escapeHTML(text) + contentColor.close;
    };
    printComment = (comment, config2) => {
      const commentColor = config2.colors.comment;
      return commentColor.open + "<!--" + escapeHTML(comment) + "-->" + commentColor.close;
    };
    printElement = (type, printedProps, printedChildren, config2, indentation) => {
      const tagColor = config2.colors.tag;
      return tagColor.open + "<" + type + (printedProps && tagColor.close + printedProps + config2.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config2.spacingOuter + indentation + tagColor.open + "</" + type : (printedProps && !config2.min ? "" : " ") + "/") + ">" + tagColor.close;
    };
    printElementAsLeaf = (type, config2) => {
      const tagColor = config2.colors.tag;
      return tagColor.open + "<" + type + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
    };
    ELEMENT_NODE$1 = 1;
    TEXT_NODE$1 = 3;
    COMMENT_NODE$1 = 8;
    FRAGMENT_NODE = 11;
    ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
    testNode = (val) => {
      const constructorName = val.constructor.name;
      const {
        nodeType,
        tagName
      } = val;
      const isCustomElement = typeof tagName === "string" && tagName.includes("-") || typeof val.hasAttribute === "function" && val.hasAttribute("is");
      return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
    };
    chalk = null;
    readFileSync = null;
    codeFrameColumns = null;
    try {
      const nodeRequire = module && module.require;
      readFileSync = nodeRequire.call(module, "fs").readFileSync;
      codeFrameColumns = nodeRequire.call(module, "@babel/code-frame").codeFrameColumns;
      chalk = nodeRequire.call(module, "chalk");
    } catch {
    }
    TEXT_NODE = 3;
    shouldHighlight = () => {
      let colors;
      try {
        var _process;
        colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
      } catch (e) {
      }
      if (typeof colors === "boolean") {
        return colors;
      } else {
        return typeof process !== "undefined" && process.versions !== void 0 && process.versions.node !== void 0;
      }
    };
    ({
      DOMCollection
    } = prettyFormat.plugins);
    ELEMENT_NODE = 1;
    COMMENT_NODE = 8;
    logDOM = function() {
      const userCodeFrame = getUserCodeFrame();
      if (userCodeFrame) {
        console.log(prettyDOM(...arguments) + "\n\n" + userCodeFrame);
      } else {
        console.log(prettyDOM(...arguments));
      }
    };
    config = {
      testIdAttribute: "data-testid",
      asyncUtilTimeout: 1e3,
      // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
      // forcing react-testing-library to wrap all async functions would've been
      // a total nightmare (consider wrapping every findBy* query and then also
      // updating `within` so those would be wrapped too. Total nightmare).
      // so we have this config option that's really only intended for
      // react-testing-library to use. For that reason, this feature will remain
      // undocumented.
      asyncWrapper: (cb) => cb(),
      unstable_advanceTimersWrapper: (cb) => cb(),
      eventWrapper: (cb) => cb(),
      // default value for the `hidden` option in `ByRole` queries
      defaultHidden: false,
      // default value for the `ignore` option in `ByText` queries
      defaultIgnore: "script, style",
      // showOriginalStackTrace flag to show the full error stack traces for async errors
      showOriginalStackTrace: false,
      // throw errors w/ suggestions for better queries. Opt in so off by default.
      throwSuggestions: false,
      // called when getBy* queries fail. (message, container) => Error
      getElementError(message, container) {
        const prettifiedDOM = prettyDOM(container);
        const error = new Error([message, "Ignored nodes: comments, " + config.defaultIgnore + "\n" + prettifiedDOM].filter(Boolean).join("\n\n"));
        error.name = "TestingLibraryElementError";
        return error;
      },
      _disableExpensiveErrorDiagnostics: false,
      computedStyleSupportsPseudoElements: false
    };
    labelledNodeNames = ["button", "meter", "output", "progress", "select", "textarea", "input"];
    elementRoleList = buildElementRoleList(import_aria_query.elementRoles);
    logRoles = function(dom, _temp2) {
      let {
        hidden = false
      } = _temp2 === void 0 ? {} : _temp2;
      return console.log(prettyRoles(dom, {
        hidden
      }));
    };
    normalize = getDefaultNormalizer();
    wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      const element = query(container, ...args);
      const [{
        suggest = getConfig().throwSuggestions
      } = {}] = args.slice(-1);
      if (element && suggest) {
        const suggestion = getSuggestedQuery(element, variant);
        if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {
          throw getSuggestionError(suggestion.toString(), container);
        }
      }
      return element;
    };
    wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      const els = query(container, ...args);
      const [{
        suggest = getConfig().throwSuggestions
      } = {}] = args.slice(-1);
      if (els.length && suggest) {
        const uniqueSuggestionMessages = [...new Set(els.map((element) => {
          var _getSuggestedQuery;
          return (_getSuggestedQuery = getSuggestedQuery(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
        }))];
        if (
          // only want to suggest if all the els have the same suggestion.
          uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?
            getSuggestedQuery(els[0], variant).queryName
          )
        ) {
          throw getSuggestionError(uniqueSuggestionMessages[0], container);
        }
      }
      return els;
    };
    queryHelpers = Object.freeze({
      __proto__: null,
      getElementError,
      wrapAllByQueryWithSuggestion,
      wrapSingleQueryWithSuggestion,
      getMultipleElementsFoundError,
      queryAllByAttribute,
      queryByAttribute,
      makeSingleQuery,
      makeGetAllQuery,
      makeFindQuery,
      buildQueries
    });
    queryAllLabelsByText = function(container, text, _temp) {
      let {
        exact = true,
        trim,
        collapseWhitespace,
        normalizer
      } = _temp === void 0 ? {} : _temp;
      const matcher = exact ? matches : fuzzyMatches;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      const textToMatchByLabels = queryAllLabels(container);
      return textToMatchByLabels.filter((_ref2) => {
        let {
          node,
          textToMatch
        } = _ref2;
        return matcher(textToMatch, node, text, matchNormalizer);
      }).map((_ref3) => {
        let {
          node
        } = _ref3;
        return node;
      });
    };
    queryAllByLabelText = function(container, text, _temp2) {
      let {
        selector = "*",
        exact = true,
        collapseWhitespace,
        trim,
        normalizer
      } = _temp2 === void 0 ? {} : _temp2;
      checkContainerType(container);
      const matcher = exact ? matches : fuzzyMatches;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      const matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => {
        return getRealLabels(element).length || element.hasAttribute("aria-labelledby");
      }).reduce((labelledElements, labelledElement) => {
        const labelList = getLabels2(container, labelledElement, {
          selector
        });
        labelList.filter((label) => Boolean(label.formControl)).forEach((label) => {
          if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {
            labelledElements.push(label.formControl);
          }
        });
        const labelsValue = labelList.filter((label) => Boolean(label.content)).map((label) => label.content);
        if (matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer)) {
          labelledElements.push(labelledElement);
        }
        if (labelsValue.length > 1) {
          labelsValue.forEach((labelValue, index) => {
            if (matcher(labelValue, labelledElement, text, matchNormalizer)) {
              labelledElements.push(labelledElement);
            }
            const labelsFiltered = [...labelsValue];
            labelsFiltered.splice(index, 1);
            if (labelsFiltered.length > 1) {
              if (matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer)) {
                labelledElements.push(labelledElement);
              }
            }
          });
        }
        return labelledElements;
      }, []).concat(queryAllByAttribute("aria-label", container, text, {
        exact,
        normalizer: matchNormalizer
      }));
      return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
    };
    getAllByLabelText = function(container, text) {
      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        rest[_key - 2] = arguments[_key];
      }
      const els = queryAllByLabelText(container, text, ...rest);
      if (!els.length) {
        const labels = queryAllLabelsByText(container, text, ...rest);
        if (labels.length) {
          const tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter((tagName) => !!tagName);
          if (tagNames.length) {
            throw getConfig().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join("\n\n"), container);
          } else {
            throw getConfig().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
          }
        } else {
          throw getConfig().getElementError("Unable to find a label with the text of: " + text, container);
        }
      }
      return els;
    };
    getMultipleError$7 = (c, text) => "Found multiple elements with the text of: " + text;
    queryByLabelText = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText, getMultipleError$7), queryAllByLabelText.name, "query");
    getByLabelText = makeSingleQuery(getAllByLabelText, getMultipleError$7);
    findAllByLabelText = makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "findAll"));
    findByLabelText = makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "find"));
    getAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "getAll");
    getByLabelTextWithSuggestions = wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "get");
    queryAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByLabelText, queryAllByLabelText.name, "queryAll");
    queryAllByPlaceholderText = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      checkContainerType(args[0]);
      return queryAllByAttribute("placeholder", ...args);
    };
    getMultipleError$6 = (c, text) => "Found multiple elements with the placeholder text of: " + text;
    getMissingError$6 = (c, text) => "Unable to find an element with the placeholder text of: " + text;
    queryAllByPlaceholderTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByPlaceholderText, queryAllByPlaceholderText.name, "queryAll");
    [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = buildQueries(queryAllByPlaceholderText, getMultipleError$6, getMissingError$6);
    queryAllByText = function(container, text, _temp) {
      let {
        selector = "*",
        exact = true,
        collapseWhitespace,
        trim,
        ignore = getConfig().defaultIgnore,
        normalizer
      } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      const matcher = exact ? matches : fuzzyMatches;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      let baseArray = [];
      if (typeof container.matches === "function" && container.matches(selector)) {
        baseArray = [container];
      }
      return [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText(node), node, text, matchNormalizer));
    };
    getMultipleError$5 = (c, text) => "Found multiple elements with the text: " + text;
    getMissingError$5 = function(c, text, options) {
      if (options === void 0) {
        options = {};
      }
      const {
        collapseWhitespace,
        trim,
        normalizer,
        selector
      } = options;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      const normalizedText = matchNormalizer(text.toString());
      const isNormalizedDifferent = normalizedText !== text.toString();
      const isCustomSelector = (selector != null ? selector : "*") !== "*";
      return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
    };
    queryAllByTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByText, queryAllByText.name, "queryAll");
    [queryByText, getAllByText, getByText, findAllByText, findByText] = buildQueries(queryAllByText, getMultipleError$5, getMissingError$5);
    queryAllByDisplayValue = function(container, value, _temp) {
      let {
        exact = true,
        collapseWhitespace,
        trim,
        normalizer
      } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      const matcher = exact ? matches : fuzzyMatches;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => {
        if (node.tagName === "SELECT") {
          const selectedOptions = Array.from(node.options).filter((option) => option.selected);
          return selectedOptions.some((optionNode) => matcher(getNodeText(optionNode), optionNode, value, matchNormalizer));
        } else {
          return matcher(node.value, node, value, matchNormalizer);
        }
      });
    };
    getMultipleError$4 = (c, value) => "Found multiple elements with the display value: " + value + ".";
    getMissingError$4 = (c, value) => "Unable to find an element with the display value: " + value + ".";
    queryAllByDisplayValueWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByDisplayValue, queryAllByDisplayValue.name, "queryAll");
    [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = buildQueries(queryAllByDisplayValue, getMultipleError$4, getMissingError$4);
    VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
    queryAllByAltText = function(container, alt, options) {
      if (options === void 0) {
        options = {};
      }
      checkContainerType(container);
      return queryAllByAttribute("alt", container, alt, options).filter((node) => VALID_TAG_REGEXP.test(node.tagName));
    };
    getMultipleError$3 = (c, alt) => "Found multiple elements with the alt text: " + alt;
    getMissingError$3 = (c, alt) => "Unable to find an element with the alt text: " + alt;
    queryAllByAltTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByAltText, queryAllByAltText.name, "queryAll");
    [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = buildQueries(queryAllByAltText, getMultipleError$3, getMissingError$3);
    isSvgTitle = (node) => {
      var _node$parentElement;
      return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
    };
    queryAllByTitle = function(container, text, _temp) {
      let {
        exact = true,
        collapseWhitespace,
        trim,
        normalizer
      } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      const matcher = exact ? matches : fuzzyMatches;
      const matchNormalizer = makeNormalizer({
        collapseWhitespace,
        trim,
        normalizer
      });
      return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle(node) && matcher(getNodeText(node), node, text, matchNormalizer));
    };
    getMultipleError$2 = (c, title) => "Found multiple elements with the title: " + title + ".";
    getMissingError$2 = (c, title) => "Unable to find an element with the title: " + title + ".";
    queryAllByTitleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTitle, queryAllByTitle.name, "queryAll");
    [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = buildQueries(queryAllByTitle, getMultipleError$2, getMissingError$2);
    queryAllByRole = function(container, role, _temp) {
      let {
        hidden = getConfig().defaultHidden,
        name,
        description,
        queryFallbacks = false,
        selected,
        busy,
        checked,
        pressed,
        current,
        level,
        expanded,
        value: {
          now: valueNow,
          min: valueMin,
          max: valueMax,
          text: valueText
        } = {}
      } = _temp === void 0 ? {} : _temp;
      checkContainerType(container);
      if (selected !== void 0) {
        var _allRoles$get;
        if (((_allRoles$get = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0) {
          throw new Error('"aria-selected" is not supported on role "' + role + '".');
        }
      }
      if (busy !== void 0) {
        var _allRoles$get2;
        if (((_allRoles$get2 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0) {
          throw new Error('"aria-busy" is not supported on role "' + role + '".');
        }
      }
      if (checked !== void 0) {
        var _allRoles$get3;
        if (((_allRoles$get3 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0) {
          throw new Error('"aria-checked" is not supported on role "' + role + '".');
        }
      }
      if (pressed !== void 0) {
        var _allRoles$get4;
        if (((_allRoles$get4 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0) {
          throw new Error('"aria-pressed" is not supported on role "' + role + '".');
        }
      }
      if (current !== void 0) {
        var _allRoles$get5;
        if (((_allRoles$get5 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0) {
          throw new Error('"aria-current" is not supported on role "' + role + '".');
        }
      }
      if (level !== void 0) {
        if (role !== "heading") {
          throw new Error('Role "' + role + '" cannot have "level" property.');
        }
      }
      if (valueNow !== void 0) {
        var _allRoles$get6;
        if (((_allRoles$get6 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0) {
          throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
        }
      }
      if (valueMax !== void 0) {
        var _allRoles$get7;
        if (((_allRoles$get7 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0) {
          throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
        }
      }
      if (valueMin !== void 0) {
        var _allRoles$get8;
        if (((_allRoles$get8 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0) {
          throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
        }
      }
      if (valueText !== void 0) {
        var _allRoles$get9;
        if (((_allRoles$get9 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0) {
          throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
        }
      }
      if (expanded !== void 0) {
        var _allRoles$get10;
        if (((_allRoles$get10 = import_aria_query.roles.get(role)) == null ? void 0 : _allRoles$get10.props["aria-expanded"]) === void 0) {
          throw new Error('"aria-expanded" is not supported on role "' + role + '".');
        }
      }
      const subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
      function cachedIsSubtreeInaccessible(element) {
        if (!subtreeIsInaccessibleCache.has(element)) {
          subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible(element));
        }
        return subtreeIsInaccessibleCache.get(element);
      }
      return Array.from(container.querySelectorAll(
        // Only query elements that can be matched by the following filters
        makeRoleSelector(role)
      )).filter((node) => {
        const isRoleSpecifiedExplicitly = node.hasAttribute("role");
        if (isRoleSpecifiedExplicitly) {
          const roleValue = node.getAttribute("role");
          if (queryFallbacks) {
            return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
          }
          const [firstRoleAttributeToken] = roleValue.split(" ");
          return firstRoleAttributeToken === role;
        }
        const implicitRoles = getImplicitAriaRoles(node);
        return implicitRoles.some((implicitRole) => {
          return implicitRole === role;
        });
      }).filter((element) => {
        if (selected !== void 0) {
          return selected === computeAriaSelected(element);
        }
        if (busy !== void 0) {
          return busy === computeAriaBusy(element);
        }
        if (checked !== void 0) {
          return checked === computeAriaChecked(element);
        }
        if (pressed !== void 0) {
          return pressed === computeAriaPressed(element);
        }
        if (current !== void 0) {
          return current === computeAriaCurrent(element);
        }
        if (expanded !== void 0) {
          return expanded === computeAriaExpanded(element);
        }
        if (level !== void 0) {
          return level === computeHeadingLevel(element);
        }
        if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
          let valueMatches = true;
          if (valueNow !== void 0) {
            valueMatches && (valueMatches = valueNow === computeAriaValueNow(element));
          }
          if (valueMax !== void 0) {
            valueMatches && (valueMatches = valueMax === computeAriaValueMax(element));
          }
          if (valueMin !== void 0) {
            valueMatches && (valueMatches = valueMin === computeAriaValueMin(element));
          }
          if (valueText !== void 0) {
            var _computeAriaValueText;
            valueMatches && (valueMatches = matches((_computeAriaValueText = computeAriaValueText(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
          }
          return valueMatches;
        }
        return true;
      }).filter((element) => {
        if (name === void 0) {
          return true;
        }
        return matches(computeAccessibleName(element, {
          computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
        }), element, name, (text) => text);
      }).filter((element) => {
        if (description === void 0) {
          return true;
        }
        return matches(computeAccessibleDescription(element, {
          computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
        }), element, description, (text) => text);
      }).filter((element) => {
        return hidden === false ? isInaccessible(element, {
          isSubtreeInaccessible: cachedIsSubtreeInaccessible
        }) === false : true;
      });
    };
    getNameHint = (name) => {
      let nameHint = "";
      if (name === void 0) {
        nameHint = "";
      } else if (typeof name === "string") {
        nameHint = ' and name "' + name + '"';
      } else {
        nameHint = " and name `" + name + "`";
      }
      return nameHint;
    };
    getMultipleError$1 = function(c, role, _temp2) {
      let {
        name
      } = _temp2 === void 0 ? {} : _temp2;
      return 'Found multiple elements with the role "' + role + '"' + getNameHint(name);
    };
    getMissingError$1 = function(container, role, _temp3) {
      let {
        hidden = getConfig().defaultHidden,
        name,
        description
      } = _temp3 === void 0 ? {} : _temp3;
      if (getConfig()._disableExpensiveErrorDiagnostics) {
        return 'Unable to find role="' + role + '"' + getNameHint(name);
      }
      let roles2 = "";
      Array.from(container.children).forEach((childElement) => {
        roles2 += prettyRoles(childElement, {
          hidden,
          includeDescription: description !== void 0
        });
      });
      let roleMessage;
      if (roles2.length === 0) {
        if (hidden === false) {
          roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole";
        } else {
          roleMessage = "There are no available roles.";
        }
      } else {
        roleMessage = ("\nHere are the " + (hidden === false ? "accessible" : "available") + " roles:\n\n  " + roles2.replace(/\n/g, "\n  ").replace(/\n\s\s\n/g, "\n\n") + "\n").trim();
      }
      let nameHint = "";
      if (name === void 0) {
        nameHint = "";
      } else if (typeof name === "string") {
        nameHint = ' and name "' + name + '"';
      } else {
        nameHint = " and name `" + name + "`";
      }
      let descriptionHint = "";
      if (description === void 0) {
        descriptionHint = "";
      } else if (typeof description === "string") {
        descriptionHint = ' and description "' + description + '"';
      } else {
        descriptionHint = " and description `" + description + "`";
      }
      return ("\nUnable to find an " + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + "\n\n" + roleMessage).trim();
    };
    queryAllByRoleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByRole, queryAllByRole.name, "queryAll");
    [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = buildQueries(queryAllByRole, getMultipleError$1, getMissingError$1);
    getTestIdAttribute = () => getConfig().testIdAttribute;
    queryAllByTestId = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      checkContainerType(args[0]);
      return queryAllByAttribute(getTestIdAttribute(), ...args);
    };
    getMultipleError = (c, id) => "Found multiple elements by: [" + getTestIdAttribute() + '="' + id + '"]';
    getMissingError = (c, id) => "Unable to find an element by: [" + getTestIdAttribute() + '="' + id + '"]';
    queryAllByTestIdWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTestId, queryAllByTestId.name, "queryAll");
    [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = buildQueries(queryAllByTestId, getMultipleError, getMissingError);
    queries = Object.freeze({
      __proto__: null,
      queryAllByLabelText: queryAllByLabelTextWithSuggestions,
      queryByLabelText,
      getAllByLabelText: getAllByLabelTextWithSuggestions,
      getByLabelText: getByLabelTextWithSuggestions,
      findAllByLabelText,
      findByLabelText,
      queryByPlaceholderText,
      queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions,
      getByPlaceholderText,
      getAllByPlaceholderText,
      findAllByPlaceholderText,
      findByPlaceholderText,
      queryByText,
      queryAllByText: queryAllByTextWithSuggestions,
      getByText,
      getAllByText,
      findAllByText,
      findByText,
      queryByDisplayValue,
      queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions,
      getByDisplayValue,
      getAllByDisplayValue,
      findAllByDisplayValue,
      findByDisplayValue,
      queryByAltText,
      queryAllByAltText: queryAllByAltTextWithSuggestions,
      getByAltText,
      getAllByAltText,
      findAllByAltText,
      findByAltText,
      queryByTitle,
      queryAllByTitle: queryAllByTitleWithSuggestions,
      getByTitle,
      getAllByTitle,
      findAllByTitle,
      findByTitle,
      queryByRole,
      queryAllByRole: queryAllByRoleWithSuggestions,
      getAllByRole,
      getByRole,
      findAllByRole,
      findByRole,
      queryByTestId,
      queryAllByTestId: queryAllByTestIdWithSuggestions,
      getByTestId,
      getAllByTestId,
      findAllByTestId,
      findByTestId
    });
    isRemoved = (result) => !result || Array.isArray(result) && !result.length;
    eventMap = {
      // Clipboard Events
      copy: {
        EventType: "ClipboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      cut: {
        EventType: "ClipboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      paste: {
        EventType: "ClipboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      // Composition Events
      compositionEnd: {
        EventType: "CompositionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      compositionStart: {
        EventType: "CompositionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      compositionUpdate: {
        EventType: "CompositionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      // Keyboard Events
      keyDown: {
        EventType: "KeyboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          charCode: 0,
          composed: true
        }
      },
      keyPress: {
        EventType: "KeyboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          charCode: 0,
          composed: true
        }
      },
      keyUp: {
        EventType: "KeyboardEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          charCode: 0,
          composed: true
        }
      },
      // Focus Events
      focus: {
        EventType: "FocusEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false,
          composed: true
        }
      },
      blur: {
        EventType: "FocusEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false,
          composed: true
        }
      },
      focusIn: {
        EventType: "FocusEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      focusOut: {
        EventType: "FocusEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      // Form Events
      change: {
        EventType: "Event",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      input: {
        EventType: "InputEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      invalid: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: true
        }
      },
      submit: {
        EventType: "Event",
        defaultInit: {
          bubbles: true,
          cancelable: true
        }
      },
      reset: {
        EventType: "Event",
        defaultInit: {
          bubbles: true,
          cancelable: true
        }
      },
      // Mouse Events
      click: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          button: 0,
          composed: true
        }
      },
      contextMenu: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      dblClick: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      drag: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      dragEnd: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      dragEnter: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      dragExit: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      dragLeave: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      dragOver: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      dragStart: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      drop: {
        EventType: "DragEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      mouseDown: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      mouseEnter: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false,
          composed: true
        }
      },
      mouseLeave: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false,
          composed: true
        }
      },
      mouseMove: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      mouseOut: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      mouseOver: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      mouseUp: {
        EventType: "MouseEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      // Selection Events
      select: {
        EventType: "Event",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      // Touch Events
      touchCancel: {
        EventType: "TouchEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      touchEnd: {
        EventType: "TouchEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      touchMove: {
        EventType: "TouchEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      touchStart: {
        EventType: "TouchEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      // UI Events
      resize: {
        EventType: "UIEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      scroll: {
        EventType: "UIEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      // Wheel Events
      wheel: {
        EventType: "WheelEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      // Media Events
      abort: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      canPlay: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      canPlayThrough: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      durationChange: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      emptied: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      encrypted: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      ended: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      loadedData: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      loadedMetadata: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      loadStart: {
        EventType: "ProgressEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      pause: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      play: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      playing: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      progress: {
        EventType: "ProgressEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      rateChange: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      seeked: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      seeking: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      stalled: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      suspend: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      timeUpdate: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      volumeChange: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      waiting: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      // Events
      load: {
        // TODO: load events can be UIEvent or Event depending on what generated them
        // This is where this abstraction breaks down.
        // But the common targets are <img />, <script /> and window.
        // Neither of these targets receive a UIEvent
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      error: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      // Animation Events
      animationStart: {
        EventType: "AnimationEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      animationEnd: {
        EventType: "AnimationEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      animationIteration: {
        EventType: "AnimationEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      // Transition Events
      transitionCancel: {
        EventType: "TransitionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      transitionEnd: {
        EventType: "TransitionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true
        }
      },
      transitionRun: {
        EventType: "TransitionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      transitionStart: {
        EventType: "TransitionEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      // pointer events
      pointerOver: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      pointerEnter: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      pointerDown: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      pointerMove: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      pointerUp: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      pointerCancel: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      pointerOut: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: true,
          composed: true
        }
      },
      pointerLeave: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      gotPointerCapture: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      lostPointerCapture: {
        EventType: "PointerEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false,
          composed: true
        }
      },
      // history events
      popState: {
        EventType: "PopStateEvent",
        defaultInit: {
          bubbles: true,
          cancelable: false
        }
      },
      // window events
      offline: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      },
      online: {
        EventType: "Event",
        defaultInit: {
          bubbles: false,
          cancelable: false
        }
      }
    };
    eventAliasMap = {
      doubleClick: "dblClick"
    };
    Object.keys(eventMap).forEach((key) => {
      const {
        EventType,
        defaultInit
      } = eventMap[key];
      const eventName = key.toLowerCase();
      createEvent[key] = (node, init) => createEvent(eventName, node, init, {
        EventType,
        defaultInit
      });
      fireEvent[key] = (node, init) => fireEvent(node, createEvent[key](node, init));
    });
    Object.keys(eventAliasMap).forEach((aliasKey) => {
      const key = eventAliasMap[aliasKey];
      fireEvent[aliasKey] = function() {
        return fireEvent[key](...arguments);
      };
    });
    debug = (element, maxLength, options) => Array.isArray(element) ? element.forEach((el) => logDOM(el, maxLength, options)) : logDOM(element, maxLength, options);
    logTestingPlaygroundURL = function(element) {
      if (element === void 0) {
        element = getDocument().body;
      }
      if (!element || !("innerHTML" in element)) {
        console.log("The element you're providing isn't a valid DOM element.");
        return;
      }
      if (!element.innerHTML) {
        console.log("The provided element doesn't have any children.");
        return;
      }
      const playgroundUrl = getPlaygroundUrl(element.innerHTML);
      console.log("Open this URL in your browser\n\n" + playgroundUrl);
      return playgroundUrl;
    };
    initialValue = {
      debug,
      logTestingPlaygroundURL
    };
    screen = typeof document !== "undefined" && document.body ? getQueriesForElement(document.body, queries, initialValue) : Object.keys(queries).reduce((helpers, key) => {
      helpers[key] = () => {
        throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
      };
      return helpers;
    }, initialValue);
  }
});

// ../node_modules/@testing-library/react/dist/@testing-library/react.esm.js
var react_esm_exports = {};
__export(react_esm_exports, {
  act: () => act3,
  buildQueries: () => buildQueries,
  cleanup: () => cleanup,
  configure: () => configure2,
  createEvent: () => createEvent,
  findAllByAltText: () => findAllByAltText,
  findAllByDisplayValue: () => findAllByDisplayValue,
  findAllByLabelText: () => findAllByLabelText,
  findAllByPlaceholderText: () => findAllByPlaceholderText,
  findAllByRole: () => findAllByRole,
  findAllByTestId: () => findAllByTestId,
  findAllByText: () => findAllByText,
  findAllByTitle: () => findAllByTitle,
  findByAltText: () => findByAltText,
  findByDisplayValue: () => findByDisplayValue,
  findByLabelText: () => findByLabelText,
  findByPlaceholderText: () => findByPlaceholderText,
  findByRole: () => findByRole,
  findByTestId: () => findByTestId,
  findByText: () => findByText,
  findByTitle: () => findByTitle,
  fireEvent: () => fireEvent2,
  getAllByAltText: () => getAllByAltText,
  getAllByDisplayValue: () => getAllByDisplayValue,
  getAllByLabelText: () => getAllByLabelTextWithSuggestions,
  getAllByPlaceholderText: () => getAllByPlaceholderText,
  getAllByRole: () => getAllByRole,
  getAllByTestId: () => getAllByTestId,
  getAllByText: () => getAllByText,
  getAllByTitle: () => getAllByTitle,
  getByAltText: () => getByAltText,
  getByDisplayValue: () => getByDisplayValue,
  getByLabelText: () => getByLabelTextWithSuggestions,
  getByPlaceholderText: () => getByPlaceholderText,
  getByRole: () => getByRole,
  getByTestId: () => getByTestId,
  getByText: () => getByText,
  getByTitle: () => getByTitle,
  getConfig: () => getConfig2,
  getDefaultNormalizer: () => getDefaultNormalizer,
  getElementError: () => getElementError,
  getMultipleElementsFoundError: () => getMultipleElementsFoundError,
  getNodeText: () => getNodeText,
  getQueriesForElement: () => getQueriesForElement,
  getRoles: () => getRoles,
  getSuggestedQuery: () => getSuggestedQuery,
  isInaccessible: () => isInaccessible,
  logDOM: () => logDOM,
  logRoles: () => logRoles,
  makeFindQuery: () => makeFindQuery,
  makeGetAllQuery: () => makeGetAllQuery,
  makeSingleQuery: () => makeSingleQuery,
  prettyDOM: () => prettyDOM,
  prettyFormat: () => prettyFormat,
  queries: () => queries,
  queryAllByAltText: () => queryAllByAltTextWithSuggestions,
  queryAllByAttribute: () => queryAllByAttribute,
  queryAllByDisplayValue: () => queryAllByDisplayValueWithSuggestions,
  queryAllByLabelText: () => queryAllByLabelTextWithSuggestions,
  queryAllByPlaceholderText: () => queryAllByPlaceholderTextWithSuggestions,
  queryAllByRole: () => queryAllByRoleWithSuggestions,
  queryAllByTestId: () => queryAllByTestIdWithSuggestions,
  queryAllByText: () => queryAllByTextWithSuggestions,
  queryAllByTitle: () => queryAllByTitleWithSuggestions,
  queryByAltText: () => queryByAltText,
  queryByAttribute: () => queryByAttribute,
  queryByDisplayValue: () => queryByDisplayValue,
  queryByLabelText: () => queryByLabelText,
  queryByPlaceholderText: () => queryByPlaceholderText,
  queryByRole: () => queryByRole,
  queryByTestId: () => queryByTestId,
  queryByText: () => queryByText,
  queryByTitle: () => queryByTitle,
  queryHelpers: () => queryHelpers,
  render: () => render2,
  renderHook: () => renderHook2,
  screen: () => screen,
  waitFor: () => waitForWrapper,
  waitForElementToBeRemoved: () => waitForElementToBeRemoved,
  within: () => getQueriesForElement,
  wrapAllByQueryWithSuggestion: () => wrapAllByQueryWithSuggestion,
  wrapSingleQueryWithSuggestion: () => wrapSingleQueryWithSuggestion
});
function getGlobalThis() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
function setIsReactActEnvironment(isReactActEnvironment) {
  getGlobalThis().IS_REACT_ACT_ENVIRONMENT = isReactActEnvironment;
}
function getIsReactActEnvironment() {
  return getGlobalThis().IS_REACT_ACT_ENVIRONMENT;
}
function withGlobalActEnvironment(actImplementation) {
  return (callback) => {
    const previousActEnvironment = getIsReactActEnvironment();
    setIsReactActEnvironment(true);
    try {
      let callbackNeedsToBeAwaited = false;
      const actResult = actImplementation(() => {
        const result = callback();
        if (result !== null && typeof result === "object" && typeof result.then === "function") {
          callbackNeedsToBeAwaited = true;
        }
        return result;
      });
      if (callbackNeedsToBeAwaited) {
        const thenable = actResult;
        return {
          then: (resolve, reject) => {
            thenable.then((returnValue) => {
              setIsReactActEnvironment(previousActEnvironment);
              resolve(returnValue);
            }, (error) => {
              setIsReactActEnvironment(previousActEnvironment);
              reject(error);
            });
          }
        };
      } else {
        setIsReactActEnvironment(previousActEnvironment);
        return actResult;
      }
    } catch (error) {
      setIsReactActEnvironment(previousActEnvironment);
      throw error;
    }
  };
}
function getConfig2() {
  return {
    ...getConfig(),
    ...configForRTL
  };
}
function configure2(newConfig) {
  if (typeof newConfig === "function") {
    newConfig = newConfig(getConfig2());
  }
  const {
    reactStrictMode,
    ...configForDTL
  } = newConfig;
  configure(configForDTL);
  configForRTL = {
    ...configForRTL,
    reactStrictMode
  };
}
function jestFakeTimersAreEnabled2() {
  if (typeof jest !== "undefined" && jest !== null) {
    return (
      // legacy timers
      setTimeout._isMockFunction === true || // modern timers
      // eslint-disable-next-line prefer-object-has-own -- No Object.hasOwn in all target environments we support.
      Object.prototype.hasOwnProperty.call(setTimeout, "clock")
    );
  }
  return false;
}
function strictModeIfNeeded(innerElement) {
  return getConfig2().reactStrictMode ? React.createElement(React.StrictMode, null, innerElement) : innerElement;
}
function wrapUiIfNeeded(innerElement, wrapperComponent) {
  return wrapperComponent ? React.createElement(wrapperComponent, null, innerElement) : innerElement;
}
function createConcurrentRoot(container, _ref) {
  let {
    hydrate,
    ui,
    wrapper: WrapperComponent
  } = _ref;
  let root;
  if (hydrate) {
    act3(() => {
      root = ReactDOMClient.hydrateRoot(container, strictModeIfNeeded(wrapUiIfNeeded(ui, WrapperComponent)));
    });
  } else {
    root = ReactDOMClient.createRoot(container);
  }
  return {
    hydrate() {
      if (!hydrate) {
        throw new Error("Attempted to hydrate a non-hydrateable root. This is a bug in `@testing-library/react`.");
      }
    },
    render(element) {
      root.render(element);
    },
    unmount() {
      root.unmount();
    }
  };
}
function createLegacyRoot(container) {
  return {
    hydrate(element) {
      import_react_dom.default.hydrate(element, container);
    },
    render(element) {
      import_react_dom.default.render(element, container);
    },
    unmount() {
      import_react_dom.default.unmountComponentAtNode(container);
    }
  };
}
function renderRoot(ui, _ref2) {
  let {
    baseElement,
    container,
    hydrate,
    queries: queries2,
    root,
    wrapper: WrapperComponent
  } = _ref2;
  act3(() => {
    if (hydrate) {
      root.hydrate(strictModeIfNeeded(wrapUiIfNeeded(ui, WrapperComponent)), container);
    } else {
      root.render(strictModeIfNeeded(wrapUiIfNeeded(ui, WrapperComponent)), container);
    }
  });
  return {
    container,
    baseElement,
    debug: function(el, maxLength, options) {
      if (el === void 0) {
        el = baseElement;
      }
      return Array.isArray(el) ? (
        // eslint-disable-next-line no-console
        el.forEach((e) => console.log(prettyDOM(e, maxLength, options)))
      ) : (
        // eslint-disable-next-line no-console,
        console.log(prettyDOM(el, maxLength, options))
      );
    },
    unmount: () => {
      act3(() => {
        root.unmount();
      });
    },
    rerender: (rerenderUi) => {
      renderRoot(rerenderUi, {
        container,
        baseElement,
        root,
        wrapper: WrapperComponent
      });
    },
    asFragment: () => {
      if (typeof document.createRange === "function") {
        return document.createRange().createContextualFragment(container.innerHTML);
      } else {
        const template = document.createElement("template");
        template.innerHTML = container.innerHTML;
        return template.content;
      }
    },
    ...getQueriesForElement(baseElement, queries2)
  };
}
function render2(ui, _temp) {
  let {
    container,
    baseElement = container,
    legacyRoot = false,
    queries: queries2,
    hydrate = false,
    wrapper
  } = _temp === void 0 ? {} : _temp;
  if (legacyRoot && typeof import_react_dom.default.render !== "function") {
    const error = new Error("`legacyRoot: true` is not supported in this version of React. Please use React 18 instead.");
    Error.captureStackTrace(error, render2);
    throw error;
  }
  if (!baseElement) {
    baseElement = document.body;
  }
  if (!container) {
    container = baseElement.appendChild(document.createElement("div"));
  }
  let root;
  if (!mountedContainers.has(container)) {
    const createRootImpl = legacyRoot ? createLegacyRoot : createConcurrentRoot;
    root = createRootImpl(container, {
      hydrate,
      ui,
      wrapper
    });
    mountedRootEntries.push({
      container,
      root
    });
    mountedContainers.add(container);
  } else {
    mountedRootEntries.forEach((rootEntry) => {
      if (rootEntry.container === container) {
        root = rootEntry.root;
      }
    });
  }
  return renderRoot(ui, {
    container,
    baseElement,
    queries: queries2,
    hydrate,
    wrapper,
    root
  });
}
function cleanup() {
  mountedRootEntries.forEach((_ref3) => {
    let {
      root,
      container
    } = _ref3;
    act3(() => {
      root.unmount();
    });
    if (container.parentNode === document.body) {
      document.body.removeChild(container);
    }
  });
  mountedRootEntries.length = 0;
  mountedContainers.clear();
}
function renderHook2(renderCallback, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    initialProps,
    ...renderOptions
  } = options;
  if (renderOptions.legacyRoot && typeof import_react_dom.default.render !== "function") {
    const error = new Error("`legacyRoot: true` is not supported in this version of React. Please use React 18 instead.");
    Error.captureStackTrace(error, renderHook2);
    throw error;
  }
  const result = React.createRef();
  function TestComponent(_ref4) {
    let {
      renderCallbackProps
    } = _ref4;
    const pendingResult = renderCallback(renderCallbackProps);
    React.useEffect(() => {
      result.current = pendingResult;
    });
    return null;
  }
  const {
    rerender: baseRerender,
    unmount
  } = render2(React.createElement(TestComponent, {
    renderCallbackProps: initialProps
  }), renderOptions);
  function rerender(rerenderCallbackProps) {
    return baseRerender(React.createElement(TestComponent, {
      renderCallbackProps: rerenderCallbackProps
    }));
  }
  return {
    result,
    rerender,
    unmount
  };
}
var import_dist31, import_dist32, import_dist33, React, DeprecatedReactTestUtils, import_react_dom, ReactDOMClient, reactAct, act3, fireEvent2, mouseEnter, mouseLeave, pointerEnter, pointerLeave, select, blur, focus, configForRTL, mountedContainers, mountedRootEntries, _a;
var init_react_esm = __esm({
  "../node_modules/@testing-library/react/dist/@testing-library/react.esm.js"() {
    import_dist31 = __toESM(require_dist());
    import_dist32 = __toESM(require_dist2());
    import_dist33 = __toESM(require_dist3());
    React = __toESM(require_react());
    DeprecatedReactTestUtils = __toESM(require_test_utils());
    import_react_dom = __toESM(require_react_dom());
    ReactDOMClient = __toESM(require_client());
    init_dom_esm();
    init_dom_esm();
    reactAct = typeof React.act === "function" ? React.act : DeprecatedReactTestUtils.act;
    act3 = withGlobalActEnvironment(reactAct);
    fireEvent2 = function() {
      return fireEvent(...arguments);
    };
    Object.keys(fireEvent).forEach((key) => {
      fireEvent2[key] = function() {
        return fireEvent[key](...arguments);
      };
    });
    mouseEnter = fireEvent2.mouseEnter;
    mouseLeave = fireEvent2.mouseLeave;
    fireEvent2.mouseEnter = function() {
      mouseEnter(...arguments);
      return fireEvent2.mouseOver(...arguments);
    };
    fireEvent2.mouseLeave = function() {
      mouseLeave(...arguments);
      return fireEvent2.mouseOut(...arguments);
    };
    pointerEnter = fireEvent2.pointerEnter;
    pointerLeave = fireEvent2.pointerLeave;
    fireEvent2.pointerEnter = function() {
      pointerEnter(...arguments);
      return fireEvent2.pointerOver(...arguments);
    };
    fireEvent2.pointerLeave = function() {
      pointerLeave(...arguments);
      return fireEvent2.pointerOut(...arguments);
    };
    select = fireEvent2.select;
    fireEvent2.select = (node, init) => {
      select(node, init);
      node.focus();
      fireEvent2.keyUp(node, init);
    };
    blur = fireEvent2.blur;
    focus = fireEvent2.focus;
    fireEvent2.blur = function() {
      fireEvent2.focusOut(...arguments);
      return blur(...arguments);
    };
    fireEvent2.focus = function() {
      fireEvent2.focusIn(...arguments);
      return focus(...arguments);
    };
    configForRTL = {
      reactStrictMode: false
    };
    configure({
      unstable_advanceTimersWrapper: (cb) => {
        return act3(cb);
      },
      // We just want to run `waitFor` without IS_REACT_ACT_ENVIRONMENT
      // But that's not necessarily how `asyncWrapper` is used since it's a public method.
      // Let's just hope nobody else is using it.
      asyncWrapper: async (cb) => {
        const previousActEnvironment = getIsReactActEnvironment();
        setIsReactActEnvironment(false);
        try {
          const result = await cb();
          await new Promise((resolve) => {
            setTimeout(() => {
              resolve();
            }, 0);
            if (jestFakeTimersAreEnabled2()) {
              jest.advanceTimersByTime(0);
            }
          });
          return result;
        } finally {
          setIsReactActEnvironment(previousActEnvironment);
        }
      },
      eventWrapper: (cb) => {
        let result;
        act3(() => {
          result = cb();
        });
        return result;
      }
    });
    mountedContainers = /* @__PURE__ */ new Set();
    mountedRootEntries = [];
    if (typeof process === "undefined" || !((_a = process.env) == null ? void 0 : _a.RTL_SKIP_AUTO_CLEANUP)) {
      if (typeof afterEach === "function") {
        afterEach(() => {
          cleanup();
        });
      } else if (typeof teardown === "function") {
        teardown(() => {
          cleanup();
        });
      }
      if (typeof beforeAll === "function" && typeof afterAll === "function") {
        let previousIsReactActEnvironment = getIsReactActEnvironment();
        beforeAll(() => {
          previousIsReactActEnvironment = getIsReactActEnvironment();
          setIsReactActEnvironment(true);
        });
        afterAll(() => {
          setIsReactActEnvironment(previousIsReactActEnvironment);
        });
      }
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/useAuth.js
var require_useAuth = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/useAuth.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useAuth_exports = {};
    __export2(useAuth_exports, {
      createUseAuth: () => createUseAuth,
      useNoAuth: () => useNoAuth2
    });
    module2.exports = __toCommonJS2(useAuth_exports);
    var import_react = __toESM2(require_react(), 1);
    function createUseAuth(AuthContext) {
      const useAuth2 = () => {
        const context2 = import_react.default.useContext(AuthContext);
        if (!context2) {
          throw new Error("useAuth must be used within an AuthProvider");
        }
        return context2;
      };
      return useAuth2;
    }
    function useNoAuth2() {
      return {
        loading: false,
        isAuthenticated: false,
        logIn: async () => {
        },
        logOut: async () => {
        },
        signUp: async () => {
        },
        currentUser: null,
        userMetadata: null,
        getToken: async () => null,
        getCurrentUser: async () => null,
        hasRole: () => false,
        reauthenticate: async () => {
        },
        forgotPassword: async () => {
        },
        resetPassword: async () => {
        },
        validateResetToken: async () => {
        },
        type: "default",
        client: void 0,
        hasError: false
      };
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthContext.js
var require_AuthContext = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthContext.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var AuthContext_exports = {};
    __export2(AuthContext_exports, {
      createAuthContext: () => createAuthContext
    });
    module2.exports = __toCommonJS2(AuthContext_exports);
    var import_react = __toESM2(require_react(), 1);
    function createAuthContext() {
      return import_react.default.createContext(void 0);
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/AuthProviderState.js
var require_AuthProviderState = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/AuthProviderState.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var AuthProviderState_exports = {};
    __export2(AuthProviderState_exports, {
      middlewareDefaultAuthProviderState: () => middlewareDefaultAuthProviderState2,
      spaDefaultAuthProviderState: () => spaDefaultAuthProviderState2
    });
    module2.exports = __toCommonJS2(AuthProviderState_exports);
    var spaDefaultAuthProviderState2 = {
      loading: true,
      isAuthenticated: false,
      userMetadata: null,
      currentUser: null,
      hasError: false
    };
    var middlewareDefaultAuthProviderState2 = {
      loading: false,
      isAuthenticated: false,
      userMetadata: null,
      currentUser: null,
      hasError: false
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/ServerAuthProvider.js
var require_ServerAuthProvider = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/ServerAuthProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var ServerAuthProvider_exports = {};
    __export2(ServerAuthProvider_exports, {
      ServerAuthContext: () => ServerAuthContext,
      ServerAuthProvider: () => ServerAuthProvider
    });
    module2.exports = __toCommonJS2(ServerAuthProvider_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_AuthProviderState = require_AuthProviderState();
    var getAuthInitialStateFromServer = () => {
      if (globalThis == null ? void 0 : globalThis.__REDWOOD__SERVER__AUTH_STATE__) {
        const initialState = {
          ...import_AuthProviderState.middlewareDefaultAuthProviderState,
          encryptedSession: null,
          ...(globalThis == null ? void 0 : globalThis.__REDWOOD__SERVER__AUTH_STATE__) || {}
        };
        globalThis.__REDWOOD__SERVER__AUTH_STATE__ = null;
        return initialState;
      }
      return null;
    };
    var ServerAuthContext = import_react.default.createContext(
      getAuthInitialStateFromServer()
    );
    var ServerAuthProvider = ({
      value,
      children
    }) => {
      const stringifiedAuthState = `__REDWOOD__SERVER__AUTH_STATE__ = ${JSON.stringify(
        sanitizeServerAuthState(value)
      )};`;
      return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(
        "script",
        {
          id: "__REDWOOD__SERVER_AUTH_STATE__",
          dangerouslySetInnerHTML: {
            __html: stringifiedAuthState
          }
        }
      ), import_react.default.createElement(ServerAuthContext.Provider, { value }, children));
    };
    function sanitizeServerAuthState(value) {
      const sanitizedState = { ...value };
      delete sanitizedState.cookieHeader;
      return sanitizedState;
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useToken.js
var require_useToken = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useToken.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useToken_exports = {};
    __export2(useToken_exports, {
      useToken: () => useToken
    });
    module2.exports = __toCommonJS2(useToken_exports);
    var import_react = require_react();
    var useToken = (authImplementation) => {
      return (0, import_react.useCallback)(async () => {
        try {
          const token = await authImplementation.getToken();
          return token;
        } catch (e) {
          console.error("Caught internal:", e);
          return null;
        }
      }, [authImplementation]);
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useCurrentUser.js
var require_useCurrentUser = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useCurrentUser.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useCurrentUser_exports = {};
    __export2(useCurrentUser_exports, {
      useCurrentUser: () => useCurrentUser
    });
    module2.exports = __toCommonJS2(useCurrentUser_exports);
    var import_react = require_react();
    var import_useToken = require_useToken();
    var useCurrentUser = (authImplementation) => {
      const getToken = (0, import_useToken.useToken)(authImplementation);
      return (0, import_react.useCallback)(async () => {
        var _a2;
        const token = await getToken();
        const response = await globalThis.fetch(globalThis.RWJS_API_GRAPHQL_URL, {
          method: "POST",
          credentials: "include",
          headers: {
            "content-type": "application/json",
            "auth-provider": authImplementation.type,
            authorization: `Bearer ${token}`
          },
          body: JSON.stringify({
            query: "query __REDWOOD__AUTH_GET_CURRENT_USER { redwood { currentUser } }"
          })
        });
        if (response.ok) {
          const { data } = await response.json();
          return (_a2 = data == null ? void 0 : data.redwood) == null ? void 0 : _a2.currentUser;
        } else {
          throw new Error(
            `Could not fetch current user: ${response.statusText} (${response.status})`
          );
        }
      }, [authImplementation, getToken]);
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useForgotPassword.js
var require_useForgotPassword = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useForgotPassword.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useForgotPassword_exports = {};
    __export2(useForgotPassword_exports, {
      useForgotPassword: () => useForgotPassword
    });
    module2.exports = __toCommonJS2(useForgotPassword_exports);
    var import_react = require_react();
    var useForgotPassword = (authImplementation) => {
      return (0, import_react.useCallback)(
        async (username) => {
          if (authImplementation.forgotPassword) {
            return await authImplementation.forgotPassword(username);
          } else {
            throw new Error(
              `Auth client ${authImplementation.type} does not implement this function`
            );
          }
        },
        [authImplementation]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useHasRole.js
var require_useHasRole = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useHasRole.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useHasRole_exports = {};
    __export2(useHasRole_exports, {
      useHasRole: () => useHasRole
    });
    module2.exports = __toCommonJS2(useHasRole_exports);
    var import_react = require_react();
    var useHasRole = (currentUser) => {
      return (0, import_react.useCallback)(
        (rolesToCheck) => {
          var _a2, _b;
          if (currentUser == null ? void 0 : currentUser.roles) {
            if (typeof rolesToCheck === "string") {
              if (typeof currentUser.roles === "string") {
                return currentUser.roles === rolesToCheck;
              } else if (Array.isArray(currentUser.roles)) {
                return (_a2 = currentUser.roles) == null ? void 0 : _a2.some(
                  (allowedRole) => rolesToCheck === allowedRole
                );
              }
            }
            if (Array.isArray(rolesToCheck)) {
              if (Array.isArray(currentUser.roles)) {
                return (_b = currentUser.roles) == null ? void 0 : _b.some(
                  (allowedRole) => rolesToCheck.includes(allowedRole)
                );
              } else if (typeof currentUser.roles === "string") {
                return rolesToCheck.some(
                  (allowedRole) => (currentUser == null ? void 0 : currentUser.roles) === allowedRole
                );
              }
            }
          }
          return false;
        },
        [currentUser]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useReauthenticate.js
var require_useReauthenticate = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useReauthenticate.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useReauthenticate_exports = {};
    __export2(useReauthenticate_exports, {
      useReauthenticate: () => useReauthenticate
    });
    module2.exports = __toCommonJS2(useReauthenticate_exports);
    var import_react = require_react();
    var import_useToken = require_useToken();
    var notAuthenticatedState = {
      isAuthenticated: false,
      currentUser: null,
      userMetadata: null,
      loading: false,
      hasError: false
    };
    var useReauthenticate = (authImplementation, setAuthProviderState, getCurrentUser) => {
      const getToken = (0, import_useToken.useToken)(authImplementation);
      return (0, import_react.useCallback)(async () => {
        if (authImplementation.loadWhileReauthenticating) {
          setAuthProviderState((oldState) => ({
            ...oldState,
            loading: true
          }));
        }
        try {
          const token = await getToken();
          let currentUser;
          if (token || authImplementation.middlewareAuthEnabled) {
            currentUser = await getCurrentUser();
          }
          if (!currentUser) {
            let loading = false;
            if (authImplementation.clientHasLoaded) {
              loading = !authImplementation.clientHasLoaded();
            }
            setAuthProviderState({
              ...notAuthenticatedState,
              loading,
              client: authImplementation.client
            });
          } else {
            const userMetadata = await authImplementation.getUserMetadata();
            setAuthProviderState((oldState) => ({
              ...oldState,
              userMetadata,
              currentUser,
              isAuthenticated: !!currentUser,
              loading: false,
              client: authImplementation.client
            }));
          }
        } catch (e) {
          setAuthProviderState({
            ...notAuthenticatedState,
            hasError: true,
            error: e
          });
        }
      }, [authImplementation, setAuthProviderState, getToken, getCurrentUser]);
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useLogIn.js
var require_useLogIn = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useLogIn.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useLogIn_exports = {};
    __export2(useLogIn_exports, {
      useLogIn: () => useLogIn
    });
    module2.exports = __toCommonJS2(useLogIn_exports);
    var import_react = require_react();
    var import_AuthProviderState = require_AuthProviderState();
    var import_useReauthenticate = require_useReauthenticate();
    var useLogIn = (authImplementation, setAuthProviderState, getCurrentUser) => {
      const reauthenticate = (0, import_useReauthenticate.useReauthenticate)(
        authImplementation,
        setAuthProviderState,
        getCurrentUser
      );
      return (0, import_react.useCallback)(
        async (options) => {
          setAuthProviderState(import_AuthProviderState.spaDefaultAuthProviderState);
          const loginResult = await authImplementation.login(options);
          await reauthenticate();
          return loginResult;
        },
        [authImplementation, reauthenticate, setAuthProviderState]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useLogOut.js
var require_useLogOut = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useLogOut.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useLogOut_exports = {};
    __export2(useLogOut_exports, {
      useLogOut: () => useLogOut
    });
    module2.exports = __toCommonJS2(useLogOut_exports);
    var import_react = require_react();
    var useLogOut = (authImplementation, setAuthProviderState) => {
      return (0, import_react.useCallback)(
        async (options) => {
          const logoutOutput = await authImplementation.logout(options);
          setAuthProviderState({
            userMetadata: null,
            currentUser: null,
            isAuthenticated: false,
            hasError: false,
            error: void 0,
            loading: false
          });
          return logoutOutput;
        },
        [authImplementation, setAuthProviderState]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useResetPassword.js
var require_useResetPassword = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useResetPassword.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useResetPassword_exports = {};
    __export2(useResetPassword_exports, {
      useResetPassword: () => useResetPassword
    });
    module2.exports = __toCommonJS2(useResetPassword_exports);
    var import_react = require_react();
    var useResetPassword = (authImplementation) => {
      return (0, import_react.useCallback)(
        async (options) => {
          if (authImplementation.resetPassword) {
            return await authImplementation.resetPassword(options);
          } else {
            throw new Error(
              `Auth client ${authImplementation.type} does not implement this function`
            );
          }
        },
        [authImplementation]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useSignUp.js
var require_useSignUp = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useSignUp.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useSignUp_exports = {};
    __export2(useSignUp_exports, {
      useSignUp: () => useSignUp
    });
    module2.exports = __toCommonJS2(useSignUp_exports);
    var import_react = require_react();
    var import_useReauthenticate = require_useReauthenticate();
    var useSignUp = (authImplementation, setAuthProviderState, getCurrentUser) => {
      const reauthenticate = (0, import_useReauthenticate.useReauthenticate)(
        authImplementation,
        setAuthProviderState,
        getCurrentUser
      );
      return (0, import_react.useCallback)(
        async (options) => {
          const signupOutput = await authImplementation.signup(options);
          await reauthenticate();
          return signupOutput;
        },
        [authImplementation, reauthenticate]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useValidateResetToken.js
var require_useValidateResetToken = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/useValidateResetToken.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useValidateResetToken_exports = {};
    __export2(useValidateResetToken_exports, {
      useValidateResetToken: () => useValidateResetToken
    });
    module2.exports = __toCommonJS2(useValidateResetToken_exports);
    var import_react = require_react();
    var useValidateResetToken = (authImplementation) => {
      return (0, import_react.useCallback)(
        async (resetToken) => {
          if (authImplementation.validateResetToken) {
            return await authImplementation.validateResetToken(resetToken);
          } else {
            throw new Error(
              `Auth client ${authImplementation.type} does not implement this function`
            );
          }
        },
        [authImplementation]
      );
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/AuthProvider.js
var require_AuthProvider = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/AuthProvider/AuthProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var AuthProvider_exports = {};
    __export2(AuthProvider_exports, {
      createAuthProvider: () => createAuthProvider
    });
    module2.exports = __toCommonJS2(AuthProvider_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_AuthProviderState = require_AuthProviderState();
    var import_ServerAuthProvider = require_ServerAuthProvider();
    var import_useCurrentUser = require_useCurrentUser();
    var import_useForgotPassword = require_useForgotPassword();
    var import_useHasRole = require_useHasRole();
    var import_useLogIn = require_useLogIn();
    var import_useLogOut = require_useLogOut();
    var import_useReauthenticate = require_useReauthenticate();
    var import_useResetPassword = require_useResetPassword();
    var import_useSignUp = require_useSignUp();
    var import_useToken = require_useToken();
    var import_useValidateResetToken = require_useValidateResetToken();
    function createAuthProvider(AuthContext, authImplementation, customProviderHooks) {
      const AuthProvider = ({ children }) => {
        const serverAuthState = (0, import_react.useContext)(import_ServerAuthProvider.ServerAuthContext);
        const [authProviderState, setAuthProviderState] = (0, import_react.useState)(serverAuthState || import_AuthProviderState.spaDefaultAuthProviderState);
        const getToken = (0, import_useToken.useToken)(authImplementation);
        const getCurrentUser = (customProviderHooks == null ? void 0 : customProviderHooks.useCurrentUser) ? customProviderHooks.useCurrentUser : (
          // eslint-disable-next-line react-hooks/rules-of-hooks
          (0, import_useCurrentUser.useCurrentUser)(authImplementation)
        );
        const reauthenticate = (0, import_useReauthenticate.useReauthenticate)(
          authImplementation,
          setAuthProviderState,
          getCurrentUser
        );
        const hasRole = (customProviderHooks == null ? void 0 : customProviderHooks.useHasRole) ? customProviderHooks.useHasRole(authProviderState.currentUser) : (
          // eslint-disable-next-line react-hooks/rules-of-hooks
          (0, import_useHasRole.useHasRole)(authProviderState.currentUser)
        );
        const signUp = (0, import_useSignUp.useSignUp)(
          authImplementation,
          setAuthProviderState,
          getCurrentUser
        );
        const logIn = (0, import_useLogIn.useLogIn)(
          authImplementation,
          setAuthProviderState,
          getCurrentUser
        );
        const logOut = (0, import_useLogOut.useLogOut)(authImplementation, setAuthProviderState);
        const forgotPassword = (0, import_useForgotPassword.useForgotPassword)(authImplementation);
        const resetPassword = (0, import_useResetPassword.useResetPassword)(authImplementation);
        const validateResetToken = (0, import_useValidateResetToken.useValidateResetToken)(authImplementation);
        const type = authImplementation.type;
        const client = authImplementation.client;
        (0, import_react.useEffect)(() => {
          async function doRestoreState() {
            var _a2;
            await ((_a2 = authImplementation.restoreAuthState) == null ? void 0 : _a2.call(authImplementation));
            if (!serverAuthState) {
              reauthenticate();
            }
          }
          doRestoreState();
        }, [reauthenticate, serverAuthState]);
        return import_react.default.createElement(
          AuthContext.Provider,
          {
            value: {
              ...authProviderState,
              signUp,
              logIn,
              logOut,
              getToken,
              getCurrentUser,
              hasRole,
              reauthenticate,
              forgotPassword,
              resetPassword,
              validateResetToken,
              client,
              type
            }
          },
          children
        );
      };
      return AuthProvider;
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/authFactory.js
var require_authFactory = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/authFactory.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var authFactory_exports = {};
    __export2(authFactory_exports, {
      createAuthentication: () => createAuthentication2
    });
    module2.exports = __toCommonJS2(authFactory_exports);
    var import_AuthContext = require_AuthContext();
    var import_AuthProvider = require_AuthProvider();
    var import_useAuth = require_useAuth();
    function createAuthentication2(authImplementation, customProviderHooks) {
      const AuthContext = (0, import_AuthContext.createAuthContext)();
      const useAuth2 = (0, import_useAuth.createUseAuth)(AuthContext);
      const AuthProvider = (0, import_AuthProvider.createAuthProvider)(
        AuthContext,
        authImplementation,
        customProviderHooks
      );
      return { AuthContext, AuthProvider, useAuth: useAuth2 };
    }
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/getCurrentUserFromMiddleware.js
var require_getCurrentUserFromMiddleware = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/getCurrentUserFromMiddleware.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var getCurrentUserFromMiddleware_exports = {};
    __export2(getCurrentUserFromMiddleware_exports, {
      getCurrentUserFromMiddleware: () => getCurrentUserFromMiddleware2
    });
    module2.exports = __toCommonJS2(getCurrentUserFromMiddleware_exports);
    var getCurrentUserFromMiddleware2 = async (authUrl) => {
      const response = await globalThis.fetch(`${authUrl}/currentUser`, {
        method: "GET",
        credentials: "include",
        headers: {
          "content-type": "application/json"
        }
      });
      if (response.ok) {
        const { currentUser } = await response.json();
        if (!currentUser) {
          throw new Error("No current user found");
        }
        return currentUser;
      } else {
        throw new Error(
          `Could not fetch current user: ${response.statusText} (${response.status})`
        );
      }
    };
  }
});

// ../node_modules/@redwoodjs/auth/dist/cjs/index.js
var require_cjs = __commonJS({
  "../node_modules/@redwoodjs/auth/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      createAuthentication: () => import_authFactory.createAuthentication,
      getCurrentUserFromMiddleware: () => import_getCurrentUserFromMiddleware.getCurrentUserFromMiddleware,
      middlewareDefaultAuthProviderState: () => import_AuthProviderState.middlewareDefaultAuthProviderState,
      spaDefaultAuthProviderState: () => import_AuthProviderState.spaDefaultAuthProviderState,
      useNoAuth: () => import_useAuth.useNoAuth
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_useAuth = require_useAuth();
    var import_authFactory = require_authFactory();
    var import_AuthProviderState = require_AuthProviderState();
    var import_getCurrentUserFromMiddleware = require_getCurrentUserFromMiddleware();
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/history.js
var require_history = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/history.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var history_exports = {};
    __export2(history_exports, {
      back: () => back2,
      block: () => block,
      gHistory: () => gHistory,
      navigate: () => navigate2,
      unblock: () => unblock
    });
    module2.exports = __toCommonJS2(history_exports);
    var createHistory = () => {
      const listeners = {};
      const blockers = [];
      let beforeUnloadListener = null;
      const history = {
        listen: (listener) => {
          const listenerId = "RW_HISTORY_LISTENER_ID_" + Date.now();
          listeners[listenerId] = listener;
          globalThis.addEventListener("popstate", listener);
          return listenerId;
        },
        navigate: (to, options) => {
          const performNavigation = () => {
            var _a2, _b, _c, _d;
            const { pathname, search, hash } = new URL(
              ((_a2 = globalThis == null ? void 0 : globalThis.location) == null ? void 0 : _a2.origin) + to
            );
            if (((_b = globalThis == null ? void 0 : globalThis.location) == null ? void 0 : _b.pathname) !== pathname || ((_c = globalThis == null ? void 0 : globalThis.location) == null ? void 0 : _c.search) !== search || ((_d = globalThis == null ? void 0 : globalThis.location) == null ? void 0 : _d.hash) !== hash) {
              if (options == null ? void 0 : options.replace) {
                globalThis.history.replaceState({}, "", to);
              } else {
                globalThis.history.pushState({}, "", to);
              }
            }
            for (const listener of Object.values(listeners)) {
              listener();
            }
          };
          if (blockers.length > 0) {
            processBlockers(0, performNavigation);
          } else {
            performNavigation();
          }
        },
        back: () => {
          const performBack = () => {
            globalThis.history.back();
            for (const listener of Object.values(listeners)) {
              listener();
            }
          };
          if (blockers.length > 0) {
            processBlockers(0, performBack);
          } else {
            performBack();
          }
        },
        remove: (listenerId) => {
          if (listeners[listenerId]) {
            const listener = listeners[listenerId];
            globalThis.removeEventListener("popstate", listener);
            delete listeners[listenerId];
          } else {
            console.warn(
              "History Listener with ID: " + listenerId + " does not exist."
            );
          }
        },
        block: (id, callback) => {
          const existingBlockerIndex = blockers.findIndex(
            (blocker) => blocker.id === id
          );
          if (existingBlockerIndex !== -1) {
            blockers[existingBlockerIndex] = { id, callback };
          } else {
            blockers.push({ id, callback });
            if (blockers.length === 1) {
              addBeforeUnloadListener();
            }
          }
        },
        unblock: (id) => {
          const index = blockers.findIndex((blocker) => blocker.id === id);
          if (index !== -1) {
            blockers.splice(index, 1);
            if (blockers.length === 0) {
              removeBeforeUnloadListener();
            }
          }
        }
      };
      const processBlockers = (index, navigate22) => {
        if (index < blockers.length) {
          blockers[index].callback({
            retry: () => processBlockers(index + 1, navigate22)
          });
        } else {
          navigate22();
        }
      };
      const addBeforeUnloadListener = () => {
        if (!beforeUnloadListener) {
          beforeUnloadListener = (event) => {
            if (blockers.length > 0) {
              event.preventDefault();
            }
          };
          globalThis.addEventListener("beforeunload", beforeUnloadListener);
        }
      };
      const removeBeforeUnloadListener = () => {
        if (beforeUnloadListener) {
          globalThis.removeEventListener("beforeunload", beforeUnloadListener);
          beforeUnloadListener = null;
        }
      };
      return history;
    };
    var gHistory = createHistory();
    var { navigate: navigate2, back: back2, block, unblock } = gHistory;
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/link.js
var require_link = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/link.js"(exports, module2) {
    "use strict";
    "use client";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var link_exports = {};
    __export2(link_exports, {
      Link: () => Link2
    });
    module2.exports = __toCommonJS2(link_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_history = require_history();
    var Link2 = (0, import_react.forwardRef)(({ to, onClick, options, ...rest }, ref) => import_react.default.createElement(
      "a",
      {
        href: to,
        ref,
        ...rest,
        onClick: (event) => {
          if (event.button !== 0 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
            return;
          }
          event.preventDefault();
          if (onClick) {
            const result = onClick(event);
            if (typeof result !== "boolean" || result) {
              (0, import_history.navigate)(to, options);
            }
          } else {
            (0, import_history.navigate)(to, options);
          }
        }
      }
    ));
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/createNamedContext.js
var require_createNamedContext = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/createNamedContext.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var createNamedContext_exports = {};
    __export2(createNamedContext_exports, {
      createNamedContext: () => createNamedContext
    });
    module2.exports = __toCommonJS2(createNamedContext_exports);
    var import_react = require_react();
    function createNamedContext(name, defaultValue) {
      const Ctx = (0, import_react.createContext)(defaultValue);
      Ctx.displayName = name;
      return Ctx;
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/location.js
var require_location = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/location.js"(exports, module2) {
    "use strict";
    "use client";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var location_exports = {};
    __export2(location_exports, {
      LocationContext: () => LocationContext,
      LocationProvider: () => LocationProvider2,
      useLocation: () => useLocation2
    });
    module2.exports = __toCommonJS2(location_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_createNamedContext = require_createNamedContext();
    var import_history = require_history();
    var LocationContext = (0, import_createNamedContext.createNamedContext)("Location");
    var LocationProvider2 = class extends import_react.default.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "HISTORY_LISTENER_ID");
        __publicField(this, "state", {
          context: this.getContext()
        });
      }
      getContext() {
        let windowLocation;
        if (typeof window !== "undefined") {
          const { pathname } = window.location;
          switch (this.props.trailingSlashes) {
            case "never":
              if (pathname.endsWith("/")) {
                window.history.replaceState(
                  {},
                  "",
                  pathname.substr(0, pathname.length - 1)
                );
              }
              break;
            case "always":
              if (!pathname.endsWith("/")) {
                window.history.replaceState({}, "", pathname + "/");
              }
              break;
            default:
              break;
          }
          windowLocation = new URL(window.location.href);
        }
        return this.props.location || this.context || windowLocation;
      }
      // componentDidMount() is not called during server rendering (aka SSR and
      // prerendering)
      componentDidMount() {
        this.HISTORY_LISTENER_ID = import_history.gHistory.listen(() => {
          const context2 = this.getContext();
          this.setState((lastState) => {
            var _a2, _b;
            if ((context2 == null ? void 0 : context2.pathname) !== ((_a2 = lastState == null ? void 0 : lastState.context) == null ? void 0 : _a2.pathname) || (context2 == null ? void 0 : context2.search) !== ((_b = lastState == null ? void 0 : lastState.context) == null ? void 0 : _b.search)) {
              globalThis == null ? void 0 : globalThis.scrollTo(0, 0);
            }
            return { context: context2 };
          });
        });
      }
      componentWillUnmount() {
        if (this.HISTORY_LISTENER_ID) {
          import_history.gHistory.remove(this.HISTORY_LISTENER_ID);
        }
      }
      render() {
        return import_react.default.createElement(LocationContext.Provider, { value: this.state.context }, this.props.children);
      }
    };
    // When prerendering, there might be more than one level of location
    // providers. Use the values from the one above.
    // (this is basically the class component version of `useLocation()`)
    __publicField(LocationProvider2, "contextType", LocationContext);
    var useLocation2 = () => {
      const location2 = import_react.default.useContext(LocationContext);
      if (location2 === void 0) {
        throw new Error("useLocation must be used within a LocationProvider");
      }
      return location2;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/util.js
var require_util2 = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/util.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var util_exports = {};
    __export2(util_exports, {
      flattenSearchParams: () => flattenSearchParams,
      getRouteRegexAndParams: () => getRouteRegexAndParams2,
      inIframe: () => inIframe,
      matchPath: () => matchPath2,
      paramsForRoute: () => paramsForRoute,
      parseSearch: () => parseSearch2,
      replaceParams: () => replaceParams,
      validatePath: () => validatePath
    });
    module2.exports = __toCommonJS2(util_exports);
    function paramsForRoute(route) {
      const params = [...route.matchAll(/\{([^}]+)\}/g)];
      return params.map((match2) => match2[1]).map((match2) => {
        const parts = match2.split(":");
        let name = parts[0];
        if (name.endsWith("...")) {
          name = name.slice(0, -3);
        }
        let type = parts[1];
        if (!type) {
          type = match2.endsWith("...") ? "Glob" : "String";
        }
        return [name, type, `{${match2}}`];
      });
    }
    var coreParamTypes = {
      String: {
        match: /[^/]+/
      },
      Int: {
        match: /\d+/,
        parse: Number
      },
      Float: {
        match: /[-+]?(?:\d*\.?\d+|\d+\.?\d*)(?:[eE][-+]?\d+)?/,
        parse: Number
      },
      Boolean: {
        match: /true|false/,
        parse: (boolAsString) => boolAsString === "true"
      },
      Glob: {
        match: /.*/
      }
    };
    function matchPath2(routeDefinition, pathname, {
      userParamTypes,
      matchSubPaths
    } = {
      userParamTypes: {},
      matchSubPaths: false
    }) {
      const allParamTypes = { ...coreParamTypes, ...userParamTypes };
      const { matchRegex, routeParams: routeParamsDefinition } = getRouteRegexAndParams2(routeDefinition, {
        matchSubPaths,
        allParamTypes
      });
      const matches2 = [...pathname.matchAll(matchRegex)];
      if (matches2.length === 0) {
        return { match: false };
      }
      const providedParams = matches2[0].slice(1);
      if (routeParamsDefinition.length > 0) {
        const params = providedParams.reduce(
          (acc, value, index) => {
            const [name, transformName] = routeParamsDefinition[index];
            const typeInfo = allParamTypes[transformName];
            let transformedValue = value;
            if (typeof (typeInfo == null ? void 0 : typeInfo.parse) === "function") {
              transformedValue = typeInfo.parse(value);
            }
            return {
              ...acc,
              [name]: transformedValue
            };
          },
          {}
        );
        return { match: true, params };
      }
      return { match: true };
    }
    function getRouteRegexAndParams2(route, {
      matchSubPaths = false,
      allParamTypes = coreParamTypes
    } = {}) {
      var _a2;
      let typeMatchingRoute = route;
      const routeParams = paramsForRoute(route);
      for (const [_name, type, match2] of routeParams) {
        const matcher = (_a2 = allParamTypes[type]) == null ? void 0 : _a2.match;
        const typeRegexp = (matcher == null ? void 0 : matcher.source) || "[^/]+";
        typeMatchingRoute = typeMatchingRoute.replace(match2, `(${typeRegexp})`);
      }
      const matchRegex = matchSubPaths ? new RegExp(`^${typeMatchingRoute}(?:/.*)?$`, "g") : new RegExp(`^${typeMatchingRoute}$`, "g");
      const matchRegexString = matchSubPaths ? `^${typeMatchingRoute}(?:/.*)?$` : `^${typeMatchingRoute}$`;
      return {
        matchRegex,
        routeParams,
        matchRegexString
      };
    }
    function parseSearch2(search) {
      const searchParams = new URLSearchParams(search);
      return [...searchParams.keys()].reduce(
        (params, key) => ({
          ...params,
          [key]: searchParams.get(key)
        }),
        {}
      );
    }
    function validatePath(path, routeName) {
      if (!path.startsWith("/")) {
        throw new Error(
          `Route path for ${routeName} does not begin with a slash: "${path}"`
        );
      }
      if (path.includes(" ")) {
        throw new Error(`Route path for ${routeName} contains spaces: "${path}"`);
      }
      if (/{(?:ref|key)(?::|})/.test(path)) {
        throw new Error(
          [
            `Route for ${routeName} contains ref or key as a path parameter: "${path}"`,
            "`ref` and `key` shouldn't be used as path parameters because they're special React props.",
            "You can fix this by renaming the path parameter."
          ].join("\n")
        );
      }
      if (path.length > 2e3) {
        throw new Error(
          `Route path for ${routeName} is too long to process at ${path.length} characters, limit is 2000 characters.`
        );
      }
      const matches2 = path.matchAll(/\{([^}]+)\}/g);
      const memo = {};
      for (const match2 of matches2) {
        const param = match2[1].split(":")[0];
        if (memo[param]) {
          throw new Error(`Route path contains duplicate parameter: "${path}"`);
        } else {
          memo[param] = true;
        }
      }
    }
    function replaceParams(route, args = {}) {
      const params = paramsForRoute(route);
      let path = route;
      params.forEach((param) => {
        const [name, _type, match2] = param;
        const value = args[name];
        if (value !== void 0) {
          path = path.replace(match2, value);
        } else {
          throw new Error(
            `Missing parameter '${name}' for route '${route}' when generating a navigation URL.`
          );
        }
      });
      const paramNames = params.map((param) => param[0]);
      const extraArgKeys = Object.keys(args).filter((x) => !paramNames.includes(x));
      const queryParams = [];
      extraArgKeys.forEach((key) => {
        queryParams.push(`${key}=${args[key]}`);
      });
      if (extraArgKeys.length) {
        const extraArgs = Object.fromEntries(
          extraArgKeys.map((key) => [key, `${args[key]}`])
        );
        path += `?${new URLSearchParams(extraArgs).toString()}`;
      }
      return path;
    }
    function flattenSearchParams(queryString) {
      const searchParams = [];
      for (const [key, value] of Object.entries(parseSearch2(queryString))) {
        searchParams.push({ [key]: value });
      }
      return searchParams;
    }
    function inIframe() {
      try {
        return (global == null ? void 0 : global.self) !== (global == null ? void 0 : global.top);
      } catch {
        return true;
      }
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/useMatch.js
var require_useMatch = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/useMatch.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useMatch_exports = {};
    __export2(useMatch_exports, {
      useMatch: () => useMatch
    });
    module2.exports = __toCommonJS2(useMatch_exports);
    var import_location = require_location();
    var import_util4 = require_util2();
    var useMatch = (routePath, options) => {
      const location2 = (0, import_location.useLocation)();
      if (!location2) {
        return { match: false };
      }
      if (options == null ? void 0 : options.searchParams) {
        const locationParams = new URLSearchParams(location2.search);
        const hasUnmatched = options.searchParams.some((param) => {
          if (typeof param === "string") {
            return !locationParams.has(param);
          } else {
            return Object.keys(param).some(
              (key) => param[key] != locationParams.get(key)
            );
          }
        });
        if (hasUnmatched) {
          return { match: false };
        }
      }
      const matchInfo = (0, import_util4.matchPath)(routePath, location2.pathname, {
        matchSubPaths: options == null ? void 0 : options.matchSubPaths
      });
      if (!matchInfo.match) {
        return { match: false };
      }
      const routeParams = Object.entries((options == null ? void 0 : options.routeParams) || {});
      if (routeParams.length > 0) {
        if (!isMatchWithParams(matchInfo) || !matchInfo.params) {
          return { match: false };
        }
        const isParamMatch = routeParams.every(([key, value]) => {
          return matchInfo.params[key] === value;
        });
        if (!isParamMatch) {
          return { match: false };
        }
      }
      return matchInfo;
    };
    function isMatchWithParams(match2) {
      return match2 !== null && typeof match2 === "object" && "params" in match2;
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/navLink.js
var require_navLink = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/navLink.js"(exports, module2) {
    "use strict";
    "use client";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var navLink_exports = {};
    __export2(navLink_exports, {
      NavLink: () => NavLink2
    });
    module2.exports = __toCommonJS2(navLink_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_link = require_link();
    var import_useMatch = require_useMatch();
    var import_util4 = require_util2();
    var NavLink2 = (0, import_react.forwardRef)(
      ({
        to,
        activeClassName,
        activeMatchParams,
        matchSubPaths,
        className,
        onClick,
        ...rest
      }, ref) => {
        const [pathname, queryString] = to.split("?");
        const searchParams = activeMatchParams || (0, import_util4.flattenSearchParams)(queryString);
        const matchInfo = (0, import_useMatch.useMatch)(pathname, {
          searchParams,
          matchSubPaths
        });
        return import_react.default.createElement(
          import_link.Link,
          {
            ref,
            to,
            onClick,
            className: matchInfo.match ? activeClassName : className,
            ...rest
          }
        );
      }
    );
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/redirect.js
var require_redirect = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/redirect.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var redirect_exports = {};
    __export2(redirect_exports, {
      Redirect: () => Redirect2
    });
    module2.exports = __toCommonJS2(redirect_exports);
    var import_react = require_react();
    var import_history = require_history();
    var Redirect2 = ({ to, options }) => {
      (0, import_react.useEffect)(() => {
        (0, import_history.navigate)(to, options);
      }, [to, options]);
      return null;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/PageLoadingContext.js
var require_PageLoadingContext = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/PageLoadingContext.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var PageLoadingContext_exports = {};
    __export2(PageLoadingContext_exports, {
      PageLoadingContextProvider: () => PageLoadingContextProvider2,
      usePageLoadingContext: () => usePageLoadingContext2
    });
    module2.exports = __toCommonJS2(PageLoadingContext_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_createNamedContext = require_createNamedContext();
    var PageLoadingContext = (0, import_createNamedContext.createNamedContext)("PageLoading");
    var PageLoadingContextProvider2 = ({
      children,
      delay = 1e3
    }) => {
      const [loading, setPageLoadingContext] = (0, import_react.useState)(false);
      return import_react.default.createElement(
        PageLoadingContext.Provider,
        {
          value: { loading, setPageLoadingContext, delay }
        },
        children
      );
    };
    var usePageLoadingContext2 = () => {
      const pageLoadingContext = (0, import_react.useContext)(PageLoadingContext);
      if (!pageLoadingContext) {
        throw new Error(
          "usePageLoadingContext must be used within a PageLoadingContext provider"
        );
      }
      return pageLoadingContext;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/params.js
var require_params = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/params.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var params_exports = {};
    __export2(params_exports, {
      ParamsContext: () => ParamsContext2,
      ParamsProvider: () => ParamsProvider2,
      useParams: () => useParams2
    });
    module2.exports = __toCommonJS2(params_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_createNamedContext = require_createNamedContext();
    var ParamsContext2 = (0, import_createNamedContext.createNamedContext)("Params");
    var ParamsProvider2 = ({ allParams, children }) => {
      return import_react.default.createElement(
        ParamsContext2.Provider,
        {
          value: {
            params: {
              ...allParams
            }
          }
        },
        children
      );
    };
    var useParams2 = () => {
      const paramsContext = (0, import_react.useContext)(ParamsContext2);
      if (paramsContext === void 0) {
        throw new Error("useParams must be used within a ParamsProvider");
      }
      return paramsContext.params;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/a11yUtils.js
var require_a11yUtils = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/a11yUtils.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var a11yUtils_exports = {};
    __export2(a11yUtils_exports, {
      getAnnouncement: () => getAnnouncement,
      getFocus: () => getFocus,
      resetFocus: () => resetFocus
    });
    module2.exports = __toCommonJS2(a11yUtils_exports);
    var getAnnouncement = () => {
      var _a2;
      const routeAnnouncement = (_a2 = globalThis == null ? void 0 : globalThis.document.querySelectorAll(
        "[data-redwood-route-announcement]"
      )) == null ? void 0 : _a2[0];
      if (routeAnnouncement == null ? void 0 : routeAnnouncement.textContent) {
        return routeAnnouncement.textContent;
      }
      const pageHeading = globalThis == null ? void 0 : globalThis.document.querySelector(`h1`);
      if (pageHeading == null ? void 0 : pageHeading.textContent) {
        return pageHeading.textContent;
      }
      if (globalThis == null ? void 0 : globalThis.document.title) {
        return document.title;
      }
      return `new page at ${globalThis == null ? void 0 : globalThis.location.pathname}`;
    };
    var getFocus = () => {
      var _a2;
      const routeFocus = (_a2 = globalThis == null ? void 0 : globalThis.document.querySelectorAll(
        "[data-redwood-route-focus]"
      )) == null ? void 0 : _a2[0];
      if (!(routeFocus == null ? void 0 : routeFocus.children.length) || routeFocus.children[0].tabIndex < 0) {
        return null;
      }
      return routeFocus.children[0];
    };
    var resetFocus = () => {
      globalThis == null ? void 0 : globalThis.document.body.setAttribute("tabindex", "-1");
      globalThis == null ? void 0 : globalThis.document.body.focus();
      globalThis == null ? void 0 : globalThis.document.body.removeAttribute("tabindex");
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/active-route-loader.js
var require_active_route_loader = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/active-route-loader.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var active_route_loader_exports = {};
    __export2(active_route_loader_exports, {
      ActiveRouteLoader: () => ActiveRouteLoader
    });
    module2.exports = __toCommonJS2(active_route_loader_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_a11yUtils = require_a11yUtils();
    var import_PageLoadingContext = require_PageLoadingContext();
    var import_util4 = require_util2();
    var isPrerendered = false;
    if (typeof window !== "undefined") {
      const redwoodAppElement = document.getElementById("redwood-app");
      if (redwoodAppElement && redwoodAppElement.children.length > 0) {
        isPrerendered = true;
      }
    }
    var firstLoad = true;
    var Fallback = ({ children }) => {
      const { loading, setPageLoadingContext, delay } = (0, import_PageLoadingContext.usePageLoadingContext)();
      (0, import_react.useEffect)(() => {
        const timer = setTimeout(() => {
          setPageLoadingContext(true);
        }, delay);
        return () => {
          clearTimeout(timer);
          setPageLoadingContext(false);
        };
      }, [delay, setPageLoadingContext]);
      return import_react.default.createElement(import_react.default.Fragment, null, loading ? children : null);
    };
    var ActiveRouteLoader = ({
      spec,
      params,
      whileLoadingPage
    }) => {
      const announcementRef = (0, import_react.useRef)(null);
      const usePrerenderLoader = (
        // Prerendering doesn't work with Streaming/SSR yet. So we disable it.
        !globalThis.RWJS_EXP_STREAMING_SSR && (globalThis.__REDWOOD__PRERENDERING || isPrerendered && firstLoad)
      );
      const LazyRouteComponent = usePrerenderLoader ? spec.prerenderLoader(spec.name).default : spec.LazyComponent;
      if (firstLoad) {
        firstLoad = false;
      }
      (0, import_react.useEffect)(() => {
        if ((0, import_util4.inIframe)()) {
          return;
        }
        if (announcementRef.current) {
          announcementRef.current.innerText = (0, import_a11yUtils.getAnnouncement)();
        }
        const routeFocus = (0, import_a11yUtils.getFocus)();
        if (!routeFocus) {
          (0, import_a11yUtils.resetFocus)();
        } else {
          routeFocus.focus();
        }
      }, [spec, params]);
      if (params) {
        delete params["ref"];
        delete params["key"];
      }
      return import_react.default.createElement(import_react.Suspense, { fallback: import_react.default.createElement(Fallback, null, whileLoadingPage == null ? void 0 : whileLoadingPage()) }, import_react.default.createElement(LazyRouteComponent, { ...params }), import_react.default.createElement(
        "div",
        {
          id: "redwood-announcer",
          style: {
            position: "absolute",
            top: 0,
            width: 1,
            height: 1,
            padding: 0,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            border: 0
          },
          role: "alert",
          "aria-live": "assertive",
          "aria-atomic": "true",
          ref: announcementRef
        }
      ));
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/Route.js
var require_Route = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/Route.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var Route_exports = {};
    __export2(Route_exports, {
      Route: () => Route2
    });
    module2.exports = __toCommonJS2(Route_exports);
    var import_react = __toESM2(require_react(), 1);
    function Route2(_props) {
      return import_react.default.createElement(import_react.default.Fragment, null);
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/route-validators.js
var require_route_validators = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/route-validators.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var route_validators_exports = {};
    __export2(route_validators_exports, {
      isNotFoundRoute: () => isNotFoundRoute,
      isRedirectRoute: () => isRedirectRoute,
      isStandardRoute: () => isStandardRoute,
      isValidRoute: () => isValidRoute
    });
    module2.exports = __toCommonJS2(route_validators_exports);
    var import_react = require_react();
    var import_Route = require_Route();
    function isNodeTypeRoute(node) {
      return (0, import_react.isValidElement)(node) && node.type === import_Route.Route;
    }
    function isString(value) {
      return typeof value === "string";
    }
    function isStandardRoute(node) {
      return !node.props.notfound && !node.props.redirect;
    }
    function isRedirectRoute(node) {
      return !!node.props.redirect;
    }
    function isNotFoundRoute(node) {
      return !!node.props.notfound;
    }
    function isValidRoute(node) {
      const isValidRouteElement = isNodeTypeRoute(node);
      if (isValidRouteElement) {
        const notFoundOrRedirect = node.props.notfound || node.props.redirect;
        const requiredKeys = [
          !node.props.notfound && "path",
          // redirects don't need an actual page, but notfound and standard do
          !node.props.redirect && "page",
          // Redirects can have names, but aren't required to
          !notFoundOrRedirect && "name"
        ].filter(isString);
        const missingKeys = requiredKeys.filter((key) => !(key in node.props));
        if (missingKeys.length > 0) {
          const stringToHelpIdentify = node.props.name || node.props.path ? `for "${node.props.name || node.props.path}" ` : "";
          throw new Error(
            `Route element ${stringToHelpIdentify}is missing required props: ` + missingKeys.join(", ")
          );
        }
      }
      return isValidRouteElement;
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/Set.js
var require_Set = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/Set.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var Set_exports = {};
    __export2(Set_exports, {
      Private: () => Private,
      PrivateSet: () => PrivateSet,
      Set: () => Set2,
      isPrivateNode: () => isPrivateNode,
      isPrivateSetNode: () => isPrivateSetNode,
      isSetNode: () => isSetNode
    });
    module2.exports = __toCommonJS2(Set_exports);
    var import_react = __toESM2(require_react(), 1);
    function Set2(props) {
      return import_react.default.createElement(import_react.default.Fragment, null, props.children);
    }
    function Private(props) {
      return import_react.default.createElement(import_react.default.Fragment, null, props.children);
    }
    function PrivateSet(props) {
      return import_react.default.createElement(import_react.default.Fragment, null, props.children);
    }
    var isSetNode = (node) => {
      return import_react.default.isValidElement(node) && (node.type === Set2 || node.type === PrivateSet || node.type === Private) && // Don't even bother including Sets without children. They're useless.
      node.props.children;
    };
    var isPrivateSetNode = (node) => {
      return import_react.default.isValidElement(node) && node.type === PrivateSet;
    };
    var isPrivateNode = (node) => {
      return import_react.default.isValidElement(node) && node.type === Private;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/analyzeRoutes.js
var require_analyzeRoutes = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/analyzeRoutes.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var analyzeRoutes_exports = {};
    __export2(analyzeRoutes_exports, {
      analyzeRoutes: () => analyzeRoutes
    });
    module2.exports = __toCommonJS2(analyzeRoutes_exports);
    var import_react = require_react();
    var import_route_validators = require_route_validators();
    var import_Set = require_Set();
    var import_util4 = require_util2();
    function analyzeRoutes(children, { currentPathName, userParamTypes }) {
      const pathRouteMap = {};
      const namedRoutesMap = {};
      let hasRootRoute = false;
      let NotFoundPage;
      let activeRoutePath;
      const recurseThroughRouter = ({
        nodes,
        whileLoadingPageFromSet,
        sets: previousSets = []
      }) => {
        let nextSetId = 0;
        nodes.forEach((node) => {
          if ((0, import_route_validators.isValidRoute)(node)) {
            const route = node;
            if ((0, import_route_validators.isNotFoundRoute)(route)) {
              NotFoundPage = route.props.page;
              return;
            }
            if (route.props.path === "/") {
              hasRootRoute = true;
            }
            if ((0, import_route_validators.isRedirectRoute)(route)) {
              const { name, redirect, path } = route.props;
              (0, import_util4.validatePath)(path, name || path);
              const { match: match2 } = (0, import_util4.matchPath)(path, currentPathName, {
                userParamTypes
              });
              if (match2 && !activeRoutePath) {
                activeRoutePath = path;
              }
              pathRouteMap[path] = {
                redirect,
                name: name || null,
                path,
                page: null,
                // Redirects don't need pages. We set this to null for consistency
                sets: previousSets
              };
              if (name) {
                namedRoutesMap[name] = (args = {}) => (0, import_util4.replaceParams)(path, args);
              }
            }
            if ((0, import_route_validators.isStandardRoute)(route)) {
              const { name, path, page } = route.props;
              (0, import_util4.validatePath)(path, name);
              const { match: match2 } = (0, import_util4.matchPath)(path, currentPathName, {
                userParamTypes
              });
              if (match2 && !activeRoutePath) {
                activeRoutePath = path;
              }
              pathRouteMap[path] = {
                redirect: null,
                name,
                path,
                whileLoadingPage: route.props.whileLoadingPage || whileLoadingPageFromSet,
                page,
                sets: previousSets
              };
              namedRoutesMap[name] = (args = {}) => (0, import_util4.replaceParams)(path, args);
            }
          }
          if ((0, import_Set.isSetNode)(node)) {
            const {
              children: children2,
              whileLoadingPage: whileLoadingPageFromCurrentSet,
              wrap: wrapFromCurrentSet,
              ...otherPropsFromCurrentSet
            } = node.props;
            let wrapperComponentsArray = [];
            if (wrapFromCurrentSet) {
              wrapperComponentsArray = Array.isArray(wrapFromCurrentSet) ? wrapFromCurrentSet : [wrapFromCurrentSet];
            }
            nextSetId = nextSetId + 1;
            recurseThroughRouter({
              nodes: import_react.Children.toArray(children2),
              // When there's a whileLoadingPage prop on a Set, we pass it down to all its children
              // If the parent node was also a Set with whileLoadingPage, we pass it down. The child's whileLoadingPage
              // will always take precedence over the parent's
              whileLoadingPageFromSet: whileLoadingPageFromCurrentSet || whileLoadingPageFromSet,
              sets: [
                ...previousSets,
                {
                  id: createSetId(nextSetId, previousSets),
                  wrappers: wrapperComponentsArray,
                  isPrivate: (0, import_Set.isPrivateSetNode)(node) || // The following two conditions can be removed when we remove
                  // the deprecated private prop
                  (0, import_Set.isPrivateNode)(node) || !!otherPropsFromCurrentSet.private,
                  props: otherPropsFromCurrentSet
                }
              ]
            });
          }
        });
      };
      recurseThroughRouter({ nodes: import_react.Children.toArray(children) });
      return {
        pathRouteMap,
        namedRoutesMap,
        hasRootRoute,
        NotFoundPage,
        activeRoutePath
      };
    }
    function createSetId(nextSetId, previousSets) {
      var _a2;
      const firstLevel = previousSets.length === 0;
      if (firstLevel) {
        return nextSetId.toString();
      }
      return ((_a2 = previousSets.at(-1)) == null ? void 0 : _a2.id) + "." + nextSetId;
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/namedRoutes.js
var require_namedRoutes = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/namedRoutes.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var namedRoutes_exports = {};
    __export2(namedRoutes_exports, {
      namedRoutes: () => namedRoutes
    });
    module2.exports = __toCommonJS2(namedRoutes_exports);
    var namedRoutes = {};
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/router-context.js
var require_router_context = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/router-context.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var router_context_exports = {};
    __export2(router_context_exports, {
      RouterContextProvider: () => RouterContextProvider,
      useRouterState: () => useRouterState
    });
    module2.exports = __toCommonJS2(router_context_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_auth = require_cjs();
    var RouterStateContext = (0, import_react.createContext)(void 0);
    var RouterContextProvider = ({
      useAuth: useAuth2,
      paramTypes,
      routes: routes2,
      activeRouteName,
      children
    }) => {
      const state = (0, import_react.useMemo)(
        () => ({
          useAuth: useAuth2 || import_auth.useNoAuth,
          paramTypes,
          routes: routes2,
          activeRouteName
        }),
        [useAuth2, paramTypes, routes2, activeRouteName]
      );
      return import_react.default.createElement(RouterStateContext.Provider, { value: state }, children);
    };
    var useRouterState = () => {
      const context2 = (0, import_react.useContext)(RouterStateContext);
      if (context2 === void 0) {
        throw new Error(
          "useRouterState must be used within a RouterContextProvider"
        );
      }
      return context2;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/AuthenticatedRoute.js
var require_AuthenticatedRoute = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/AuthenticatedRoute.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var AuthenticatedRoute_exports = {};
    __export2(AuthenticatedRoute_exports, {
      AuthenticatedRoute: () => AuthenticatedRoute
    });
    module2.exports = __toCommonJS2(AuthenticatedRoute_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_namedRoutes = require_namedRoutes();
    var import_redirect = require_redirect();
    var import_router_context = require_router_context();
    var AuthenticatedRoute = ({
      unauthenticated,
      roles: roles2,
      whileLoadingAuth,
      children
    }) => {
      const routerState = (0, import_router_context.useRouterState)();
      const {
        loading: authLoading,
        isAuthenticated,
        hasRole
      } = routerState.useAuth();
      const unauthorized = (0, import_react.useCallback)(() => {
        return !(isAuthenticated && (!roles2 || hasRole(roles2)));
      }, [isAuthenticated, roles2, hasRole]);
      if (unauthorized()) {
        if (authLoading) {
          return (whileLoadingAuth == null ? void 0 : whileLoadingAuth()) || null;
        } else {
          const currentLocation = globalThis.location.pathname + encodeURIComponent(globalThis.location.search);
          const generatedRoutesMap = import_namedRoutes.namedRoutes;
          if (!generatedRoutesMap[unauthenticated]) {
            throw new Error(`We could not find a route named ${unauthenticated}`);
          }
          let unauthenticatedPath;
          try {
            unauthenticatedPath = generatedRoutesMap[unauthenticated]();
          } catch (e) {
            if (e instanceof Error && /Missing parameter .* for route/.test(e.message)) {
              throw new Error(
                `Redirecting to route "${unauthenticated}" would require route parameters, which currently is not supported. Please choose a different route`
              );
            }
            throw new Error(
              `Could not redirect to the route named ${unauthenticated}`
            );
          }
          return import_react.default.createElement(import_redirect.Redirect, { to: `${unauthenticatedPath}?redirectTo=${currentLocation}` });
        }
      }
      return import_react.default.createElement(import_react.default.Fragment, null, children);
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/page.js
var require_page = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/page.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var page_exports = {};
    __export2(page_exports, {
      isSpec: () => isSpec,
      normalizePage: () => normalizePage
    });
    module2.exports = __toCommonJS2(page_exports);
    function isSpec(specOrPage) {
      return specOrPage.LazyComponent !== void 0;
    }
    function normalizePage(specOrPage) {
      if (isSpec(specOrPage)) {
        return specOrPage;
      }
      return {
        name: specOrPage.name,
        prerenderLoader: () => ({ default: specOrPage }),
        LazyComponent: specOrPage
      };
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/splash-page.js
var require_splash_page = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/splash-page.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var splash_page_exports = {};
    __export2(splash_page_exports, {
      SplashPage: () => SplashPage
    });
    module2.exports = __toCommonJS2(splash_page_exports);
    var import_react = __toESM2(require_react(), 1);
    var SplashPage = ({
      hasGeneratedRoutes,
      allStandardRoutes: routesMap
    }) => {
      const routes2 = Object.values(routesMap);
      const version = useVersion();
      return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement("main", null, import_react.default.createElement("section", null, import_react.default.createElement(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `
            :root {
              --foreground: rgb(26, 32, 44);
              --background: hsl(0, 0%, 100%);
              --background-2: rgb(253, 248, 246);
              --background-3: rgb(250, 234, 229);
              --highlight-1: rgb(191, 71, 34);
              --highlight-2: rgb(220, 94, 56);
              --highlight-3: rgba(220, 94, 56, 0.2);
              --space-0: 0.125rem;
              --space-1: 0.25rem;
              --space-2: 0.5rem;
              --space-3: 0.75rem;
              --space-4: 1rem;
              --space-5: 1.25rem;
              --space-6: 1.5rem;
              --space-7: 1.75rem;
              --space-8: 2rem;
              --space-9: 2.25rem;
              --space-10: 2.5rem;
              --space-11: 2.75rem;
              --space-12: 3rem;
              --space-14: 3.5rem;
              --space-16: 4rem;
              --space-18: 4.5rem;
              --space-20: 5rem;
            }

            @media (prefers-color-scheme: dark) {
              :root {
                --foreground: hsl(0, 0%, 100%);
                --background: hsl(250, 24%, 9%);
                --background-2: hsl(250, 21%, 11%);
                --background-3: rgb(53, 37, 32);
              }
            }

            html, body {
              margin: 0;
            }

            .container {
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
                "Helvetica Neue", Arial, "Noto Sans", sans-serif;
              color: var(--foreground);
              background-color: var(--background);
              display: flex;
              flex-direction: column;
              min-height: 100vh;
            }

            h1,
            h2,
            p {
              margin: 0;
            }

            h1,
            h2 {
              font-size: inherit;
              font-weight: inherit;
            }

            a {
              color: var(--highlight-1);
              text-decoration-thickness: 2px;
            }

            a:hover {
              color: var(--highlight-2);
            }

            /* Social */
            .social {
              display: flex;
              gap: var(--space-3);
              padding: var(--space-4) var(--space-5);
              justify-content: center;
            }

            .social-link {
              width: var(--space-6);
            }

            /* Content */
            .content-container {
              flex-grow: 1;
              display: flex;
              justify-content: center;
              align-items: center;
            }

            .content {
              padding: var(--space-5) var(--space-5) var(--space-8);
              position: relative;
            }

            /* Logo */
            .logo {
              position: fixed;
              top: 50%;
              left: 0%;
              transform: translate(-50%, -50%);
              max-height: 140vh;
              color: var(--background-2);
            }

            /* Intro */
            .intro {
              text-align: center;
              margin-bottom: var(--space-18);
            }

            .intro-heading {
              font-size: var(--space-5);
              line-height: 1;
              font-weight: 700;
            }

            .intro-logo {
              max-width: 23rem;
              margin: var(--space-4);
              display: inline;
            }

            .intro-instructions-container {
              margin-top: var(--space-8);
            }

            .intro-instructions {
              font-size: var(--space-5);
              font-weight: 400;
              line-height: var(--space-7);
              margin-bottom: var(--space-2);
            }

            code {
              font-family: Fira Code,Fira Mono,Menlo,Monoco,monospace;
              font-size: 0.8em;
              padding: var(--space-1) var(--space-2);
              border-radius: var(--space-1);
              color: var(--highlight-2);
              background-color: var(--highlight-3);
            }

            .pages {
              font-size: var(--space-5);
              line-height: var(--space-7);
            }

            .pages-title {
              margin-bottom: var(--space-1);
              font-weight: 400;
            }

            .pages-list {
              margin: var(--space-2) 0;
              padding: 0;
              list-style-type: none;
            }

            .pages-item {
              margin: var(--space-4) 0;
            }

            .callout {
              font-size: var(--space-4);
              line-height: var(--space-6);
              font-weight: 400;
              margin: var(--space-12) auto 0;
              max-width: 32rem;
              text-align: left;
              border-left: 3px solid;
              border-color: var(--highlight-2);
              color: var(--foreground);
              background-color: var(--background-2);
              padding: var(--space-4);
            }

            /* Resources */
            .resources {
              display: flex;
              flex-wrap: wrap;
              max-width: 56rem;
              margin: auto;
              gap: var(--space-4);
              justify-content: center;
            }

            .resource {
              flex-basis: 21rem;
              padding: var(--space-6);
              border-radius: var(--space-1);
              border: 2px solid;
              position: relative;
              color: var(--background);
              background-color: var(--highlight-1);
              border-color: transparent;
            }

            .resource:hover {
              background-color: var(--highlight-2);
              border-color: var(--highlight-2);
            }

            .icon {
              fill: white;
              width: var(--space-6);
            }

            .icon-container {
              display: flex;
              align-items: center;
              gap: var(--space-2);
              margin-bottom: var(--space-2);
            }

            @media (prefers-color-scheme: dark) {
              .resource {
                color: var(--foreground);
                background-color: var(--background-2);
                border-color: var(--highlight-1);
              }
              .resource:hover {
                background-color: var(--highlight-3);
              }
            }

            .resource-link {
              position: absolute;
              inset: 0;
            }

            .resource-title {
              font-size: var(--space-5);
              line-height: 1;
              font-weight: 700;
            }

            .resource-description {
              font-weight: 500;
              font-size: var(--space-4);
              line-height: var(--space-6);
            }

            .footer {
              position: relative;
              text-align: center;
              font-weight: 400;
              padding: var(--space-5);
              font-size: var(--space-4);
              line-height: var(--space-6);
            }
          `
          }
        }
      ), import_react.default.createElement("section", { className: "container" }, import_react.default.createElement("svg", { className: "logo", fill: "currentColor", viewBox: "0 0 917 1000" }, import_react.default.createElement(
        "path",
        {
          clipRule: "evenodd",
          d: "m249.557 144.582 194.171 132.54c4.383 2.918 9.502 4.516 14.755 4.606 5.261-.038 10.394-1.641 14.755-4.606l194.319-132.986c7.55-5.406 11.714-14.418 10.957-23.717-.757-9.298-6.322-17.507-14.646-21.6024l-194.171-96.13614c-7.366-3.573948-15.947-3.573948-23.313 0l-193.581 96.13614c-8.474 4.1174-14.113 12.4854-14.783 21.9354-.67 9.451 3.73 18.541 11.537 23.83zm274.879 174.144c.016 8.789 4.318 17.01 11.509 21.991l155.662 106.389c9.965 6.87 23.298 6.012 32.313-2.081l130.579-116.789c5.819-5.199 9.051-12.729 8.823-20.56s-3.892-15.158-10.004-20.005l-124.677-99.702c-9.062-7.199-21.704-7.68-31.28-1.189l-161.416 110.401c-7.064 4.89-11.35 12.914-11.509 21.545zm-387.163 144.724c6.292 5.652 9.526 13.988 8.706 22.437-.817 8.499-5.726 16.052-13.132 20.208l-92.9545 55.72c-9.4227 5.633-21.32 4.82-29.90183-2.041-8.5818-6.861-12.06543-18.346-8.75546-28.865l34.37839-108.172c2.6969-8.57 9.5328-15.175 18.1483-17.533 8.609-2.505 17.8924-.309 24.4928 5.795zm504.168 11.293-168.056-115.007c-8.931-6.01-20.578-6.01-29.509 0l-168.056 115.007c-6.684 4.626-10.919 12.061-11.509 20.208-.435 8.203 2.816 16.169 8.853 21.693l167.909 150.222c4.842 4.319 11.089 6.698 17.558 6.687 6.465-.002 12.708-2.38 17.558-6.687l167.908-150.222c6.056-5.501 9.265-13.5 8.705-21.693-.469-8.146-4.666-15.612-11.361-20.208zm-448.247-29.718-130.4316-116.79c-5.8687-5.331-9.1073-12.995-8.8528-20.95.1419-7.841 3.7705-15.204 9.8856-20.06l124.6768-100.296c9.126-7.179 21.793-7.658 31.428-1.189l161.269 110.401c7.484 4.908 11.998 13.293 11.998 22.288 0 8.994-4.514 17.38-11.998 22.288l-155.515 106.388c-10.025 6.841-23.376 5.985-32.46-2.08zm669.715 167.756-132.792-79.495c-9.862-5.943-22.415-4.739-30.985 2.972l-162.301 144.873c-6.846 6.114-10.062 15.362-8.499 24.441 1.563 9.08 7.681 16.698 16.171 20.135l225.157 91.233c3.088 1.283 6.397 1.939 9.738 1.932 10.449.033 19.936-6.142 24.197-15.751l69.79-156.314c5.68-12.37 1.157-27.062-10.476-34.026zm18.443-190.043 34.379 108.171h-.295c2.542 8.091 1.097 16.919-3.889 23.761-4.986 6.841-12.915 10.876-21.342 10.86-4.728.016-9.37-1.269-13.427-3.715l-93.102-55.72c-7.254-4.243-11.992-11.789-12.689-20.208-.87-8.456 2.373-16.814 8.705-22.436l59.019-52.6c6.668-5.976 15.881-8.156 24.493-5.795 8.609 2.459 15.423 9.098 18.148 17.682zm-492.511 282.761c1.587-9.042-1.597-18.266-8.41-24.368l-162.302-144.873c-8.57-7.711-21.123-8.915-30.985-2.972l-132.7921 79.495c-11.4977 6.995-16.0467 21.502-10.6233 33.878l69.9374 156.314c5.794 13.034 20.774 19.134 33.936 13.818l225.009-91.232c8.492-3.407 14.632-10.995 16.23-20.06zm79.675 44.577 180.598 73.105c8.83 3.779 14.93 12.084 15.935 21.694 1.143 9.729-3.178 19.291-11.214 24.814l-180.745 125.556c-4.331 3.043-9.473 4.7-14.754 4.755-5.277-.082-10.411-1.737-14.755-4.755l-180.597-125.556c-8.066-5.508-12.439-15.061-11.362-24.814 1.206-9.71 7.526-18.006 16.526-21.694l180.597-73.105c6.351-2.532 13.421-2.532 19.771 0z",
          fillRule: "evenodd"
        }
      )), import_react.default.createElement("section", { className: "content-container" }, import_react.default.createElement("div", { className: "content" }, import_react.default.createElement("div", { className: "intro" }, import_react.default.createElement("h1", { className: "intro-heading" }, "Welcome to"), import_react.default.createElement(
        "svg",
        {
          viewBox: "0 0 1265 241",
          className: "intro-logo",
          fill: "currentColor"
        },
        import_react.default.createElement("path", { d: "M295.283 112.89H305.052C314.626 112.89 321.692 111.288 326.25 108.083C330.809 104.878 333.089 99.8424 333.089 92.9752C333.089 86.1735 330.744 81.3337 326.055 78.4561C321.431 75.5784 314.235 74.1396 304.466 74.1396H295.283V112.89ZM295.283 137.612V192.647H265V49.2216H306.615C326.022 49.2216 340.383 52.786 349.696 59.9148C359.008 66.9781 363.665 77.7367 363.665 92.1904C363.665 100.627 361.353 108.148 356.729 114.754C352.105 121.294 345.56 126.428 337.094 130.156C358.585 162.399 372.587 183.229 379.1 192.647H345.495L311.402 137.612H295.283Z" }),
        import_react.default.createElement("path", { d: "M422.875 102.197C416.558 102.197 411.608 104.224 408.026 108.279C404.444 112.269 402.393 117.959 401.872 125.349H443.682C443.552 117.959 441.631 112.269 437.919 108.279C434.207 104.224 429.192 102.197 422.875 102.197ZM427.075 194.609C409.492 194.609 395.75 189.737 385.851 179.992C375.952 170.247 371.003 156.447 371.003 138.593C371.003 120.215 375.561 106.023 384.679 96.0164C393.862 85.9445 406.528 80.9086 422.679 80.9086C438.114 80.9086 450.13 85.3232 458.726 94.1524C467.323 102.982 471.621 115.179 471.621 130.745V145.264H401.188C401.514 153.766 404.021 160.404 408.71 165.178C413.399 169.953 419.977 172.34 428.443 172.34C435.021 172.34 441.24 171.653 447.101 170.28C452.963 168.906 459.085 166.715 465.467 163.707V186.859C460.257 189.475 454.689 191.404 448.762 192.647C442.836 193.955 435.607 194.609 427.075 194.609Z" }),
        import_react.default.createElement("path", { d: "M522.427 194.609C509.597 194.609 499.503 189.606 492.143 179.599C484.849 169.593 481.202 155.728 481.202 138.004C481.202 120.019 484.915 106.023 492.339 96.0164C499.828 85.9445 510.118 80.9086 523.208 80.9086C536.95 80.9086 547.435 86.2716 554.664 96.9974H555.641C554.143 88.8222 553.394 81.5299 553.394 75.1206V40H583.286V192.647H560.427L554.664 178.422H553.394C546.621 189.214 536.298 194.609 522.427 194.609ZM532.879 170.77C540.499 170.77 546.067 168.547 549.584 164.099C553.166 159.652 555.12 152.098 555.445 141.438V138.2C555.445 126.428 553.622 117.991 549.975 112.89C546.393 107.789 540.532 105.238 532.391 105.238C525.748 105.238 520.571 108.083 516.859 113.773C513.212 119.397 511.388 127.605 511.388 138.396C511.388 149.188 513.244 157.298 516.956 162.726C520.668 168.089 525.976 170.77 532.879 170.77Z" }),
        import_react.default.createElement("path", { d: "M696.221 192.647L687.82 154.289L676.488 105.827H675.805L655.876 192.647H623.835L592.77 82.9688H622.467L635.069 131.529C637.088 140.228 639.139 152.229 641.223 167.533H641.809C642.07 162.562 643.209 154.682 645.228 143.89L646.791 135.552L660.272 82.9688H693.095L705.893 135.552C706.153 136.99 706.544 139.116 707.065 141.928C707.651 144.74 708.205 147.749 708.726 150.954C709.247 154.093 709.702 157.199 710.093 160.273C710.549 163.282 710.81 165.702 710.875 167.533H711.461C712.047 162.824 713.089 156.382 714.587 148.207C716.085 139.966 717.159 134.407 717.811 131.529L730.901 82.9688H760.109L728.654 192.647H696.221Z" }),
        import_react.default.createElement("path", { d: "M793.527 137.612C793.527 148.468 795.285 156.676 798.802 162.235C802.384 167.795 808.18 170.574 816.19 170.574C824.135 170.574 829.834 167.827 833.286 162.333C836.802 156.774 838.561 148.534 838.561 137.612C838.561 126.755 836.802 118.613 833.286 113.184C829.769 107.756 824.005 105.042 815.995 105.042C808.049 105.042 802.318 107.756 798.802 113.184C795.285 118.547 793.527 126.69 793.527 137.612ZM869.039 137.612C869.039 155.466 864.35 169.43 854.972 179.501C845.594 189.573 832.537 194.609 815.799 194.609C805.314 194.609 796.066 192.32 788.056 187.742C780.046 183.098 773.891 176.46 769.593 167.827C765.295 159.194 763.146 149.122 763.146 137.612C763.146 119.692 767.802 105.761 777.115 95.8202C786.428 85.8791 799.518 80.9086 816.385 80.9086C826.871 80.9086 836.118 83.1977 844.129 87.7758C852.139 92.3539 858.294 98.9267 862.592 107.494C866.89 116.062 869.039 126.101 869.039 137.612Z" }),
        import_react.default.createElement("path", { d: "M909.392 137.612C909.392 148.468 911.151 156.676 914.667 162.235C918.249 167.795 924.046 170.574 932.056 170.574C940.001 170.574 945.7 167.827 949.151 162.333C952.668 156.774 954.426 148.534 954.426 137.612C954.426 126.755 952.668 118.613 949.151 113.184C945.635 107.756 939.871 105.042 931.86 105.042C923.915 105.042 918.184 107.756 914.667 113.184C911.151 118.547 909.392 126.69 909.392 137.612ZM984.905 137.612C984.905 155.466 980.216 169.43 970.838 179.501C961.46 189.573 948.402 194.609 931.665 194.609C921.18 194.609 911.932 192.32 903.922 187.742C895.911 183.098 889.757 176.46 885.459 167.827C881.16 159.194 879.011 149.122 879.011 137.612C879.011 119.692 883.668 105.761 892.981 95.8202C902.294 85.8791 915.384 80.9086 932.251 80.9086C942.736 80.9086 951.984 83.1977 959.995 87.7758C968.005 92.3539 974.159 98.9267 978.458 107.494C982.756 116.062 984.905 126.101 984.905 137.612Z" }),
        import_react.default.createElement("path", { d: "M1036.1 194.609C1023.27 194.609 1013.18 189.606 1005.82 179.599C998.524 169.593 994.877 155.728 994.877 138.004C994.877 120.019 998.589 106.023 1006.01 96.0164C1013.5 85.9445 1023.79 80.9086 1036.88 80.9086C1050.62 80.9086 1061.11 86.2716 1068.34 96.9974H1069.32C1067.82 88.8222 1067.07 81.5299 1067.07 75.1206V40H1096.96V192.647H1074.1L1068.34 178.422H1067.07C1060.29 189.214 1049.97 194.609 1036.1 194.609ZM1046.55 170.77C1054.17 170.77 1059.74 168.547 1063.26 164.099C1066.84 159.652 1068.79 152.098 1069.12 141.438V138.2C1069.12 126.428 1067.3 117.991 1063.65 112.89C1060.07 107.789 1054.21 105.238 1046.07 105.238C1039.42 105.238 1034.25 108.083 1030.53 113.773C1026.89 119.397 1025.06 127.605 1025.06 138.396C1025.06 149.188 1026.92 157.298 1030.63 162.726C1034.34 168.089 1039.65 170.77 1046.55 170.77Z" }),
        import_react.default.createElement("path", { d: "M1107.52 234.831C1100.68 234.831 1094.72 234.112 1089.64 232.673V207.362C1094.85 208.67 1099.61 209.324 1103.91 209.324C1110.55 209.324 1115.3 207.232 1118.17 203.046C1121.03 198.926 1122.47 192.451 1122.47 183.622V49.2216H1152.75V183.425C1152.75 200.168 1148.94 212.922 1141.32 221.685C1133.7 230.449 1122.43 234.831 1107.52 234.831Z" }),
        import_react.default.createElement("path", { d: "M1265 152.818C1265 165.767 1260.34 175.97 1251.03 183.425C1241.78 190.881 1228.89 194.609 1212.35 194.609C1197.11 194.609 1183.63 191.731 1171.9 185.976V157.723C1181.54 162.039 1189.68 165.08 1196.33 166.846C1203.03 168.612 1209.16 169.495 1214.69 169.495C1221.33 169.495 1226.41 168.22 1229.93 165.669C1233.51 163.118 1235.3 159.325 1235.3 154.289C1235.3 151.477 1234.52 148.992 1232.96 146.833C1231.4 144.61 1229.08 142.484 1226.02 140.457C1223.03 138.429 1216.87 135.192 1207.56 130.745C1198.83 126.624 1192.29 122.667 1187.92 118.874C1183.56 115.081 1180.08 110.666 1177.47 105.63C1174.87 100.595 1173.56 94.7083 1173.56 87.972C1173.56 75.2841 1177.83 65.3104 1186.36 58.0508C1194.96 50.7912 1206.81 47.1615 1221.92 47.1615C1229.34 47.1615 1236.41 48.0444 1243.12 49.8102C1249.89 51.5761 1256.96 54.0613 1264.32 57.266L1254.55 80.9086C1246.93 77.7694 1240.61 75.5784 1235.6 74.3358C1230.65 73.0932 1225.76 72.4718 1220.94 72.4718C1215.21 72.4718 1210.82 73.8126 1207.76 76.494C1204.69 79.1755 1203.16 82.6745 1203.16 86.991C1203.16 89.6724 1203.78 92.0269 1205.02 94.0543C1206.26 96.0164 1208.21 97.9457 1210.88 99.8424C1213.62 101.674 1220.03 105.009 1230.13 109.849C1243.48 116.258 1252.63 122.7 1257.58 129.175C1262.53 135.584 1265 143.465 1265 152.818Z" }),
        import_react.default.createElement(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M59.8719 34.8443L106.456 66.7864C107.508 67.4896 108.736 67.8748 109.996 67.8964C111.258 67.8873 112.49 67.501 113.536 66.7864L160.155 34.7368C161.967 33.4339 162.966 31.262 162.784 29.021C162.603 26.7802 161.267 24.8018 159.27 23.8148L112.686 0.645991C110.919 -0.21533 108.86 -0.21533 107.093 0.645991L60.6507 23.8148C58.6176 24.8071 57.2648 26.8238 57.104 29.1012C56.9433 31.3789 57.9989 33.5696 59.8719 34.8443V34.8443ZM125.819 76.813C125.823 78.9311 126.855 80.9124 128.58 82.1128L165.925 107.753C168.316 109.408 171.515 109.201 173.678 107.251L205.005 79.1049C206.401 77.8519 207.177 76.0372 207.122 74.1499C207.067 72.2626 206.188 70.4968 204.722 69.3287L174.81 45.3005C172.636 43.5656 169.603 43.4496 167.306 45.014L128.58 71.6206C126.885 72.7991 125.857 74.7329 125.819 76.813V76.813ZM32.9335 111.691C34.4431 113.054 35.219 115.063 35.0222 117.099C34.8262 119.147 33.6485 120.967 31.8717 121.969L9.57072 135.397C7.31009 136.755 4.45578 136.559 2.39689 134.906C0.338006 133.252 -0.497761 130.484 0.296343 127.949L8.54416 101.88C9.19118 99.8142 10.8312 98.2224 12.8982 97.6542C14.9636 97.0505 17.1908 97.5797 18.7743 99.0508L32.9335 111.691ZM153.89 114.413L113.571 86.6964C111.428 85.248 108.634 85.248 106.492 86.6964L66.1727 114.413C64.5692 115.528 63.5531 117.32 63.4116 119.283C63.3072 121.26 64.0872 123.18 65.5355 124.511L105.819 160.715C106.981 161.756 108.479 162.329 110.031 162.326C111.582 162.326 113.08 161.753 114.244 160.715L154.527 124.511C155.98 123.185 156.75 121.258 156.616 119.283C156.503 117.32 155.496 115.521 153.89 114.413V114.413ZM46.3497 107.251L15.0575 79.1046C13.6495 77.8199 12.8725 75.9728 12.9336 74.0557C12.9676 72.166 13.8382 70.3915 15.3053 69.2212L45.2168 45.0499C47.4063 43.3197 50.4453 43.2043 52.7568 44.7633L91.4473 71.37C93.2428 72.5528 94.3258 74.5736 94.3258 76.7414C94.3258 78.9089 93.2428 80.93 91.4473 82.1128L54.1373 107.752C51.7321 109.401 48.5291 109.195 46.3497 107.251V107.251ZM207.023 147.68L175.164 128.522C172.798 127.09 169.787 127.38 167.731 129.238L128.793 164.153C127.15 165.626 126.379 167.855 126.754 170.043C127.129 172.231 128.596 174.067 130.633 174.895L184.651 196.883C185.392 197.192 186.186 197.35 186.988 197.348C189.494 197.356 191.77 195.868 192.793 193.552L209.536 155.88C210.899 152.899 209.814 149.359 207.023 147.68ZM211.448 101.88L219.696 127.949H219.625C220.235 129.899 219.888 132.027 218.692 133.675C217.496 135.324 215.593 136.297 213.572 136.293C212.437 136.297 211.324 135.987 210.35 135.397L188.014 121.969C186.274 120.946 185.137 119.128 184.97 117.099C184.761 115.061 185.539 113.047 187.058 111.692L201.217 99.0151C202.817 97.5749 205.028 97.0495 207.094 97.6185C209.159 98.2111 210.794 99.8111 211.448 101.88V101.88ZM93.2879 170.025C93.6687 167.846 92.9048 165.623 91.2702 164.153L52.3319 129.238C50.2759 127.38 47.2643 127.09 44.8982 128.522L13.0397 147.68C10.2813 149.366 9.18991 152.862 10.491 155.845L27.2699 193.516C28.66 196.658 32.2539 198.128 35.4116 196.847L89.3941 174.86C91.4315 174.039 92.9045 172.21 93.2879 170.025V170.025ZM112.403 180.768L155.731 198.387C157.849 199.297 159.313 201.299 159.554 203.615C159.828 205.96 158.791 208.264 156.863 209.595L113.5 239.854C112.461 240.587 111.228 240.987 109.961 241C108.695 240.98 107.463 240.581 106.421 239.854L63.0932 209.595C61.1581 208.268 60.1089 205.965 60.3673 203.615C60.6567 201.275 62.1729 199.275 64.3321 198.387L107.66 180.768C109.183 180.158 110.88 180.158 112.403 180.768V180.768Z",
            fill: "var(--highlight-1)"
          }
        )
      ), !hasGeneratedRoutes ? import_react.default.createElement(
        "div",
        {
          className: "intro-instructions-container",
          "data-cy": "e2e-test-splashpage"
        },
        import_react.default.createElement("p", { className: "intro-instructions" }, "You’re seeing this because you don’t have any pages yet."),
        import_react.default.createElement("p", { className: "intro-instructions" }, "Type ", import_react.default.createElement("code", null, "yarn redwood generate page my-page"), " in your CLI to get started!")
      ) : import_react.default.createElement(
        "div",
        {
          className: "intro-instructions-container",
          "data-cy": "e2e-test-splashpage"
        },
        import_react.default.createElement("div", { className: "pages" }, import_react.default.createElement("p", { className: "pages-title" }, "List of Pages by path:"), import_react.default.createElement("ul", { className: "pages-list" }, routes2.map((route, index) => {
          return import_react.default.createElement("li", { key: index, className: "pages-item" }, import_react.default.createElement("code", null, `${route.name} -> `, import_react.default.createElement(
            "a",
            {
              href: route.path,
              target: "_blank",
              rel: "noreferrer"
            },
            route.path
          )));
        }))),
        import_react.default.createElement("div", { className: "callout" }, "You’re seeing this because you don’t have a page at the", " ", import_react.default.createElement("code", null, "/"), " path.", import_react.default.createElement("br", null), "Type ", import_react.default.createElement("code", null, "yarn redwood generate page home /"), " in your CLI to create one.")
      )), import_react.default.createElement("div", { className: "resources" }, import_react.default.createElement("div", { className: "resource" }, import_react.default.createElement(
        "a",
        {
          className: "resource-link",
          href: "https://redwoodjs.com/tutorial",
          target: "_blank",
          rel: "noreferrer"
        }
      ), import_react.default.createElement("div", { className: "icon-container" }, import_react.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          className: "icon"
        },
        import_react.default.createElement("path", { d: "M0 0h24v24H0V0z", fill: "none" }),
        import_react.default.createElement("path", { d: "M4 5h16v11H4z", opacity: ".3" }),
        import_react.default.createElement("path", { d: "M20 18c1.1 0 1.99-.9 1.99-2L22 5c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2H0c0 1.1.9 2 2 2h20c1.1 0 2-.9 2-2h-4zM4 5h16v11H4V5zm8 14c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z" })
      ), import_react.default.createElement("h2", { className: "resource-title" }, "Tutorial")), import_react.default.createElement("p", { className: "resource-description" }, "Start here to learn how to build full-stack apps with Redwood.")), import_react.default.createElement("div", { className: "resource" }, import_react.default.createElement(
        "a",
        {
          className: "resource-link",
          href: "https://redwoodjs.com/docs",
          target: "_blank",
          rel: "noreferrer"
        }
      ), import_react.default.createElement("div", { className: "icon-container" }, import_react.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          className: "icon"
        },
        import_react.default.createElement("path", { d: "M0 0h24v24H0V0z", fill: "none" }),
        import_react.default.createElement(
          "path",
          {
            d: "M13 13l-3-2.25L7 13V4H6v16h12V4h-5z",
            opacity: ".3"
          }
        ),
        import_react.default.createElement("path", { d: "M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 4h2v5l-1-.75L9 9V4zm9 16H6V4h1v9l3-2.25L13 13V4h5v16z" })
      ), import_react.default.createElement("h2", { className: "resource-title" }, "Docs and How To's")), import_react.default.createElement("p", { className: "resource-description" }, "Find in-depth information about Redwood features and API.")), import_react.default.createElement("div", { className: "resource" }, import_react.default.createElement(
        "a",
        {
          className: "resource-link",
          href: "https://redwoodjs.com/community",
          target: "_blank",
          rel: "noreferrer"
        }
      ), import_react.default.createElement("div", { className: "icon-container" }, import_react.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          className: "icon"
        },
        import_react.default.createElement("path", { d: "M0 0h24v24H0V0z", fill: "none" }),
        import_react.default.createElement("path", { d: "M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm0 15.17L18.83 16H4V4h16v13.17z" }),
        import_react.default.createElement("path", { d: "M4 4v12h14.83L20 17.17V4z", opacity: ".3" })
      ), import_react.default.createElement("h2", { className: "resource-title" }, "Join the Community")), import_react.default.createElement("p", { className: "resource-description" }, "Get help, share tips, and collaborate together on Redwood.")), import_react.default.createElement("div", { className: "resource" }, import_react.default.createElement(
        "a",
        {
          className: "resource-link",
          href: "https://redwoodjs.com/docs/contributing",
          target: "_blank",
          rel: "noreferrer"
        }
      ), import_react.default.createElement("div", { className: "icon-container" }, import_react.default.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          className: "icon"
        },
        import_react.default.createElement("g", null, import_react.default.createElement("rect", { fill: "none", height: "24", width: "24" })),
        import_react.default.createElement("g", null, import_react.default.createElement("path", { d: "M21,5c-1.11-0.35-2.33-0.5-3.5-0.5c-1.95,0-4.05,0.4-5.5,1.5c-1.45-1.1-3.55-1.5-5.5-1.5S2.45,4.9,1,6v14.65 c0,0.25,0.25,0.5,0.5,0.5c0.1,0,0.15-0.05,0.25-0.05C3.1,20.45,5.05,20,6.5,20c1.95,0,4.05,0.4,5.5,1.5c1.35-0.85,3.8-1.5,5.5-1.5 c1.65,0,3.35,0.3,4.75,1.05c0.1,0.05,0.15,0.05,0.25,0.05c0.25,0,0.5-0.25,0.5-0.5V6C22.4,5.55,21.75,5.25,21,5z M3,18.5V7 c1.1-0.35,2.3-0.5,3.5-0.5c1.34,0,3.13,0.41,4.5,0.99v11.5C9.63,18.41,7.84,18,6.5,18C5.3,18,4.1,18.15,3,18.5z M21,18.5 c-1.1-0.35-2.3-0.5-3.5-0.5c-1.34,0-3.13,0.41-4.5,0.99V7.49c1.37-0.59,3.16-0.99,4.5-0.99c1.2,0,2.4,0.15,3.5,0.5V18.5z" }), import_react.default.createElement(
          "path",
          {
            d: "M11,7.49C9.63,6.91,7.84,6.5,6.5,6.5C5.3,6.5,4.1,6.65,3,7v11.5C4.1,18.15,5.3,18,6.5,18 c1.34,0,3.13,0.41,4.5,0.99V7.49z",
            opacity: ".3"
          }
        )),
        import_react.default.createElement("g", null, import_react.default.createElement("path", { d: "M17.5,10.5c0.88,0,1.73,0.09,2.5,0.26V9.24C19.21,9.09,18.36,9,17.5,9c-1.28,0-2.46,0.16-3.5,0.47v1.57 C14.99,10.69,16.18,10.5,17.5,10.5z" }), import_react.default.createElement("path", { d: "M17.5,13.16c0.88,0,1.73,0.09,2.5,0.26V11.9c-0.79-0.15-1.64-0.24-2.5-0.24c-1.28,0-2.46,0.16-3.5,0.47v1.57 C14.99,13.36,16.18,13.16,17.5,13.16z" }), import_react.default.createElement("path", { d: "M17.5,15.83c0.88,0,1.73,0.09,2.5,0.26v-1.52c-0.79-0.15-1.64-0.24-2.5-0.24c-1.28,0-2.46,0.16-3.5,0.47v1.57 C14.99,16.02,16.18,15.83,17.5,15.83z" }))
      ), import_react.default.createElement("h2", { className: "resource-title" }, "Become a Contributor")), import_react.default.createElement("p", { className: "resource-description" }, "Love Redwood and want to get involved? Contribute today!"))))), import_react.default.createElement("section", { className: "footer" }, import_react.default.createElement("div", { className: "social" }, import_react.default.createElement(
        "a",
        {
          className: "social-link",
          href: "https://github.com/redwoodjs/redwood",
          target: "_blank",
          rel: "noopener noreferrer",
          "aria-label": "Go to RedwoodJS GitHub repo"
        },
        import_react.default.createElement("svg", { viewBox: "0 0 32 32", focusable: "false" }, import_react.default.createElement(
          "path",
          {
            fill: "currentColor",
            d: "M15.9995 -8.73473e-07C12.198 -0.00275596 8.5196 1.34817 5.62346 3.81077C2.72731 6.27336 0.802616 9.6867 0.194194 13.4393C-0.414229 17.1919 0.333374 21.0385 2.30307 24.29C4.27276 27.5415 7.33584 29.9855 10.9435 31.184C11.7435 31.344 12.0315 30.832 12.0315 30.416L12.0155 27.696C7.56755 28.656 6.62355 25.552 6.62355 25.552C5.88755 23.696 4.84755 23.2 4.84755 23.2C3.40755 22.208 4.95955 22.24 4.95955 22.24C6.55955 22.352 7.40755 23.888 7.40755 23.888C8.84755 26.32 11.1515 25.616 12.0635 25.216C12.2235 24.176 12.6235 23.472 13.0715 23.072C9.51955 22.672 5.79155 21.296 5.79155 15.168C5.79155 13.408 6.41555 11.984 7.43955 10.864C6.95565 9.4866 7.01283 7.97684 7.59955 6.64C7.59955 6.64 8.94355 6.208 11.9995 8.272C14.6192 7.56384 17.3799 7.56384 19.9995 8.272C23.0555 6.192 24.3995 6.64 24.3995 6.64C25.2795 8.832 24.7195 10.48 24.5595 10.864C25.5835 11.984 26.2075 13.424 26.2075 15.168C26.2075 21.312 22.4635 22.656 18.8955 23.056C19.4715 23.552 19.9835 24.528 19.9835 26.016L19.9675 30.416C19.9675 30.832 20.2555 31.344 21.0715 31.184C24.6806 29.985 27.7445 27.5398 29.7141 24.2866C31.6837 21.0334 32.4302 17.185 31.8197 13.4314C31.2092 9.67772 29.2816 6.26427 26.3825 3.80296C23.4835 1.34165 19.8025 -0.00657403 15.9995 -8.73473e-07Z"
          }
        ))
      ), import_react.default.createElement(
        "a",
        {
          className: "social-link",
          href: "https://twitter.com/redwoodjs",
          target: "_blank",
          rel: "noopener noreferrer",
          "aria-label": "Go to RedwoodJS Twitter profile"
        },
        import_react.default.createElement("svg", { viewBox: "0 0 34 34", focusable: "false" }, import_react.default.createElement(
          "path",
          {
            fill: "currentColor",
            d: "M10.693 31.025C23.528 31.025 30.532 20.4 30.532 11.186V10.285C31.892 9.282 33.065 8.075 34 6.664C32.725 7.225 31.382 7.599 29.988 7.769C31.4415 6.89552 32.5288 5.52436 33.048 3.91C31.688 4.726 30.192 5.287 28.628 5.61C27.5817 4.47537 26.1884 3.72011 24.6667 3.46265C23.1449 3.20519 21.5807 3.46011 20.2194 4.18742C18.8582 4.91474 17.7768 6.0733 17.1449 7.48142C16.513 8.88954 16.3664 10.4676 16.728 11.968C13.9549 11.8247 11.243 11.0998 8.76823 9.84043C6.29346 8.58108 4.11117 6.8154 2.363 4.658C1.46192 6.19488 1.18356 8.01846 1.58508 9.75418C1.98661 11.4899 3.03753 13.006 4.522 13.991C3.417 13.94 2.329 13.651 1.36 13.09V13.175C1.35653 14.7901 1.91405 16.3562 2.93729 17.6058C3.96053 18.8554 5.38596 19.7109 6.97 20.026C5.93906 20.3076 4.85718 20.3483 3.808 20.145C4.25151 21.5313 5.11789 22.744 6.2856 23.6129C7.4533 24.4818 8.86372 24.9634 10.319 24.99C8.87328 26.1262 7.21777 26.9662 5.44716 27.4621C3.67654 27.958 1.82554 28.1 0 27.88C3.19039 29.927 6.90238 31.0129 10.693 31.008"
          }
        ))
      ), import_react.default.createElement(
        "a",
        {
          className: "social-link",
          href: "https://community.redwoodjs.com/",
          target: "_blank",
          rel: "noopener noreferrer",
          "aria-label": "Go to RedwoodJS community forum"
        },
        import_react.default.createElement("svg", { viewBox: "0 0 32 32", focusable: "false" }, import_react.default.createElement(
          "path",
          {
            fill: "currentColor",
            d: "M16.1357143,0 C7.37857143,0 0,7.03571429 0,15.7214286 C0,16 0.00714285714,32 0.00714285714,32 L16.1357143,31.9857143 C24.9,31.9857143 32,24.6785714 32,15.9928571 C32,7.30714286 24.9,0 16.1357143,0 Z M16,25.1428571 C14.6142857,25.1428571 13.2928571,24.8357143 12.1142857,24.2785714 L6.32142857,25.7142857 L7.95714286,20.3571429 C7.25714286,19.0642857 6.85714286,17.5785714 6.85714286,16 C6.85714286,10.95 10.95,6.85714286 16,6.85714286 C21.05,6.85714286 25.1428571,10.95 25.1428571,16 C25.1428571,21.05 21.05,25.1428571 16,25.1428571 Z"
          }
        ))
      ), import_react.default.createElement(
        "a",
        {
          className: "social-link",
          href: "https://discord.gg/redwoodjs",
          target: "_blank",
          rel: "noopener noreferrer",
          "aria-label": "Go to RedwoodJS Discord server"
        },
        import_react.default.createElement("svg", { viewBox: "0 0 36 36", focusable: "false" }, import_react.default.createElement(
          "path",
          {
            fill: "currentColor",
            d: "M29.9699 7.7544C27.1043 5.44752 22.5705 5.05656 22.3761 5.04288C22.2284 5.03072 22.0806 5.0648 21.9531 5.1404C21.8257 5.216 21.7249 5.32937 21.6647 5.4648C21.5783 5.65936 21.5049 5.85949 21.4451 6.06384C23.3409 6.38424 25.6694 7.02864 27.7761 8.33616C27.8565 8.38604 27.9262 8.45126 27.9814 8.52809C28.0366 8.60493 28.0761 8.69187 28.0976 8.78397C28.1192 8.87607 28.1224 8.97151 28.1071 9.06485C28.0917 9.15819 28.0582 9.24759 28.0083 9.32796C27.9584 9.40833 27.8932 9.47809 27.8164 9.53325C27.7395 9.58842 27.6526 9.62791 27.5605 9.64947C27.4684 9.67103 27.373 9.67424 27.2796 9.65892C27.1863 9.6436 27.0969 9.61004 27.0165 9.56016C23.3949 7.3116 18.8719 7.2 17.9999 7.2C17.1287 7.2 12.6028 7.31232 8.98338 9.55944C8.90301 9.60932 8.81361 9.64288 8.72027 9.6582C8.62693 9.67352 8.53149 9.67031 8.43939 9.64875C8.25339 9.6052 8.09231 9.48955 7.99158 9.32724C7.89085 9.16493 7.85873 8.96925 7.90227 8.78325C7.94582 8.59725 8.06147 8.43617 8.22378 8.33544C10.3305 7.03152 12.659 6.38424 14.5547 6.06672C14.4453 5.7096 14.3459 5.48424 14.3387 5.4648C14.2788 5.32841 14.1776 5.2143 14.0493 5.13859C13.921 5.06288 13.7721 5.0294 13.6238 5.04288C13.4294 5.05728 8.89554 5.44752 5.99034 7.78536C4.47474 9.18792 1.43994 17.3894 1.43994 24.48C1.43994 24.6067 1.47378 24.7277 1.5357 24.8371C3.62802 28.5163 9.3405 29.4775 10.6423 29.52H10.6646C10.7782 29.5203 10.8903 29.4937 10.9916 29.4424C11.093 29.3911 11.1808 29.3165 11.2478 29.2248L12.5632 27.4133C9.01146 26.4967 7.19706 24.9386 7.09338 24.8458C6.95017 24.7194 6.86303 24.5412 6.85115 24.3506C6.83927 24.1599 6.90361 23.9723 7.03002 23.8291C7.15643 23.6859 7.33456 23.5988 7.52522 23.5869C7.71588 23.575 7.90345 23.6394 8.04666 23.7658C8.08842 23.8054 11.4299 26.64 17.9999 26.64C24.5807 26.64 27.9223 23.7938 27.9561 23.7658C28.0998 23.6403 28.2874 23.5769 28.4777 23.5896C28.668 23.6023 28.8456 23.69 28.9713 23.8334C29.0335 23.9042 29.0812 23.9864 29.1117 24.0756C29.1421 24.1647 29.1546 24.259 29.1486 24.353C29.1426 24.447 29.1181 24.5389 29.0766 24.6235C29.035 24.708 28.9772 24.7836 28.9065 24.8458C28.8028 24.9386 26.9884 26.4967 23.4367 27.4133L24.7528 29.2248C24.8198 29.3164 24.9074 29.3909 25.0087 29.4422C25.1099 29.4935 25.2218 29.5202 25.3353 29.52H25.3569C26.6601 29.4775 32.3719 28.5156 34.4649 24.8371C34.5261 24.7277 34.5599 24.6067 34.5599 24.48C34.5599 17.3894 31.5251 9.18864 29.9699 7.7544V7.7544ZM13.3199 21.6C11.9275 21.6 10.7999 20.3112 10.7999 18.72C10.7999 17.1288 11.9275 15.84 13.3199 15.84C14.7124 15.84 15.8399 17.1288 15.8399 18.72C15.8399 20.3112 14.7124 21.6 13.3199 21.6ZM22.6799 21.6C21.2875 21.6 20.1599 20.3112 20.1599 18.72C20.1599 17.1288 21.2875 15.84 22.6799 15.84C24.0724 15.84 25.1999 17.1288 25.1999 18.72C25.1999 20.3112 24.0724 21.6 22.6799 21.6Z"
          }
        ))
      )), version && import_react.default.createElement(import_react.default.Fragment, null, "RedwoodJS version", " ", import_react.default.createElement(
        "a",
        {
          href: "https://github.com/redwoodjs/redwood/releases",
          target: "_blank",
          rel: "noreferrer"
        },
        "v",
        version
      )))))));
    };
    var useVersion = () => {
      const [version, setVersion] = (0, import_react.useState)(null);
      (0, import_react.useEffect)(() => {
        async function fetchVersion() {
          var _a2, _b;
          try {
            const response = await globalThis.fetch(
              globalThis.RWJS_API_GRAPHQL_URL,
              {
                method: "POST",
                headers: {
                  "content-type": "application/json"
                },
                body: JSON.stringify({
                  query: "query RedwoodVersion { redwood { version } }"
                })
              }
            );
            const versionData = await response.json();
            setVersion(((_b = (_a2 = versionData == null ? void 0 : versionData.data) == null ? void 0 : _a2.redwood) == null ? void 0 : _b.version) || null);
          } catch (err) {
            console.error("Unable to get Redwood version: ", err);
          }
        }
        if (!globalThis.fetch) {
          return;
        }
        fetchVersion();
      }, []);
      return version;
    };
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/router.js
var require_router = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/router.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var router_exports = {};
    __export2(router_exports, {
      Router: () => Router2
    });
    module2.exports = __toCommonJS2(router_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_active_route_loader = require_active_route_loader();
    var import_analyzeRoutes = require_analyzeRoutes();
    var import_AuthenticatedRoute = require_AuthenticatedRoute();
    var import_location = require_location();
    var import_namedRoutes = require_namedRoutes();
    var import_page = require_page();
    var import_PageLoadingContext = require_PageLoadingContext();
    var import_params = require_params();
    var import_redirect = require_redirect();
    var import_router_context = require_router_context();
    var import_splash_page = require_splash_page();
    var import_util4 = require_util2();
    var Router2 = ({
      useAuth: useAuth2,
      paramTypes,
      pageLoadingDelay,
      trailingSlashes = "never",
      children
    }) => {
      return (
        // Level 1/3 (outer-most)
        // Wrap it in the provider so that useLocation can be used
        import_react.default.createElement(import_location.LocationProvider, { trailingSlashes }, import_react.default.createElement(
          LocationAwareRouter,
          {
            useAuth: useAuth2,
            paramTypes,
            pageLoadingDelay
          },
          children
        ))
      );
    };
    var LocationAwareRouter = ({
      useAuth: useAuth2,
      paramTypes,
      pageLoadingDelay,
      children
    }) => {
      const location2 = (0, import_location.useLocation)();
      const analyzeRoutesResult = (0, import_react.useMemo)(() => {
        return (0, import_analyzeRoutes.analyzeRoutes)(children, {
          currentPathName: location2.pathname,
          // @TODO We haven't handled this with SSR/Streaming yet.
          // May need a babel plugin to extract userParamTypes from Routes.tsx
          userParamTypes: paramTypes
        });
      }, [location2.pathname, children, paramTypes]);
      const {
        pathRouteMap,
        hasRootRoute,
        namedRoutesMap,
        NotFoundPage,
        activeRoutePath
      } = analyzeRoutesResult;
      const hasGeneratedRoutes = hasCustomRoutes(namedRoutesMap);
      const splashPageExists = typeof import_splash_page.SplashPage !== "undefined";
      const isOnNonExistentRootRoute = !hasRootRoute && location2.pathname === "/";
      if (!hasRootRoute && splashPageExists) {
        namedRoutesMap["home"] = () => "/";
      }
      Object.assign(import_namedRoutes.namedRoutes, namedRoutesMap);
      const shouldShowSplash = (isOnNonExistentRootRoute || !hasGeneratedRoutes) && splashPageExists;
      if (shouldShowSplash) {
        return import_react.default.createElement(
          import_splash_page.SplashPage,
          {
            hasGeneratedRoutes,
            allStandardRoutes: pathRouteMap
          }
        );
      }
      if (!activeRoutePath) {
        if (NotFoundPage) {
          return import_react.default.createElement(
            import_router_context.RouterContextProvider,
            {
              useAuth: useAuth2,
              paramTypes,
              routes: analyzeRoutesResult
            },
            import_react.default.createElement(import_params.ParamsProvider, null, import_react.default.createElement(import_PageLoadingContext.PageLoadingContextProvider, { delay: pageLoadingDelay }, import_react.default.createElement(
              import_active_route_loader.ActiveRouteLoader,
              {
                spec: (0, import_page.normalizePage)(NotFoundPage),
                path: location2.pathname
              }
            )))
          );
        }
        return null;
      }
      const { path, page, name, redirect, whileLoadingPage, sets } = pathRouteMap[activeRoutePath];
      if (!path) {
        throw new Error(`Route "${name}" needs to specify a path`);
      }
      (0, import_util4.validatePath)(path, name || path);
      const { params: pathParams } = (0, import_util4.matchPath)(path, location2.pathname, {
        userParamTypes: paramTypes
      });
      const searchParams = (0, import_util4.parseSearch)(location2.search);
      const allParams = { ...searchParams, ...pathParams };
      let redirectPath = void 0;
      if (redirect) {
        if (redirect.startsWith("/")) {
          redirectPath = (0, import_util4.replaceParams)(redirect, allParams);
        } else {
          const redirectRouteObject = Object.values(pathRouteMap).find(
            (route) => route.name === redirect
          );
          if (!redirectRouteObject) {
            throw new Error(
              `Redirect target route "${redirect}" does not exist for route "${name}"`
            );
          }
          redirectPath = (0, import_util4.replaceParams)(redirectRouteObject.path, allParams);
        }
      }
      return import_react.default.createElement(
        import_router_context.RouterContextProvider,
        {
          useAuth: useAuth2,
          paramTypes,
          routes: analyzeRoutesResult,
          activeRouteName: name
        },
        import_react.default.createElement(import_params.ParamsProvider, { allParams }, import_react.default.createElement(import_PageLoadingContext.PageLoadingContextProvider, { delay: pageLoadingDelay }, redirectPath && import_react.default.createElement(import_redirect.Redirect, { to: redirectPath }), !redirectPath && page && import_react.default.createElement(WrappedPage, { sets }, import_react.default.createElement(
          import_active_route_loader.ActiveRouteLoader,
          {
            path,
            spec: (0, import_page.normalizePage)(page),
            params: allParams,
            whileLoadingPage
          }
        ))))
      );
    };
    var WrappedPage = (0, import_react.memo)(({ sets, children }) => {
      if (!sets || sets.length === 0) {
        return children;
      }
      return sets.reduceRight((acc, set) => {
        let wrapped = set.wrappers.reduceRight((acc2, Wrapper, index) => {
          return import_react.default.createElement(
            Wrapper,
            { ...set.props, key: set.id + "-" + index },
            acc2
          );
        }, acc);
        if (set.isPrivate) {
          const unauthenticated = set.props.unauthenticated;
          if (!unauthenticated || typeof unauthenticated !== "string") {
            throw new Error(
              "You must specify an `unauthenticated` route when using PrivateSet"
            );
          }
          wrapped = import_react.default.createElement(import_AuthenticatedRoute.AuthenticatedRoute, { ...set.props, unauthenticated }, wrapped);
        }
        return wrapped;
      }, children);
    });
    function hasCustomRoutes(obj) {
      for (const prop in obj) {
        if (Object.hasOwn(obj, prop)) {
          return true;
        }
      }
      return false;
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/route-announcement.js
var require_route_announcement = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/route-announcement.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var route_announcement_exports = {};
    __export2(route_announcement_exports, {
      default: () => route_announcement_default
    });
    module2.exports = __toCommonJS2(route_announcement_exports);
    var import_react = __toESM2(require_react(), 1);
    var RouteAnnouncement2 = ({
      children,
      visuallyHidden = false,
      ...props
    }) => {
      const hiddenStyle = {
        position: `absolute`,
        top: `0`,
        width: `1`,
        height: `1`,
        padding: `0`,
        overflow: `hidden`,
        clip: `rect(0, 0, 0, 0)`,
        whiteSpace: `nowrap`,
        border: `0`
      };
      return import_react.default.createElement(
        "div",
        {
          ...props,
          "data-redwood-route-announcement": true,
          style: visuallyHidden ? hiddenStyle : {}
        },
        children
      );
    };
    var route_announcement_default = RouteAnnouncement2;
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/route-focus.js
var require_route_focus = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/route-focus.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var route_focus_exports = {};
    __export2(route_focus_exports, {
      default: () => route_focus_default
    });
    module2.exports = __toCommonJS2(route_focus_exports);
    var import_react = __toESM2(require_react(), 1);
    var RouteFocus2 = ({ children, ...props }) => import_react.default.createElement("div", { ...props, "data-redwood-route-focus": true }, children);
    var route_focus_default = RouteFocus2;
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/useRouteName.js
var require_useRouteName = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/useRouteName.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useRouteName_exports = {};
    __export2(useRouteName_exports, {
      useRouteName: () => useRouteName
    });
    module2.exports = __toCommonJS2(useRouteName_exports);
    var import_router_context = require_router_context();
    var import_index = require_cjs2();
    function useRouteName() {
      const routerState = (0, import_router_context.useRouterState)();
      const routeName = routerState.activeRouteName;
      if (isAvailableRouteName(routeName)) {
        return routeName;
      }
      return void 0;
    }
    function isAvailableRouteName(name) {
      return typeof name === "string" && Object.keys(import_index.routes).includes(name);
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/useRoutePaths.js
var require_useRoutePaths = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/useRoutePaths.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useRoutePaths_exports = {};
    __export2(useRoutePaths_exports, {
      useRoutePath: () => useRoutePath,
      useRoutePaths: () => useRoutePaths
    });
    module2.exports = __toCommonJS2(useRoutePaths_exports);
    var import_router_context = require_router_context();
    var import_useRouteName = require_useRouteName();
    function useRoutePaths() {
      const routerState = (0, import_router_context.useRouterState)();
      const routePaths = Object.values(routerState.routes.pathRouteMap).reduce((routePathsAcc, currRoute) => {
        if (currRoute.name) {
          routePathsAcc[currRoute.name] = currRoute.path;
        }
        return routePathsAcc;
      }, {});
      return routePaths;
    }
    function useRoutePath(routeName) {
      const currentRouteName = (0, import_useRouteName.useRouteName)();
      const routePaths = useRoutePaths();
      const name = routeName || currentRouteName;
      if (!name) {
        return void 0;
      }
      return routePaths[name];
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/useBlocker.js
var require_useBlocker = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/useBlocker.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useBlocker_exports = {};
    __export2(useBlocker_exports, {
      useBlocker: () => useBlocker
    });
    module2.exports = __toCommonJS2(useBlocker_exports);
    var import_react = require_react();
    var import_history = require_history();
    function useBlocker({ when }) {
      const [blockerState, setBlockerState] = (0, import_react.useState)("IDLE");
      const [pendingNavigation, setPendingNavigation] = (0, import_react.useState)(null);
      const blockerId = (0, import_react.useId)();
      const blocker = (0, import_react.useCallback)(
        ({ retry }) => {
          if (when) {
            setBlockerState("BLOCKED");
            setPendingNavigation(() => retry);
          } else {
            retry();
          }
        },
        [when]
      );
      (0, import_react.useEffect)(() => {
        if (when) {
          (0, import_history.block)(blockerId, blocker);
        } else {
          (0, import_history.unblock)(blockerId);
        }
        return () => (0, import_history.unblock)(blockerId);
      }, [when, blocker, blockerId]);
      const confirm = (0, import_react.useCallback)(() => {
        setBlockerState("IDLE");
        if (pendingNavigation) {
          pendingNavigation();
          setPendingNavigation(null);
        }
      }, [pendingNavigation]);
      const abort = (0, import_react.useCallback)(() => {
        setBlockerState("IDLE");
        setPendingNavigation(null);
      }, []);
      return { state: blockerState, confirm, abort };
    }
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/skipNav.js
var require_skipNav = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/skipNav.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var skipNav_exports = {};
    __export2(skipNav_exports, {
      SkipNavContent: () => SkipNavContent2,
      SkipNavLink: () => SkipNavLink2
    });
    module2.exports = __toCommonJS2(skipNav_exports);
    var React2 = __toESM2(require_react(), 1);
    var defaultId = "reach-skip-nav";
    var SkipNavLink2 = React2.forwardRef(function SkipNavLink22({ as: Comp = "a", children = "Skip to content", contentId, ...props }, forwardedRef) {
      const id = contentId || defaultId;
      return React2.createElement(
        Comp,
        {
          ...props,
          ref: forwardedRef,
          href: `#${id}`,
          "data-reach-skip-link": "",
          "data-reach-skip-nav-link": ""
        },
        children
      );
    });
    SkipNavLink2.displayName = "SkipNavLink";
    var SkipNavContent2 = React2.forwardRef(function SkipNavContent22({ as: Comp = "div", id: idProp, ...props }, forwardedRef) {
      const id = idProp || defaultId;
      return React2.createElement(
        Comp,
        {
          ...props,
          ref: forwardedRef,
          id,
          "data-reach-skip-nav-content": ""
        }
      );
    });
    SkipNavContent2.displayName = "SkipNavContent";
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/routeParamsTypes.js
var require_routeParamsTypes = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/routeParamsTypes.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var routeParamsTypes_exports = {};
    module2.exports = __toCommonJS2(routeParamsTypes_exports);
  }
});

// ../node_modules/@redwoodjs/router/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "../node_modules/@redwoodjs/router/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Link: () => import_link.Link,
      LocationProvider: () => import_location.LocationProvider,
      NavLink: () => import_navLink.NavLink,
      PageLoadingContextProvider: () => import_PageLoadingContext.PageLoadingContextProvider,
      ParamsContext: () => import_params.ParamsContext,
      ParamsProvider: () => import_params.ParamsProvider,
      Redirect: () => import_redirect.Redirect,
      Route: () => import_Route.Route,
      RouteAnnouncement: () => import_route_announcement.default,
      RouteFocus: () => import_route_focus.default,
      Router: () => import_router.Router,
      SkipNavContent: () => import_skipNav.SkipNavContent,
      SkipNavLink: () => import_skipNav.SkipNavLink,
      back: () => import_history.back,
      getRouteRegexAndParams: () => import_util4.getRouteRegexAndParams,
      matchPath: () => import_util4.matchPath,
      navigate: () => import_history.navigate,
      parseSearch: () => import_util4.parseSearch,
      routes: () => import_namedRoutes.namedRoutes,
      useLocation: () => import_location.useLocation,
      usePageLoadingContext: () => import_PageLoadingContext.usePageLoadingContext,
      useParams: () => import_params.useParams
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_history = require_history();
    var import_navLink = require_navLink();
    var import_link = require_link();
    var import_location = require_location();
    var import_redirect = require_redirect();
    var import_PageLoadingContext = require_PageLoadingContext();
    var import_params = require_params();
    var import_router = require_router();
    var import_Route = require_Route();
    var import_namedRoutes = require_namedRoutes();
    __reExport(src_exports, require_Set(), module2.exports);
    var import_route_announcement = __toESM2(require_route_announcement(), 1);
    __reExport(src_exports, require_route_announcement(), module2.exports);
    var import_route_focus = __toESM2(require_route_focus(), 1);
    __reExport(src_exports, require_route_focus(), module2.exports);
    __reExport(src_exports, require_useRouteName(), module2.exports);
    __reExport(src_exports, require_useRoutePaths(), module2.exports);
    __reExport(src_exports, require_useMatch(), module2.exports);
    __reExport(src_exports, require_useBlocker(), module2.exports);
    var import_util4 = require_util2();
    var import_skipNav = require_skipNav();
    __reExport(src_exports, require_routeParamsTypes(), module2.exports);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/global.web-auto-imports.js
var require_global_web_auto_imports = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/global.web-auto-imports.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var global_web_auto_imports_exports = {};
    module2.exports = __toCommonJS2(global_web_auto_imports_exports);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/config.js
var require_config = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/config.js"() {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    globalThis.RWJS_API_GRAPHQL_URL = RWJS_ENV.RWJS_API_GRAPHQL_URL;
    globalThis.RWJS_API_URL = RWJS_ENV.RWJS_API_URL;
    globalThis.__REDWOOD__APP_TITLE = RWJS_ENV.__REDWOOD__APP_TITLE;
    globalThis.RWJS_EXP_STREAMING_SSR = RWJS_ENV.RWJS_EXP_STREAMING_SSR;
    globalThis.RWJS_EXP_RSC = RWJS_ENV.RWJS_EXP_RSC;
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/FatalErrorBoundary.js
var require_FatalErrorBoundary = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/FatalErrorBoundary.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var FatalErrorBoundary_exports = {};
    __export2(FatalErrorBoundary_exports, {
      FatalErrorBoundary: () => FatalErrorBoundary2
    });
    module2.exports = __toCommonJS2(FatalErrorBoundary_exports);
    var import_react = __toESM2(require_react(), 1);
    var InfallibleErrorBoundary = class extends import_react.default.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "state", { hasError: false });
      }
      static getDerivedStateFromError() {
        return { hasError: true };
      }
      render() {
        if (this.state.hasError) {
          return import_react.default.createElement("h1", null, "Something went wrong and we are unable to show this page.");
        }
        return this.props.children;
      }
    };
    var FatalErrorBoundary2 = class extends import_react.default.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "state", { hasError: false, error: void 0 });
      }
      static getDerivedStateFromError(error) {
        return { hasError: true, error };
      }
      render() {
        const { page: Page } = this.props;
        if (this.state.hasError) {
          return import_react.default.createElement(InfallibleErrorBoundary, null, import_react.default.createElement(Page, { error: this.state.error }));
        }
        return this.props.children;
      }
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/FetchConfigProvider.js
var require_FetchConfigProvider = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/FetchConfigProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var FetchConfigProvider_exports = {};
    __export2(FetchConfigProvider_exports, {
      FetchConfigContext: () => FetchConfigContext,
      FetchConfigProvider: () => FetchConfigProvider2,
      getApiGraphQLUrl: () => getApiGraphQLUrl,
      useFetchConfig: () => useFetchConfig2
    });
    module2.exports = __toCommonJS2(FetchConfigProvider_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_auth = require_cjs();
    var getApiGraphQLUrl = () => {
      return globalThis.RWJS_API_GRAPHQL_URL;
    };
    var FetchConfigContext = import_react.default.createContext({
      uri: getApiGraphQLUrl()
    });
    var FetchConfigProvider2 = ({
      useAuth: useAuth2 = import_auth.useNoAuth,
      ...rest
    }) => {
      const { isAuthenticated, type } = useAuth2();
      if (!isAuthenticated) {
        return import_react.default.createElement(
          FetchConfigContext.Provider,
          {
            value: { uri: getApiGraphQLUrl() },
            ...rest
          }
        );
      }
      const headers = {
        "auth-provider": type
      };
      return import_react.default.createElement(
        FetchConfigContext.Provider,
        {
          value: {
            uri: getApiGraphQLUrl(),
            headers
          },
          ...rest
        }
      );
    };
    var useFetchConfig2 = () => import_react.default.useContext(FetchConfigContext);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/GraphQLHooksProvider.js
var require_GraphQLHooksProvider = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/GraphQLHooksProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var GraphQLHooksProvider_exports = {};
    __export2(GraphQLHooksProvider_exports, {
      GraphQLHooksContext: () => GraphQLHooksContext,
      GraphQLHooksProvider: () => GraphQLHooksProvider2,
      useBackgroundQuery: () => useBackgroundQuery,
      useMutation: () => useMutation2,
      useQuery: () => useQuery2,
      useReadQuery: () => useReadQuery,
      useSubscription: () => useSubscription2,
      useSuspenseQuery: () => useSuspenseQuery
    });
    module2.exports = __toCommonJS2(GraphQLHooksProvider_exports);
    var import_react = __toESM2(require_react(), 1);
    var GraphQLHooksContext = import_react.default.createContext({
      useQuery: () => {
        throw new Error(
          "You must register a useQuery hook via the `GraphQLHooksProvider`"
        );
      },
      useMutation: () => {
        throw new Error(
          "You must register a useMutation hook via the `GraphQLHooksProvider`"
        );
      },
      useSubscription: () => {
        throw new Error(
          "You must register a useSubscription hook via the `GraphQLHooksProvider`"
        );
      },
      useSuspenseQuery: () => {
        throw new Error(
          "You must register a useSuspenseQuery hook via the `GraphQLHooksProvider`."
        );
      },
      //  These are apollo specific hooks!
      useBackgroundQuery: () => {
        throw new Error(
          "You must register a useBackgroundQuery hook via the `GraphQLHooksProvider`."
        );
      },
      useReadQuery: () => {
        throw new Error(
          "You must register a useReadQuery hook via the `GraphQLHooksProvider`."
        );
      }
    });
    var GraphQLHooksProvider2 = ({
      useQuery: useQuery22,
      useMutation: useMutation22,
      useSubscription: useSubscription22,
      useSuspenseQuery: useSuspenseQuery2,
      useBackgroundQuery: useBackgroundQuery2,
      useReadQuery: useReadQuery2,
      children
    }) => {
      return import_react.default.createElement(
        GraphQLHooksContext.Provider,
        {
          value: {
            useQuery: useQuery22,
            useMutation: useMutation22,
            useSubscription: useSubscription22,
            useSuspenseQuery: useSuspenseQuery2,
            useBackgroundQuery: useBackgroundQuery2,
            useReadQuery: useReadQuery2
          }
        },
        children
      );
    };
    function useQuery2(query, options) {
      return import_react.default.useContext(GraphQLHooksContext).useQuery(
        query,
        options
      );
    }
    function useMutation2(mutation, options) {
      return import_react.default.useContext(GraphQLHooksContext).useMutation(
        mutation,
        options
      );
    }
    function useSubscription2(query, options) {
      return import_react.default.useContext(GraphQLHooksContext).useSubscription(query, options);
    }
    function useSuspenseQuery(query, options) {
      return import_react.default.useContext(GraphQLHooksContext).useSuspenseQuery(query, options);
    }
    var useBackgroundQuery = (...args) => {
      return import_react.default.useContext(GraphQLHooksContext).useBackgroundQuery(
        ...args
      );
    };
    var useReadQuery = (...args) => {
      return import_react.default.useContext(GraphQLHooksContext).useReadQuery(...args);
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/cell/CellCacheContext.js
var require_CellCacheContext = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/cell/CellCacheContext.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var CellCacheContext_exports = {};
    __export2(CellCacheContext_exports, {
      CellCacheContextProvider: () => CellCacheContextProvider,
      useCellCacheContext: () => useCellCacheContext
    });
    module2.exports = __toCommonJS2(CellCacheContext_exports);
    var import_react = __toESM2(require_react(), 1);
    var CellCacheContext = (0, import_react.createContext)(void 0);
    var CellCacheContextProvider = ({ queryCache, children }) => {
      return import_react.default.createElement(CellCacheContext.Provider, { value: { queryCache } }, children);
    };
    function useCellCacheContext() {
      const context2 = (0, import_react.useContext)(CellCacheContext);
      if (!context2) {
        throw new Error(
          "useCellCacheContext must be used within a CellCacheContextProvider"
        );
      }
      return context2;
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/apollo/fragmentRegistry.js
var require_fragmentRegistry = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/apollo/fragmentRegistry.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var fragmentRegistry_exports = {};
    __export2(fragmentRegistry_exports, {
      fragmentRegistry: () => fragmentRegistry2,
      registerFragment: () => registerFragment2,
      registerFragments: () => registerFragments2
    });
    module2.exports = __toCommonJS2(fragmentRegistry_exports);
    var apolloClient = __toESM2((init_client(), __toCommonJS(client_exports)), 1);
    var import_cache = require_cache();
    var import_utilities = require_utilities();
    var getTypenameFromFragment = (fragment) => {
      const [definition] = (0, import_utilities.getFragmentDefinitions)(fragment);
      return definition.typeCondition.name.value;
    };
    var useRegisteredFragmentHook = (fragment, id) => {
      const from = { __typename: getTypenameFromFragment(fragment), id };
      return apolloClient.useFragment({
        fragment,
        from
      });
    };
    var fragmentRegistry2 = (0, import_cache.createFragmentRegistry)();
    var registerFragments2 = (fragments) => {
      return fragments.map(registerFragment2);
    };
    var registerFragment2 = (fragment) => {
      fragmentRegistry2.register(fragment);
      const typename = getTypenameFromFragment(fragment);
      const getCacheKey = (id) => {
        return { __typename: typename, id };
      };
      const useRegisteredFragment = (id) => {
        return useRegisteredFragmentHook(fragment, id);
      };
      return {
        fragment,
        typename,
        getCacheKey,
        useRegisteredFragment
      };
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/graphql.js
var require_graphql = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/graphql.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var graphql_exports2 = {};
    __export2(graphql_exports2, {
      getOperationName: () => getOperationName
    });
    module2.exports = __toCommonJS2(graphql_exports2);
    var import_graphql = (init_graphql(), __toCommonJS(graphql_exports));
    function getOperationName(document2) {
      var _a2;
      for (const definition of document2.definitions) {
        if (definition.kind === import_graphql.Kind.OPERATION_DEFINITION && ((_a2 = definition.name) == null ? void 0 : _a2.value)) {
          return definition.name.value;
        }
      }
      return "";
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/cell/CellErrorBoundary.js
var require_CellErrorBoundary = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/cell/CellErrorBoundary.js"(exports, module2) {
    "use strict";
    "use client";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var CellErrorBoundary_exports = {};
    __export2(CellErrorBoundary_exports, {
      CellErrorBoundary: () => CellErrorBoundary
    });
    module2.exports = __toCommonJS2(CellErrorBoundary_exports);
    var import_react = __toESM2(require_react(), 1);
    var CellErrorBoundary = class extends import_react.default.Component {
      constructor(props) {
        super(props);
        this.state = { hasError: false };
      }
      static getDerivedStateFromError(error) {
        return { hasError: true, error };
      }
      componentDidCatch(error, errorInfo) {
        console.log("Cell failure: ", {
          error,
          errorInfo
        });
      }
      render() {
        const { renderFallback } = this.props;
        if (this.state.hasError) {
          return renderFallback({
            error: this.state.error,
            resetErrorBoundary: () => {
              this.setState({ hasError: false, error: void 0 });
            }
          });
        }
        return this.props.children;
      }
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/cell/isCellEmpty.js
var require_isCellEmpty = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/cell/isCellEmpty.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var isCellEmpty_exports = {};
    __export2(isCellEmpty_exports, {
      isDataEmpty: () => isDataEmpty
    });
    module2.exports = __toCommonJS2(isCellEmpty_exports);
    function isDataEmpty(data) {
      return !data || Object.values(data).every((fieldValue) => {
        return fieldValue === null || isFieldEmptyArray(fieldValue);
      });
    }
    function isFieldEmptyArray(field) {
      return Array.isArray(field) && field.length === 0;
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/cell/createSuspendingCell.js
var require_createSuspendingCell = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/cell/createSuspendingCell.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var createSuspendingCell_exports = {};
    __export2(createSuspendingCell_exports, {
      createSuspendingCell: () => createSuspendingCell
    });
    module2.exports = __toCommonJS2(createSuspendingCell_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_hooks = require_hooks();
    var import_GraphQLHooksProvider = require_GraphQLHooksProvider();
    var import_CellErrorBoundary = require_CellErrorBoundary();
    var import_isCellEmpty = require_isCellEmpty();
    function createSuspendingCell(createCellProps) {
      const {
        QUERY,
        beforeQuery = (props) => ({
          // By default, we assume that the props are the gql-variables.
          variables: props,
          /**
           * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
           * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
           *
           * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
           */
          fetchPolicy: "cache-and-network",
          notifyOnNetworkStatusChange: true
        }),
        afterQuery = (data) => ({ ...data }),
        isEmpty = import_isCellEmpty.isDataEmpty,
        Loading,
        Failure,
        Empty,
        Success,
        displayName = "Cell"
      } = createCellProps;
      function SuspendingSuccess(props) {
        const { queryRef, suspenseQueryResult, userProps } = props;
        const { data, networkStatus } = (0, import_GraphQLHooksProvider.useReadQuery)(queryRef);
        const afterQueryData = afterQuery(data);
        const queryResultWithNetworkStatus = {
          ...suspenseQueryResult,
          networkStatus
        };
        if (isEmpty(data, { isDataEmpty: import_isCellEmpty.isDataEmpty }) && Empty) {
          return import_react.default.createElement(
            Empty,
            {
              ...userProps,
              ...afterQueryData,
              queryResult: queryResultWithNetworkStatus
            }
          );
        }
        return import_react.default.createElement(
          Success,
          {
            ...afterQueryData,
            ...userProps,
            queryResult: queryResultWithNetworkStatus
          }
        );
      }
      SuspendingSuccess.displayName = displayName;
      return (props) => {
        const { children: _, ...variables } = props;
        const options = beforeQuery(variables);
        const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
        const [queryRef, other] = (0, import_GraphQLHooksProvider.useBackgroundQuery)(query, options);
        const client = (0, import_hooks.useApolloClient)();
        const suspenseQueryResult = {
          client,
          ...other,
          called: !!queryRef
        };
        const FailureComponent = ({ error, resetErrorBoundary }) => {
          var _a2, _b, _c;
          if (!Failure) {
            if (error) {
              throw error;
            }
            throw new Error("Unreachable code: FailureComponent without a Failure");
          }
          const queryResultWithErrorReset = {
            ...suspenseQueryResult,
            refetch: (variables2) => {
              var _a3;
              resetErrorBoundary();
              return (_a3 = suspenseQueryResult.refetch) == null ? void 0 : _a3.call(suspenseQueryResult, variables2);
            }
          };
          return import_react.default.createElement(
            Failure,
            {
              error,
              errorCode: (_c = (_b = (_a2 = error == null ? void 0 : error.graphQLErrors) == null ? void 0 : _a2[0]) == null ? void 0 : _b.extensions) == null ? void 0 : _c["code"],
              queryResult: queryResultWithErrorReset
            }
          );
        };
        const wrapInSuspenseIfLoadingPresent = (suspendingSuccessElement, LoadingComponent) => {
          if (!LoadingComponent) {
            return suspendingSuccessElement;
          }
          return import_react.default.createElement(
            import_react.Suspense,
            {
              fallback: import_react.default.createElement(LoadingComponent, { ...props, queryResult: suspenseQueryResult })
            },
            suspendingSuccessElement
          );
        };
        return import_react.default.createElement(import_CellErrorBoundary.CellErrorBoundary, { renderFallback: FailureComponent }, wrapInSuspenseIfLoadingPresent(
          import_react.default.createElement(
            SuspendingSuccess,
            {
              userProps: props,
              queryRef,
              suspenseQueryResult
            }
          ),
          Loading
        ));
      };
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/cell/createCell.js
var require_createCell = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/cell/createCell.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var createCell_exports = {};
    __export2(createCell_exports, {
      createCell: () => createCell2
    });
    module2.exports = __toCommonJS2(createCell_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_fragmentRegistry = require_fragmentRegistry();
    var import_graphql = require_graphql();
    var import_GraphQLHooksProvider = require_GraphQLHooksProvider();
    var import_CellCacheContext = require_CellCacheContext();
    var import_createSuspendingCell = require_createSuspendingCell();
    var import_isCellEmpty = require_isCellEmpty();
    var createCell2 = RWJS_ENV.RWJS_EXP_STREAMING_SSR ? import_createSuspendingCell.createSuspendingCell : createNonSuspendingCell;
    function createNonSuspendingCell({
      QUERY,
      beforeQuery = (props) => ({
        // By default, we assume that the props are the gql-variables.
        variables: props,
        /**
         * We're duplicating these props here due to a suspected bug in Apollo Client v3.5.4
         * (it doesn't seem to be respecting `defaultOptions` in `RedwoodApolloProvider`.)
         *
         * @see {@link https://github.com/apollographql/apollo-client/issues/9105}
         */
        fetchPolicy: "cache-and-network",
        notifyOnNetworkStatusChange: true
      }),
      afterQuery = (data) => ({ ...data }),
      isEmpty = import_isCellEmpty.isDataEmpty,
      Loading = () => import_react.default.createElement(import_react.default.Fragment, null, "Loading..."),
      Failure,
      Empty,
      Success,
      displayName = "Cell"
    }) {
      function NamedCell(props) {
        var _a2, _b, _c;
        const { children: _, ...variables } = props;
        const options = beforeQuery(variables);
        const query = typeof QUERY === "function" ? QUERY(options) : QUERY;
        let {
          // eslint-disable-next-line prefer-const
          error,
          loading,
          data,
          ...queryResult
        } = (0, import_GraphQLHooksProvider.useQuery)(query, options);
        if (globalThis.__REDWOOD__PRERENDERING) {
          const { queryCache } = (0, import_CellCacheContext.useCellCacheContext)();
          const operationName = (0, import_graphql.getOperationName)(query);
          const transformedQuery = import_fragmentRegistry.fragmentRegistry.transform(query);
          let cacheKey;
          if (operationName) {
            cacheKey = operationName + "_" + JSON.stringify(variables);
          } else {
            const cellName = displayName === "Cell" ? "the cell" : displayName;
            throw new Error(
              `The gql query in ${cellName} is missing an operation name. Something like FindBlogPostQuery in \`query FindBlogPostQuery($id: Int!)\``
            );
          }
          const queryInfo = queryCache[cacheKey];
          if (queryInfo == null ? void 0 : queryInfo.renderLoading) {
            loading = true;
          } else {
            if (queryInfo == null ? void 0 : queryInfo.hasProcessed) {
              loading = false;
              data = queryInfo.data;
              queryResult = { variables };
            } else {
              queryCache[cacheKey] || (queryCache[cacheKey] = {
                query: transformedQuery,
                variables: options.variables,
                hasProcessed: false
              });
            }
          }
        }
        if (error) {
          if (Failure) {
            return import_react.default.createElement(
              Failure,
              {
                error,
                errorCode: (
                  // Use the ad-hoc QueryResultWithErrorCode type to access the errorCode
                  queryResult.errorCode ?? ((_c = (_b = (_a2 = error.graphQLErrors) == null ? void 0 : _a2[0]) == null ? void 0 : _b.extensions) == null ? void 0 : _c["code"])
                ),
                ...props,
                updating: loading,
                queryResult
              }
            );
          } else {
            throw error;
          }
        } else if (data) {
          const afterQueryData = afterQuery(data);
          if (isEmpty(data, { isDataEmpty: import_isCellEmpty.isDataEmpty }) && Empty) {
            return import_react.default.createElement(
              Empty,
              {
                ...props,
                ...afterQueryData,
                updating: loading,
                queryResult
              }
            );
          } else {
            return import_react.default.createElement(
              Success,
              {
                ...props,
                ...afterQueryData,
                updating: loading,
                queryResult
              }
            );
          }
        } else if (loading) {
          return import_react.default.createElement(Loading, { ...props, queryResult });
        } else {
          console.warn(
            `If you're using Apollo Client, check for its debug logs here in the console, which may help explain the error.`
          );
          throw new Error(
            "Cannot render Cell: reached an unexpected state where the query succeeded but `data` is `null`. If this happened in Storybook, your query could be missing fields; otherwise this is most likely a GraphQL caching bug. Note that adding an `id` field to all the fields on your query may fix the issue."
          );
        }
      }
      NamedCell.displayName = displayName;
      return (props) => {
        return import_react.default.createElement(NamedCell, { ...props });
      };
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/RedwoodProvider.js
var require_RedwoodProvider = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/RedwoodProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var RedwoodProvider_exports = {};
    __export2(RedwoodProvider_exports, {
      RedwoodProvider: () => RedwoodProvider
    });
    module2.exports = __toCommonJS2(RedwoodProvider_exports);
    var import_react = __toESM2(require_react(), 1);
    var helmetPkg = __toESM2((init_index_esm(), __toCommonJS(index_esm_exports)), 1);
    var { Helmet, HelmetProvider } = helmetPkg;
    var RedwoodProvider = ({
      children,
      titleTemplate
    }) => {
      const appTitle = globalThis.__REDWOOD__APP_TITLE;
      const template = () => {
        if (titleTemplate) {
          let template2 = titleTemplate.replace(/%AppTitle/g, appTitle);
          template2 = template2.replace(/%PageTitle/g, "%s");
          return template2;
        }
        return "";
      };
      if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
        return import_react.default.createElement(import_react.default.Fragment, null, children);
      }
      return import_react.default.createElement(HelmetProvider, { context: globalThis.__REDWOOD__HELMET_CONTEXT }, import_react.default.createElement(Helmet, { titleTemplate: template(), defaultTitle: appTitle }, import_react.default.createElement("title", null, appTitle)), children);
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/ServerInject.js
var require_ServerInject = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/ServerInject.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var ServerInject_exports = {};
    __export2(ServerInject_exports, {
      ServerHtmlContext: () => ServerHtmlContext,
      ServerHtmlProvider: () => ServerHtmlProvider,
      ServerInjectedHtml: () => ServerInjectedHtml,
      createInjector: () => createInjector,
      useServerInsertedHTML: () => useServerInsertedHTML
    });
    module2.exports = __toCommonJS2(ServerInject_exports);
    var import_react = __toESM2(require_react(), 1);
    var ServerHtmlContext = (0, import_react.createContext)(() => {
    });
    var createInjector = () => {
      const injectionState = /* @__PURE__ */ new Set([]);
      const injectToPage = (renderCallback) => {
        injectionState.add(renderCallback);
      };
      return { injectToPage, injectionState };
    };
    var ServerHtmlProvider = ServerHtmlContext.Provider;
    var ServerInjectedHtml = ({
      injectionState
    }) => {
      const serverInsertedHtml = [];
      for (const callback of injectionState) {
        serverInsertedHtml.push(callback());
        injectionState.delete(callback);
      }
      const fragmentId = (0, import_react.useId)();
      return serverInsertedHtml.map((html, i) => {
        return import_react.default.createElement(import_react.Fragment, { key: `rw-server-inserted-${fragmentId}-${i}` }, html);
      });
    };
    function useServerInsertedHTML(callback) {
      const addInsertedServerHTMLCallback = (0, import_react.useContext)(ServerHtmlContext);
      if (addInsertedServerHTMLCallback) {
        addInsertedServerHTMLCallback(callback);
      }
    }
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/PortalHead.js
var require_PortalHead = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/PortalHead.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var PortalHead_exports = {};
    __export2(PortalHead_exports, {
      default: () => PortalHead_default
    });
    module2.exports = __toCommonJS2(PortalHead_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_react_dom2 = require_react_dom();
    var import_ServerInject = require_ServerInject();
    function addDataAttributeMarker(children, marker = "data-rwjs-head") {
      return import_react.default.Children.toArray(children).map((child, i) => {
        return import_react.default.cloneElement(child, {
          [marker]: true,
          key: `${marker}-` + i
        });
      });
    }
    var PortalHead = ({ children }) => {
      const isServerRendering = typeof window === "undefined";
      (0, import_ServerInject.useServerInsertedHTML)(() => {
        return addDataAttributeMarker(children);
      });
      const shouldPortal = import_react.default.useRef(
        isServerRendering ? false : document.readyState === "complete"
      );
      if (isServerRendering) {
        return null;
      } else {
        return shouldPortal.current ? (0, import_react_dom2.createPortal)(children, document.head) : null;
      }
    };
    var PortalHead_default = PortalHead;
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/MetaTags.js
var require_MetaTags = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/MetaTags.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var MetaTags_exports = {};
    __export2(MetaTags_exports, {
      MetaTags: () => MetaTags
    });
    module2.exports = __toCommonJS2(MetaTags_exports);
    var import_react = __toESM2(require_react(), 1);
    var helmetPkg = __toESM2((init_index_esm(), __toCommonJS(index_esm_exports)), 1);
    var import_PortalHead = __toESM2(require_PortalHead(), 1);
    var { Helmet: HelmetHead } = helmetPkg;
    var MetaTags = (props) => {
      const {
        tag = "og:image",
        ogType = "website",
        ogContentUrl,
        robots,
        contentType,
        ogWidth,
        ogHeight,
        ogUrl,
        title,
        locale,
        description,
        author,
        children
      } = props;
      let Head2 = HelmetHead;
      if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
        Head2 = import_PortalHead.default;
      }
      return import_react.default.createElement(import_react.default.Fragment, null, title && import_react.default.createElement(Head2, null, import_react.default.createElement("title", null, title), import_react.default.createElement("meta", { property: "og:title", content: title, key: "title" }), import_react.default.createElement("meta", { property: "twitter:title", content: title })), description && import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { name: "description", content: description }), import_react.default.createElement("meta", { name: "twitter:description", content: description }), import_react.default.createElement("meta", { property: "og:description", content: description })), author && import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { name: "author", content: author }), import_react.default.createElement("meta", { name: "twitter:site", content: author }), import_react.default.createElement("meta", { name: "twitter:creator", content: author })), ogUrl && import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { property: "og:url", content: ogUrl })), locale && import_react.default.createElement(Head2, null, import_react.default.createElement("html", { lang: locale }), import_react.default.createElement("meta", { property: "og:locale", content: locale })), import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { property: "og:type", content: ogType })), ogContentUrl && import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { property: tag, content: ogContentUrl })), contentType && import_react.default.createElement(Head2, null, import_react.default.createElement("meta", { property: `${tag}:type`, content: contentType })), tag === "og:image" && import_react.default.createElement(Head2, null, ogWidth && import_react.default.createElement("meta", { property: "image:width", content: ogWidth }), ogHeight && import_react.default.createElement("meta", { property: "image:height", content: ogHeight }), import_react.default.createElement("meta", { property: "twitter:card", content: "summary_large_image" }), import_react.default.createElement("meta", { property: "twitter:image", content: ogContentUrl })), robots && import_react.default.createElement(Head2, null, import_react.default.createElement(
        "meta",
        {
          name: "robots",
          content: Array.isArray(robots) ? robots.join(", ") : robots
        }
      )), children);
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/Metadata.js
var require_Metadata = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/Metadata.js"(exports, module2) {
    "use strict";
    "use client";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var Metadata_exports = {};
    __export2(Metadata_exports, {
      Metadata: () => Metadata
    });
    module2.exports = __toCommonJS2(Metadata_exports);
    var import_react = __toESM2(require_react(), 1);
    var helmetPkg = __toESM2((init_index_esm(), __toCommonJS(index_esm_exports)), 1);
    var import_PortalHead = __toESM2(require_PortalHead(), 1);
    var { Helmet: HelmetHead } = helmetPkg;
    var EXCLUDE_PROPS = ["charSet"];
    var propToMetaTag = (parentKey, parentValue, options) => {
      if (Array.isArray(parentValue)) {
        return parentValue.flatMap((value) => {
          return propToMetaTag(parentKey, value, options);
        });
      } else if (typeof parentValue === "object") {
        return Object.entries(parentValue).filter(([_, v]) => v !== null).flatMap(([key, value]) => {
          return propToMetaTag(`${parentKey}:${key}`, value, { attr: "property" });
        });
      } else {
        const attributes = {
          [options["attr"]]: parentKey,
          content: parentValue
        };
        return import_react.default.createElement("meta", { ...attributes });
      }
    };
    var Metadata = (props) => {
      const { children, ...metaProps } = props;
      let Head2 = HelmetHead;
      if (RWJS_ENV.RWJS_EXP_STREAMING_SSR) {
        Head2 = import_PortalHead.default;
      }
      const tags = Object.entries(metaProps).filter(
        ([key, value]) => !EXCLUDE_PROPS.includes(key) && value !== null && (key !== "og" || value !== true)
      ).flatMap(([key, value]) => {
        return propToMetaTag(key, value, { attr: "name" });
      }).filter((tag) => !!tag);
      if (metaProps.title) {
        ;
        [metaProps.title].flat().reverse().map((title) => {
          tags.unshift(import_react.default.createElement("title", null, title));
        });
      }
      if (metaProps.charSet) {
        tags.push(import_react.default.createElement("meta", { charSet: metaProps.charSet }));
      }
      if (metaProps.og) {
        if (metaProps.title && !metaProps.og.title && metaProps.og.title !== null) {
          tags.push(import_react.default.createElement("meta", { property: "og:title", content: metaProps.title }));
        }
        if (metaProps.description && !metaProps.og.description && metaProps.og.description !== null) {
          tags.push(
            import_react.default.createElement("meta", { property: "og:description", content: metaProps.description })
          );
        }
        if (!metaProps.og.type && metaProps.og.type !== null) {
          tags.push(import_react.default.createElement("meta", { property: "og:type", content: "website" }));
        }
      }
      return import_react.default.createElement(Head2, null, tags.map((tag, i) => import_react.default.cloneElement(tag, { key: i })), children);
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/components/htmlTags.js
var require_htmlTags = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/components/htmlTags.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var htmlTags_exports = {};
    __export2(htmlTags_exports, {
      Css: () => Css,
      Meta: () => Meta
    });
    module2.exports = __toCommonJS2(htmlTags_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_react2 = require_react();
    var extractCssFromAssetMap = () => {
      var _a2;
      if (typeof window !== "undefined") {
        return (_a2 = window.__REDWOOD__ASSET_MAP) == null ? void 0 : _a2.css;
      }
      return void 0;
    };
    var extractMetaFromAssetMap = () => {
      var _a2;
      if (typeof window !== "undefined") {
        return (_a2 = window.__REDWOOD__ASSET_MAP) == null ? void 0 : _a2.meta;
      }
      return void 0;
    };
    function addSlashIfNeeded(path) {
      if (path.startsWith("http") || path.startsWith("/")) {
        return path;
      } else {
        return "/" + path;
      }
    }
    var Css = ({ css }) => {
      const cssLinks = (css || extractCssFromAssetMap() || []).map(addSlashIfNeeded);
      return import_react.default.createElement(import_react.default.Fragment, null, cssLinks.map((cssLink, index) => {
        return import_react.default.createElement("link", { rel: "stylesheet", key: `css-${index}`, href: `${cssLink}` });
      }));
    };
    var Meta = ({ tags }) => {
      const metaTags = tags || extractMetaFromAssetMap() || [];
      return import_react.default.createElement(import_react.default.Fragment, null, metaTags.map((tag, index) => {
        if (!tag) {
          return null;
        }
        if (isTitleTag(tag)) {
          return import_react.default.createElement(import_react2.Fragment, { key: "title" }, import_react.default.createElement("title", null, tag.title), import_react.default.createElement("meta", { property: "og:title", content: tag.title }));
        }
        if (otherTag(tag)) {
          const { tagType: TagName, ...rest } = tag;
          return import_react.default.createElement(TagName, { key: `meta-${index}`, ...rest });
        }
        return import_react.default.createElement("meta", { key: `meta-${index}`, ...tag });
      }));
    };
    var isTitleTag = (tag) => {
      return "title" in tag;
    };
    var otherTag = (tag) => {
      return "tagType" in tag;
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/routeHooks.types.js
var require_routeHooks_types = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/routeHooks.types.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var routeHooks_types_exports = {};
    module2.exports = __toCommonJS2(routeHooks_types_exports);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      FatalErrorBoundary: () => import_FatalErrorBoundary.FatalErrorBoundary,
      FetchConfigProvider: () => import_FetchConfigProvider.FetchConfigProvider,
      GraphQLHooksProvider: () => import_GraphQLHooksProvider.GraphQLHooksProvider,
      Head: () => Helmet,
      Helmet: () => Helmet,
      createCell: () => import_createCell.createCell,
      useFetchConfig: () => import_FetchConfigProvider.useFetchConfig,
      useMutation: () => import_GraphQLHooksProvider.useMutation,
      useQuery: () => import_GraphQLHooksProvider.useQuery,
      useSubscription: () => import_GraphQLHooksProvider.useSubscription
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_global_web_auto_imports = require_global_web_auto_imports();
    var import_config = require_config();
    var import_FatalErrorBoundary = require_FatalErrorBoundary();
    var import_FetchConfigProvider = require_FetchConfigProvider();
    var import_GraphQLHooksProvider = require_GraphQLHooksProvider();
    __reExport(src_exports, require_CellCacheContext(), module2.exports);
    var import_createCell = require_createCell();
    __reExport(src_exports, require_graphql(), module2.exports);
    __reExport(src_exports, require_RedwoodProvider(), module2.exports);
    __reExport(src_exports, require_MetaTags(), module2.exports);
    __reExport(src_exports, require_Metadata(), module2.exports);
    var helmetPkg = __toESM2((init_index_esm(), __toCommonJS(index_esm_exports)), 1);
    __reExport(src_exports, require_htmlTags(), module2.exports);
    __reExport(src_exports, require_routeHooks_types(), module2.exports);
    __reExport(src_exports, require_ServerInject(), module2.exports);
    var { Helmet } = helmetPkg;
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/apollo/typeOverride.js
var require_typeOverride = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/apollo/typeOverride.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var typeOverride_exports = {};
    module2.exports = __toCommonJS2(typeOverride_exports);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/bundled/apollo-upload-client.js
var require_apollo_upload_client = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/bundled/apollo-upload-client.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var apollo_upload_client_exports = {};
    __export2(apollo_upload_client_exports, {
      createUploadLink: () => createUploadLink
    });
    module2.exports = __toCommonJS2(apollo_upload_client_exports);
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    }
    var genericMessage = "Invariant Violation";
    var _a2 = Object.setPrototypeOf;
    var setPrototypeOf = _a2 === void 0 ? function(obj, proto) {
      obj.__proto__ = proto;
      return obj;
    } : _a2;
    var InvariantError = (
      /** @class */
      function(_super) {
        __extends(InvariantError2, _super);
        function InvariantError2(message) {
          if (message === void 0) {
            message = genericMessage;
          }
          var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
          _this.framesToPop = 1;
          _this.name = genericMessage;
          setPrototypeOf(_this, InvariantError2.prototype);
          return _this;
        }
        return InvariantError2;
      }(Error)
    );
    function invariant(condition, message) {
      if (!condition) {
        throw new InvariantError(message);
      }
    }
    var verbosityLevels = ["debug", "log", "warn", "error", "silent"];
    var verbosityLevel = verbosityLevels.indexOf("log");
    function wrapConsoleMethod(name) {
      return function() {
        if (verbosityLevels.indexOf(name) >= verbosityLevel) {
          var method = console[name] || console.log;
          return method.apply(console, arguments);
        }
      };
    }
    (function(invariant4) {
      invariant4.debug = wrapConsoleMethod("debug");
      invariant4.log = wrapConsoleMethod("log");
      invariant4.warn = wrapConsoleMethod("warn");
      invariant4.error = wrapConsoleMethod("error");
    })(invariant || (invariant = {}));
    var version = "3.11.1";
    function maybe(thunk) {
      try {
        return thunk();
      } catch (_a22) {
      }
    }
    var global_default = maybe(function() {
      return globalThis;
    }) || maybe(function() {
      return window;
    }) || maybe(function() {
      return self;
    }) || maybe(function() {
      return global;
    }) || // We don't expect the Function constructor ever to be invoked at runtime, as
    // long as at least one of globalThis, window, self, or global is defined, so
    // we are under no obligation to make it easy for static analysis tools to
    // detect syntactic usage of the Function constructor. If you think you can
    // improve your static analysis to detect this obfuscation, think again. This
    // is an arms race you cannot win, at least not in JavaScript.
    maybe(function() {
      return maybe.constructor("return this")();
    });
    var prefixCounts = /* @__PURE__ */ new Map();
    function makeUniqueId(prefix) {
      var count = prefixCounts.get(prefix) || 1;
      prefixCounts.set(prefix, count + 1);
      return "".concat(prefix, ":").concat(count, ":").concat(Math.random().toString(36).slice(2));
    }
    function stringifyForDisplay(value, space) {
      if (space === void 0) {
        space = 0;
      }
      var undefId = makeUniqueId("stringifyForDisplay");
      return JSON.stringify(value, function(key, value2) {
        return value2 === void 0 ? undefId : value2;
      }, space).split(JSON.stringify(undefId)).join("<undefined>");
    }
    function wrap(fn) {
      return function(message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        if (typeof message === "number") {
          var arg0 = message;
          message = getHandledErrorMsg(arg0);
          if (!message) {
            message = getFallbackErrorMsg(arg0, args);
            args = [];
          }
        }
        fn.apply(void 0, [message].concat(args));
      };
    }
    var invariant2 = Object.assign(function invariant3(condition, message) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (!condition) {
        invariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));
      }
    }, {
      debug: wrap(invariant.debug),
      log: wrap(invariant.log),
      warn: wrap(invariant.warn),
      error: wrap(invariant.error)
    });
    function newInvariantError(message) {
      var optionalParams = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        optionalParams[_i - 1] = arguments[_i];
      }
      return new InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));
    }
    var ApolloErrorMessageHandler = Symbol.for("ApolloErrorMessageHandler_" + version);
    function stringify(arg) {
      if (typeof arg == "string") {
        return arg;
      }
      try {
        return stringifyForDisplay(arg, 2).slice(0, 1e3);
      } catch (_a22) {
        return "<non-serializable>";
      }
    }
    function getHandledErrorMsg(message, messageArgs) {
      if (messageArgs === void 0) {
        messageArgs = [];
      }
      if (!message)
        return;
      return global_default[ApolloErrorMessageHandler] && global_default[ApolloErrorMessageHandler](message, messageArgs.map(stringify));
    }
    function getFallbackErrorMsg(message, messageArgs) {
      if (messageArgs === void 0) {
        messageArgs = [];
      }
      if (!message)
        return;
      return "An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#".concat(encodeURIComponent(JSON.stringify({
        version,
        message,
        args: messageArgs.map(stringify)
      })));
    }
    var DEV = globalThis.__DEV__ !== false;
    function devAssert(condition, message) {
      const booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message);
      }
    }
    var QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are deprecated and will removed in v17.0.0
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    var kindValues = new Set(Object.keys(QueryDocumentKeys));
    function isNode(maybeNode) {
      const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
      return typeof maybeKind === "string" && kindValues.has(maybeKind);
    }
    var OperationTypeNode;
    (function(OperationTypeNode2) {
      OperationTypeNode2["QUERY"] = "query";
      OperationTypeNode2["MUTATION"] = "mutation";
      OperationTypeNode2["SUBSCRIPTION"] = "subscription";
    })(OperationTypeNode || (OperationTypeNode = {}));
    var Kind;
    (function(Kind2) {
      Kind2["NAME"] = "Name";
      Kind2["DOCUMENT"] = "Document";
      Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
      Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
      Kind2["SELECTION_SET"] = "SelectionSet";
      Kind2["FIELD"] = "Field";
      Kind2["ARGUMENT"] = "Argument";
      Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
      Kind2["INLINE_FRAGMENT"] = "InlineFragment";
      Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
      Kind2["VARIABLE"] = "Variable";
      Kind2["INT"] = "IntValue";
      Kind2["FLOAT"] = "FloatValue";
      Kind2["STRING"] = "StringValue";
      Kind2["BOOLEAN"] = "BooleanValue";
      Kind2["NULL"] = "NullValue";
      Kind2["ENUM"] = "EnumValue";
      Kind2["LIST"] = "ListValue";
      Kind2["OBJECT"] = "ObjectValue";
      Kind2["OBJECT_FIELD"] = "ObjectField";
      Kind2["DIRECTIVE"] = "Directive";
      Kind2["NAMED_TYPE"] = "NamedType";
      Kind2["LIST_TYPE"] = "ListType";
      Kind2["NON_NULL_TYPE"] = "NonNullType";
      Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
      Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
      Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
      Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
      Kind2["FIELD_DEFINITION"] = "FieldDefinition";
      Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
      Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
      Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
      Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
      Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
      Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
      Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
      Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
      Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
      Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
      Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
      Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
      Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
      Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
    })(Kind || (Kind = {}));
    function isWhiteSpace(code) {
      return code === 9 || code === 32;
    }
    function printBlockString(value, options) {
      const escapedValue = value.replace(/"""/g, '\\"""');
      const lines = escapedValue.split(/\r\n|[\n\r]/g);
      const isSingleLine = lines.length === 1;
      const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
      const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
      const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
      const hasTrailingSlash = value.endsWith("\\");
      const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
      const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
      (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
      let result2 = "";
      const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
      if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
        result2 += "\n";
      }
      result2 += escapedValue;
      if (printAsMultipleLines || forceTrailingNewline) {
        result2 += "\n";
      }
      return '"""' + result2 + '"""';
    }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    function inspect(value) {
      return formatValue(value, []);
    }
    function formatValue(value, seenValues) {
      switch (typeof value) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? `[function ${value.name}]` : "[function]";
        case "object":
          return formatObjectValue(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatObjectValue(value, previouslySeenValues) {
      if (value === null) {
        return "null";
      }
      if (previouslySeenValues.includes(value)) {
        return "[Circular]";
      }
      const seenValues = [...previouslySeenValues, value];
      if (isJSONable(value)) {
        const jsonValue = value.toJSON();
        if (jsonValue !== value) {
          return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }
      return formatObject(value, seenValues);
    }
    function isJSONable(value) {
      return typeof value.toJSON === "function";
    }
    function formatObject(object, seenValues) {
      const entries = Object.entries(object);
      if (entries.length === 0) {
        return "{}";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[" + getObjectTag(object) + "]";
      }
      const properties = entries.map(
        ([key, value]) => key + ": " + formatValue(value, seenValues)
      );
      return "{ " + properties.join(", ") + " }";
    }
    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return "[]";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[Array]";
      }
      const len = Math.min(MAX_ARRAY_LENGTH, array.length);
      const remaining = array.length - len;
      const items = [];
      for (let i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }
      if (remaining === 1) {
        items.push("... 1 more item");
      } else if (remaining > 1) {
        items.push(`... ${remaining} more items`);
      }
      return "[" + items.join(", ") + "]";
    }
    function getObjectTag(object) {
      const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor === "function") {
        const name = object.constructor.name;
        if (typeof name === "string" && name !== "") {
          return name;
        }
      }
      return tag;
    }
    function printString(str) {
      return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
    }
    var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    function escapedReplacer(str) {
      return escapeSequences[str.charCodeAt(0)];
    }
    var escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 2F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 3F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 4F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      // 5F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 6F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
    var BREAK = Object.freeze({});
    function visit(root2, visitor, visitorKeys = QueryDocumentKeys) {
      const enterLeaveMap = /* @__PURE__ */ new Map();
      for (const kind of Object.values(Kind)) {
        enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
      }
      let stack = void 0;
      let inArray = Array.isArray(root2);
      let keys = [root2];
      let index = -1;
      let edits = [];
      let node = root2;
      let key = void 0;
      let parent = void 0;
      const path = [];
      const ancestors = [];
      do {
        index++;
        const isLeaving = index === keys.length;
        const isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          key = ancestors.length === 0 ? void 0 : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();
          if (isEdited) {
            if (inArray) {
              node = node.slice();
              let editOffset = 0;
              for (const [editKey, editValue] of edits) {
                const arrayKey = editKey - editOffset;
                if (editValue === null) {
                  node.splice(arrayKey, 1);
                  editOffset++;
                } else {
                  node[arrayKey] = editValue;
                }
              }
            } else {
              node = Object.defineProperties(
                {},
                Object.getOwnPropertyDescriptors(node)
              );
              for (const [editKey, editValue] of edits) {
                node[editKey] = editValue;
              }
            }
          }
          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else if (parent) {
          key = inArray ? index : keys[index];
          node = parent[key];
          if (node === null || node === void 0) {
            continue;
          }
          path.push(key);
        }
        let result2;
        if (!Array.isArray(node)) {
          var _enterLeaveMap$get, _enterLeaveMap$get2;
          isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
          const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
          result2 = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
          if (result2 === BREAK) {
            break;
          }
          if (result2 === false) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result2 !== void 0) {
            edits.push([key, result2]);
            if (!isLeaving) {
              if (isNode(result2)) {
                node = result2;
              } else {
                path.pop();
                continue;
              }
            }
          }
        }
        if (result2 === void 0 && isEdited) {
          edits.push([key, node]);
        }
        if (isLeaving) {
          path.pop();
        } else {
          var _node$kind;
          stack = {
            inArray,
            index,
            keys,
            edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
          index = -1;
          edits = [];
          if (parent) {
            ancestors.push(parent);
          }
          parent = node;
        }
      } while (stack !== void 0);
      if (edits.length !== 0) {
        return edits[edits.length - 1][1];
      }
      return root2;
    }
    function getEnterLeaveForKind(visitor, kind) {
      const kindVisitor = visitor[kind];
      if (typeof kindVisitor === "object") {
        return kindVisitor;
      } else if (typeof kindVisitor === "function") {
        return {
          enter: kindVisitor,
          leave: void 0
        };
      }
      return {
        enter: visitor.enter,
        leave: visitor.leave
      };
    }
    function print(ast) {
      return visit(ast, printDocASTReducer);
    }
    var MAX_LINE_LENGTH = 80;
    var printDocASTReducer = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      // Document
      Document: {
        leave: (node) => join(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave(node) {
          const varDefs = wrap2("(", join(node.variableDefinitions, ", "), ")");
          const prefix = join(
            [
              node.operation,
              join([node.name, varDefs]),
              join(node.directives, " ")
            ],
            " "
          );
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap2(" = ", defaultValue) + wrap2(" ", join(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap2("", alias, ": ") + name;
          let argsLine = prefix + wrap2("(", join(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH) {
            argsLine = prefix + wrap2("(\n", indent(join(args, "\n")), "\n)");
          }
          return join([argsLine, join(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Fragments
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap2(" ", join(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join(
          [
            "...",
            wrap2("on ", typeCondition),
            join(directives, " "),
            selectionSet
          ],
          " "
        )
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
          // or removed in the future.
          `fragment ${name}${wrap2("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap2("", join(directives, " "), " ")}` + selectionSet
        )
      },
      // Value
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Directive
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap2("(", join(args, ", "), ")")
      },
      // Type
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type }) => "[" + type + "]"
      },
      NonNullType: {
        leave: ({ type }) => type + "!"
      },
      // Type System Definitions
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap2("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap2("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap2("", description, "\n") + join(
          [
            "type",
            name,
            wrap2("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type, directives }) => wrap2("", description, "\n") + name + (hasMultilineItems(args) ? wrap2("(\n", indent(join(args, "\n")), "\n)") : wrap2("(", join(args, ", "), ")")) + ": " + type + wrap2(" ", join(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type, defaultValue, directives }) => wrap2("", description, "\n") + join(
          [name + ": " + type, wrap2("= ", defaultValue), join(directives, " ")],
          " "
        )
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap2("", description, "\n") + join(
          [
            "interface",
            name,
            wrap2("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap2("", description, "\n") + join(
          ["union", name, join(directives, " "), wrap2("= ", join(types, " | "))],
          " "
        )
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap2("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap2("", description, "\n") + join([name, join(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap2("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap2("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap2("(\n", indent(join(args, "\n")), "\n)") : wrap2("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join(
          ["extend schema", join(directives, " "), block(operationTypes)],
          " "
        )
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend type",
            name,
            wrap2("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend interface",
            name,
            wrap2("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join(
          [
            "extend union",
            name,
            join(directives, " "),
            wrap2("= ", join(types, " | "))
          ],
          " "
        )
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
      }
    };
    function join(maybeArray, separator = "") {
      var _maybeArray$filter$jo;
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x) => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
    }
    function block(array) {
      return wrap2("{\n", indent(join(array, "\n")), "\n}");
    }
    function wrap2(start, maybeString, end = "") {
      return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
    }
    function indent(str) {
      return wrap2("  ", str.replace(/\n/g, "\n  "));
    }
    function hasMultilineItems(maybeArray) {
      var _maybeArray$some;
      return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
    }
    function noop() {
    }
    var defaultDispose = noop;
    var _WeakRef = typeof WeakRef !== "undefined" ? WeakRef : function(value) {
      return { deref: () => value };
    };
    var _WeakMap = typeof WeakMap !== "undefined" ? WeakMap : Map;
    var _FinalizationRegistry = typeof FinalizationRegistry !== "undefined" ? FinalizationRegistry : function() {
      return {
        register: noop,
        unregister: noop
      };
    };
    var finalizationBatchSize = 10024;
    var WeakCache = class {
      constructor(max = Infinity, dispose = defaultDispose) {
        this.max = max;
        this.dispose = dispose;
        this.map = new _WeakMap();
        this.newest = null;
        this.oldest = null;
        this.unfinalizedNodes = /* @__PURE__ */ new Set();
        this.finalizationScheduled = false;
        this.size = 0;
        this.finalize = () => {
          const iterator = this.unfinalizedNodes.values();
          for (let i = 0; i < finalizationBatchSize; i++) {
            const node = iterator.next().value;
            if (!node)
              break;
            this.unfinalizedNodes.delete(node);
            const key = node.key;
            delete node.key;
            node.keyRef = new _WeakRef(key);
            this.registry.register(key, node, node);
          }
          if (this.unfinalizedNodes.size > 0) {
            queueMicrotask(this.finalize);
          } else {
            this.finalizationScheduled = false;
          }
        };
        this.registry = new _FinalizationRegistry(this.deleteNode.bind(this));
      }
      has(key) {
        return this.map.has(key);
      }
      get(key) {
        const node = this.getNode(key);
        return node && node.value;
      }
      getNode(key) {
        const node = this.map.get(key);
        if (node && node !== this.newest) {
          const { older, newer } = node;
          if (newer) {
            newer.older = older;
          }
          if (older) {
            older.newer = newer;
          }
          node.older = this.newest;
          node.older.newer = node;
          node.newer = null;
          this.newest = node;
          if (node === this.oldest) {
            this.oldest = newer;
          }
        }
        return node;
      }
      set(key, value) {
        let node = this.getNode(key);
        if (node) {
          return node.value = value;
        }
        node = {
          key,
          value,
          newer: null,
          older: this.newest
        };
        if (this.newest) {
          this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.scheduleFinalization(node);
        this.map.set(key, node);
        this.size++;
        return node.value;
      }
      clean() {
        while (this.oldest && this.size > this.max) {
          this.deleteNode(this.oldest);
        }
      }
      deleteNode(node) {
        if (node === this.newest) {
          this.newest = node.older;
        }
        if (node === this.oldest) {
          this.oldest = node.newer;
        }
        if (node.newer) {
          node.newer.older = node.older;
        }
        if (node.older) {
          node.older.newer = node.newer;
        }
        this.size--;
        const key = node.key || node.keyRef && node.keyRef.deref();
        this.dispose(node.value, key);
        if (!node.keyRef) {
          this.unfinalizedNodes.delete(node);
        } else {
          this.registry.unregister(node);
        }
        if (key)
          this.map.delete(key);
      }
      delete(key) {
        const node = this.map.get(key);
        if (node) {
          this.deleteNode(node);
          return true;
        }
        return false;
      }
      scheduleFinalization(node) {
        this.unfinalizedNodes.add(node);
        if (!this.finalizationScheduled) {
          this.finalizationScheduled = true;
          queueMicrotask(this.finalize);
        }
      }
    };
    var scheduledCleanup = /* @__PURE__ */ new WeakSet();
    function schedule(cache) {
      if (cache.size <= (cache.max || -1)) {
        return;
      }
      if (!scheduledCleanup.has(cache)) {
        scheduledCleanup.add(cache);
        setTimeout(function() {
          cache.clean();
          scheduledCleanup.delete(cache);
        }, 100);
      }
    }
    var AutoCleanedWeakCache = function(max, dispose) {
      var cache = new WeakCache(max, dispose);
      cache.set = function(key, value) {
        var ret = WeakCache.prototype.set.call(this, key, value);
        schedule(this);
        return ret;
      };
      return cache;
    };
    var cacheSizeSymbol = Symbol.for("apollo.cacheSize");
    var cacheSizes = __assign({}, global_default[cacheSizeSymbol]);
    var globalCaches = {};
    function registerGlobalCache(name, getSize) {
      globalCaches[name] = getSize;
    }
    var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : void 0;
    var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : void 0;
    var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : void 0;
    function getCurrentCacheSizes() {
      var defaults = {
        parser: 1e3,
        canonicalStringify: 1e3,
        print: 2e3,
        "documentTransform.cache": 2e3,
        "queryManager.getDocumentInfo": 2e3,
        "PersistedQueryLink.persistedQueryHashes": 2e3,
        "fragmentRegistry.transform": 2e3,
        "fragmentRegistry.lookup": 1e3,
        "fragmentRegistry.findFragmentSpreads": 4e3,
        "cache.fragmentQueryDocuments": 1e3,
        "removeTypenameFromVariables.getVariableDefinitions": 2e3,
        "inMemoryCache.maybeBroadcastWatch": 5e3,
        "inMemoryCache.executeSelectionSet": 5e4,
        "inMemoryCache.executeSubSelectedArray": 1e4
      };
      return Object.fromEntries(Object.entries(defaults).map(function(_a22) {
        var k = _a22[0], v = _a22[1];
        return [
          k,
          cacheSizes[k] || v
        ];
      }));
    }
    function _getApolloClientMemoryInternals() {
      var _a22, _b, _c, _d, _e;
      if (!(globalThis.__DEV__ !== false))
        throw new Error("only supported in development mode");
      return {
        limits: getCurrentCacheSizes(),
        sizes: __assign({ print: (_a22 = globalCaches.print) === null || _a22 === void 0 ? void 0 : _a22.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {
          getDocumentInfo: this["queryManager"]["transformCache"].size,
          documentTransforms: transformInfo(this["queryManager"].documentTransform)
        } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))
      };
    }
    function _getApolloCacheMemoryInternals() {
      return {
        cache: {
          fragmentQueryDocuments: getWrapperInformation(this["getFragmentDoc"])
        }
      };
    }
    function _getInMemoryCacheMemoryInternals() {
      var fragments = this.config.fragments;
      return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this["addTypenameTransform"]), inMemoryCache: {
        executeSelectionSet: getWrapperInformation(this["storeReader"]["executeSelectionSet"]),
        executeSubSelectedArray: getWrapperInformation(this["storeReader"]["executeSubSelectedArray"]),
        maybeBroadcastWatch: getWrapperInformation(this["maybeBroadcastWatch"])
      }, fragmentRegistry: {
        findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),
        lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),
        transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)
      } });
    }
    function isWrapper(f) {
      return !!f && "dirtyKey" in f;
    }
    function getWrapperInformation(f) {
      return isWrapper(f) ? f.size : void 0;
    }
    function isDefined(value) {
      return value != null;
    }
    function transformInfo(transform) {
      return recurseTransformInfo(transform).map(function(cache) {
        return { cache };
      });
    }
    function recurseTransformInfo(transform) {
      return transform ? __spreadArray(__spreadArray([
        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform["performWork"])
      ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform["left"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform["right"]), true).filter(isDefined) : [];
    }
    function linkInfo(link) {
      var _a22;
      return link ? __spreadArray(__spreadArray([
        (_a22 = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a22 === void 0 ? void 0 : _a22.call(link)
      ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];
    }
    function getOperationName(doc) {
      return doc.definitions.filter(function(definition) {
        return definition.kind === "OperationDefinition" && !!definition.name;
      }).map(function(x) {
        return x.name.value;
      })[0] || null;
    }
    var printCache;
    var print2 = Object.assign(function(ast) {
      var result2 = printCache.get(ast);
      if (!result2) {
        result2 = print(ast);
        printCache.set(ast, result2);
      }
      return result2;
    }, {
      reset: function() {
        printCache = new AutoCleanedWeakCache(
          cacheSizes.print || 2e3
          /* defaultCacheSizes.print */
        );
      }
    });
    print2.reset();
    if (globalThis.__DEV__ !== false) {
      registerGlobalCache("print", function() {
        return printCache ? printCache.size : 0;
      });
    }
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
          if (i >= o.length) return { done: true };
          return { done: false, value: o[i++] };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _defineProperties2(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties2(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null) return void 0;
      if (typeof value !== "function") throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable;
    }
    function isObservable(x) {
      return x instanceof Observable;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup2 = subscription._cleanup;
      if (cleanup2 === void 0) return;
      subscription._cleanup = void 0;
      if (!cleanup2) {
        return;
      }
      try {
        if (typeof cleanup2 === "function") {
          cleanup2();
        } else {
          var unsubscribe = getMethod(cleanup2, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup2);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed") break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m) m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m) m.call(observer, value);
            else throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m) m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed") cleanupSubscription(subscription);
      else if (subscription._state === "running") subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed") return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing") this._state = "ready";
      }
      var _proto = Subscription2.prototype;
      _proto.unsubscribe = function unsubscribe() {
        if (this._state !== "closed") {
          closeSubscription(this);
          cleanupSubscription(this);
        }
      };
      _createClass2(Subscription2, [{
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        this._subscription = subscription;
      }
      var _proto2 = SubscriptionObserver2.prototype;
      _proto2.next = function next(value) {
        onNotify(this._subscription, "next", value);
      };
      _proto2.error = function error(value) {
        onNotify(this._subscription, "error", value);
      };
      _proto2.complete = function complete() {
        onNotify(this._subscription, "complete");
      };
      _createClass2(SubscriptionObserver2, [{
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable = function() {
      function Observable2(subscriber) {
        if (!(this instanceof Observable2)) throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function") throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      var _proto3 = Observable2.prototype;
      _proto3.subscribe = function subscribe(observer) {
        if (typeof observer !== "object" || observer === null) {
          observer = {
            next: observer,
            error: arguments[1],
            complete: arguments[2]
          };
        }
        return new Subscription(observer, this._subscriber);
      };
      _proto3.forEach = function forEach(fn) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          if (typeof fn !== "function") {
            reject(new TypeError(fn + " is not a function"));
            return;
          }
          function done() {
            subscription.unsubscribe();
            resolve();
          }
          var subscription = _this.subscribe({
            next: function(value) {
              try {
                fn(value, done);
              } catch (e) {
                reject(e);
                subscription.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
        });
      };
      _proto3.map = function map(fn) {
        var _this2 = this;
        if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
        var C = getSpecies(this);
        return new C(function(observer) {
          return _this2.subscribe({
            next: function(value) {
              try {
                value = fn(value);
              } catch (e) {
                return observer.error(e);
              }
              observer.next(value);
            },
            error: function(e) {
              observer.error(e);
            },
            complete: function() {
              observer.complete();
            }
          });
        });
      };
      _proto3.filter = function filter(fn) {
        var _this3 = this;
        if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
        var C = getSpecies(this);
        return new C(function(observer) {
          return _this3.subscribe({
            next: function(value) {
              try {
                if (!fn(value)) return;
              } catch (e) {
                return observer.error(e);
              }
              observer.next(value);
            },
            error: function(e) {
              observer.error(e);
            },
            complete: function() {
              observer.complete();
            }
          });
        });
      };
      _proto3.reduce = function reduce(fn) {
        var _this4 = this;
        if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
        var C = getSpecies(this);
        var hasSeed = arguments.length > 1;
        var hasValue = false;
        var seed = arguments[1];
        var acc = seed;
        return new C(function(observer) {
          return _this4.subscribe({
            next: function(value) {
              var first = !hasValue;
              hasValue = true;
              if (!first || hasSeed) {
                try {
                  acc = fn(acc, value);
                } catch (e) {
                  return observer.error(e);
                }
              } else {
                acc = value;
              }
            },
            error: function(e) {
              observer.error(e);
            },
            complete: function() {
              if (!hasValue && !hasSeed) return observer.error(new TypeError("Cannot reduce an empty sequence"));
              observer.next(acc);
              observer.complete();
            }
          });
        });
      };
      _proto3.concat = function concat() {
        var _this5 = this;
        for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
          sources[_key] = arguments[_key];
        }
        var C = getSpecies(this);
        return new C(function(observer) {
          var subscription;
          var index = 0;
          function startNext(next) {
            subscription = next.subscribe({
              next: function(v) {
                observer.next(v);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (index === sources.length) {
                  subscription = void 0;
                  observer.complete();
                } else {
                  startNext(C.from(sources[index++]));
                }
              }
            });
          }
          startNext(_this5);
          return function() {
            if (subscription) {
              subscription.unsubscribe();
              subscription = void 0;
            }
          };
        });
      };
      _proto3.flatMap = function flatMap(fn) {
        var _this6 = this;
        if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
        var C = getSpecies(this);
        return new C(function(observer) {
          var subscriptions = [];
          var outer = _this6.subscribe({
            next: function(value) {
              if (fn) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
              }
              var inner = C.from(value).subscribe({
                next: function(value2) {
                  observer.next(value2);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  var i = subscriptions.indexOf(inner);
                  if (i >= 0) subscriptions.splice(i, 1);
                  completeIfDone();
                }
              });
              subscriptions.push(inner);
            },
            error: function(e) {
              observer.error(e);
            },
            complete: function() {
              completeIfDone();
            }
          });
          function completeIfDone() {
            if (outer.closed && subscriptions.length === 0) observer.complete();
          }
          return function() {
            subscriptions.forEach(function(s) {
              return s.unsubscribe();
            });
            outer.unsubscribe();
          };
        });
      };
      _proto3[SymbolObservable] = function() {
        return this;
      };
      Observable2.from = function from(x) {
        var C = typeof this === "function" ? this : Observable2;
        if (x == null) throw new TypeError(x + " is not an object");
        var method = getMethod(x, SymbolObservable);
        if (method) {
          var observable = method.call(x);
          if (Object(observable) !== observable) throw new TypeError(observable + " is not an object");
          if (isObservable(observable) && observable.constructor === C) return observable;
          return new C(function(observer) {
            return observable.subscribe(observer);
          });
        }
        if (hasSymbol("iterator")) {
          method = getMethod(x, SymbolIterator);
          if (method) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed) return;
                for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done; ) {
                  var item = _step.value;
                  observer.next(item);
                  if (observer.closed) return;
                }
                observer.complete();
              });
            });
          }
        }
        if (Array.isArray(x)) {
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed) return;
              for (var i = 0; i < x.length; ++i) {
                observer.next(x[i]);
                if (observer.closed) return;
              }
              observer.complete();
            });
          });
        }
        throw new TypeError(x + " is not observable");
      };
      Observable2.of = function of() {
        for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          items[_key2] = arguments[_key2];
        }
        var C = typeof this === "function" ? this : Observable2;
        return new C(function(observer) {
          enqueue(function() {
            if (observer.closed) return;
            for (var i = 0; i < items.length; ++i) {
              observer.next(items[i]);
              if (observer.closed) return;
            }
            observer.complete();
          });
        });
      };
      _createClass2(Observable2, null, [{
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable2;
    }();
    if (hasSymbols()) {
      Object.defineProperty(Observable, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
    function symbolObservablePonyfill(root2) {
      var result2;
      var Symbol2 = root2.Symbol;
      if (typeof Symbol2 === "function") {
        if (Symbol2.observable) {
          result2 = Symbol2.observable;
        } else {
          if (typeof Symbol2.for === "function") {
            result2 = Symbol2.for("https://github.com/benlesh/symbol-observable");
          } else {
            result2 = Symbol2("https://github.com/benlesh/symbol-observable");
          }
          try {
            Symbol2.observable = result2;
          } catch (err) {
          }
        }
      } else {
        result2 = "@@observable";
      }
      return result2;
    }
    var root;
    if (typeof self !== "undefined") {
      root = self;
    } else if (typeof window !== "undefined") {
      root = window;
    } else if (typeof global !== "undefined") {
      root = global;
    } else if (typeof module2 !== "undefined") {
      root = module2;
    } else {
      root = Function("return this")();
    }
    var result = symbolObservablePonyfill(root);
    var prototype = Observable.prototype;
    var fakeObsSymbol = "@@observable";
    if (!prototype[fakeObsSymbol]) {
      prototype[fakeObsSymbol] = function() {
        return this;
      };
    }
    var throwServerError = function(response, result2, message) {
      var error = new Error(message);
      error.name = "ServerError";
      error.response = response;
      error.statusCode = response.status;
      error.result = result2;
      throw error;
    };
    function validateOperation(operation) {
      var OPERATION_FIELDS = [
        "query",
        "operationName",
        "variables",
        "extensions",
        "context"
      ];
      for (var _i = 0, _a22 = Object.keys(operation); _i < _a22.length; _i++) {
        var key = _a22[_i];
        if (OPERATION_FIELDS.indexOf(key) < 0) {
          throw newInvariantError(43, key);
        }
      }
      return operation;
    }
    function createOperation(starting, operation) {
      var context2 = __assign({}, starting);
      var setContext = function(next) {
        if (typeof next === "function") {
          context2 = __assign(__assign({}, context2), next(context2));
        } else {
          context2 = __assign(__assign({}, context2), next);
        }
      };
      var getContext = function() {
        return __assign({}, context2);
      };
      Object.defineProperty(operation, "setContext", {
        enumerable: false,
        value: setContext
      });
      Object.defineProperty(operation, "getContext", {
        enumerable: false,
        value: getContext
      });
      return operation;
    }
    function transformOperation(operation) {
      var transformedOperation = {
        variables: operation.variables || {},
        extensions: operation.extensions || {},
        operationName: operation.operationName,
        query: operation.query
      };
      if (!transformedOperation.operationName) {
        transformedOperation.operationName = typeof transformedOperation.query !== "string" ? getOperationName(transformedOperation.query) || void 0 : "";
      }
      return transformedOperation;
    }
    function passthrough(op, forward) {
      return forward ? forward(op) : Observable.of();
    }
    function toLink(handler) {
      return typeof handler === "function" ? new ApolloLink(handler) : handler;
    }
    function isTerminating(link) {
      return link.request.length <= 1;
    }
    var ApolloLink = (
      /** @class */
      function() {
        function ApolloLink2(request) {
          if (request)
            this.request = request;
        }
        ApolloLink2.empty = function() {
          return new ApolloLink2(function() {
            return Observable.of();
          });
        };
        ApolloLink2.from = function(links) {
          if (links.length === 0)
            return ApolloLink2.empty();
          return links.map(toLink).reduce(function(x, y) {
            return x.concat(y);
          });
        };
        ApolloLink2.split = function(test, left, right) {
          var leftLink = toLink(left);
          var rightLink = toLink(right || new ApolloLink2(passthrough));
          var ret;
          if (isTerminating(leftLink) && isTerminating(rightLink)) {
            ret = new ApolloLink2(function(operation) {
              return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();
            });
          } else {
            ret = new ApolloLink2(function(operation, forward) {
              return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();
            });
          }
          return Object.assign(ret, { left: leftLink, right: rightLink });
        };
        ApolloLink2.execute = function(link, operation) {
          return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();
        };
        ApolloLink2.concat = function(first, second) {
          var firstLink = toLink(first);
          if (isTerminating(firstLink)) {
            globalThis.__DEV__ !== false && invariant2.warn(35, firstLink);
            return firstLink;
          }
          var nextLink = toLink(second);
          var ret;
          if (isTerminating(nextLink)) {
            ret = new ApolloLink2(function(operation) {
              return firstLink.request(operation, function(op) {
                return nextLink.request(op) || Observable.of();
              }) || Observable.of();
            });
          } else {
            ret = new ApolloLink2(function(operation, forward) {
              return firstLink.request(operation, function(op) {
                return nextLink.request(op, forward) || Observable.of();
              }) || Observable.of();
            });
          }
          return Object.assign(ret, { left: firstLink, right: nextLink });
        };
        ApolloLink2.prototype.split = function(test, left, right) {
          return this.concat(ApolloLink2.split(test, left, right || new ApolloLink2(passthrough)));
        };
        ApolloLink2.prototype.concat = function(next) {
          return ApolloLink2.concat(this, next);
        };
        ApolloLink2.prototype.request = function(operation, forward) {
          throw newInvariantError(36);
        };
        ApolloLink2.prototype.onError = function(error, observer) {
          if (observer && observer.error) {
            observer.error(error);
            return false;
          }
          throw error;
        };
        ApolloLink2.prototype.setOnError = function(fn) {
          this.onError = fn;
          return this;
        };
        return ApolloLink2;
      }()
    );
    var createSignalIfSupported = function() {
      if (typeof AbortController === "undefined")
        return { controller: false, signal: false };
      var controller = new AbortController();
      var signal = controller.signal;
      return { controller, signal };
    };
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function parseJsonBody(response, bodyText) {
      if (response.status >= 300) {
        var getResult = function() {
          try {
            return JSON.parse(bodyText);
          } catch (err) {
            return bodyText;
          }
        };
        throwServerError(response, getResult(), "Response not successful: Received status code ".concat(response.status));
      }
      try {
        return JSON.parse(bodyText);
      } catch (err) {
        var parseError = err;
        parseError.name = "ServerParseError";
        parseError.response = response;
        parseError.statusCode = response.status;
        parseError.bodyText = bodyText;
        throw parseError;
      }
    }
    function parseAndCheckHttpResponse(operations) {
      return function(response) {
        return response.text().then(function(bodyText) {
          return parseJsonBody(response, bodyText);
        }).then(function(result2) {
          if (!Array.isArray(result2) && !hasOwnProperty.call(result2, "data") && !hasOwnProperty.call(result2, "errors")) {
            throwServerError(response, result2, "Server response was missing for query '".concat(Array.isArray(operations) ? operations.map(function(op) {
              return op.operationName;
            }) : operations.operationName, "'."));
          }
          return result2;
        });
      };
    }
    var serializeFetchParameter = function(p, label) {
      var serialized;
      try {
        serialized = JSON.stringify(p);
      } catch (e) {
        var parseError = newInvariantError(39, label, e.message);
        parseError.parseError = e;
        throw parseError;
      }
      return serialized;
    };
    function rewriteURIForGET(chosenURI, body) {
      var queryParams = [];
      var addQueryParam = function(key, value) {
        queryParams.push("".concat(key, "=").concat(encodeURIComponent(value)));
      };
      if ("query" in body) {
        addQueryParam("query", body.query);
      }
      if (body.operationName) {
        addQueryParam("operationName", body.operationName);
      }
      if (body.variables) {
        var serializedVariables = void 0;
        try {
          serializedVariables = serializeFetchParameter(body.variables, "Variables map");
        } catch (parseError) {
          return { parseError };
        }
        addQueryParam("variables", serializedVariables);
      }
      if (body.extensions) {
        var serializedExtensions = void 0;
        try {
          serializedExtensions = serializeFetchParameter(body.extensions, "Extensions map");
        } catch (parseError) {
          return { parseError };
        }
        addQueryParam("extensions", serializedExtensions);
      }
      var fragment = "", preFragment = chosenURI;
      var fragmentStart = chosenURI.indexOf("#");
      if (fragmentStart !== -1) {
        fragment = chosenURI.substr(fragmentStart);
        preFragment = chosenURI.substr(0, fragmentStart);
      }
      var queryParamsPrefix = preFragment.indexOf("?") === -1 ? "?" : "&";
      var newURI = preFragment + queryParamsPrefix + queryParams.join("&") + fragment;
      return { newURI };
    }
    var defaultHttpOptions = {
      includeQuery: true,
      includeExtensions: false,
      preserveHeaderCase: false
    };
    var defaultHeaders = {
      // headers are case insensitive (https://stackoverflow.com/a/5259004)
      accept: "*/*",
      // The content-type header describes the type of the body of the request, and
      // so it typically only is sent with requests that actually have bodies. One
      // could imagine that Apollo Client would remove this header when constructing
      // a GET request (which has no body), but we historically have not done that.
      // This means that browsers will preflight all Apollo Client requests (even
      // GET requests). Apollo Server's CSRF prevention feature (introduced in
      // AS3.7) takes advantage of this fact and does not block requests with this
      // header. If you want to drop this header from GET requests, then you should
      // probably replace it with a `apollo-require-preflight` header, or servers
      // with CSRF prevention enabled might block your GET request. See
      // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf
      // for more details.
      "content-type": "application/json"
    };
    var defaultOptions = {
      method: "POST"
    };
    var fallbackHttpConfig = {
      http: defaultHttpOptions,
      headers: defaultHeaders,
      options: defaultOptions
    };
    var defaultPrinter = function(ast, printer) {
      return printer(ast);
    };
    function selectHttpOptionsAndBodyInternal(operation, printer) {
      var configs = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        configs[_i - 2] = arguments[_i];
      }
      var options = {};
      var http = {};
      configs.forEach(function(config2) {
        options = __assign(__assign(__assign({}, options), config2.options), { headers: __assign(__assign({}, options.headers), config2.headers) });
        if (config2.credentials) {
          options.credentials = config2.credentials;
        }
        http = __assign(__assign({}, http), config2.http);
      });
      if (options.headers) {
        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);
      }
      var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
      var body = { operationName, variables };
      if (http.includeExtensions)
        body.extensions = extensions;
      if (http.includeQuery)
        body.query = printer(query, print2);
      return {
        options,
        body
      };
    }
    function removeDuplicateHeaders(headers, preserveHeaderCase) {
      if (!preserveHeaderCase) {
        var normalizedHeaders_1 = /* @__PURE__ */ Object.create(null);
        Object.keys(Object(headers)).forEach(function(name) {
          normalizedHeaders_1[name.toLowerCase()] = headers[name];
        });
        return normalizedHeaders_1;
      }
      var headerData = /* @__PURE__ */ Object.create(null);
      Object.keys(Object(headers)).forEach(function(name) {
        headerData[name.toLowerCase()] = {
          originalName: name,
          value: headers[name]
        };
      });
      var normalizedHeaders = /* @__PURE__ */ Object.create(null);
      Object.keys(headerData).forEach(function(name) {
        normalizedHeaders[headerData[name].originalName] = headerData[name].value;
      });
      return normalizedHeaders;
    }
    var selectURI = function(operation, fallbackURI) {
      var context2 = operation.getContext();
      var contextURI = context2.uri;
      if (contextURI) {
        return contextURI;
      } else if (typeof fallbackURI === "function") {
        return fallbackURI(operation);
      } else {
        return fallbackURI || "/graphql";
      }
    };
    function isPlainObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      const prototype2 = Object.getPrototypeOf(value);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
    }
    function extractFiles(value, isExtractable, path = "") {
      if (!arguments.length) throw new TypeError("Argument 1 `value` is required.");
      if (typeof isExtractable !== "function")
        throw new TypeError("Argument 2 `isExtractable` must be a function.");
      if (typeof path !== "string")
        throw new TypeError("Argument 3 `path` must be a string.");
      const clones = /* @__PURE__ */ new Map();
      const files = /* @__PURE__ */ new Map();
      function recurse(value2, path2, recursed) {
        if (isExtractable(value2)) {
          const filePaths = files.get(value2);
          filePaths ? filePaths.push(path2) : files.set(value2, [path2]);
          return null;
        }
        const valueIsList = Array.isArray(value2) || typeof FileList !== "undefined" && value2 instanceof FileList;
        const valueIsPlainObject = isPlainObject(value2);
        if (valueIsList || valueIsPlainObject) {
          let clone = clones.get(value2);
          const uncloned = !clone;
          if (uncloned) {
            clone = valueIsList ? [] : (
              // Replicate if the plain object is an `Object` instance.
              value2 instanceof /** @type {any} */
              Object ? {} : /* @__PURE__ */ Object.create(null)
            );
            clones.set(
              value2,
              /** @type {Clone} */
              clone
            );
          }
          if (!recursed.has(value2)) {
            const pathPrefix = path2 ? `${path2}.` : "";
            const recursedDeeper = new Set(recursed).add(value2);
            if (valueIsList) {
              let index = 0;
              for (const item of value2) {
                const itemClone = recurse(
                  item,
                  pathPrefix + index++,
                  recursedDeeper
                );
                if (uncloned) clone.push(itemClone);
              }
            } else
              for (const key in value2) {
                const propertyClone = recurse(
                  value2[key],
                  pathPrefix + key,
                  recursedDeeper
                );
                if (uncloned)
                  clone[key] = propertyClone;
              }
          }
          return clone;
        }
        return value2;
      }
      return {
        clone: recurse(value, path, /* @__PURE__ */ new Set()),
        files
      };
    }
    function formDataAppendFile(formData, fieldName, file) {
      "name" in file ? formData.append(fieldName, file, file.name) : formData.append(fieldName, file);
    }
    function isExtractableFile(value) {
      return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob;
    }
    function createUploadLink({
      uri: fetchUri = "/graphql",
      useGETForQueries,
      isExtractableFile: customIsExtractableFile = isExtractableFile,
      FormData: CustomFormData,
      formDataAppendFile: customFormDataAppendFile = formDataAppendFile,
      print: print3 = defaultPrinter,
      fetch: customFetch,
      fetchOptions,
      credentials,
      headers,
      includeExtensions
    } = {}) {
      const linkConfig = {
        http: { includeExtensions },
        options: fetchOptions,
        credentials,
        headers
      };
      return new ApolloLink((operation) => {
        const context2 = (
          /**
           * @type {import("@apollo/client/core/types.js").DefaultContext & {
           *   clientAwareness?: {
           *     name?: string,
           *     version?: string,
           *   },
           * }}
           */
          operation.getContext()
        );
        const {
          // Apollo Studio client awareness `name` and `version` can be configured
          // via `ApolloClient` constructor options:
          // https://www.apollographql.com/docs/graphos/metrics/client-awareness/#setup
          clientAwareness: { name, version: version2 } = {},
          headers: headers2
        } = context2;
        const contextConfig = {
          http: context2.http,
          options: context2.fetchOptions,
          credentials: context2.credentials,
          headers: {
            // Client awareness headers can be overridden by context `headers`.
            ...name && { "apollographql-client-name": name },
            ...version2 && { "apollographql-client-version": version2 },
            ...headers2
          }
        };
        const { options, body } = selectHttpOptionsAndBodyInternal(
          operation,
          print3,
          fallbackHttpConfig,
          linkConfig,
          contextConfig
        );
        const { clone, files } = extractFiles(body, customIsExtractableFile, "");
        let uri = selectURI(operation, fetchUri);
        if (files.size) {
          if (options.headers)
            delete options.headers["content-type"];
          const RuntimeFormData = CustomFormData || FormData;
          const form = new RuntimeFormData();
          form.append("operations", serializeFetchParameter(clone, "Payload"));
          const map = {};
          let i = 0;
          files.forEach((paths) => {
            map[++i] = paths;
          });
          form.append("map", JSON.stringify(map));
          i = 0;
          files.forEach((_paths, file) => {
            customFormDataAppendFile(form, String(++i), file);
          });
          options.body = form;
        } else {
          if (useGETForQueries && // If the operation contains some mutations GET shouldn’t be used.
          !operation.query.definitions.some(
            (definition) => definition.kind === "OperationDefinition" && definition.operation === "mutation"
          ))
            options.method = "GET";
          if (options.method === "GET") {
            const { newURI, parseError } = rewriteURIForGET(uri, body);
            if (parseError)
              return new Observable((observer) => {
                observer.error(parseError);
              });
            uri = newURI;
          } else options.body = serializeFetchParameter(clone, "Payload");
        }
        const { controller } = createSignalIfSupported();
        if (typeof controller !== "boolean") {
          if (options.signal)
            options.signal.aborted ? (
              // Signal already aborted, so immediately abort.
              controller.abort()
            ) : (
              // Signal not already aborted, so setup a listener to abort when it
              // does.
              options.signal.addEventListener(
                "abort",
                () => {
                  controller.abort();
                },
                {
                  // Prevent a memory leak if the user configured abort controller
                  // is long lasting, or controls multiple things.
                  once: true
                }
              )
            );
          options.signal = controller.signal;
        }
        const runtimeFetch = customFetch || fetch;
        return new Observable((observer) => {
          let cleaningUp;
          runtimeFetch(uri, options).then((response) => {
            operation.setContext({ response });
            return response;
          }).then(parseAndCheckHttpResponse(operation)).then((result2) => {
            observer.next(result2);
            observer.complete();
          }).catch((error) => {
            if (!cleaningUp) {
              if (error.result && error.result.errors && error.result.data)
                observer.next(error.result);
              observer.error(error);
            }
          });
          return () => {
            cleaningUp = true;
            if (typeof controller !== "boolean") controller.abort();
          };
        });
      });
    }
  }
});

// ../node_modules/graphql-sse/lib/utils.js
var require_utils = __commonJS({
  "../node_modules/graphql-sse/lib/utils.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = void 0;
    function isObject(val) {
      return typeof val === "object" && val !== null;
    }
    exports.isObject = isObject;
  }
});

// ../node_modules/graphql-sse/lib/common.js
var require_common = __commonJS({
  "../node_modules/graphql-sse/lib/common.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsyncGenerator = exports.isAsyncIterable = exports.parseStreamData = exports.print = exports.validateStreamEvent = exports.TOKEN_QUERY_KEY = exports.TOKEN_HEADER_KEY = void 0;
    var utils_1 = require_utils();
    exports.TOKEN_HEADER_KEY = "x-graphql-event-stream-token";
    exports.TOKEN_QUERY_KEY = "token";
    function validateStreamEvent(e) {
      e = e;
      if (e !== "next" && e !== "complete")
        throw new Error(`Invalid stream event "${e}"`);
      return e;
    }
    exports.validateStreamEvent = validateStreamEvent;
    function print(msg) {
      let str = `event: ${msg.event}
data:`;
      if (msg.data) {
        str += " ";
        str += JSON.stringify(msg.data);
      }
      str += "\n\n";
      return str;
    }
    exports.print = print;
    function parseStreamData(e, data) {
      if (data) {
        try {
          data = JSON.parse(data);
        } catch {
          throw new Error("Invalid stream data");
        }
      }
      if (e === "next" && !data)
        throw new Error('Stream data must be an object for "next" events');
      return data || null;
    }
    exports.parseStreamData = parseStreamData;
    function isAsyncIterable(val) {
      return typeof Object(val)[Symbol.asyncIterator] === "function";
    }
    exports.isAsyncIterable = isAsyncIterable;
    function isAsyncGenerator(val) {
      return (0, utils_1.isObject)(val) && typeof Object(val)[Symbol.asyncIterator] === "function" && typeof val.return === "function" && typeof val.throw === "function" && typeof val.next === "function";
    }
    exports.isAsyncGenerator = isAsyncGenerator;
  }
});

// ../node_modules/graphql-sse/lib/handler.js
var require_handler = __commonJS({
  "../node_modules/graphql-sse/lib/handler.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isExecutionResult = exports.createHandler = void 0;
    var graphql_1 = (init_graphql(), __toCommonJS(graphql_exports));
    var utils_1 = require_utils();
    var common_1 = require_common();
    function createHandler(options) {
      const { validate = graphql_1.validate, execute = graphql_1.execute, subscribe = graphql_1.subscribe, schema, authenticate = function extractOrCreateStreamToken(req) {
        var _a2;
        const headerToken = req.headers.get(common_1.TOKEN_HEADER_KEY);
        if (headerToken)
          return Array.isArray(headerToken) ? headerToken.join("") : headerToken;
        const urlToken = new URL((_a2 = req.url) !== null && _a2 !== void 0 ? _a2 : "", "http://localhost/").searchParams.get(common_1.TOKEN_QUERY_KEY);
        if (urlToken)
          return urlToken;
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
          const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
          return v.toString(16);
        });
      }, onConnect, context: context2, onSubscribe, onOperation, onNext, onComplete } = options;
      const streams = {};
      function createStream(token) {
        const ops = {};
        let pinger;
        const msgs = (() => {
          const pending = [];
          const deferred = {
            done: false,
            error: null,
            resolve: () => {
            }
          };
          async function dispose() {
            clearInterval(pinger);
            if (typeof token === "string")
              delete streams[token];
            for (const op of Object.values(ops)) {
              if ((0, common_1.isAsyncGenerator)(op)) {
                await op.return(void 0);
              }
            }
          }
          const iterator = async function* iterator2() {
            for (; ; ) {
              if (!pending.length) {
                await new Promise((resolve) => deferred.resolve = resolve);
              }
              while (pending.length) {
                yield pending.shift();
              }
              if (deferred.error) {
                throw deferred.error;
              }
              if (deferred.done) {
                return;
              }
            }
          }();
          iterator.throw = async (err) => {
            if (!deferred.done) {
              deferred.done = true;
              deferred.error = err;
              deferred.resolve();
              await dispose();
            }
            return { done: true, value: void 0 };
          };
          iterator.return = async () => {
            if (!deferred.done) {
              deferred.done = true;
              deferred.resolve();
              await dispose();
            }
            return { done: true, value: void 0 };
          };
          return {
            next(msg) {
              pending.push(msg);
              deferred.resolve();
            },
            iterator
          };
        })();
        let subscribed = false;
        return {
          get open() {
            return subscribed;
          },
          ops,
          subscribe() {
            subscribed = true;
            msgs.next(":\n\n");
            pinger = setInterval(() => msgs.next(":\n\n"), 12e3);
            return msgs.iterator;
          },
          from(ctx, req, result, opId) {
            (async () => {
              if ((0, common_1.isAsyncIterable)(result)) {
                for await (let part of result) {
                  const maybeResult = await (onNext === null || onNext === void 0 ? void 0 : onNext(ctx, req, part));
                  if (maybeResult)
                    part = maybeResult;
                  msgs.next((0, common_1.print)({
                    event: "next",
                    data: opId ? {
                      id: opId,
                      payload: part
                    } : part
                  }));
                }
              } else {
                const maybeResult = await (onNext === null || onNext === void 0 ? void 0 : onNext(ctx, req, result));
                if (maybeResult)
                  result = maybeResult;
                msgs.next((0, common_1.print)({
                  event: "next",
                  data: opId ? {
                    id: opId,
                    payload: result
                  } : result
                }));
              }
              msgs.next((0, common_1.print)({
                event: "complete",
                data: opId ? { id: opId } : null
              }));
              await (onComplete === null || onComplete === void 0 ? void 0 : onComplete(ctx, req));
              if (!opId) {
                await msgs.iterator.return();
              } else {
                delete ops[opId];
              }
            })().catch(msgs.iterator.throw);
          }
        };
      }
      async function prepare(req, params) {
        let args;
        const onSubscribeResult = await (onSubscribe === null || onSubscribe === void 0 ? void 0 : onSubscribe(req, params));
        if (isResponse(onSubscribeResult))
          return onSubscribeResult;
        else if (isExecutionResult(onSubscribeResult) || (0, common_1.isAsyncIterable)(onSubscribeResult))
          return {
            // even if the result is already available, use
            // context because onNext and onComplete needs it
            ctx: typeof context2 === "function" ? await context2(req, params) : context2,
            perform() {
              return onSubscribeResult;
            }
          };
        else if (onSubscribeResult)
          args = onSubscribeResult;
        else {
          if (!schema)
            throw new Error("The GraphQL schema is not provided");
          const { operationName, variables } = params;
          let query;
          try {
            query = (0, graphql_1.parse)(params.query);
          } catch (err) {
            return [
              JSON.stringify({
                errors: [
                  err instanceof Error ? {
                    message: err.message
                    // TODO: stack might leak sensitive information
                    // stack: err.stack,
                  } : err
                ]
              }),
              {
                status: 400,
                statusText: "Bad Request",
                headers: { "content-type": "application/json; charset=utf-8" }
              }
            ];
          }
          const argsWithoutSchema = {
            operationName,
            document: query,
            variableValues: variables,
            contextValue: typeof context2 === "function" ? await context2(req, params) : context2
          };
          args = {
            ...argsWithoutSchema,
            schema: typeof schema === "function" ? await schema(req, argsWithoutSchema) : schema
          };
        }
        let operation;
        try {
          const ast = (0, graphql_1.getOperationAST)(args.document, args.operationName);
          if (!ast)
            throw null;
          operation = ast.operation;
        } catch {
          return [
            JSON.stringify({
              errors: [{ message: "Unable to detect operation AST" }]
            }),
            {
              status: 400,
              statusText: "Bad Request",
              headers: { "content-type": "application/json; charset=utf-8" }
            }
          ];
        }
        if (operation === "mutation" && req.method === "GET") {
          return [
            JSON.stringify({
              errors: [{ message: "Cannot perform mutations over GET" }]
            }),
            {
              status: 405,
              statusText: "Method Not Allowed",
              headers: {
                allow: "POST",
                "content-type": "application/json; charset=utf-8"
              }
            }
          ];
        }
        const validationErrs = validate(args.schema, args.document);
        if (validationErrs.length) {
          if (req.headers.get("accept") === "text/event-stream") {
            return {
              ctx: args.contextValue,
              perform() {
                return { errors: validationErrs };
              }
            };
          }
          return [
            JSON.stringify({ errors: validationErrs }),
            {
              status: 400,
              statusText: "Bad Request",
              headers: { "content-type": "application/json; charset=utf-8" }
            }
          ];
        }
        return {
          ctx: args.contextValue,
          async perform() {
            const result = await (operation === "subscription" ? subscribe(args) : execute(args));
            const maybeResult = await (onOperation === null || onOperation === void 0 ? void 0 : onOperation(args.contextValue, req, args, result));
            if (maybeResult)
              return maybeResult;
            return result;
          }
        };
      }
      return async function handler(req) {
        var _a2, _b, _c;
        const token = await authenticate(req);
        if (isResponse(token))
          return token;
        const accept = req.headers.get("accept") || "*/*";
        const stream = typeof token === "string" ? streams[token] : null;
        if (accept === "text/event-stream") {
          const maybeResponse = await (onConnect === null || onConnect === void 0 ? void 0 : onConnect(req));
          if (isResponse(maybeResponse))
            return maybeResponse;
          if (!stream) {
            const paramsOrResponse2 = await parseReq(req);
            if (isResponse(paramsOrResponse2))
              return paramsOrResponse2;
            const params2 = paramsOrResponse2;
            const distinctStream = createStream(null);
            distinctStream.ops[""] = null;
            const prepared2 = await prepare(req, params2);
            if (isResponse(prepared2))
              return prepared2;
            const result2 = await prepared2.perform();
            if ((0, common_1.isAsyncIterable)(result2))
              distinctStream.ops[""] = result2;
            distinctStream.from(prepared2.ctx, req, result2, null);
            return [
              distinctStream.subscribe(),
              {
                status: 200,
                statusText: "OK",
                headers: {
                  connection: "keep-alive",
                  "cache-control": "no-cache",
                  "content-encoding": "none",
                  "content-type": "text/event-stream; charset=utf-8"
                }
              }
            ];
          }
          if (stream.open) {
            return [
              JSON.stringify({ errors: [{ message: "Stream already open" }] }),
              {
                status: 409,
                statusText: "Conflict",
                headers: {
                  "content-type": "application/json; charset=utf-8"
                }
              }
            ];
          }
          return [
            stream.subscribe(),
            {
              status: 200,
              statusText: "OK",
              headers: {
                connection: "keep-alive",
                "cache-control": "no-cache",
                "content-encoding": "none",
                "content-type": "text/event-stream; charset=utf-8"
              }
            }
          ];
        }
        if (typeof token !== "string") {
          return [null, { status: 404, statusText: "Not Found" }];
        }
        if (req.method === "PUT") {
          if (!["*/*", "text/plain"].includes(accept)) {
            return [null, { status: 406, statusText: "Not Acceptable" }];
          }
          if (stream) {
            return [
              JSON.stringify({
                errors: [{ message: "Stream already registered" }]
              }),
              {
                status: 409,
                statusText: "Conflict",
                headers: {
                  "content-type": "application/json; charset=utf-8"
                }
              }
            ];
          }
          streams[token] = createStream(token);
          return [
            token,
            {
              status: 201,
              statusText: "Created",
              headers: {
                "content-type": "text/plain; charset=utf-8"
              }
            }
          ];
        } else if (req.method === "DELETE") {
          if (!stream) {
            return [
              JSON.stringify({
                errors: [{ message: "Stream not found" }]
              }),
              {
                status: 404,
                statusText: "Not Found",
                headers: {
                  "content-type": "application/json; charset=utf-8"
                }
              }
            ];
          }
          const opId2 = new URL((_a2 = req.url) !== null && _a2 !== void 0 ? _a2 : "", "http://localhost/").searchParams.get("operationId");
          if (!opId2) {
            return [
              JSON.stringify({
                errors: [{ message: "Operation ID is missing" }]
              }),
              {
                status: 400,
                statusText: "Bad Request",
                headers: {
                  "content-type": "application/json; charset=utf-8"
                }
              }
            ];
          }
          const op = stream.ops[opId2];
          if ((0, common_1.isAsyncGenerator)(op))
            op.return(void 0);
          delete stream.ops[opId2];
          return [
            null,
            {
              status: 200,
              statusText: "OK"
            }
          ];
        } else if (req.method !== "GET" && req.method !== "POST") {
          return [
            null,
            {
              status: 405,
              statusText: "Method Not Allowed",
              headers: {
                allow: "GET, POST, PUT, DELETE"
              }
            }
          ];
        } else if (!stream) {
          return [
            JSON.stringify({
              errors: [{ message: "Stream not found" }]
            }),
            {
              status: 404,
              statusText: "Not Found",
              headers: {
                "content-type": "application/json; charset=utf-8"
              }
            }
          ];
        }
        if (!["*/*", "application/*", "application/json"].includes(accept)) {
          return [
            null,
            {
              status: 406,
              statusText: "Not Acceptable"
            }
          ];
        }
        const paramsOrResponse = await parseReq(req);
        if (isResponse(paramsOrResponse))
          return paramsOrResponse;
        const params = paramsOrResponse;
        const opId = String((_c = (_b = params.extensions) === null || _b === void 0 ? void 0 : _b.operationId) !== null && _c !== void 0 ? _c : "");
        if (!opId) {
          return [
            JSON.stringify({
              errors: [{ message: "Operation ID is missing" }]
            }),
            {
              status: 400,
              statusText: "Bad Request",
              headers: {
                "content-type": "application/json; charset=utf-8"
              }
            }
          ];
        }
        if (opId in stream.ops) {
          return [
            JSON.stringify({
              errors: [{ message: "Operation with ID already exists" }]
            }),
            {
              status: 409,
              statusText: "Conflict",
              headers: {
                "content-type": "application/json; charset=utf-8"
              }
            }
          ];
        }
        stream.ops[opId] = null;
        const prepared = await prepare(req, params);
        if (isResponse(prepared))
          return prepared;
        if (!(opId in stream.ops)) {
          return [
            null,
            {
              status: 204,
              statusText: "No Content"
            }
          ];
        }
        const result = await prepared.perform();
        if (!(opId in stream.ops)) {
          if ((0, common_1.isAsyncGenerator)(result))
            result.return(void 0);
          if (!(opId in stream.ops)) {
            return [
              null,
              {
                status: 204,
                statusText: "No Content"
              }
            ];
          }
        }
        if ((0, common_1.isAsyncIterable)(result))
          stream.ops[opId] = result;
        stream.from(prepared.ctx, req, result, opId);
        return [null, { status: 202, statusText: "Accepted" }];
      };
    }
    exports.createHandler = createHandler;
    async function parseReq(req) {
      var _a2, _b, _c;
      const params = {};
      try {
        switch (true) {
          case req.method === "GET": {
            try {
              const [, search] = req.url.split("?");
              const searchParams = new URLSearchParams(search);
              params.operationName = (_a2 = searchParams.get("operationName")) !== null && _a2 !== void 0 ? _a2 : void 0;
              params.query = (_b = searchParams.get("query")) !== null && _b !== void 0 ? _b : void 0;
              const variables = searchParams.get("variables");
              if (variables)
                params.variables = JSON.parse(variables);
              const extensions = searchParams.get("extensions");
              if (extensions)
                params.extensions = JSON.parse(extensions);
            } catch {
              throw new Error("Unparsable URL");
            }
            break;
          }
          case (req.method === "POST" && ((_c = req.headers.get("content-type")) === null || _c === void 0 ? void 0 : _c.includes("application/json"))): {
            if (!req.body) {
              throw new Error("Missing body");
            }
            const body = typeof req.body === "function" ? await req.body() : req.body;
            const data = typeof body === "string" ? JSON.parse(body) : body;
            if (!(0, utils_1.isObject)(data)) {
              throw new Error("JSON body must be an object");
            }
            params.operationName = data.operationName;
            params.query = data.query;
            params.variables = data.variables;
            params.extensions = data.extensions;
            break;
          }
          default:
            return [
              null,
              {
                status: 415,
                statusText: "Unsupported Media Type"
              }
            ];
        }
        if (params.query == null)
          throw new Error("Missing query");
        if (typeof params.query !== "string")
          throw new Error("Invalid query");
        if (params.variables != null && (typeof params.variables !== "object" || Array.isArray(params.variables))) {
          throw new Error("Invalid variables");
        }
        if (params.extensions != null && (typeof params.extensions !== "object" || Array.isArray(params.extensions))) {
          throw new Error("Invalid extensions");
        }
        return params;
      } catch (err) {
        return [
          JSON.stringify({
            errors: [
              err instanceof Error ? {
                message: err.message
                // TODO: stack might leak sensitive information
                // stack: err.stack,
              } : err
            ]
          }),
          {
            status: 400,
            statusText: "Bad Request",
            headers: { "content-type": "application/json; charset=utf-8" }
          }
        ];
      }
    }
    function isResponse(val) {
      return Array.isArray(val);
    }
    function isExecutionResult(val) {
      return (0, utils_1.isObject)(val) && ("data" in val || "data" in val && val.data == null && "errors" in val);
    }
    exports.isExecutionResult = isExecutionResult;
  }
});

// ../node_modules/graphql-sse/lib/parser.js
var require_parser = __commonJS({
  "../node_modules/graphql-sse/lib/parser.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createParser = void 0;
    var common_1 = require_common();
    var ControlChars;
    (function(ControlChars2) {
      ControlChars2[ControlChars2["NewLine"] = 10] = "NewLine";
      ControlChars2[ControlChars2["CchunkiageReturn"] = 13] = "CchunkiageReturn";
      ControlChars2[ControlChars2["Space"] = 32] = "Space";
      ControlChars2[ControlChars2["Colon"] = 58] = "Colon";
    })(ControlChars || (ControlChars = {}));
    function createParser() {
      let buffer;
      let position;
      let fieldLength;
      let discardTrailingNewline = false;
      let message = { event: "", data: "" };
      let pending = [];
      const decoder = new TextDecoder();
      return function parse2(chunk) {
        if (buffer === void 0) {
          buffer = chunk;
          position = 0;
          fieldLength = -1;
        } else {
          const concat = new Uint8Array(buffer.length + chunk.length);
          concat.set(buffer);
          concat.set(chunk, buffer.length);
          buffer = concat;
        }
        const bufLength = buffer.length;
        let lineStart = 0;
        while (position < bufLength) {
          if (discardTrailingNewline) {
            if (buffer[position] === ControlChars.NewLine) {
              lineStart = ++position;
            }
            discardTrailingNewline = false;
          }
          let lineEnd = -1;
          for (; position < bufLength && lineEnd === -1; ++position) {
            switch (buffer[position]) {
              case ControlChars.Colon:
                if (fieldLength === -1) {
                  fieldLength = position - lineStart;
                }
                break;
              case ControlChars.CchunkiageReturn:
                discardTrailingNewline = true;
              case ControlChars.NewLine:
                lineEnd = position;
                break;
            }
          }
          if (lineEnd === -1) {
            break;
          } else if (lineStart === lineEnd) {
            if (message.event || message.data) {
              if (!message.event)
                throw new Error("Missing message event");
              const event = (0, common_1.validateStreamEvent)(message.event);
              const data = (0, common_1.parseStreamData)(event, message.data);
              pending.push({
                event,
                data
              });
              message = { event: "", data: "" };
            }
          } else if (fieldLength > 0) {
            const line = buffer.subarray(lineStart, lineEnd);
            const field = decoder.decode(line.subarray(0, fieldLength));
            const valueOffset = fieldLength + (line[fieldLength + 1] === ControlChars.Space ? 2 : 1);
            const value = decoder.decode(line.subarray(valueOffset));
            switch (field) {
              case "event":
                message.event = value;
                break;
              case "data":
                message.data = message.data ? message.data + "\n" + value : value;
                break;
            }
          }
          lineStart = position;
          fieldLength = -1;
        }
        if (lineStart === bufLength) {
          buffer = void 0;
          const messages = [...pending];
          pending = [];
          return messages;
        } else if (lineStart !== 0) {
          buffer = buffer.subarray(lineStart);
          position -= lineStart;
        }
      };
    }
    exports.createParser = createParser;
  }
});

// ../node_modules/graphql-sse/lib/client.js
var require_client2 = __commonJS({
  "../node_modules/graphql-sse/lib/client.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NetworkError = exports.createClient = void 0;
    var parser_1 = require_parser();
    var utils_1 = require_utils();
    var common_1 = require_common();
    __exportStar(require_common(), exports);
    function createClient(options) {
      const {
        singleConnection = false,
        lazy = true,
        lazyCloseTimeout = 0,
        onNonLazyError = console.error,
        /**
         * Generates a v4 UUID to be used as the ID using `Math`
         * as the random number generator. Supply your own generator
         * in case you need more uniqueness.
         *
         * Reference: https://gist.github.com/jed/982883
         */
        generateID = function generateUUID() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
            const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
            return v.toString(16);
          });
        },
        retryAttempts = 5,
        retry = async function randomisedExponentialBackoff(retries2) {
          let retryDelay = 1e3;
          for (let i = 0; i < retries2; i++) {
            retryDelay *= 2;
          }
          await new Promise((resolve) => setTimeout(resolve, retryDelay + // add random timeout from 300ms to 3s
          Math.floor(Math.random() * (3e3 - 300) + 300)));
        },
        credentials = "same-origin",
        referrer,
        referrerPolicy,
        onMessage,
        on: clientOn
      } = options;
      const fetchFn = options.fetchFn || fetch;
      const AbortControllerImpl = options.abortControllerImpl || AbortController;
      const client = /* @__PURE__ */ (() => {
        let disposed = false;
        const listeners = [];
        return {
          get disposed() {
            return disposed;
          },
          onDispose(cb) {
            if (disposed) {
              setTimeout(() => cb(), 0);
              return () => {
              };
            }
            listeners.push(cb);
            return () => {
              listeners.splice(listeners.indexOf(cb), 1);
            };
          },
          dispose() {
            if (disposed)
              return;
            disposed = true;
            for (const listener of [...listeners]) {
              listener();
            }
          }
        };
      })();
      let connCtrl, conn, locks = 0, retryingErr = null, retries = 0;
      async function getOrConnect() {
        try {
          if (client.disposed)
            throw new Error("Client has been disposed");
          return await (conn !== null && conn !== void 0 ? conn : conn = (async () => {
            var _a2, _b, _c;
            if (retryingErr) {
              await retry(retries);
              if (connCtrl.signal.aborted)
                throw new Error("Connection aborted by the client");
              retries++;
            }
            (_a2 = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connecting) === null || _a2 === void 0 ? void 0 : _a2.call(clientOn, !!retryingErr);
            connCtrl = new AbortControllerImpl();
            const unlistenDispose = client.onDispose(() => connCtrl.abort());
            connCtrl.signal.addEventListener("abort", () => {
              unlistenDispose();
              conn = void 0;
            });
            const url = typeof options.url === "function" ? await options.url() : options.url;
            if (connCtrl.signal.aborted)
              throw new Error("Connection aborted by the client");
            const headers = typeof options.headers === "function" ? await options.headers() : (_b = options.headers) !== null && _b !== void 0 ? _b : {};
            if (connCtrl.signal.aborted)
              throw new Error("Connection aborted by the client");
            let res;
            try {
              res = await fetchFn(url, {
                signal: connCtrl.signal,
                method: "PUT",
                credentials,
                referrer,
                referrerPolicy,
                headers
              });
            } catch (err) {
              throw new NetworkError(err);
            }
            if (res.status !== 201)
              throw new NetworkError(res);
            const token = await res.text();
            headers[common_1.TOKEN_HEADER_KEY] = token;
            const connected = await connect({
              signal: connCtrl.signal,
              headers,
              credentials,
              referrer,
              referrerPolicy,
              url,
              fetchFn,
              onMessage: (msg) => {
                var _a3;
                (_a3 = clientOn === null || clientOn === void 0 ? void 0 : clientOn.message) === null || _a3 === void 0 ? void 0 : _a3.call(clientOn, msg);
                onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg);
              }
            });
            (_c = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connected) === null || _c === void 0 ? void 0 : _c.call(clientOn, !!retryingErr);
            connected.waitForThrow().catch(() => conn = void 0);
            return connected;
          })());
        } catch (err) {
          conn = void 0;
          throw err;
        }
      }
      if (singleConnection && !lazy) {
        (async () => {
          locks++;
          for (; ; ) {
            try {
              const { waitForThrow } = await getOrConnect();
              await waitForThrow();
            } catch (err) {
              if (client.disposed)
                return;
              if (!(err instanceof NetworkError))
                return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(err);
              conn = void 0;
              if (!retryAttempts || retries >= retryAttempts)
                return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(err);
              retryingErr = err;
            }
          }
        })();
      }
      function subscribe(request, sink, on) {
        if (!singleConnection) {
          const control2 = new AbortControllerImpl();
          const unlisten2 = client.onDispose(() => {
            unlisten2();
            control2.abort();
          });
          (async () => {
            var _a2, _b, _c, _d, _e;
            let retryingErr2 = null, retries2 = 0;
            for (; ; ) {
              try {
                if (retryingErr2) {
                  await retry(retries2);
                  if (control2.signal.aborted)
                    throw new Error("Connection aborted by the client");
                  retries2++;
                }
                (_a2 = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connecting) === null || _a2 === void 0 ? void 0 : _a2.call(clientOn, !!retryingErr2);
                (_b = on === null || on === void 0 ? void 0 : on.connecting) === null || _b === void 0 ? void 0 : _b.call(on, !!retryingErr2);
                const url = typeof options.url === "function" ? await options.url() : options.url;
                if (control2.signal.aborted)
                  throw new Error("Connection aborted by the client");
                const headers = typeof options.headers === "function" ? await options.headers() : (_c = options.headers) !== null && _c !== void 0 ? _c : {};
                if (control2.signal.aborted)
                  throw new Error("Connection aborted by the client");
                const { getResults } = await connect({
                  signal: control2.signal,
                  headers: {
                    ...headers,
                    "content-type": "application/json; charset=utf-8"
                  },
                  credentials,
                  referrer,
                  referrerPolicy,
                  url,
                  body: JSON.stringify(request),
                  fetchFn,
                  onMessage: (msg) => {
                    var _a3, _b2;
                    (_a3 = clientOn === null || clientOn === void 0 ? void 0 : clientOn.message) === null || _a3 === void 0 ? void 0 : _a3.call(clientOn, msg);
                    (_b2 = on === null || on === void 0 ? void 0 : on.message) === null || _b2 === void 0 ? void 0 : _b2.call(on, msg);
                    onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg);
                  }
                });
                (_d = clientOn === null || clientOn === void 0 ? void 0 : clientOn.connected) === null || _d === void 0 ? void 0 : _d.call(clientOn, !!retryingErr2);
                (_e = on === null || on === void 0 ? void 0 : on.connected) === null || _e === void 0 ? void 0 : _e.call(on, !!retryingErr2);
                for await (const result of getResults()) {
                  retryingErr2 = null;
                  retries2 = 0;
                  sink.next(result);
                }
                return control2.abort();
              } catch (err) {
                if (control2.signal.aborted)
                  return;
                if (!(err instanceof NetworkError))
                  throw err;
                if (!retryAttempts || retries2 >= retryAttempts)
                  throw err;
                retryingErr2 = err;
              }
            }
          })().then(() => sink.complete()).catch((err) => sink.error(err));
          return () => control2.abort();
        }
        locks++;
        const control = new AbortControllerImpl();
        const unlisten = client.onDispose(() => {
          unlisten();
          control.abort();
        });
        (async () => {
          const operationId = generateID();
          request = {
            ...request,
            extensions: { ...request.extensions, operationId }
          };
          let complete = null;
          for (; ; ) {
            complete = null;
            try {
              const { url, headers, getResults } = await getOrConnect();
              let res;
              try {
                res = await fetchFn(url, {
                  signal: control.signal,
                  method: "POST",
                  credentials,
                  referrer,
                  referrerPolicy,
                  headers: {
                    ...headers,
                    "content-type": "application/json; charset=utf-8"
                  },
                  body: JSON.stringify(request)
                });
              } catch (err) {
                throw new NetworkError(err);
              }
              if (res.status !== 202)
                throw new NetworkError(res);
              complete = async () => {
                let res2;
                try {
                  const control2 = new AbortControllerImpl();
                  const unlisten2 = client.onDispose(() => {
                    unlisten2();
                    control2.abort();
                  });
                  res2 = await fetchFn(url + "?operationId=" + operationId, {
                    signal: control2.signal,
                    method: "DELETE",
                    credentials,
                    referrer,
                    referrerPolicy,
                    headers
                  });
                } catch (err) {
                  throw new NetworkError(err);
                }
                if (res2.status !== 200)
                  throw new NetworkError(res2);
              };
              for await (const result of getResults({
                signal: control.signal,
                operationId
              })) {
                retryingErr = null;
                retries = 0;
                sink.next(result);
              }
              complete = null;
              return control.abort();
            } catch (err) {
              if (control.signal.aborted)
                return await (complete === null || complete === void 0 ? void 0 : complete());
              if (!(err instanceof NetworkError)) {
                control.abort();
                throw err;
              }
              if (lazy) {
                conn = void 0;
              }
              if (!retryAttempts || retries >= retryAttempts) {
                control.abort();
                throw err;
              }
              retryingErr = err;
            } finally {
              if (control.signal.aborted && --locks === 0) {
                if (isFinite(lazyCloseTimeout) && lazyCloseTimeout > 0) {
                  setTimeout(() => {
                    if (!locks)
                      connCtrl.abort();
                  }, lazyCloseTimeout);
                } else {
                  connCtrl.abort();
                }
              }
            }
          }
        })().then(() => sink.complete()).catch((err) => sink.error(err));
        return () => control.abort();
      }
      return {
        subscribe,
        iterate(request, on) {
          const pending = [];
          const deferred = {
            done: false,
            error: null,
            resolve: () => {
            }
          };
          const dispose = subscribe(request, {
            next(val) {
              pending.push(val);
              deferred.resolve();
            },
            error(err) {
              deferred.done = true;
              deferred.error = err;
              deferred.resolve();
            },
            complete() {
              deferred.done = true;
              deferred.resolve();
            }
          }, on);
          const iterator = async function* iterator2() {
            for (; ; ) {
              if (!pending.length) {
                await new Promise((resolve) => deferred.resolve = resolve);
              }
              while (pending.length) {
                yield pending.shift();
              }
              if (deferred.error) {
                throw deferred.error;
              }
              if (deferred.done) {
                return;
              }
            }
          }();
          iterator.throw = async (err) => {
            if (!deferred.done) {
              deferred.done = true;
              deferred.error = err;
              deferred.resolve();
            }
            return { done: true, value: void 0 };
          };
          iterator.return = async () => {
            dispose();
            return { done: true, value: void 0 };
          };
          return iterator;
        },
        dispose() {
          client.dispose();
        }
      };
    }
    exports.createClient = createClient;
    var NetworkError = class extends Error {
      constructor(msgOrErrOrResponse) {
        let message, response;
        if (isResponseLike(msgOrErrOrResponse)) {
          response = msgOrErrOrResponse;
          message = "Server responded with " + msgOrErrOrResponse.status + ": " + msgOrErrOrResponse.statusText;
        } else if (msgOrErrOrResponse instanceof Error)
          message = msgOrErrOrResponse.message;
        else
          message = String(msgOrErrOrResponse);
        super(message);
        this.name = this.constructor.name;
        this.response = response;
      }
    };
    exports.NetworkError = NetworkError;
    function isResponseLike(val) {
      return (0, utils_1.isObject)(val) && typeof val["ok"] === "boolean" && typeof val["status"] === "number" && typeof val["statusText"] === "string";
    }
    async function connect(options) {
      const { signal, url, credentials, headers, body, referrer, referrerPolicy, fetchFn, onMessage } = options;
      const waiting = {};
      const queue = {};
      let res;
      try {
        res = await fetchFn(url, {
          signal,
          method: body ? "POST" : "GET",
          credentials,
          referrer,
          referrerPolicy,
          headers: {
            ...headers,
            accept: "text/event-stream"
          },
          body
        });
      } catch (err) {
        throw new NetworkError(err);
      }
      if (!res.ok)
        throw new NetworkError(res);
      if (!res.body)
        throw new Error("Missing response body");
      let error = null;
      let waitingForThrow;
      (async () => {
        var _a2;
        try {
          const parse2 = (0, parser_1.createParser)();
          for await (const chunk of toAsyncIterator(res.body)) {
            if (typeof chunk === "string")
              throw error = new Error(`Unexpected string chunk "${chunk}"`);
            let msgs;
            try {
              msgs = parse2(chunk);
            } catch (err) {
              throw error = err;
            }
            if (!msgs)
              continue;
            for (const msg of msgs) {
              try {
                onMessage === null || onMessage === void 0 ? void 0 : onMessage(msg);
              } catch (err) {
                throw error = err;
              }
              const operationId = msg.data && "id" in msg.data ? msg.data.id : "";
              if (!(operationId in queue))
                queue[operationId] = [];
              switch (msg.event) {
                case "next":
                  if (operationId)
                    queue[operationId].push(msg.data.payload);
                  else
                    queue[operationId].push(msg.data);
                  break;
                case "complete":
                  queue[operationId].push("complete");
                  break;
                default:
                  throw error = new Error(`Unexpected message event "${msg.event}"`);
              }
              (_a2 = waiting[operationId]) === null || _a2 === void 0 ? void 0 : _a2.proceed();
            }
          }
          if (Object.keys(waiting).length) {
            throw new Error("Connection closed while having active streams");
          }
        } catch (err) {
          if (!error && Object.keys(waiting).length) {
            error = new NetworkError(err);
          } else {
            error = err;
          }
          waitingForThrow === null || waitingForThrow === void 0 ? void 0 : waitingForThrow(error);
        } finally {
          Object.values(waiting).forEach(({ proceed }) => proceed());
        }
      })();
      return {
        url,
        headers,
        waitForThrow: () => new Promise((_, reject) => {
          if (error)
            return reject(error);
          waitingForThrow = reject;
        }),
        async *getResults(options2) {
          var _a2;
          const { signal: signal2, operationId = "" } = options2 !== null && options2 !== void 0 ? options2 : {};
          try {
            for (; ; ) {
              while ((_a2 = queue[operationId]) === null || _a2 === void 0 ? void 0 : _a2.length) {
                const result = queue[operationId].shift();
                if (result === "complete")
                  return;
                yield result;
              }
              if (error)
                throw error;
              if (signal2 === null || signal2 === void 0 ? void 0 : signal2.aborted)
                throw new Error("Getting results aborted by the client");
              await new Promise((resolve) => {
                const proceed = () => {
                  signal2 === null || signal2 === void 0 ? void 0 : signal2.removeEventListener("abort", proceed);
                  delete waiting[operationId];
                  resolve();
                };
                signal2 === null || signal2 === void 0 ? void 0 : signal2.addEventListener("abort", proceed);
                waiting[operationId] = { proceed };
              });
            }
          } finally {
            delete queue[operationId];
          }
        }
      };
    }
    function toAsyncIterator(val) {
      if (typeof Object(val)[Symbol.asyncIterator] === "function") {
        val = val;
        return val[Symbol.asyncIterator]();
      }
      return async function* () {
        const reader = val.getReader();
        let result;
        do {
          result = await reader.read();
          if (result.value !== void 0)
            yield result.value;
        } while (!result.done);
      }();
    }
  }
});

// ../node_modules/graphql-sse/lib/index.js
var require_lib2 = __commonJS({
  "../node_modules/graphql-sse/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_common(), exports);
    __exportStar(require_handler(), exports);
    __exportStar(require_client2(), exports);
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/apollo/sseLink.js
var require_sseLink = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/apollo/sseLink.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var sseLink_exports = {};
    __export2(sseLink_exports, {
      SSELink: () => SSELink,
      isLiveQuery: () => isLiveQuery,
      isSubscription: () => isSubscription
    });
    module2.exports = __toCommonJS2(sseLink_exports);
    var import_core = require_core();
    var import_utilities = require_utilities();
    var import_graphql = (init_graphql(), __toCommonJS(graphql_exports));
    var import_graphql_sse = require_lib2();
    var mapCredentialsHeader = (httpLinkCredentials) => {
      if (!httpLinkCredentials) {
        return void 0;
      }
      switch (httpLinkCredentials) {
        case "omit":
        case "same-origin":
        case "include":
          return httpLinkCredentials;
        default:
          return void 0;
      }
    };
    var mapReferrerPolicyHeader = (referrerPolicy) => {
      if (!referrerPolicy) {
        return void 0;
      }
      switch (referrerPolicy) {
        case "no-referrer":
        case "no-referrer-when-downgrade":
        case "same-origin":
        case "origin":
        case "strict-origin":
        case "origin-when-cross-origin":
        case "strict-origin-when-cross-origin":
        case "unsafe-url":
          return referrerPolicy;
        default:
          return void 0;
      }
    };
    var hasTrustedDocument = (operation) => {
      var _a2, _b;
      return (_b = (_a2 = operation.extensions) == null ? void 0 : _a2.persistedQuery) == null ? void 0 : _b.sha256Hash;
    };
    var isSubscription = (definition) => {
      return definition.kind === import_graphql.Kind.OPERATION_DEFINITION && definition.operation === import_graphql.OperationTypeNode.SUBSCRIPTION;
    };
    var isLiveQuery = (definition) => {
      var _a2;
      if (definition.kind !== import_graphql.Kind.OPERATION_DEFINITION || definition.operation !== import_graphql.OperationTypeNode.QUERY) {
        return false;
      }
      return !!((_a2 = definition.directives) == null ? void 0 : _a2.find((d) => d.name.value === "live"));
    };
    var SSELink = class extends import_core.ApolloLink {
      constructor(options) {
        super();
        __publicField(this, "client");
        const { url, auth, headers, httpLinkConfig } = options;
        const { credentials, referrer, referrerPolicy } = (httpLinkConfig == null ? void 0 : httpLinkConfig.headers) || {};
        this.client = (0, import_graphql_sse.createClient)({
          url,
          headers: async () => {
            const token = await auth.tokenFn();
            if (!token) {
              return { ...headers };
            }
            return {
              Authorization: `Bearer ${token}`,
              "auth-provider": auth.authProviderType,
              ...headers
            };
          },
          credentials: mapCredentialsHeader(credentials),
          referrer,
          referrerPolicy: mapReferrerPolicyHeader(referrerPolicy)
        });
      }
      request(operation) {
        return new import_utilities.Observable((sink) => {
          let request;
          if (hasTrustedDocument(operation)) {
            delete operation.query;
            request = { ...operation };
          } else {
            request = {
              ...operation,
              query: (0, import_graphql.print)(operation.query)
            };
          }
          return this.client.subscribe(request, {
            next: sink.next.bind(sink),
            complete: sink.complete.bind(sink),
            error: sink.error.bind(sink)
          });
        });
      }
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/apollo/useCache.js
var require_useCache = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/apollo/useCache.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var useCache_exports = {};
    __export2(useCache_exports, {
      useCache: () => useCache2
    });
    module2.exports = __toCommonJS2(useCache_exports);
    var import_hooks = require_hooks();
    var useCache2 = () => {
      const client = (0, import_hooks.useApolloClient)();
      const cache = client.cache;
      const extract = (optimistic = false) => cache.extract(optimistic);
      const identify = (object) => {
        return { id: cache.identify(object) };
      };
      const modify = (object, fields) => {
        return cache.modify({ ...identify(object), fields });
      };
      const evict = (object) => {
        return cache.evict(identify(object));
      };
      const resetStore = () => {
        return client.resetStore();
      };
      const clearStore = () => {
        return client.clearStore();
      };
      return { cache, evict, extract, identify, modify, resetStore, clearStore };
    };
  }
});

// ../node_modules/@redwoodjs/web/dist/cjs/apollo/index.js
var require_apollo = __commonJS({
  "../node_modules/@redwoodjs/web/dist/cjs/apollo/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var apollo_exports = {};
    __export2(apollo_exports, {
      RedwoodApolloProvider: () => RedwoodApolloProvider,
      fragmentRegistry: () => import_fragmentRegistry.fragmentRegistry,
      registerFragment: () => import_fragmentRegistry.registerFragment,
      registerFragments: () => import_fragmentRegistry.registerFragments,
      useCache: () => import_useCache.useCache
    });
    module2.exports = __toCommonJS2(apollo_exports);
    var import_react = __toESM2(require_react(), 1);
    var import_client = (init_client(), __toCommonJS(client_exports));
    var import_core = require_core2();
    var import_context = require_context();
    var import_persisted_queries = require_persisted_queries();
    var import_hooks = require_hooks();
    var import_utilities = require_utilities();
    var import_printer = require_printer();
    var import_auth = require_cjs();
    var import_typeOverride = require_typeOverride();
    var import_apollo_upload_client = require_apollo_upload_client();
    var import_FetchConfigProvider = require_FetchConfigProvider();
    var import_GraphQLHooksProvider = require_GraphQLHooksProvider();
    var import_fragmentRegistry = require_fragmentRegistry();
    var SSELinkExports = __toESM2(require_sseLink(), 1);
    var import_useCache = require_useCache();
    var { SSELink, isSubscription, isLiveQuery } = SSELinkExports;
    var ApolloProviderWithFetchConfig = ({ config: config2, children, useAuth: useAuth2 = import_auth.useNoAuth, logLevel }) => {
      (0, import_core.setLogVerbosity)(logLevel);
      const { getToken, type: authProviderType } = useAuth2();
      const data = {
        mostRecentRequest: void 0,
        mostRecentResponse: void 0
      };
      const updateDataApolloLink = new import_client.ApolloLink((operation, forward) => {
        const { operationName, query, variables } = operation;
        data.mostRecentRequest = {};
        data.mostRecentRequest.operationName = operationName;
        data.mostRecentRequest.operationKind = query == null ? void 0 : query.kind.toString();
        data.mostRecentRequest.variables = variables;
        data.mostRecentRequest.query = query && (0, import_printer.print)(operation.query);
        return forward(operation).map((result) => {
          data.mostRecentResponse = result;
          return result;
        });
      });
      const withToken = (0, import_context.setContext)(async () => {
        const token = await getToken();
        return { token };
      });
      const { headers, uri } = (0, import_FetchConfigProvider.useFetchConfig)();
      const authMiddleware = new import_client.ApolloLink((operation, forward) => {
        const { token } = operation.getContext();
        const authHeaders = token ? {
          "auth-provider": authProviderType,
          authorization: `Bearer ${token}`
        } : {};
        operation.setContext(() => ({
          headers: {
            ...operation.getContext().headers,
            ...headers,
            // Duped auth headers, because we may remove the `FetchConfigProvider` at a later date.
            ...authHeaders
          }
        }));
        return forward(operation);
      });
      const { httpLinkConfig, link: redwoodApolloLink, ...rest } = config2 ?? {};
      const uploadLink = (0, import_apollo_upload_client.createUploadLink)({
        uri,
        ...httpLinkConfig
        // The upload link types don't match the ApolloLink types, even though it comes from Apollo
        // because they use ESM imports and we're using the default ones.
      });
      const uploadOrSSELink = typeof SSELink !== "undefined" ? (0, import_client.split)(
        ({ query }) => {
          const definition = (0, import_utilities.getMainDefinition)(query);
          return isSubscription(definition) || isLiveQuery(definition);
        },
        new SSELink({
          url: uri,
          auth: { authProviderType, tokenFn: getToken },
          httpLinkConfig,
          headers
        }),
        uploadLink
      ) : uploadLink;
      const terminatingLink = (0, import_client.split)(
        ({ query }) => {
          var _a2;
          const documentQuery = query;
          return ((_a2 = documentQuery == null ? void 0 : documentQuery["__meta__"]) == null ? void 0 : _a2["hash"]) !== void 0;
        },
        (0, import_persisted_queries.createPersistedQueryLink)({
          generateHash: (document2) => document2["__meta__"]["hash"]
        }).concat(uploadOrSSELink),
        uploadOrSSELink
      );
      const redwoodApolloLinks = [
        { name: "withToken", link: withToken },
        { name: "authMiddleware", link: authMiddleware },
        { name: "updateDataApolloLink", link: updateDataApolloLink },
        { name: "httpLink", link: terminatingLink }
      ];
      let link = redwoodApolloLink;
      link ?? (link = import_client.ApolloLink.from(redwoodApolloLinks.map((l) => l.link)));
      if (typeof link === "function") {
        link = link(redwoodApolloLinks);
      }
      const client = new import_client.ApolloClient({
        // Default options for every Cell. Better to specify them here than in `beforeQuery` where it's too easy to overwrite them.
        // See https://www.apollographql.com/docs/react/api/core/ApolloClient/#example-defaultoptions-object.
        defaultOptions: {
          watchQuery: {
            // The `fetchPolicy` we expect:
            //
            // > Apollo Client executes the full query against both the cache and your GraphQL server.
            // > The query automatically updates if the result of the server-side query modifies cached fields.
            //
            // See https://www.apollographql.com/docs/react/data/queries/#cache-and-network.
            fetchPolicy: "cache-and-network",
            // So that Cells rerender when refetching.
            // See https://www.apollographql.com/docs/react/data/queries/#inspecting-loading-states.
            notifyOnNetworkStatusChange: true
          }
        },
        link,
        ...rest
      });
      const extendErrorAndRethrow = (error, _errorInfo) => {
        error["mostRecentRequest"] = data.mostRecentRequest;
        error["mostRecentResponse"] = data.mostRecentResponse;
        throw error;
      };
      return import_react.default.createElement(import_client.ApolloProvider, { client }, import_react.default.createElement(ErrorBoundary, { onError: extendErrorAndRethrow }, children));
    };
    var ErrorBoundary = class extends import_react.default.Component {
      componentDidCatch(...args) {
        this.setState({});
        this.props.onError(...args);
      }
      render() {
        return this.props.children;
      }
    };
    var RedwoodApolloProvider = ({
      graphQLClientConfig,
      fragments,
      useAuth: useAuth2 = import_auth.useNoAuth,
      logLevel = "debug",
      children
    }) => {
      const { cacheConfig, ...config2 } = graphQLClientConfig ?? {};
      if (fragments) {
        import_fragmentRegistry.fragmentRegistry.register(...fragments);
      }
      const cache = new import_client.InMemoryCache({
        fragments: import_fragmentRegistry.fragmentRegistry,
        possibleTypes: cacheConfig == null ? void 0 : cacheConfig.possibleTypes,
        ...cacheConfig
      }).restore((globalThis == null ? void 0 : globalThis.__REDWOOD__APOLLO_STATE) ?? {});
      return import_react.default.createElement(import_FetchConfigProvider.FetchConfigProvider, { useAuth: useAuth2 }, import_react.default.createElement(
        ApolloProviderWithFetchConfig,
        {
          config: { cache, ...config2 },
          useAuth: useAuth2,
          logLevel
        },
        import_react.default.createElement(
          import_GraphQLHooksProvider.GraphQLHooksProvider,
          {
            useQuery: import_hooks.useQuery,
            useMutation: import_hooks.useMutation,
            useSubscription: import_hooks.useSubscription,
            useBackgroundQuery: import_hooks.useBackgroundQuery,
            useReadQuery: import_hooks.useReadQuery,
            useSuspenseQuery: import_hooks.useSuspenseQuery
          },
          children
        )
      ));
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/MockParamsProvider.js
var require_MockParamsProvider = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/MockParamsProvider.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var MockParamsProvider_exports = {};
    __export2(MockParamsProvider_exports, {
      MockParamsProvider: () => MockParamsProvider
    });
    module2.exports = __toCommonJS2(MockParamsProvider_exports);
    var import_react = __toESM2(require_react());
    var import_router = require_cjs2();
    var MockParamsProvider = ({ children }) => {
      const location2 = (0, import_router.useLocation)();
      const searchParams = (0, import_router.parseSearch)(location2.search);
      return import_react.default.createElement(import_router.ParamsContext.Provider, { value: { params: { ...searchParams } } }, children);
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/MockProviders.js
var require_MockProviders = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/MockProviders.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var MockProviders_exports = {};
    __export2(MockProviders_exports, {
      MockProviders: () => MockProviders2
    });
    module2.exports = __toCommonJS2(MockProviders_exports);
    var import_react = __toESM2(require_react());
    var import_auth = require_cjs();
    var import_router = require_cjs2();
    var import_web = require_cjs3();
    var import_apollo = require_apollo();
    var import_MockParamsProvider = require_MockParamsProvider();
    var UserRoutes;
    try {
      const userRoutesModule = __require("~__REDWOOD__USER_ROUTES_FOR_MOCK");
      UserRoutes = userRoutesModule.default;
    } catch {
      UserRoutes = () => import_react.default.createElement(import_react.default.Fragment, null);
    }
    var MockProviders2 = ({ children }) => {
      return import_react.default.createElement(import_web.RedwoodProvider, { titleTemplate: "%PageTitle | %AppTitle" }, import_react.default.createElement(import_apollo.RedwoodApolloProvider, { useAuth: import_auth.useAuth }, import_react.default.createElement(UserRoutes, null), import_react.default.createElement(import_router.LocationProvider, null, import_react.default.createElement(import_MockParamsProvider.MockParamsProvider, null, children))));
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/customRender.js
var require_customRender = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/customRender.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var customRender_exports = {};
    __export2(customRender_exports, {
      customRender: () => customRender,
      customRenderHook: () => customRenderHook
    });
    module2.exports = __toCommonJS2(customRender_exports);
    var import_react = __toESM2(require_react());
    var import_react2 = (init_react_esm(), __toCommonJS(react_esm_exports));
    var import_MockProviders = require_MockProviders();
    var customRender = (ui, options = {}) => {
      return (0, import_react2.render)(ui, {
        wrapper: (props) => import_react.default.createElement(import_MockProviders.MockProviders, { ...props }),
        ...options
      });
    };
    var customRenderHook = (render22, options) => {
      return (0, import_react2.renderHook)(render22, {
        wrapper: (props) => import_react.default.createElement(import_MockProviders.MockProviders, { ...props }),
        ...options
      });
    };
  }
});

// ../node_modules/headers-polyfill/lib/index.js
var require_lib3 = __commonJS({
  "../node_modules/headers-polyfill/lib/index.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    function _array_like_to_array(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _array_with_holes(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _class_call_check(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties2(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _create_class(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties2(Constructor, staticProps);
      return Constructor;
    }
    function _instanceof(left, right) {
      if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
      } else {
        return left instanceof right;
      }
    }
    function _iterable_to_array_limit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _non_iterable_rest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _sliced_to_array(arr, i) {
      return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
    }
    function _unsupported_iterable_to_array(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _array_like_to_array(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
    }
    function _ts_generator(thisArg, body) {
      var f, y, t, g, _ = {
        label: 0,
        sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      };
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([
            n,
            v
          ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [
            op[0] & 2,
            t.value
          ];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };
            case 5:
              _.label++;
              y = op[1];
              op = [
                0
              ];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [
            6,
            e
          ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS2 = function(cb, mod) {
      return function __require2() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
          exports: {}
        }).exports, mod), mod.exports;
      };
    };
    var __export2 = function(target, all) {
      for (var name in all) __defProp(target, name, {
        get: all[name],
        enumerable: true
      });
    };
    var __copyProps = function(to, from, except, desc) {
      if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
        try {
          var _loop = function() {
            var key = _step.value;
            if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
              get: function() {
                return from[key];
              },
              enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
            });
          };
          for (var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) _loop();
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      return to;
    };
    var __toESM2 = function(mod, isNodeMode, target) {
      return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
      }) : target, mod);
    };
    var __toCommonJS2 = function(mod) {
      return __copyProps(__defProp({}, "__esModule", {
        value: true
      }), mod);
    };
    var require_set_cookie2 = __commonJS2({
      "node_modules/set-cookie-parser/lib/set-cookie.js": function(exports2, module22) {
        "use strict";
        var isNonEmptyString = function isNonEmptyString2(str) {
          return typeof str === "string" && !!str.trim();
        };
        var parseString = function parseString2(setCookieValue, options) {
          var parts = setCookieValue.split(";").filter(isNonEmptyString);
          var nameValuePairStr = parts.shift();
          var parsed = parseNameValuePair(nameValuePairStr);
          var name = parsed.name;
          var value = parsed.value;
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          try {
            value = options.decodeValues ? decodeURIComponent(value) : value;
          } catch (e) {
            console.error("set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.", e);
          }
          var cookie = {
            name,
            value
          };
          parts.forEach(function(part) {
            var sides = part.split("=");
            var key = sides.shift().trimLeft().toLowerCase();
            var value2 = sides.join("=");
            if (key === "expires") {
              cookie.expires = new Date(value2);
            } else if (key === "max-age") {
              cookie.maxAge = parseInt(value2, 10);
            } else if (key === "secure") {
              cookie.secure = true;
            } else if (key === "httponly") {
              cookie.httpOnly = true;
            } else if (key === "samesite") {
              cookie.sameSite = value2;
            } else {
              cookie[key] = value2;
            }
          });
          return cookie;
        };
        var parseNameValuePair = function parseNameValuePair2(nameValuePairStr) {
          var name = "";
          var value = "";
          var nameValueArr = nameValuePairStr.split("=");
          if (nameValueArr.length > 1) {
            name = nameValueArr.shift();
            value = nameValueArr.join("=");
          } else {
            value = nameValuePairStr;
          }
          return {
            name,
            value
          };
        };
        var parse2 = function parse3(input, options) {
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          if (!input) {
            if (!options.map) {
              return [];
            } else {
              return {};
            }
          }
          if (input.headers) {
            if (typeof input.headers.getSetCookie === "function") {
              input = input.headers.getSetCookie();
            } else if (input.headers["set-cookie"]) {
              input = input.headers["set-cookie"];
            } else {
              var sch = input.headers[Object.keys(input.headers).find(function(key) {
                return key.toLowerCase() === "set-cookie";
              })];
              if (!sch && input.headers.cookie && !options.silent) {
                console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.");
              }
              input = sch;
            }
          }
          if (!Array.isArray(input)) {
            input = [
              input
            ];
          }
          options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
          if (!options.map) {
            return input.filter(isNonEmptyString).map(function(str) {
              return parseString(str, options);
            });
          } else {
            var cookies = {};
            return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
              var cookie = parseString(str, options);
              cookies2[cookie.name] = cookie;
              return cookies2;
            }, cookies);
          }
        };
        var splitCookiesString2 = function splitCookiesString22(cookiesString) {
          if (Array.isArray(cookiesString)) {
            return cookiesString;
          }
          if (typeof cookiesString !== "string") {
            return [];
          }
          var cookiesStrings = [];
          var pos = 0;
          var start;
          var ch;
          var lastComma;
          var nextStart;
          var cookiesSeparatorFound;
          function skipWhitespace() {
            while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
              pos += 1;
            }
            return pos < cookiesString.length;
          }
          function notSpecialChar() {
            ch = cookiesString.charAt(pos);
            return ch !== "=" && ch !== ";" && ch !== ",";
          }
          while (pos < cookiesString.length) {
            start = pos;
            cookiesSeparatorFound = false;
            while (skipWhitespace()) {
              ch = cookiesString.charAt(pos);
              if (ch === ",") {
                lastComma = pos;
                pos += 1;
                skipWhitespace();
                nextStart = pos;
                while (pos < cookiesString.length && notSpecialChar()) {
                  pos += 1;
                }
                if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
                  cookiesSeparatorFound = true;
                  pos = nextStart;
                  cookiesStrings.push(cookiesString.substring(start, lastComma));
                  start = pos;
                } else {
                  pos = lastComma + 1;
                }
              } else {
                pos += 1;
              }
            }
            if (!cookiesSeparatorFound || pos >= cookiesString.length) {
              cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
            }
          }
          return cookiesStrings;
        };
        var defaultParseOptions = {
          decodeValues: true,
          map: false,
          silent: false
        };
        module22.exports = parse2;
        module22.exports.parse = parse2;
        module22.exports.parseString = parseString;
        module22.exports.splitCookiesString = splitCookiesString2;
      }
    });
    var src_exports = {};
    __export2(src_exports, {
      Headers: function() {
        return HeadersPolyfill;
      },
      flattenHeadersList: function() {
        return flattenHeadersList;
      },
      flattenHeadersObject: function() {
        return flattenHeadersObject;
      },
      headersToList: function() {
        return headersToList;
      },
      headersToObject: function() {
        return headersToObject;
      },
      headersToString: function() {
        return headersToString;
      },
      listToHeaders: function() {
        return listToHeaders;
      },
      objectToHeaders: function() {
        return objectToHeaders;
      },
      reduceHeadersObject: function() {
        return reduceHeadersObject;
      },
      stringToHeaders: function() {
        return stringToHeaders;
      }
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_set_cookie_parser = __toESM2(require_set_cookie2());
    var HEADERS_INVALID_CHARACTERS = /[^a-z0-9\-#$%&'*+.^_`|~]/i;
    function normalizeHeaderName(name) {
      if (HEADERS_INVALID_CHARACTERS.test(name) || name.trim() === "") {
        throw new TypeError("Invalid character in header field name");
      }
      return name.trim().toLowerCase();
    }
    var charCodesToRemove = [
      String.fromCharCode(10),
      String.fromCharCode(13),
      String.fromCharCode(9),
      String.fromCharCode(32)
    ];
    var HEADER_VALUE_REMOVE_REGEXP = new RegExp("(^[".concat(charCodesToRemove.join(""), "]|$[").concat(charCodesToRemove.join(""), "])"), "g");
    function normalizeHeaderValue(value) {
      var nextValue = value.replace(HEADER_VALUE_REMOVE_REGEXP, "");
      return nextValue;
    }
    function isValidHeaderName(value) {
      if (typeof value !== "string") {
        return false;
      }
      if (value.length === 0) {
        return false;
      }
      for (var i = 0; i < value.length; i++) {
        var character = value.charCodeAt(i);
        if (character > 127 || !isToken(character)) {
          return false;
        }
      }
      return true;
    }
    function isToken(value) {
      return ![
        127,
        32,
        "(",
        ")",
        "<",
        ">",
        "@",
        ",",
        ";",
        ":",
        "\\",
        '"',
        "/",
        "[",
        "]",
        "?",
        "=",
        "{",
        "}"
      ].includes(value);
    }
    function isValidHeaderValue(value) {
      if (typeof value !== "string") {
        return false;
      }
      if (value.trim() !== value) {
        return false;
      }
      for (var i = 0; i < value.length; i++) {
        var character = value.charCodeAt(i);
        if (character === 0 || character === 10 || character === 13) {
          return false;
        }
      }
      return true;
    }
    var NORMALIZED_HEADERS = Symbol("normalizedHeaders");
    var RAW_HEADER_NAMES = Symbol("rawHeaderNames");
    var HEADER_VALUE_DELIMITER = ", ";
    var _a2;
    var _b;
    var HeadersPolyfill = function() {
      "use strict";
      function HeadersPolyfill1(init) {
        var _this = this;
        _class_call_check(this, HeadersPolyfill1);
        var _init;
        this[_a2] = {};
        this[_b] = /* @__PURE__ */ new Map();
        if ([
          "Headers",
          "HeadersPolyfill"
        ].includes((_init = init) === null || _init === void 0 ? void 0 : _init.constructor.name) || _instanceof(init, HeadersPolyfill)) {
          var initialHeaders = init;
          initialHeaders.forEach(function(value, name) {
            _this.append(name, value);
          }, this);
        } else if (Array.isArray(init)) {
          init.forEach(function(param) {
            var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];
            _this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);
          });
        } else if (init) {
          Object.getOwnPropertyNames(init).forEach(function(name) {
            var value = init[name];
            _this.append(name, Array.isArray(value) ? value.join(HEADER_VALUE_DELIMITER) : value);
          });
        }
      }
      _create_class(HeadersPolyfill1, [
        {
          key: (_a2 = NORMALIZED_HEADERS, _b = RAW_HEADER_NAMES, Symbol.iterator),
          value: function value() {
            return this.entries();
          }
        },
        {
          key: "keys",
          value: function keys() {
            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, name, err;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
                  _state.label = 1;
                case 1:
                  _state.trys.push([
                    1,
                    6,
                    7,
                    8
                  ]);
                  _iterator = this.entries()[Symbol.iterator]();
                  _state.label = 2;
                case 2:
                  if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    5
                  ];
                  _step_value = _sliced_to_array(_step.value, 1), name = _step_value[0];
                  return [
                    4,
                    name
                  ];
                case 3:
                  _state.sent();
                  _state.label = 4;
                case 4:
                  _iteratorNormalCompletion = true;
                  return [
                    3,
                    2
                  ];
                case 5:
                  return [
                    3,
                    8
                  ];
                case 6:
                  err = _state.sent();
                  _didIteratorError = true;
                  _iteratorError = err;
                  return [
                    3,
                    8
                  ];
                case 7:
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                  return [
                    7
                  ];
                case 8:
                  return [
                    2
                  ];
              }
            });
          }
        },
        {
          key: "values",
          value: function values() {
            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, value, err;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
                  _state.label = 1;
                case 1:
                  _state.trys.push([
                    1,
                    6,
                    7,
                    8
                  ]);
                  _iterator = this.entries()[Symbol.iterator]();
                  _state.label = 2;
                case 2:
                  if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    5
                  ];
                  _step_value = _sliced_to_array(_step.value, 2), value = _step_value[1];
                  return [
                    4,
                    value
                  ];
                case 3:
                  _state.sent();
                  _state.label = 4;
                case 4:
                  _iteratorNormalCompletion = true;
                  return [
                    3,
                    2
                  ];
                case 5:
                  return [
                    3,
                    8
                  ];
                case 6:
                  err = _state.sent();
                  _didIteratorError = true;
                  _iteratorError = err;
                  return [
                    3,
                    8
                  ];
                case 7:
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                  return [
                    7
                  ];
                case 8:
                  return [
                    2
                  ];
              }
            });
          }
        },
        {
          key: "entries",
          value: function entries() {
            var sortedKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, name, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, value, err, err;
            return _ts_generator(this, function(_state) {
              switch (_state.label) {
                case 0:
                  sortedKeys = Object.keys(this[NORMALIZED_HEADERS]).sort(function(a, b) {
                    return a.localeCompare(b);
                  });
                  _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
                  _state.label = 1;
                case 1:
                  _state.trys.push([
                    1,
                    15,
                    16,
                    17
                  ]);
                  _iterator = sortedKeys[Symbol.iterator]();
                  _state.label = 2;
                case 2:
                  if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    14
                  ];
                  name = _step.value;
                  if (!(name === "set-cookie")) return [
                    3,
                    11
                  ];
                  _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = void 0;
                  _state.label = 3;
                case 3:
                  _state.trys.push([
                    3,
                    8,
                    9,
                    10
                  ]);
                  _iterator1 = this.getSetCookie()[Symbol.iterator]();
                  _state.label = 4;
                case 4:
                  if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                    3,
                    7
                  ];
                  value = _step1.value;
                  return [
                    4,
                    [
                      name,
                      value
                    ]
                  ];
                case 5:
                  _state.sent();
                  _state.label = 6;
                case 6:
                  _iteratorNormalCompletion1 = true;
                  return [
                    3,
                    4
                  ];
                case 7:
                  return [
                    3,
                    10
                  ];
                case 8:
                  err = _state.sent();
                  _didIteratorError1 = true;
                  _iteratorError1 = err;
                  return [
                    3,
                    10
                  ];
                case 9:
                  try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                      _iterator1.return();
                    }
                  } finally {
                    if (_didIteratorError1) {
                      throw _iteratorError1;
                    }
                  }
                  return [
                    7
                  ];
                case 10:
                  return [
                    3,
                    13
                  ];
                case 11:
                  return [
                    4,
                    [
                      name,
                      this.get(name)
                    ]
                  ];
                case 12:
                  _state.sent();
                  _state.label = 13;
                case 13:
                  _iteratorNormalCompletion = true;
                  return [
                    3,
                    2
                  ];
                case 14:
                  return [
                    3,
                    17
                  ];
                case 15:
                  err = _state.sent();
                  _didIteratorError = true;
                  _iteratorError = err;
                  return [
                    3,
                    17
                  ];
                case 16:
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                  return [
                    7
                  ];
                case 17:
                  return [
                    2
                  ];
              }
            });
          }
        },
        {
          key: "has",
          value: function has(name) {
            if (!isValidHeaderName(name)) {
              throw new TypeError('Invalid header name "'.concat(name, '"'));
            }
            return this[NORMALIZED_HEADERS].hasOwnProperty(normalizeHeaderName(name));
          }
        },
        {
          key: "get",
          value: function get(name) {
            if (!isValidHeaderName(name)) {
              throw TypeError('Invalid header name "'.concat(name, '"'));
            }
            var _this_NORMALIZED_HEADERS_normalizeHeaderName;
            return (_this_NORMALIZED_HEADERS_normalizeHeaderName = this[NORMALIZED_HEADERS][normalizeHeaderName(name)]) !== null && _this_NORMALIZED_HEADERS_normalizeHeaderName !== void 0 ? _this_NORMALIZED_HEADERS_normalizeHeaderName : null;
          }
        },
        {
          key: "set",
          value: function set(name, value) {
            if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {
              return;
            }
            var normalizedName = normalizeHeaderName(name);
            var normalizedValue = normalizeHeaderValue(value);
            this[NORMALIZED_HEADERS][normalizedName] = normalizeHeaderValue(normalizedValue);
            this[RAW_HEADER_NAMES].set(normalizedName, name);
          }
        },
        {
          key: "append",
          value: function append(name, value) {
            if (!isValidHeaderName(name) || !isValidHeaderValue(value)) {
              return;
            }
            var normalizedName = normalizeHeaderName(name);
            var normalizedValue = normalizeHeaderValue(value);
            var resolvedValue = this.has(normalizedName) ? "".concat(this.get(normalizedName), ", ").concat(normalizedValue) : normalizedValue;
            this.set(name, resolvedValue);
          }
        },
        {
          key: "delete",
          value: function _delete(name) {
            if (!isValidHeaderName(name)) {
              return;
            }
            if (!this.has(name)) {
              return;
            }
            var normalizedName = normalizeHeaderName(name);
            delete this[NORMALIZED_HEADERS][normalizedName];
            this[RAW_HEADER_NAMES].delete(normalizedName);
          }
        },
        {
          key: "all",
          value: function all() {
            return this[NORMALIZED_HEADERS];
          }
        },
        {
          key: "raw",
          value: function raw() {
            var rawHeaders = {};
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
            try {
              for (var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step_value = _sliced_to_array(_step.value, 2), name = _step_value[0], value = _step_value[1];
                rawHeaders[this[RAW_HEADER_NAMES].get(name)] = value;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
            return rawHeaders;
          }
        },
        {
          key: "forEach",
          value: function forEach(callback, thisArg) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
            try {
              for (var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step_value = _sliced_to_array(_step.value, 2), name = _step_value[0], value = _step_value[1];
                callback.call(thisArg, value, name, this);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        },
        {
          key: "getSetCookie",
          value: function getSetCookie() {
            var setCookieHeader = this.get("set-cookie");
            if (setCookieHeader === null) {
              return [];
            }
            if (setCookieHeader === "") {
              return [
                ""
              ];
            }
            return (0, import_set_cookie_parser.splitCookiesString)(setCookieHeader);
          }
        }
      ]);
      return HeadersPolyfill1;
    }();
    function headersToList(headers) {
      var headersList = [];
      headers.forEach(function(value, name) {
        var resolvedValue = value.includes(",") ? value.split(",").map(function(value2) {
          return value2.trim();
        }) : value;
        headersList.push([
          name,
          resolvedValue
        ]);
      });
      return headersList;
    }
    function headersToString(headers) {
      var list = headersToList(headers);
      var lines = list.map(function(param) {
        var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];
        var values = [].concat(value);
        return "".concat(name, ": ").concat(values.join(", "));
      });
      return lines.join("\r\n");
    }
    var singleValueHeaders = [
      "user-agent"
    ];
    function headersToObject(headers) {
      var headersObject = {};
      headers.forEach(function(value, name) {
        var isMultiValue = !singleValueHeaders.includes(name.toLowerCase()) && value.includes(",");
        headersObject[name] = isMultiValue ? value.split(",").map(function(s) {
          return s.trim();
        }) : value;
      });
      return headersObject;
    }
    function stringToHeaders(str) {
      var lines = str.trim().split(/[\r\n]+/);
      return lines.reduce(function(headers, line) {
        if (line.trim() === "") {
          return headers;
        }
        var parts = line.split(": ");
        var name = parts.shift();
        var value = parts.join(": ");
        headers.append(name, value);
        return headers;
      }, new HeadersPolyfill());
    }
    function listToHeaders(list) {
      var headers = new HeadersPolyfill();
      list.forEach(function(param) {
        var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];
        var values = [].concat(value);
        values.forEach(function(value2) {
          headers.append(name, value2);
        });
      });
      return headers;
    }
    function reduceHeadersObject(headers, reducer, initialState) {
      return Object.keys(headers).reduce(function(nextHeaders, name) {
        return reducer(nextHeaders, name, headers[name]);
      }, initialState);
    }
    function objectToHeaders(headersObject) {
      return reduceHeadersObject(headersObject, function(headers, name, value) {
        var values = [].concat(value).filter(Boolean);
        values.forEach(function(value2) {
          headers.append(name, value2);
        });
        return headers;
      }, new HeadersPolyfill());
    }
    function flattenHeadersList(list) {
      return list.map(function(param) {
        var _param = _sliced_to_array(param, 2), name = _param[0], values = _param[1];
        return [
          name,
          [].concat(values).join(", ")
        ];
      });
    }
    function flattenHeadersObject(headersObject) {
      return reduceHeadersObject(headersObject, function(headers, name, value) {
        headers[name] = [].concat(value).join(", ");
        return headers;
      }, {});
    }
  }
});

// ../node_modules/msw/node_modules/cookie/index.js
var require_cookie = __commonJS({
  "../node_modules/msw/node_modules/cookie/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    exports.parse = parse2;
    exports.serialize = serialize;
    var decode = decodeURIComponent;
    var encode2 = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse2(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val = pair.substring(index + 1, pair.length).trim();
          if (val[0] === '"') {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode2;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// ../node_modules/is-node-process/lib/index.js
var require_lib4 = __commonJS({
  "../node_modules/is-node-process/lib/index.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isNodeProcess: () => isNodeProcess
    });
    module2.exports = __toCommonJS2(src_exports);
    function isNodeProcess() {
      if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        return true;
      }
      if (typeof process !== "undefined") {
        const type = process.type;
        if (type === "renderer" || type === "worker") {
          return false;
        }
        return !!(process.versions && process.versions.node);
      }
      return false;
    }
  }
});

// ../node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "../node_modules/node-fetch/browser.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module2.exports = exports = globalObject.fetch;
    if (globalObject.fetch) {
      exports.default = globalObject.fetch.bind(globalObject);
    }
    exports.Headers = globalObject.Headers;
    exports.Request = globalObject.Request;
    exports.Response = globalObject.Response;
  }
});

// ../node_modules/outvariant/lib/index.js
var require_lib5 = __commonJS({
  "../node_modules/outvariant/lib/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      InvariantError: () => InvariantError,
      format: () => format2,
      invariant: () => invariant
    });
    module2.exports = __toCommonJS2(src_exports);
    var POSITIONALS_EXP = /(%?)(%([sdijo]))/g;
    function serializePositional(positional, flag) {
      switch (flag) {
        case "s":
          return positional;
        case "d":
        case "i":
          return Number(positional);
        case "j":
          return JSON.stringify(positional);
        case "o": {
          if (typeof positional === "string") {
            return positional;
          }
          const json = JSON.stringify(positional);
          if (json === "{}" || json === "[]" || /^\[object .+?\]$/.test(json)) {
            return positional;
          }
          return json;
        }
      }
    }
    function format2(message, ...positionals) {
      if (positionals.length === 0) {
        return message;
      }
      let positionalIndex = 0;
      let formattedMessage = message.replace(
        POSITIONALS_EXP,
        (match2, isEscaped, _, flag) => {
          const positional = positionals[positionalIndex];
          const value = serializePositional(positional, flag);
          if (!isEscaped) {
            positionalIndex++;
            return value;
          }
          return match2;
        }
      );
      if (positionalIndex < positionals.length) {
        formattedMessage += ` ${positionals.slice(positionalIndex).join(" ")}`;
      }
      formattedMessage = formattedMessage.replace(/%{2,2}/g, "%");
      return formattedMessage;
    }
    var STACK_FRAMES_TO_IGNORE = 2;
    function cleanErrorStack(error) {
      if (!error.stack) {
        return;
      }
      const nextStack = error.stack.split("\n");
      nextStack.splice(1, STACK_FRAMES_TO_IGNORE);
      error.stack = nextStack.join("\n");
    }
    var InvariantError = class extends Error {
      constructor(message, ...positionals) {
        super(message);
        this.message = message;
        this.name = "Invariant Violation";
        this.message = format2(message, ...positionals);
        cleanErrorStack(this);
      }
    };
    var invariant = (predicate, message, ...positionals) => {
      if (!predicate) {
        throw new InvariantError(message, ...positionals);
      }
    };
    invariant.as = (ErrorConstructor, predicate, message, ...positionals) => {
      if (!predicate) {
        const formatMessage = positionals.length === 0 ? message : format2(message, ...positionals);
        let error;
        try {
          error = Reflect.construct(ErrorConstructor, [
            formatMessage
          ]);
        } catch (err) {
          error = ErrorConstructor(formatMessage);
        }
        throw error;
      }
    };
  }
});

// ../node_modules/@open-draft/until/lib/until.js
var require_until = __commonJS({
  "../node_modules/@open-draft/until/lib/until.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.until = async (promise) => {
      try {
        const data = await promise().catch((error) => {
          throw error;
        });
        return [null, data];
      } catch (error) {
        return [error, null];
      }
    };
  }
});

// ../node_modules/@open-draft/until/lib/index.js
var require_lib6 = __commonJS({
  "../node_modules/@open-draft/until/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    var until_1 = require_until();
    exports.until = until_1.until;
  }
});

// ../node_modules/@mswjs/interceptors/lib/glossary.js
var require_glossary = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/glossary.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IS_PATCHED_MODULE = void 0;
    exports.IS_PATCHED_MODULE = Symbol("isPatchedModule");
  }
});

// ../node_modules/ms/index.js
var require_ms = __commonJS({
  "../node_modules/ms/index.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match2) {
        return;
      }
      var n = parseFloat(match2[1]);
      var type = (match2[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../node_modules/debug/src/common.js
var require_common2 = __commonJS({
  "../node_modules/debug/src/common.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match2, format2) => {
            if (match2 === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format2];
            if (typeof formatter === "function") {
              const val = args[index];
              match2 = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match2;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// ../node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "../node_modules/debug/src/browser.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match2) => {
        if (match2 === "%%") {
          return;
        }
        index++;
        if (match2 === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common2()(exports);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../node_modules/events/events.js
var require_events = __commonJS({
  "../node_modules/events/events.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module2.exports = EventEmitter;
    module2.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags2) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags2);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags2) {
      if (typeof emitter.on === "function") {
        if (flags2.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags2.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// ../node_modules/strict-event-emitter/lib/StrictEventEmitter.js
var require_StrictEventEmitter = __commonJS({
  "../node_modules/strict-event-emitter/lib/StrictEventEmitter.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    exports.__esModule = true;
    exports.StrictEventEmitter = void 0;
    var events_1 = require_events();
    var StrictEventEmitter = (
      /** @class */
      function(_super) {
        __extends(StrictEventEmitter2, _super);
        function StrictEventEmitter2() {
          return _super.call(this) || this;
        }
        StrictEventEmitter2.prototype.on = function(event, listener) {
          return _super.prototype.on.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.once = function(event, listener) {
          return _super.prototype.once.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.off = function(event, listener) {
          return _super.prototype.off.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.emit = function(event) {
          var data = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
          }
          return _super.prototype.emit.apply(this, __spreadArrays([event.toString()], data));
        };
        StrictEventEmitter2.prototype.addListener = function(event, listener) {
          return _super.prototype.addListener.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.prependListener = function(event, listener) {
          return _super.prototype.prependListener.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.prependOnceListener = function(event, listener) {
          return _super.prototype.prependOnceListener.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.removeListener = function(event, listener) {
          return _super.prototype.removeListener.call(this, event.toString(), listener);
        };
        StrictEventEmitter2.prototype.removeAllListeners = function(event) {
          if (event) {
            return _super.prototype.removeAllListeners.call(this, event.toString());
          }
          return _super.prototype.removeAllListeners.call(this);
        };
        StrictEventEmitter2.prototype.eventNames = function() {
          return _super.prototype.eventNames.call(this);
        };
        StrictEventEmitter2.prototype.listeners = function(event) {
          return _super.prototype.listeners.call(this, event.toString());
        };
        StrictEventEmitter2.prototype.rawListeners = function(event) {
          return _super.prototype.rawListeners.call(this, event.toString());
        };
        StrictEventEmitter2.prototype.listenerCount = function(event) {
          return _super.prototype.listenerCount.call(this, event.toString());
        };
        return StrictEventEmitter2;
      }(events_1.EventEmitter)
    );
    exports.StrictEventEmitter = StrictEventEmitter;
  }
});

// ../node_modules/strict-event-emitter/lib/index.js
var require_lib7 = __commonJS({
  "../node_modules/strict-event-emitter/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    exports.__esModule = true;
    __exportStar(require_StrictEventEmitter(), exports);
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/nextTick.js
var require_nextTick = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/nextTick.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nextTickAsync = exports.nextTick = void 0;
    function nextTick(callback) {
      setTimeout(callback, 0);
    }
    exports.nextTick = nextTick;
    function nextTickAsync(callback) {
      return new Promise(function(resolve) {
        setTimeout(function() {
          resolve(callback());
        }, 0);
      });
    }
    exports.nextTickAsync = nextTickAsync;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/AsyncEventEmitter.js
var require_AsyncEventEmitter = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/AsyncEventEmitter.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncEventEmitter = exports.AsyncEventEmitterReadyState = void 0;
    var debug_1 = require_browser2();
    var strict_event_emitter_1 = require_lib7();
    var nextTick_1 = require_nextTick();
    var AsyncEventEmitterReadyState;
    (function(AsyncEventEmitterReadyState2) {
      AsyncEventEmitterReadyState2["ACTIVE"] = "ACTIVE";
      AsyncEventEmitterReadyState2["DEACTIVATED"] = "DEACTIVATED";
    })(AsyncEventEmitterReadyState = exports.AsyncEventEmitterReadyState || (exports.AsyncEventEmitterReadyState = {}));
    var AsyncEventEmitter = (
      /** @class */
      function(_super) {
        __extends(AsyncEventEmitter2, _super);
        function AsyncEventEmitter2() {
          var _this = _super.call(this) || this;
          _this.log = debug_1.debug("async-event-emitter");
          _this.queue = /* @__PURE__ */ new Map();
          _this.readyState = AsyncEventEmitterReadyState.ACTIVE;
          return _this;
        }
        AsyncEventEmitter2.prototype.on = function(event, listener) {
          var _this = this;
          var log = this.log.extend("on");
          log('adding "%s" listener...', event);
          if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {
            log("the emitter is destroyed, skipping!");
            return this;
          }
          return _super.prototype.on.call(this, event, function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function() {
              var queue;
              var _this2 = this;
              return __generator(this, function(_a2) {
                queue = this.openListenerQueue(event);
                log('awaiting the "%s" listener...', event);
                queue.push({
                  args,
                  done: new Promise(function(resolve, reject) {
                    return __awaiter(_this2, void 0, void 0, function() {
                      var error_1;
                      return __generator(this, function(_a3) {
                        switch (_a3.label) {
                          case 0:
                            _a3.trys.push([0, 2, , 3]);
                            return [4, listener.apply(void 0, __spreadArray([], __read(args)))];
                          case 1:
                            _a3.sent();
                            resolve();
                            log('"%s" listener has resolved!', event);
                            return [3, 3];
                          case 2:
                            error_1 = _a3.sent();
                            log('"%s" listener has rejected!', error_1);
                            reject(error_1);
                            return [3, 3];
                          case 3:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  })
                });
                return [
                  2
                  /*return*/
                ];
              });
            });
          });
        };
        AsyncEventEmitter2.prototype.emit = function(event) {
          var _this = this;
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var log = this.log.extend("emit");
          log('emitting "%s" event...', event);
          if (this.readyState === AsyncEventEmitterReadyState.DEACTIVATED) {
            log("the emitter is destroyed, skipping!");
            return false;
          }
          this.openListenerQueue(event);
          log('appending a one-time cleanup "%s" listener...', event);
          this.once(event, function() {
            nextTick_1.nextTick(function() {
              _this.queue.delete(event);
              log('cleaned up "%s" listeners queue!', event);
            });
          });
          return _super.prototype.emit.apply(this, __spreadArray([event], __read(args)));
        };
        AsyncEventEmitter2.prototype.untilIdle = function(event, filter) {
          if (filter === void 0) {
            filter = function() {
              return true;
            };
          }
          return __awaiter(this, void 0, void 0, function() {
            var listenersQueue;
            var _this = this;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  listenersQueue = this.queue.get(event) || [];
                  return [4, Promise.all(listenersQueue.filter(filter).map(function(_a3) {
                    var done = _a3.done;
                    return done;
                  })).finally(function() {
                    _this.queue.delete(event);
                  })];
                case 1:
                  _a2.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        AsyncEventEmitter2.prototype.openListenerQueue = function(event) {
          var log = this.log.extend("openListenerQueue");
          log('opening "%s" listeners queue...', event);
          var queue = this.queue.get(event);
          if (!queue) {
            log("no queue found, creating one...");
            this.queue.set(event, []);
            return [];
          }
          log("returning an exising queue:", queue);
          return queue;
        };
        AsyncEventEmitter2.prototype.removeAllListeners = function(event) {
          var log = this.log.extend("removeAllListeners");
          log("event:", event);
          if (event) {
            this.queue.delete(event);
            log('cleared the "%s" listeners queue!', event, this.queue.get(event));
          } else {
            this.queue.clear();
            log("cleared the listeners queue!", this.queue);
          }
          return _super.prototype.removeAllListeners.call(this, event);
        };
        AsyncEventEmitter2.prototype.activate = function() {
          var log = this.log.extend("activate");
          this.readyState = AsyncEventEmitterReadyState.ACTIVE;
          log("set state to:", this.readyState);
        };
        AsyncEventEmitter2.prototype.deactivate = function() {
          var log = this.log.extend("deactivate");
          log("removing all listeners...");
          this.removeAllListeners();
          this.readyState = AsyncEventEmitterReadyState.DEACTIVATED;
          log("set state to:", this.readyState);
        };
        return AsyncEventEmitter2;
      }(strict_event_emitter_1.StrictEventEmitter)
    );
    exports.AsyncEventEmitter = AsyncEventEmitter;
  }
});

// ../node_modules/@mswjs/interceptors/lib/Interceptor.js
var require_Interceptor = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/Interceptor.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interceptor = exports.InterceptorReadyState = exports.deleteGlobalSymbol = exports.getGlobalSymbol = void 0;
    var debug_1 = require_browser2();
    var AsyncEventEmitter_1 = require_AsyncEventEmitter();
    var nextTick_1 = require_nextTick();
    function getGlobalSymbol(symbol) {
      return (
        // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587
        globalThis[symbol] || void 0
      );
    }
    exports.getGlobalSymbol = getGlobalSymbol;
    function setGlobalSymbol(symbol, value) {
      globalThis[symbol] = value;
    }
    function deleteGlobalSymbol(symbol) {
      delete globalThis[symbol];
    }
    exports.deleteGlobalSymbol = deleteGlobalSymbol;
    var InterceptorReadyState;
    (function(InterceptorReadyState2) {
      InterceptorReadyState2["IDLE"] = "IDLE";
      InterceptorReadyState2["APPLYING"] = "APPLYING";
      InterceptorReadyState2["APPLIED"] = "APPLIED";
      InterceptorReadyState2["DISPOSING"] = "DISPOSING";
      InterceptorReadyState2["DISPOSED"] = "DISPOSED";
    })(InterceptorReadyState = exports.InterceptorReadyState || (exports.InterceptorReadyState = {}));
    var Interceptor = (
      /** @class */
      function() {
        function Interceptor2(symbol) {
          this.symbol = symbol;
          this.readyState = InterceptorReadyState.IDLE;
          this.emitter = new AsyncEventEmitter_1.AsyncEventEmitter();
          this.subscriptions = [];
          this.log = debug_1.debug(symbol.description);
          this.emitter.setMaxListeners(0);
          this.log("constructing the interceptor...");
        }
        Interceptor2.prototype.checkEnvironment = function() {
          return true;
        };
        Interceptor2.prototype.apply = function() {
          var _this = this;
          var log = this.log.extend("apply");
          log("applying the interceptor...");
          if (this.readyState === InterceptorReadyState.APPLIED) {
            log("intercepted already applied!");
            return;
          }
          var shouldApply = this.checkEnvironment();
          if (!shouldApply) {
            log("the interceptor cannot be applied in this environment!");
            return;
          }
          this.readyState = InterceptorReadyState.APPLYING;
          this.emitter.activate();
          log("activated the emiter!", this.emitter.readyState);
          var runningInstance = this.getInstance();
          if (runningInstance) {
            log("found a running instance, reusing...");
            this.on = function(event, listener) {
              log('proxying the "%s" listener', event);
              runningInstance.emitter.addListener(event, listener);
              _this.subscriptions.push(function() {
                runningInstance.emitter.removeListener(event, listener);
                log('removed proxied "%s" listener!', event);
              });
            };
            nextTick_1.nextTick(function() {
              _this.readyState = InterceptorReadyState.APPLIED;
            });
            return;
          }
          log("no running instance found, setting up a new instance...");
          this.setup();
          this.setInstance();
          nextTick_1.nextTick(function() {
            _this.readyState = InterceptorReadyState.APPLIED;
          });
        };
        Interceptor2.prototype.setup = function() {
        };
        Interceptor2.prototype.on = function(event, listener) {
          var log = this.log.extend("on");
          if (this.readyState === InterceptorReadyState.DISPOSING || this.readyState === InterceptorReadyState.DISPOSED) {
            log("cannot listen to events, already disposed!");
            return;
          }
          log('adding "%s" event listener:', event, listener.name);
          this.emitter.on(event, listener);
        };
        Interceptor2.prototype.dispose = function() {
          var e_1, _a2;
          var _this = this;
          var log = this.log.extend("dispose");
          if (this.readyState === InterceptorReadyState.DISPOSED) {
            log("cannot dispose, already disposed!");
            return;
          }
          log("disposing the interceptor...");
          this.readyState = InterceptorReadyState.DISPOSING;
          if (!this.getInstance()) {
            log("no interceptors running, skipping dispose...");
            return;
          }
          this.clearInstance();
          log("global symbol deleted:", getGlobalSymbol(this.symbol));
          if (this.subscriptions.length > 0) {
            log("disposing of %d subscriptions...", this.subscriptions.length);
            try {
              for (var _b = __values(this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                var dispose = _c.value;
                dispose();
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            this.subscriptions = [];
            log("disposed of all subscriptions!", this.subscriptions.length);
          }
          this.emitter.deactivate();
          log("destroyed the listener!");
          nextTick_1.nextTick(function() {
            _this.readyState = InterceptorReadyState.DISPOSED;
          });
        };
        Interceptor2.prototype.getInstance = function() {
          var _a2;
          var instance = getGlobalSymbol(this.symbol);
          this.log("retrieved global instance:", (_a2 = instance === null || instance === void 0 ? void 0 : instance.constructor) === null || _a2 === void 0 ? void 0 : _a2.name);
          return instance;
        };
        Interceptor2.prototype.setInstance = function() {
          setGlobalSymbol(this.symbol, this);
          this.log("set global instance!", this.symbol.description);
        };
        Interceptor2.prototype.clearInstance = function() {
          deleteGlobalSymbol(this.symbol);
          this.log("cleared global instance!", this.symbol.description);
        };
        return Interceptor2;
      }()
    );
    exports.Interceptor = Interceptor;
  }
});

// ../node_modules/@mswjs/interceptors/lib/BatchInterceptor.js
var require_BatchInterceptor = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/BatchInterceptor.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchInterceptor = void 0;
    var Interceptor_1 = require_Interceptor();
    var BatchInterceptor = (
      /** @class */
      function(_super) {
        __extends(BatchInterceptor2, _super);
        function BatchInterceptor2(options) {
          var _this = this;
          BatchInterceptor2.symbol = Symbol(options.name);
          _this = _super.call(this, BatchInterceptor2.symbol) || this;
          _this.interceptors = options.interceptors;
          return _this;
        }
        BatchInterceptor2.prototype.setup = function() {
          var e_1, _a2;
          var log = this.log.extend("setup");
          log("applying all %d interceptors...", this.interceptors.length);
          var _loop_1 = function(interceptor2) {
            log('applying "%s" interceptor...', interceptor2.constructor.name);
            interceptor2.apply();
            log("adding interceptor dispose subscription");
            this_1.subscriptions.push(function() {
              return interceptor2.dispose();
            });
          };
          var this_1 = this;
          try {
            for (var _b = __values(this.interceptors), _c = _b.next(); !_c.done; _c = _b.next()) {
              var interceptor = _c.value;
              _loop_1(interceptor);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        };
        BatchInterceptor2.prototype.on = function(event, listener) {
          this.interceptors.forEach(function(interceptor) {
            interceptor.on(event, listener);
          });
        };
        return BatchInterceptor2;
      }(Interceptor_1.Interceptor)
    );
    exports.BatchInterceptor = BatchInterceptor;
  }
});

// ../node_modules/web-encoding/src/lib.js
var require_lib8 = __commonJS({
  "../node_modules/web-encoding/src/lib.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    exports.TextEncoder = typeof TextEncoder !== "undefined" ? TextEncoder : require_util().TextEncoder;
    exports.TextDecoder = typeof TextDecoder !== "undefined" ? TextDecoder : require_util().TextDecoder;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/bufferUtils.js
var require_bufferUtils = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/bufferUtils.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayBuffer = exports.decodeBuffer = exports.encodeBuffer = void 0;
    var web_encoding_1 = require_lib8();
    function encodeBuffer(text) {
      var encoder = new web_encoding_1.TextEncoder();
      var encoded = encoder.encode(text);
      return getArrayBuffer(encoded);
    }
    exports.encodeBuffer = encodeBuffer;
    function decodeBuffer(buffer, encoding) {
      var decoder = new web_encoding_1.TextDecoder(encoding);
      return decoder.decode(buffer);
    }
    exports.decodeBuffer = decodeBuffer;
    function getArrayBuffer(array) {
      return array.buffer.slice(array.byteOffset, array.byteOffset + array.byteLength);
    }
    exports.getArrayBuffer = getArrayBuffer;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/uuid.js
var require_uuid = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/uuid.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidv4 = void 0;
    function uuidv4() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0;
        var v = c == "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    }
    exports.uuidv4 = uuidv4;
  }
});

// ../node_modules/@mswjs/interceptors/lib/IsomorphicRequest.js
var require_IsomorphicRequest = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/IsomorphicRequest.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsomorphicRequest = void 0;
    var headers_polyfill_1 = require_lib3();
    var outvariant_1 = require_lib5();
    var bufferUtils_1 = require_bufferUtils();
    var uuid_1 = require_uuid();
    var IsomorphicRequest = (
      /** @class */
      function() {
        function IsomorphicRequest2(input, init) {
          if (init === void 0) {
            init = {};
          }
          var defaultBody = new ArrayBuffer(0);
          this._bodyUsed = false;
          if (input instanceof IsomorphicRequest2) {
            this.id = input.id;
            this.url = input.url;
            this.method = input.method;
            this.headers = input.headers;
            this.credentials = input.credentials;
            this._body = input._body || defaultBody;
            return;
          }
          this.id = uuid_1.uuidv4();
          this.url = input;
          this.method = init.method || "GET";
          this.headers = new headers_polyfill_1.Headers(init.headers);
          this.credentials = init.credentials || "same-origin";
          this._body = init.body || defaultBody;
        }
        Object.defineProperty(IsomorphicRequest2.prototype, "bodyUsed", {
          get: function() {
            return this._bodyUsed;
          },
          enumerable: false,
          configurable: true
        });
        IsomorphicRequest2.prototype.text = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              outvariant_1.invariant(!this.bodyUsed, 'Failed to execute "text" on "IsomorphicRequest": body buffer already read');
              this._bodyUsed = true;
              return [2, bufferUtils_1.decodeBuffer(this._body)];
            });
          });
        };
        IsomorphicRequest2.prototype.json = function() {
          return __awaiter(this, void 0, void 0, function() {
            var text;
            return __generator(this, function(_a2) {
              outvariant_1.invariant(!this.bodyUsed, 'Failed to execute "json" on "IsomorphicRequest": body buffer already read');
              this._bodyUsed = true;
              text = bufferUtils_1.decodeBuffer(this._body);
              return [2, JSON.parse(text)];
            });
          });
        };
        IsomorphicRequest2.prototype.arrayBuffer = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              outvariant_1.invariant(!this.bodyUsed, 'Failed to execute "arrayBuffer" on "IsomorphicRequest": body buffer already read');
              this._bodyUsed = true;
              return [2, this._body];
            });
          });
        };
        IsomorphicRequest2.prototype.clone = function() {
          return new IsomorphicRequest2(this);
        };
        return IsomorphicRequest2;
      }()
    );
    exports.IsomorphicRequest = IsomorphicRequest;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/createLazyCallback.js
var require_createLazyCallback = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/createLazyCallback.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createLazyCallback = void 0;
    function createLazyCallback(options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      var calledTimes = 0;
      var autoResolveTimeout;
      var remoteResolve;
      var callPromise = new Promise(function(resolve) {
        remoteResolve = resolve;
      }).finally(function() {
        clearTimeout(autoResolveTimeout);
      });
      var fn = function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (options.maxCalls && calledTimes >= options.maxCalls) {
          (_a2 = options.maxCallsCallback) === null || _a2 === void 0 ? void 0 : _a2.call(options);
        }
        remoteResolve(args);
        calledTimes++;
      };
      fn.invoked = function() {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a2) {
            autoResolveTimeout = setTimeout(function() {
              remoteResolve([]);
            }, 0);
            return [2, callPromise];
          });
        });
      };
      return fn;
    }
    exports.createLazyCallback = createLazyCallback;
  }
});

// ../node_modules/@mswjs/interceptors/lib/InteractiveIsomorphicRequest.js
var require_InteractiveIsomorphicRequest = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/InteractiveIsomorphicRequest.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InteractiveIsomorphicRequest = void 0;
    var outvariant_1 = require_lib5();
    var IsomorphicRequest_1 = require_IsomorphicRequest();
    var createLazyCallback_1 = require_createLazyCallback();
    var InteractiveIsomorphicRequest = (
      /** @class */
      function(_super) {
        __extends(InteractiveIsomorphicRequest2, _super);
        function InteractiveIsomorphicRequest2(request) {
          var _this = _super.call(this, request) || this;
          _this.respondWith = createLazyCallback_1.createLazyCallback({
            maxCalls: 1,
            maxCallsCallback: function() {
              outvariant_1.invariant(false, 'Failed to respond to "%s %s" request: the "request" event has already been responded to.', _this.method, _this.url.href);
            }
          });
          return _this;
        }
        return InteractiveIsomorphicRequest2;
      }(IsomorphicRequest_1.IsomorphicRequest)
    );
    exports.InteractiveIsomorphicRequest = InteractiveIsomorphicRequest;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/getCleanUrl.js
var require_getCleanUrl = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/getCleanUrl.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCleanUrl = void 0;
    function getCleanUrl(url, isAbsolute) {
      if (isAbsolute === void 0) {
        isAbsolute = true;
      }
      return [isAbsolute && url.origin, url.pathname].filter(Boolean).join("");
    }
    exports.getCleanUrl = getCleanUrl;
  }
});

// ../node_modules/@mswjs/interceptors/lib/index.js
var require_lib9 = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBuffer = exports.encodeBuffer = exports.getCleanUrl = void 0;
    __exportStar(require_glossary(), exports);
    __exportStar(require_Interceptor(), exports);
    __exportStar(require_BatchInterceptor(), exports);
    __exportStar(require_IsomorphicRequest(), exports);
    __exportStar(require_InteractiveIsomorphicRequest(), exports);
    var getCleanUrl_1 = require_getCleanUrl();
    Object.defineProperty(exports, "getCleanUrl", { enumerable: true, get: function() {
      return getCleanUrl_1.getCleanUrl;
    } });
    var bufferUtils_1 = require_bufferUtils();
    Object.defineProperty(exports, "encodeBuffer", { enumerable: true, get: function() {
      return bufferUtils_1.encodeBuffer;
    } });
    Object.defineProperty(exports, "decodeBuffer", { enumerable: true, get: function() {
      return bufferUtils_1.decodeBuffer;
    } });
  }
});

// ../node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "../node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var defaultParseOptions = {
      decodeValues: true,
      map: false,
      silent: false
    };
    function isNonEmptyString(str) {
      return typeof str === "string" && !!str.trim();
    }
    function parseString(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString);
      var nameValuePairStr = parts.shift();
      var parsed = parseNameValuePair(nameValuePairStr);
      var name = parsed.name;
      var value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e
        );
      }
      var cookie = {
        name,
        value
      };
      parts.forEach(function(part) {
        var sides = part.split("=");
        var key = sides.shift().trimLeft().toLowerCase();
        var value2 = sides.join("=");
        if (key === "expires") {
          cookie.expires = new Date(value2);
        } else if (key === "max-age") {
          cookie.maxAge = parseInt(value2, 10);
        } else if (key === "secure") {
          cookie.secure = true;
        } else if (key === "httponly") {
          cookie.httpOnly = true;
        } else if (key === "samesite") {
          cookie.sameSite = value2;
        } else if (key === "partitioned") {
          cookie.partitioned = true;
        } else {
          cookie[key] = value2;
        }
      });
      return cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "";
      var value = "";
      var nameValueArr = nameValuePairStr.split("=");
      if (nameValueArr.length > 1) {
        name = nameValueArr.shift();
        value = nameValueArr.join("=");
      } else {
        value = nameValuePairStr;
      }
      return { name, value };
    }
    function parse2(input, options) {
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      if (!input) {
        if (!options.map) {
          return [];
        } else {
          return {};
        }
      }
      if (input.headers) {
        if (typeof input.headers.getSetCookie === "function") {
          input = input.headers.getSetCookie();
        } else if (input.headers["set-cookie"]) {
          input = input.headers["set-cookie"];
        } else {
          var sch = input.headers[Object.keys(input.headers).find(function(key) {
            return key.toLowerCase() === "set-cookie";
          })];
          if (!sch && input.headers.cookie && !options.silent) {
            console.warn(
              "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
            );
          }
          input = sch;
        }
      }
      if (!Array.isArray(input)) {
        input = [input];
      }
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      if (!options.map) {
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString(str, options);
        });
      } else {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString(str, options);
          cookies2[cookie.name] = cookie;
          return cookies2;
        }, cookies);
      }
    }
    function splitCookiesString(cookiesString) {
      if (Array.isArray(cookiesString)) {
        return cookiesString;
      }
      if (typeof cookiesString !== "string") {
        return [];
      }
      var cookiesStrings = [];
      var pos = 0;
      var start;
      var ch;
      var lastComma;
      var nextStart;
      var cookiesSeparatorFound;
      function skipWhitespace() {
        while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
          pos += 1;
        }
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        ch = cookiesString.charAt(pos);
        return ch !== "=" && ch !== ";" && ch !== ",";
      }
      while (pos < cookiesString.length) {
        start = pos;
        cookiesSeparatorFound = false;
        while (skipWhitespace()) {
          ch = cookiesString.charAt(pos);
          if (ch === ",") {
            lastComma = pos;
            pos += 1;
            skipWhitespace();
            nextStart = pos;
            while (pos < cookiesString.length && notSpecialChar()) {
              pos += 1;
            }
            if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
              cookiesSeparatorFound = true;
              pos = nextStart;
              cookiesStrings.push(cookiesString.substring(start, lastComma));
              start = pos;
            } else {
              pos = lastComma + 1;
            }
          } else {
            pos += 1;
          }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
      }
      return cookiesStrings;
    }
    module2.exports = parse2;
    module2.exports.parse = parse2;
    module2.exports.parseString = parseString;
    module2.exports.splitCookiesString = splitCookiesString;
  }
});

// ../node_modules/@mswjs/cookies/lib/store.js
var require_store = __commonJS({
  "../node_modules/@mswjs/cookies/lib/store.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.store = exports.PERSISTENCY_KEY = void 0;
    var set_cookie_parser_1 = require_set_cookie();
    exports.PERSISTENCY_KEY = "MSW_COOKIE_STORE";
    function supportsLocalStorage() {
      try {
        if (localStorage == null) {
          return false;
        }
        const testKey = exports.PERSISTENCY_KEY + "_test";
        localStorage.setItem(testKey, "test");
        localStorage.getItem(testKey);
        localStorage.removeItem(testKey);
        return true;
      } catch (error) {
        return false;
      }
    }
    var CookieStore = class {
      constructor() {
        this.store = /* @__PURE__ */ new Map();
      }
      /**
       * Sets the given request cookies into the store.
       * Respects the `request.credentials` policy.
       */
      add(request, response) {
        if (request.credentials === "omit") {
          return;
        }
        const requestUrl = new URL(request.url);
        const responseCookies = response.headers.get("set-cookie");
        if (!responseCookies) {
          return;
        }
        const now = Date.now();
        const parsedResponseCookies = set_cookie_parser_1.parse(responseCookies).map((_a2) => {
          var { maxAge } = _a2, cookie = __rest(_a2, ["maxAge"]);
          return Object.assign(Object.assign({}, cookie), { expires: maxAge === void 0 ? cookie.expires : new Date(now + maxAge * 1e3), maxAge });
        });
        const prevCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();
        parsedResponseCookies.forEach((cookie) => {
          this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie));
        });
      }
      /**
       * Returns cookies relevant to the given request
       * and its `request.credentials` policy.
       */
      get(request) {
        this.deleteExpiredCookies();
        const requestUrl = new URL(request.url);
        const originCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();
        switch (request.credentials) {
          case "include": {
            if (typeof document === "undefined") {
              return originCookies;
            }
            const documentCookies = set_cookie_parser_1.parse(document.cookie);
            documentCookies.forEach((cookie) => {
              originCookies.set(cookie.name, cookie);
            });
            return originCookies;
          }
          case "same-origin": {
            return originCookies;
          }
          default:
            return /* @__PURE__ */ new Map();
        }
      }
      /**
       * Returns a collection of all stored cookies.
       */
      getAll() {
        this.deleteExpiredCookies();
        return this.store;
      }
      /**
       * Deletes all cookies associated with the given request.
       */
      deleteAll(request) {
        const requestUrl = new URL(request.url);
        this.store.delete(requestUrl.origin);
      }
      /**
       * Clears the entire cookie store.
       */
      clear() {
        this.store.clear();
      }
      /**
       * Hydrates the virtual cookie store from the `localStorage` if defined.
       */
      hydrate() {
        if (!supportsLocalStorage()) {
          return;
        }
        const persistedCookies = localStorage.getItem(exports.PERSISTENCY_KEY);
        if (!persistedCookies) {
          return;
        }
        try {
          const parsedCookies = JSON.parse(persistedCookies);
          parsedCookies.forEach(([origin, cookies]) => {
            this.store.set(origin, new Map(cookies.map((_a2) => {
              var [token, _b] = _a2, { expires } = _b, cookie = __rest(_b, ["expires"]);
              return [
                token,
                expires === void 0 ? cookie : Object.assign(Object.assign({}, cookie), { expires: new Date(expires) })
              ];
            })));
          });
        } catch (error) {
          console.warn(`
[virtual-cookie] Failed to parse a stored cookie from the localStorage (key "${exports.PERSISTENCY_KEY}").

Stored value:
${localStorage.getItem(exports.PERSISTENCY_KEY)}

Thrown exception:
${error}

Invalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`);
          localStorage.removeItem(exports.PERSISTENCY_KEY);
        }
      }
      /**
       * Persists the current virtual cookies into the `localStorage` if defined,
       * so they are available on the next page load.
       */
      persist() {
        if (!supportsLocalStorage()) {
          return;
        }
        const serializedCookies = Array.from(this.store.entries()).map(([origin, cookies]) => {
          return [origin, Array.from(cookies.entries())];
        });
        localStorage.setItem(exports.PERSISTENCY_KEY, JSON.stringify(serializedCookies));
      }
      deleteExpiredCookies() {
        const now = Date.now();
        this.store.forEach((originCookies, origin) => {
          originCookies.forEach(({ expires, name }) => {
            if (expires !== void 0 && expires.getTime() <= now) {
              originCookies.delete(name);
            }
          });
          if (originCookies.size === 0) {
            this.store.delete(origin);
          }
        });
      }
    };
    exports.store = new CookieStore();
  }
});

// ../node_modules/@mswjs/cookies/lib/index.js
var require_lib10 = __commonJS({
  "../node_modules/@mswjs/cookies/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_store(), exports);
  }
});

// ../node_modules/js-levenshtein/index.js
var require_js_levenshtein = __commonJS({
  "../node_modules/js-levenshtein/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = /* @__PURE__ */ function() {
      function _min(d0, d1, d2, bx, ay) {
        return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
      }
      return function(a, b) {
        if (a === b) {
          return 0;
        }
        if (a.length > b.length) {
          var tmp = a;
          a = b;
          b = tmp;
        }
        var la = a.length;
        var lb = b.length;
        while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
          la--;
          lb--;
        }
        var offset = 0;
        while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
          offset++;
        }
        la -= offset;
        lb -= offset;
        if (la === 0 || lb < 3) {
          return lb;
        }
        var x = 0;
        var y;
        var d0;
        var d1;
        var d2;
        var d3;
        var dd;
        var dy;
        var ay;
        var bx0;
        var bx1;
        var bx2;
        var bx3;
        var vector = [];
        for (y = 0; y < la; y++) {
          vector.push(y + 1);
          vector.push(a.charCodeAt(offset + y));
        }
        var len = vector.length - 1;
        for (; x < lb - 3; ) {
          bx0 = b.charCodeAt(offset + (d0 = x));
          bx1 = b.charCodeAt(offset + (d1 = x + 1));
          bx2 = b.charCodeAt(offset + (d2 = x + 2));
          bx3 = b.charCodeAt(offset + (d3 = x + 3));
          dd = x += 4;
          for (y = 0; y < len; y += 2) {
            dy = vector[y];
            ay = vector[y + 1];
            d0 = _min(dy, d0, d1, bx0, ay);
            d1 = _min(d0, d1, d2, bx1, ay);
            d2 = _min(d1, d2, d3, bx2, ay);
            dd = _min(d2, d3, dd, bx3, ay);
            vector[y] = dd;
            d3 = d2;
            d2 = d1;
            d1 = d0;
            d0 = dy;
          }
        }
        for (; x < lb; ) {
          bx0 = b.charCodeAt(offset + (d0 = x));
          dd = ++x;
          for (y = 0; y < len; y += 2) {
            dy = vector[y];
            vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
            d0 = dy;
          }
        }
        return dd;
      };
    }();
  }
});

// ../node_modules/msw/node_modules/path-to-regexp/dist.es2015/index.js
var dist_exports = {};
__export(dist_exports, {
  compile: () => compile,
  match: () => match,
  parse: () => parse,
  pathToRegexp: () => pathToRegexp,
  regexpToFunction: () => regexpToFunction,
  tokensToFunction: () => tokensToFunction,
  tokensToRegexp: () => tokensToRegexp
});
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a2 = options.prefixes, prefixes = _a2 === void 0 ? "./" : _a2, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a3 = tokens[i], nextType = _a3.type, index = _a3.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  var isSafe = function(value2) {
    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
      var char2 = delimiter_1[_i];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  };
  var safePattern = function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a2 = options.encode, encode2 = _a2 === void 0 ? function(x) {
    return x;
  } : _a2, _b = options.validate, validate = _b === void 0 ? true : _b;
  var matches2 = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:".concat(token.pattern, ")$"), reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "'.concat(token.name, '" to not repeat, but got an array'));
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "'.concat(token.name, '" to not be empty'));
        }
        for (var j = 0; j < value.length; j++) {
          var segment = encode2(value[j], token);
          if (validate && !matches2[i].test(segment)) {
            throw new TypeError('Expected all "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode2(String(value), token);
        if (validate && !matches2[i].test(segment)) {
          throw new TypeError('Expected "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "'.concat(token.name, '" to be ').concat(typeOfMessage));
    }
    return path;
  };
}
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.decode, decode = _a2 === void 0 ? function(x) {
    return x;
  } : _a2;
  return function(pathname) {
    var m = re.exec(pathname);
    if (!m)
      return false;
    var path = m[0], index = m.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = function(i2) {
      if (m[i2] === void 0)
        return "continue";
      var key = keys[i2 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {
          return decode(value, key);
        });
      } else {
        params[key.name] = decode(m[i2], key);
      }
    };
    for (var i = 1; i < m.length; i++) {
      _loop_1(i);
    }
    return { path, index, params };
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.strict, strict = _a2 === void 0 ? false : _a2, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode2 = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode2(token));
    } else {
      var prefix = escapeString(encode2(token.prefix));
      var suffix = escapeString(encode2(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}
var import_dist34, import_dist35, import_dist36;
var init_dist2 = __esm({
  "../node_modules/msw/node_modules/path-to-regexp/dist.es2015/index.js"() {
    import_dist34 = __toESM(require_dist());
    import_dist35 = __toESM(require_dist2());
    import_dist36 = __toESM(require_dist3());
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/toIsoResponse.js
var require_toIsoResponse = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/toIsoResponse.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toIsoResponse = void 0;
    var headers_polyfill_1 = require_lib3();
    function toIsoResponse(response) {
      var _a2;
      return {
        status: (_a2 = response.status) !== null && _a2 !== void 0 ? _a2 : 200,
        statusText: response.statusText || "OK",
        headers: headers_polyfill_1.objectToHeaders(response.headers || {}),
        body: response.body
      };
    }
    exports.toIsoResponse = toIsoResponse;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/fetch/index.js
var require_fetch = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/fetch/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchInterceptor = void 0;
    var headers_polyfill_1 = require_lib3();
    var outvariant_1 = require_lib5();
    var until_1 = require_lib6();
    var IsomorphicRequest_1 = require_IsomorphicRequest();
    var glossary_1 = require_glossary();
    var Interceptor_1 = require_Interceptor();
    var toIsoResponse_1 = require_toIsoResponse();
    var InteractiveIsomorphicRequest_1 = require_InteractiveIsomorphicRequest();
    var FetchInterceptor = (
      /** @class */
      function(_super) {
        __extends(FetchInterceptor2, _super);
        function FetchInterceptor2() {
          return _super.call(this, FetchInterceptor2.symbol) || this;
        }
        FetchInterceptor2.prototype.checkEnvironment = function() {
          return typeof globalThis !== "undefined" && typeof globalThis.fetch !== "undefined";
        };
        FetchInterceptor2.prototype.setup = function() {
          var _this = this;
          var pureFetch = globalThis.fetch;
          outvariant_1.invariant(!pureFetch[glossary_1.IS_PATCHED_MODULE], 'Failed to patch the "fetch" module: already patched.');
          globalThis.fetch = function(input, init) {
            return __awaiter(_this, void 0, void 0, function() {
              var request, url, method, body, requestUrl, isomorphicRequest, interactiveIsomorphicRequest, _a2, middlewareException, mockedResponse, error, isomorphicResponse, response;
              var _this2 = this;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    request = new Request(input, init);
                    url = typeof input === "string" ? input : input.url;
                    method = request.method;
                    this.log("[%s] %s", method, url);
                    return [4, request.clone().arrayBuffer()];
                  case 1:
                    body = _b.sent();
                    requestUrl = new URL(url, typeof location !== "undefined" ? location.origin : void 0);
                    isomorphicRequest = new IsomorphicRequest_1.IsomorphicRequest(requestUrl, {
                      body,
                      method,
                      headers: new headers_polyfill_1.Headers(request.headers),
                      credentials: request.credentials
                    });
                    interactiveIsomorphicRequest = new InteractiveIsomorphicRequest_1.InteractiveIsomorphicRequest(isomorphicRequest);
                    this.log("isomorphic request", interactiveIsomorphicRequest);
                    this.log('emitting the "request" event for %d listener(s)...', this.emitter.listenerCount("request"));
                    this.emitter.emit("request", interactiveIsomorphicRequest);
                    this.log("awaiting for the mocked response...");
                    return [4, until_1.until(function() {
                      return __awaiter(_this2, void 0, void 0, function() {
                        var _a3, mockedResponse2;
                        return __generator(this, function(_b2) {
                          switch (_b2.label) {
                            case 0:
                              return [4, this.emitter.untilIdle("request", function(_a4) {
                                var _b3 = __read(_a4.args, 1), request2 = _b3[0];
                                return request2.id === interactiveIsomorphicRequest.id;
                              })];
                            case 1:
                              _b2.sent();
                              this.log("all request listeners have been resolved!");
                              return [4, interactiveIsomorphicRequest.respondWith.invoked()];
                            case 2:
                              _a3 = __read.apply(void 0, [_b2.sent(), 1]), mockedResponse2 = _a3[0];
                              this.log("event.respondWith called with:", mockedResponse2);
                              return [2, mockedResponse2];
                          }
                        });
                      });
                    })];
                  case 2:
                    _a2 = __read.apply(void 0, [_b.sent(), 2]), middlewareException = _a2[0], mockedResponse = _a2[1];
                    if (middlewareException) {
                      console.error(request.method + " " + request.url + " net::ERR_FAILED");
                      error = Object.assign(new TypeError("Failed to fetch"), {
                        cause: middlewareException
                      });
                      return [2, Promise.reject(error)];
                    }
                    if (mockedResponse) {
                      this.log("received mocked response:", mockedResponse);
                      isomorphicResponse = toIsoResponse_1.toIsoResponse(mockedResponse);
                      this.log("derived isomorphic response:", isomorphicResponse);
                      this.emitter.emit("response", interactiveIsomorphicRequest, isomorphicResponse);
                      response = new Response(mockedResponse.body, __assign(__assign({}, isomorphicResponse), {
                        // `Response.headers` cannot be instantiated with the `Headers` polyfill.
                        // Apparently, it halts if the `Headers` class contains unknown properties
                        // (i.e. the internal `Headers.map`).
                        headers: headers_polyfill_1.flattenHeadersObject(mockedResponse.headers || {})
                      }));
                      Object.defineProperty(response, "url", {
                        writable: false,
                        enumerable: true,
                        configurable: false,
                        value: interactiveIsomorphicRequest.url.href
                      });
                      return [2, response];
                    }
                    this.log("no mocked response received!");
                    return [2, pureFetch(request).then(function(response2) {
                      return __awaiter(_this2, void 0, void 0, function() {
                        var cloneResponse, _a3, _b2, _c;
                        return __generator(this, function(_d) {
                          switch (_d.label) {
                            case 0:
                              cloneResponse = response2.clone();
                              this.log("original fetch performed", cloneResponse);
                              _b2 = (_a3 = this.emitter).emit;
                              _c = [
                                "response",
                                interactiveIsomorphicRequest
                              ];
                              return [4, normalizeFetchResponse(cloneResponse)];
                            case 1:
                              _b2.apply(_a3, _c.concat([_d.sent()]));
                              return [2, response2];
                          }
                        });
                      });
                    })];
                }
              });
            });
          };
          Object.defineProperty(globalThis.fetch, glossary_1.IS_PATCHED_MODULE, {
            enumerable: true,
            configurable: true,
            value: true
          });
          this.subscriptions.push(function() {
            Object.defineProperty(globalThis.fetch, glossary_1.IS_PATCHED_MODULE, {
              value: void 0
            });
            globalThis.fetch = pureFetch;
            _this.log('restored native "globalThis.fetch"!', globalThis.fetch.name);
          });
        };
        FetchInterceptor2.symbol = Symbol("fetch");
        return FetchInterceptor2;
      }(Interceptor_1.Interceptor)
    );
    exports.FetchInterceptor = FetchInterceptor;
    function normalizeFetchResponse(response) {
      return __awaiter(this, void 0, void 0, function() {
        var _a2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a2 = {
                status: response.status,
                statusText: response.statusText,
                headers: headers_polyfill_1.objectToHeaders(headers_polyfill_1.headersToObject(response.headers))
              };
              return [4, response.text()];
            case 1:
              return [2, (_a2.body = _b.sent(), _a2)];
          }
        });
      });
    }
  }
});

// ../node_modules/@xmldom/xmldom/lib/conventions.js
var require_conventions = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/conventions.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    function find(list, predicate, ac) {
      if (ac === void 0) {
        ac = Array.prototype;
      }
      if (list && typeof ac.find === "function") {
        return ac.find.call(list, predicate);
      }
      for (var i = 0; i < list.length; i++) {
        if (Object.prototype.hasOwnProperty.call(list, i)) {
          var item = list[i];
          if (predicate.call(void 0, item, i, list)) {
            return item;
          }
        }
      }
    }
    function freeze(object, oc) {
      if (oc === void 0) {
        oc = Object;
      }
      return oc && typeof oc.freeze === "function" ? oc.freeze(object) : object;
    }
    function assign(target, source) {
      if (target === null || typeof target !== "object") {
        throw new TypeError("target is not an object");
      }
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
      return target;
    }
    var MIME_TYPE = freeze({
      /**
       * `text/html`, the only mime type that triggers treating an XML document as HTML.
       *
       * @see DOMParser.SupportedType.isHTML
       * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
       * @see https://en.wikipedia.org/wiki/HTML Wikipedia
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
       * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
       */
      HTML: "text/html",
      /**
       * Helper method to check a mime type if it indicates an HTML document
       *
       * @param {string} [value]
       * @returns {boolean}
       *
       * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
       * @see https://en.wikipedia.org/wiki/HTML Wikipedia
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
       * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */
      isHTML: function(value) {
        return value === MIME_TYPE.HTML;
      },
      /**
       * `application/xml`, the standard mime type for XML documents.
       *
       * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
       * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
       * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
       */
      XML_APPLICATION: "application/xml",
      /**
       * `text/html`, an alias for `application/xml`.
       *
       * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
       * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
       * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
       */
      XML_TEXT: "text/xml",
      /**
       * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
       * but is parsed as an XML document.
       *
       * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
       * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
       */
      XML_XHTML_APPLICATION: "application/xhtml+xml",
      /**
       * `image/svg+xml`,
       *
       * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
       * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
       * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
       */
      XML_SVG_IMAGE: "image/svg+xml"
    });
    var NAMESPACE = freeze({
      /**
       * The XHTML namespace.
       *
       * @see http://www.w3.org/1999/xhtml
       */
      HTML: "http://www.w3.org/1999/xhtml",
      /**
       * Checks if `uri` equals `NAMESPACE.HTML`.
       *
       * @param {string} [uri]
       *
       * @see NAMESPACE.HTML
       */
      isHTML: function(uri) {
        return uri === NAMESPACE.HTML;
      },
      /**
       * The SVG namespace.
       *
       * @see http://www.w3.org/2000/svg
       */
      SVG: "http://www.w3.org/2000/svg",
      /**
       * The `xml:` namespace.
       *
       * @see http://www.w3.org/XML/1998/namespace
       */
      XML: "http://www.w3.org/XML/1998/namespace",
      /**
       * The `xmlns:` namespace
       *
       * @see https://www.w3.org/2000/xmlns/
       */
      XMLNS: "http://www.w3.org/2000/xmlns/"
    });
    exports.assign = assign;
    exports.find = find;
    exports.freeze = freeze;
    exports.MIME_TYPE = MIME_TYPE;
    exports.NAMESPACE = NAMESPACE;
  }
});

// ../node_modules/@xmldom/xmldom/lib/dom.js
var require_dom = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/dom.js"(exports) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var conventions = require_conventions();
    var find = conventions.find;
    var NAMESPACE = conventions.NAMESPACE;
    function notEmptyString(input) {
      return input !== "";
    }
    function splitOnASCIIWhitespace(input) {
      return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : [];
    }
    function orderedSetReducer(current, element) {
      if (!current.hasOwnProperty(element)) {
        current[element] = true;
      }
      return current;
    }
    function toOrderedSet(input) {
      if (!input) return [];
      var list = splitOnASCIIWhitespace(input);
      return Object.keys(list.reduce(orderedSetReducer, {}));
    }
    function arrayIncludes(list) {
      return function(element) {
        return list && list.indexOf(element) !== -1;
      };
    }
    function copy(src, dest) {
      for (var p in src) {
        if (Object.prototype.hasOwnProperty.call(src, p)) {
          dest[p] = src[p];
        }
      }
    }
    function _extends(Class, Super) {
      var pt = Class.prototype;
      if (!(pt instanceof Super)) {
        let t2 = function() {
        };
        var t = t2;
        ;
        t2.prototype = Super.prototype;
        t2 = new t2();
        copy(pt, t2);
        Class.prototype = pt = t2;
      }
      if (pt.constructor != Class) {
        if (typeof Class != "function") {
          console.error("unknown Class:" + Class);
        }
        pt.constructor = Class;
      }
    }
    var NodeType = {};
    var ELEMENT_NODE2 = NodeType.ELEMENT_NODE = 1;
    var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
    var TEXT_NODE2 = NodeType.TEXT_NODE = 3;
    var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
    var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
    var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
    var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
    var COMMENT_NODE2 = NodeType.COMMENT_NODE = 8;
    var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
    var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
    var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
    var NOTATION_NODE = NodeType.NOTATION_NODE = 12;
    var ExceptionCode = {};
    var ExceptionMessage = {};
    var INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = "Index size error", 1);
    var DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = "DOMString size error", 2);
    var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = "Hierarchy request error", 3);
    var WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = "Wrong document", 4);
    var INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = "Invalid character", 5);
    var NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = "No data allowed", 6);
    var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = "No modification allowed", 7);
    var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = "Not found", 8);
    var NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = "Not supported", 9);
    var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = "Attribute in use", 10);
    var INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = "Invalid state", 11);
    var SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = "Syntax error", 12);
    var INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = "Invalid modification", 13);
    var NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = "Invalid namespace", 14);
    var INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = "Invalid access", 15);
    function DOMException(code, message) {
      if (message instanceof Error) {
        var error = message;
      } else {
        error = this;
        Error.call(this, ExceptionMessage[code]);
        this.message = ExceptionMessage[code];
        if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
      }
      error.code = code;
      if (message) this.message = this.message + ": " + message;
      return error;
    }
    DOMException.prototype = Error.prototype;
    copy(ExceptionCode, DOMException);
    function NodeList() {
    }
    NodeList.prototype = {
      /**
       * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
       * @standard level1
       */
      length: 0,
      /**
       * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
       * @standard level1
       * @param index  unsigned long
       *   Index into the collection.
       * @return Node
       * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
       */
      item: function(index) {
        return index >= 0 && index < this.length ? this[index] : null;
      },
      toString: function(isHTML, nodeFilter) {
        for (var buf = [], i = 0; i < this.length; i++) {
          serializeToString(this[i], buf, isHTML, nodeFilter);
        }
        return buf.join("");
      },
      /**
       * @private
       * @param {function (Node):boolean} predicate
       * @returns {Node[]}
       */
      filter: function(predicate) {
        return Array.prototype.filter.call(this, predicate);
      },
      /**
       * @private
       * @param {Node} item
       * @returns {number}
       */
      indexOf: function(item) {
        return Array.prototype.indexOf.call(this, item);
      }
    };
    function LiveNodeList(node, refresh) {
      this._node = node;
      this._refresh = refresh;
      _updateLiveList(this);
    }
    function _updateLiveList(list) {
      var inc = list._node._inc || list._node.ownerDocument._inc;
      if (list._inc !== inc) {
        var ls = list._refresh(list._node);
        __set__(list, "length", ls.length);
        if (!list.$$length || ls.length < list.$$length) {
          for (var i = ls.length; i in list; i++) {
            if (Object.prototype.hasOwnProperty.call(list, i)) {
              delete list[i];
            }
          }
        }
        copy(ls, list);
        list._inc = inc;
      }
    }
    LiveNodeList.prototype.item = function(i) {
      _updateLiveList(this);
      return this[i] || null;
    };
    _extends(LiveNodeList, NodeList);
    function NamedNodeMap() {
    }
    function _findNodeIndex(list, node) {
      var i = list.length;
      while (i--) {
        if (list[i] === node) {
          return i;
        }
      }
    }
    function _addNamedNode(el, list, newAttr, oldAttr) {
      if (oldAttr) {
        list[_findNodeIndex(list, oldAttr)] = newAttr;
      } else {
        list[list.length++] = newAttr;
      }
      if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
          oldAttr && _onRemoveAttribute(doc, el, oldAttr);
          _onAddAttribute(doc, el, newAttr);
        }
      }
    }
    function _removeNamedNode(el, list, attr) {
      var i = _findNodeIndex(list, attr);
      if (i >= 0) {
        var lastIndex = list.length - 1;
        while (i < lastIndex) {
          list[i] = list[++i];
        }
        list.length = lastIndex;
        if (el) {
          var doc = el.ownerDocument;
          if (doc) {
            _onRemoveAttribute(doc, el, attr);
            attr.ownerElement = null;
          }
        }
      } else {
        throw new DOMException(NOT_FOUND_ERR, new Error(el.tagName + "@" + attr));
      }
    }
    NamedNodeMap.prototype = {
      length: 0,
      item: NodeList.prototype.item,
      getNamedItem: function(key) {
        var i = this.length;
        while (i--) {
          var attr = this[i];
          if (attr.nodeName == key) {
            return attr;
          }
        }
      },
      setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el != this._ownerElement) {
          throw new DOMException(INUSE_ATTRIBUTE_ERR);
        }
        var oldAttr = this.getNamedItem(attr.nodeName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      /* returns Node */
      setNamedItemNS: function(attr) {
        var el = attr.ownerElement, oldAttr;
        if (el && el != this._ownerElement) {
          throw new DOMException(INUSE_ATTRIBUTE_ERR);
        }
        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      /* returns Node */
      removeNamedItem: function(key) {
        var attr = this.getNamedItem(key);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR
      //for level2
      removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      getNamedItemNS: function(namespaceURI, localName) {
        var i = this.length;
        while (i--) {
          var node = this[i];
          if (node.localName == localName && node.namespaceURI == namespaceURI) {
            return node;
          }
        }
        return null;
      }
    };
    function DOMImplementation() {
    }
    DOMImplementation.prototype = {
      /**
       * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
       * The different implementations fairly diverged in what kind of features were reported.
       * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
       *
       * @deprecated It is deprecated and modern browsers return true in all cases.
       *
       * @param {string} feature
       * @param {string} [version]
       * @returns {boolean} always true
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
       * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
       */
      hasFeature: function(feature, version) {
        return true;
      },
      /**
       * Creates an XML Document object of the specified type with its document element.
       *
       * __It behaves slightly different from the description in the living standard__:
       * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
       * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
       * - this implementation is not validating names or qualified names
       *   (when parsing XML strings, the SAX parser takes care of that)
       *
       * @param {string|null} namespaceURI
       * @param {string} qualifiedName
       * @param {DocumentType=null} doctype
       * @returns {Document}
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
       * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
       *
       * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
       * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
       * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
       */
      createDocument: function(namespaceURI, qualifiedName, doctype) {
        var doc = new Document();
        doc.implementation = this;
        doc.childNodes = new NodeList();
        doc.doctype = doctype || null;
        if (doctype) {
          doc.appendChild(doctype);
        }
        if (qualifiedName) {
          var root = doc.createElementNS(namespaceURI, qualifiedName);
          doc.appendChild(root);
        }
        return doc;
      },
      /**
       * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
       *
       * __This behavior is slightly different from the in the specs__:
       * - this implementation is not validating names or qualified names
       *   (when parsing XML strings, the SAX parser takes care of that)
       *
       * @param {string} qualifiedName
       * @param {string} [publicId]
       * @param {string} [systemId]
       * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
       * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
       * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
       *
       * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
       * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
       * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
       */
      createDocumentType: function(qualifiedName, publicId, systemId) {
        var node = new DocumentType();
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId || "";
        node.systemId = systemId || "";
        return node;
      }
    };
    function Node() {
    }
    Node.prototype = {
      firstChild: null,
      lastChild: null,
      previousSibling: null,
      nextSibling: null,
      attributes: null,
      parentNode: null,
      childNodes: null,
      ownerDocument: null,
      nodeValue: null,
      namespaceURI: null,
      prefix: null,
      localName: null,
      // Modified in DOM Level 2:
      insertBefore: function(newChild, refChild) {
        return _insertBefore(this, newChild, refChild);
      },
      replaceChild: function(newChild, oldChild) {
        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
        if (oldChild) {
          this.removeChild(oldChild);
        }
      },
      removeChild: function(oldChild) {
        return _removeChild(this, oldChild);
      },
      appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
      },
      hasChildNodes: function() {
        return this.firstChild != null;
      },
      cloneNode: function(deep) {
        return cloneNode(this.ownerDocument || this, this, deep);
      },
      // Modified in DOM Level 2:
      normalize: function() {
        var child = this.firstChild;
        while (child) {
          var next = child.nextSibling;
          if (next && next.nodeType == TEXT_NODE2 && child.nodeType == TEXT_NODE2) {
            this.removeChild(next);
            child.appendData(next.data);
          } else {
            child.normalize();
            child = next;
          }
        }
      },
      // Introduced in DOM Level 2:
      isSupported: function(feature, version) {
        return this.ownerDocument.implementation.hasFeature(feature, version);
      },
      // Introduced in DOM Level 2:
      hasAttributes: function() {
        return this.attributes.length > 0;
      },
      /**
       * Look up the prefix associated to the given namespace URI, starting from this node.
       * **The default namespace declarations are ignored by this method.**
       * See Namespace Prefix Lookup for details on the algorithm used by this method.
       *
       * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
       *
       * @param {string | null} namespaceURI
       * @returns {string | null}
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
       * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
       * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
       * @see https://github.com/xmldom/xmldom/issues/322
       */
      lookupPrefix: function(namespaceURI) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            for (var n in map) {
              if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {
                return n;
              }
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      // Introduced in DOM Level 3:
      lookupNamespaceURI: function(prefix) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            if (Object.prototype.hasOwnProperty.call(map, prefix)) {
              return map[prefix];
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      // Introduced in DOM Level 3:
      isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return prefix == null;
      }
    };
    function _xmlEncoder(c) {
      return c == "<" && "&lt;" || c == ">" && "&gt;" || c == "&" && "&amp;" || c == '"' && "&quot;" || "&#" + c.charCodeAt() + ";";
    }
    copy(NodeType, Node);
    copy(NodeType, Node.prototype);
    function _visitNode(node, callback) {
      if (callback(node)) {
        return true;
      }
      if (node = node.firstChild) {
        do {
          if (_visitNode(node, callback)) {
            return true;
          }
        } while (node = node.nextSibling);
      }
    }
    function Document() {
      this.ownerDocument = this;
    }
    function _onAddAttribute(doc, el, newAttr) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns === NAMESPACE.XMLNS) {
        el._nsMap[newAttr.prefix ? newAttr.localName : ""] = newAttr.value;
      }
    }
    function _onRemoveAttribute(doc, el, newAttr, remove) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns === NAMESPACE.XMLNS) {
        delete el._nsMap[newAttr.prefix ? newAttr.localName : ""];
      }
    }
    function _onUpdateChild(doc, el, newChild) {
      if (doc && doc._inc) {
        doc._inc++;
        var cs = el.childNodes;
        if (newChild) {
          cs[cs.length++] = newChild;
        } else {
          var child = el.firstChild;
          var i = 0;
          while (child) {
            cs[i++] = child;
            child = child.nextSibling;
          }
          cs.length = i;
          delete cs[cs.length];
        }
      }
    }
    function _removeChild(parentNode, child) {
      var previous = child.previousSibling;
      var next = child.nextSibling;
      if (previous) {
        previous.nextSibling = next;
      } else {
        parentNode.firstChild = next;
      }
      if (next) {
        next.previousSibling = previous;
      } else {
        parentNode.lastChild = previous;
      }
      child.parentNode = null;
      child.previousSibling = null;
      child.nextSibling = null;
      _onUpdateChild(parentNode.ownerDocument, parentNode);
      return child;
    }
    function hasValidParentNodeType(node) {
      return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);
    }
    function hasInsertableNodeType(node) {
      return node && (isElementNode(node) || isTextNode(node) || isDocTypeNode(node) || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE);
    }
    function isDocTypeNode(node) {
      return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;
    }
    function isElementNode(node) {
      return node && node.nodeType === Node.ELEMENT_NODE;
    }
    function isTextNode(node) {
      return node && node.nodeType === Node.TEXT_NODE;
    }
    function isElementInsertionPossible(doc, child) {
      var parentChildNodes = doc.childNodes || [];
      if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {
        return false;
      }
      var docTypeNode = find(parentChildNodes, isDocTypeNode);
      return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
    }
    function isElementReplacementPossible(doc, child) {
      var parentChildNodes = doc.childNodes || [];
      function hasElementChildThatIsNotChild(node) {
        return isElementNode(node) && node !== child;
      }
      if (find(parentChildNodes, hasElementChildThatIsNotChild)) {
        return false;
      }
      var docTypeNode = find(parentChildNodes, isDocTypeNode);
      return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
    }
    function assertPreInsertionValidity1to5(parent, node, child) {
      if (!hasValidParentNodeType(parent)) {
        throw new DOMException(HIERARCHY_REQUEST_ERR, "Unexpected parent node type " + parent.nodeType);
      }
      if (child && child.parentNode !== parent) {
        throw new DOMException(NOT_FOUND_ERR, "child not in parent");
      }
      if (
        // 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
        !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,
        // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
        // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
        // or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
        isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE
      ) {
        throw new DOMException(
          HIERARCHY_REQUEST_ERR,
          "Unexpected node type " + node.nodeType + " for parent node type " + parent.nodeType
        );
      }
    }
    function assertPreInsertionValidityInDocument(parent, node, child) {
      var parentChildNodes = parent.childNodes || [];
      var nodeChildNodes = node.childNodes || [];
      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter(isElementNode);
        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        }
        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
      }
      if (isElementNode(node)) {
        if (!isElementInsertionPossible(parent, child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        }
      }
      if (isDocTypeNode(node)) {
        if (find(parentChildNodes, isDocTypeNode)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        }
        var parentElementChild = find(parentChildNodes, isElementNode);
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        }
        if (!child && parentElementChild) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Doctype can not be appended since element is present");
        }
      }
    }
    function assertPreReplacementValidityInDocument(parent, node, child) {
      var parentChildNodes = parent.childNodes || [];
      var nodeChildNodes = node.childNodes || [];
      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter(isElementNode);
        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        }
        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
      }
      if (isElementNode(node)) {
        if (!isElementReplacementPossible(parent, child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        }
      }
      if (isDocTypeNode(node)) {
        let hasDoctypeChildThatIsNotChild2 = function(node2) {
          return isDocTypeNode(node2) && node2 !== child;
        };
        var hasDoctypeChildThatIsNotChild = hasDoctypeChildThatIsNotChild2;
        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild2)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        }
        var parentElementChild = find(parentChildNodes, isElementNode);
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
          throw new DOMException(HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        }
      }
    }
    function _insertBefore(parent, node, child, _inDocumentAssertion) {
      assertPreInsertionValidity1to5(parent, node, child);
      if (parent.nodeType === Node.DOCUMENT_NODE) {
        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);
      }
      var cp = node.parentNode;
      if (cp) {
        cp.removeChild(node);
      }
      if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var newFirst = node.firstChild;
        if (newFirst == null) {
          return node;
        }
        var newLast = node.lastChild;
      } else {
        newFirst = newLast = node;
      }
      var pre = child ? child.previousSibling : parent.lastChild;
      newFirst.previousSibling = pre;
      newLast.nextSibling = child;
      if (pre) {
        pre.nextSibling = newFirst;
      } else {
        parent.firstChild = newFirst;
      }
      if (child == null) {
        parent.lastChild = newLast;
      } else {
        child.previousSibling = newLast;
      }
      do {
        newFirst.parentNode = parent;
      } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
      _onUpdateChild(parent.ownerDocument || parent, parent);
      if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {
        node.firstChild = node.lastChild = null;
      }
      return node;
    }
    function _appendSingleChild(parentNode, newChild) {
      if (newChild.parentNode) {
        newChild.parentNode.removeChild(newChild);
      }
      newChild.parentNode = parentNode;
      newChild.previousSibling = parentNode.lastChild;
      newChild.nextSibling = null;
      if (newChild.previousSibling) {
        newChild.previousSibling.nextSibling = newChild;
      } else {
        parentNode.firstChild = newChild;
      }
      parentNode.lastChild = newChild;
      _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
      return newChild;
    }
    Document.prototype = {
      //implementation : null,
      nodeName: "#document",
      nodeType: DOCUMENT_NODE,
      /**
       * The DocumentType node of the document.
       *
       * @readonly
       * @type DocumentType
       */
      doctype: null,
      documentElement: null,
      _inc: 1,
      insertBefore: function(newChild, refChild) {
        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
          var child = newChild.firstChild;
          while (child) {
            var next = child.nextSibling;
            this.insertBefore(child, refChild);
            child = next;
          }
          return newChild;
        }
        _insertBefore(this, newChild, refChild);
        newChild.ownerDocument = this;
        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE2) {
          this.documentElement = newChild;
        }
        return newChild;
      },
      removeChild: function(oldChild) {
        if (this.documentElement == oldChild) {
          this.documentElement = null;
        }
        return _removeChild(this, oldChild);
      },
      replaceChild: function(newChild, oldChild) {
        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
        newChild.ownerDocument = this;
        if (oldChild) {
          this.removeChild(oldChild);
        }
        if (isElementNode(newChild)) {
          this.documentElement = newChild;
        }
      },
      // Introduced in DOM Level 2:
      importNode: function(importedNode, deep) {
        return importNode(this, importedNode, deep);
      },
      // Introduced in DOM Level 2:
      getElementById: function(id) {
        var rtv = null;
        _visitNode(this.documentElement, function(node) {
          if (node.nodeType == ELEMENT_NODE2) {
            if (node.getAttribute("id") == id) {
              rtv = node;
              return true;
            }
          }
        });
        return rtv;
      },
      /**
       * The `getElementsByClassName` method of `Document` interface returns an array-like object
       * of all child elements which have **all** of the given class name(s).
       *
       * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
       *
       *
       * Warning: This is a live LiveNodeList.
       * Changes in the DOM will reflect in the array as the changes occur.
       * If an element selected by this array no longer qualifies for the selector,
       * it will automatically be removed. Be aware of this for iteration purposes.
       *
       * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
       * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
       */
      getElementsByClassName: function(classNames) {
        var classNamesSet = toOrderedSet(classNames);
        return new LiveNodeList(this, function(base) {
          var ls = [];
          if (classNamesSet.length > 0) {
            _visitNode(base.documentElement, function(node) {
              if (node !== base && node.nodeType === ELEMENT_NODE2) {
                var nodeClassNames = node.getAttribute("class");
                if (nodeClassNames) {
                  var matches2 = classNames === nodeClassNames;
                  if (!matches2) {
                    var nodeClassNamesSet = toOrderedSet(nodeClassNames);
                    matches2 = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
                  }
                  if (matches2) {
                    ls.push(node);
                  }
                }
              }
            });
          }
          return ls;
        });
      },
      //document factory method:
      createElement: function(tagName) {
        var node = new Element();
        node.ownerDocument = this;
        node.nodeName = tagName;
        node.tagName = tagName;
        node.localName = tagName;
        node.childNodes = new NodeList();
        var attrs = node.attributes = new NamedNodeMap();
        attrs._ownerElement = node;
        return node;
      },
      createDocumentFragment: function() {
        var node = new DocumentFragment();
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        return node;
      },
      createTextNode: function(data) {
        var node = new Text();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createComment: function(data) {
        var node = new Comment();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createCDATASection: function(data) {
        var node = new CDATASection();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createProcessingInstruction: function(target, data) {
        var node = new ProcessingInstruction();
        node.ownerDocument = this;
        node.tagName = node.nodeName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
      },
      createAttribute: function(name) {
        var node = new Attr();
        node.ownerDocument = this;
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
      },
      createEntityReference: function(name) {
        var node = new EntityReference();
        node.ownerDocument = this;
        node.nodeName = name;
        return node;
      },
      // Introduced in DOM Level 2:
      createElementNS: function(namespaceURI, qualifiedName) {
        var node = new Element();
        var pl = qualifiedName.split(":");
        var attrs = node.attributes = new NamedNodeMap();
        node.childNodes = new NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = namespaceURI;
        if (pl.length == 2) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else {
          node.localName = qualifiedName;
        }
        attrs._ownerElement = node;
        return node;
      },
      // Introduced in DOM Level 2:
      createAttributeNS: function(namespaceURI, qualifiedName) {
        var node = new Attr();
        var pl = qualifiedName.split(":");
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.namespaceURI = namespaceURI;
        node.specified = true;
        if (pl.length == 2) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else {
          node.localName = qualifiedName;
        }
        return node;
      }
    };
    _extends(Document, Node);
    function Element() {
      this._nsMap = {};
    }
    Element.prototype = {
      nodeType: ELEMENT_NODE2,
      hasAttribute: function(name) {
        return this.getAttributeNode(name) != null;
      },
      getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr && attr.value || "";
      },
      getAttributeNode: function(name) {
        return this.attributes.getNamedItem(name);
      },
      setAttribute: function(name, value) {
        var attr = this.ownerDocument.createAttribute(name);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
      },
      //four real opeartion method
      appendChild: function(newChild) {
        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
          return this.insertBefore(newChild, null);
        } else {
          return _appendSingleChild(this, newChild);
        }
      },
      setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
      },
      setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
      },
      removeAttributeNode: function(oldAttr) {
        return this.attributes.removeNamedItem(oldAttr.nodeName);
      },
      //get real attribute name,and remove it by removeAttributeNode
      removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
      },
      hasAttributeNS: function(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName) != null;
      },
      getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr && attr.value || "";
      },
      setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
      },
      getElementsByTagName: function(tagName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node !== base && node.nodeType == ELEMENT_NODE2 && (tagName === "*" || node.tagName == tagName)) {
              ls.push(node);
            }
          });
          return ls;
        });
      },
      getElementsByTagNameNS: function(namespaceURI, localName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node !== base && node.nodeType === ELEMENT_NODE2 && (namespaceURI === "*" || node.namespaceURI === namespaceURI) && (localName === "*" || node.localName == localName)) {
              ls.push(node);
            }
          });
          return ls;
        });
      }
    };
    Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
    Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
    _extends(Element, Node);
    function Attr() {
    }
    Attr.prototype.nodeType = ATTRIBUTE_NODE;
    _extends(Attr, Node);
    function CharacterData() {
    }
    CharacterData.prototype = {
      data: "",
      substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
      },
      appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
      },
      insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
      },
      appendChild: function(newChild) {
        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);
      },
      deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
      },
      replaceData: function(offset, count, text) {
        var start = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
      }
    };
    _extends(CharacterData, Node);
    function Text() {
    }
    Text.prototype = {
      nodeName: "#text",
      nodeType: TEXT_NODE2,
      splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        if (this.parentNode) {
          this.parentNode.insertBefore(newNode, this.nextSibling);
        }
        return newNode;
      }
    };
    _extends(Text, CharacterData);
    function Comment() {
    }
    Comment.prototype = {
      nodeName: "#comment",
      nodeType: COMMENT_NODE2
    };
    _extends(Comment, CharacterData);
    function CDATASection() {
    }
    CDATASection.prototype = {
      nodeName: "#cdata-section",
      nodeType: CDATA_SECTION_NODE
    };
    _extends(CDATASection, CharacterData);
    function DocumentType() {
    }
    DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
    _extends(DocumentType, Node);
    function Notation() {
    }
    Notation.prototype.nodeType = NOTATION_NODE;
    _extends(Notation, Node);
    function Entity() {
    }
    Entity.prototype.nodeType = ENTITY_NODE;
    _extends(Entity, Node);
    function EntityReference() {
    }
    EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
    _extends(EntityReference, Node);
    function DocumentFragment() {
    }
    DocumentFragment.prototype.nodeName = "#document-fragment";
    DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
    _extends(DocumentFragment, Node);
    function ProcessingInstruction() {
    }
    ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
    _extends(ProcessingInstruction, Node);
    function XMLSerializer() {
    }
    XMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {
      return nodeSerializeToString.call(node, isHtml, nodeFilter);
    };
    Node.prototype.toString = nodeSerializeToString;
    function nodeSerializeToString(isHtml, nodeFilter) {
      var buf = [];
      var refNode = this.nodeType == 9 && this.documentElement || this;
      var prefix = refNode.prefix;
      var uri = refNode.namespaceURI;
      if (uri && prefix == null) {
        var prefix = refNode.lookupPrefix(uri);
        if (prefix == null) {
          var visibleNamespaces = [
            { namespace: uri, prefix: null }
            //{namespace:uri,prefix:''}
          ];
        }
      }
      serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
      return buf.join("");
    }
    function needNamespaceDefine(node, isHTML, visibleNamespaces) {
      var prefix = node.prefix || "";
      var uri = node.namespaceURI;
      if (!uri) {
        return false;
      }
      if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {
        return false;
      }
      var i = visibleNamespaces.length;
      while (i--) {
        var ns = visibleNamespaces[i];
        if (ns.prefix === prefix) {
          return ns.namespace !== uri;
        }
      }
      return true;
    }
    function addSerializedAttribute(buf, qualifiedName, value) {
      buf.push(" ", qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"');
    }
    function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
      if (!visibleNamespaces) {
        visibleNamespaces = [];
      }
      if (nodeFilter) {
        node = nodeFilter(node);
        if (node) {
          if (typeof node == "string") {
            buf.push(node);
            return;
          }
        } else {
          return;
        }
      }
      switch (node.nodeType) {
        case ELEMENT_NODE2:
          var attrs = node.attributes;
          var len = attrs.length;
          var child = node.firstChild;
          var nodeName = node.tagName;
          isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;
          var prefixedNodeName = nodeName;
          if (!isHTML && !node.prefix && node.namespaceURI) {
            var defaultNS;
            for (var ai = 0; ai < attrs.length; ai++) {
              if (attrs.item(ai).name === "xmlns") {
                defaultNS = attrs.item(ai).value;
                break;
              }
            }
            if (!defaultNS) {
              for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
                var namespace = visibleNamespaces[nsi];
                if (namespace.prefix === "" && namespace.namespace === node.namespaceURI) {
                  defaultNS = namespace.namespace;
                  break;
                }
              }
            }
            if (defaultNS !== node.namespaceURI) {
              for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
                var namespace = visibleNamespaces[nsi];
                if (namespace.namespace === node.namespaceURI) {
                  if (namespace.prefix) {
                    prefixedNodeName = namespace.prefix + ":" + nodeName;
                  }
                  break;
                }
              }
            }
          }
          buf.push("<", prefixedNodeName);
          for (var i = 0; i < len; i++) {
            var attr = attrs.item(i);
            if (attr.prefix == "xmlns") {
              visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
            } else if (attr.nodeName == "xmlns") {
              visibleNamespaces.push({ prefix: "", namespace: attr.value });
            }
          }
          for (var i = 0; i < len; i++) {
            var attr = attrs.item(i);
            if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
              var prefix = attr.prefix || "";
              var uri = attr.namespaceURI;
              addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
              visibleNamespaces.push({ prefix, namespace: uri });
            }
            serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
          }
          if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
            var prefix = node.prefix || "";
            var uri = node.namespaceURI;
            addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
            visibleNamespaces.push({ prefix, namespace: uri });
          }
          if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
            buf.push(">");
            if (isHTML && /^script$/i.test(nodeName)) {
              while (child) {
                if (child.data) {
                  buf.push(child.data);
                } else {
                  serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                }
                child = child.nextSibling;
              }
            } else {
              while (child) {
                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                child = child.nextSibling;
              }
            }
            buf.push("</", prefixedNodeName, ">");
          } else {
            buf.push("/>");
          }
          return;
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          var child = node.firstChild;
          while (child) {
            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
            child = child.nextSibling;
          }
          return;
        case ATTRIBUTE_NODE:
          return addSerializedAttribute(buf, node.name, node.value);
        case TEXT_NODE2:
          return buf.push(
            node.data.replace(/[<&>]/g, _xmlEncoder)
          );
        case CDATA_SECTION_NODE:
          return buf.push("<![CDATA[", node.data, "]]>");
        case COMMENT_NODE2:
          return buf.push("<!--", node.data, "-->");
        case DOCUMENT_TYPE_NODE:
          var pubid = node.publicId;
          var sysid = node.systemId;
          buf.push("<!DOCTYPE ", node.name);
          if (pubid) {
            buf.push(" PUBLIC ", pubid);
            if (sysid && sysid != ".") {
              buf.push(" ", sysid);
            }
            buf.push(">");
          } else if (sysid && sysid != ".") {
            buf.push(" SYSTEM ", sysid, ">");
          } else {
            var sub = node.internalSubset;
            if (sub) {
              buf.push(" [", sub, "]");
            }
            buf.push(">");
          }
          return;
        case PROCESSING_INSTRUCTION_NODE:
          return buf.push("<?", node.target, " ", node.data, "?>");
        case ENTITY_REFERENCE_NODE:
          return buf.push("&", node.nodeName, ";");
        default:
          buf.push("??", node.nodeName);
      }
    }
    function importNode(doc, node, deep) {
      var node2;
      switch (node.nodeType) {
        case ELEMENT_NODE2:
          node2 = node.cloneNode(false);
          node2.ownerDocument = doc;
        case DOCUMENT_FRAGMENT_NODE:
          break;
        case ATTRIBUTE_NODE:
          deep = true;
          break;
      }
      if (!node2) {
        node2 = node.cloneNode(false);
      }
      node2.ownerDocument = doc;
      node2.parentNode = null;
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(importNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function cloneNode(doc, node, deep) {
      var node2 = new node.constructor();
      for (var n in node) {
        if (Object.prototype.hasOwnProperty.call(node, n)) {
          var v = node[n];
          if (typeof v != "object") {
            if (v != node2[n]) {
              node2[n] = v;
            }
          }
        }
      }
      if (node.childNodes) {
        node2.childNodes = new NodeList();
      }
      node2.ownerDocument = doc;
      switch (node2.nodeType) {
        case ELEMENT_NODE2:
          var attrs = node.attributes;
          var attrs2 = node2.attributes = new NamedNodeMap();
          var len = attrs.length;
          attrs2._ownerElement = node2;
          for (var i = 0; i < len; i++) {
            node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));
          }
          break;
          ;
        case ATTRIBUTE_NODE:
          deep = true;
      }
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(cloneNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function __set__(object, key, value) {
      object[key] = value;
    }
    try {
      if (Object.defineProperty) {
        let getTextContent3 = function(node) {
          switch (node.nodeType) {
            case ELEMENT_NODE2:
            case DOCUMENT_FRAGMENT_NODE:
              var buf = [];
              node = node.firstChild;
              while (node) {
                if (node.nodeType !== 7 && node.nodeType !== 8) {
                  buf.push(getTextContent3(node));
                }
                node = node.nextSibling;
              }
              return buf.join("");
            default:
              return node.nodeValue;
          }
        };
        getTextContent2 = getTextContent3;
        Object.defineProperty(LiveNodeList.prototype, "length", {
          get: function() {
            _updateLiveList(this);
            return this.$$length;
          }
        });
        Object.defineProperty(Node.prototype, "textContent", {
          get: function() {
            return getTextContent3(this);
          },
          set: function(data) {
            switch (this.nodeType) {
              case ELEMENT_NODE2:
              case DOCUMENT_FRAGMENT_NODE:
                while (this.firstChild) {
                  this.removeChild(this.firstChild);
                }
                if (data || String(data)) {
                  this.appendChild(this.ownerDocument.createTextNode(data));
                }
                break;
              default:
                this.data = data;
                this.value = data;
                this.nodeValue = data;
            }
          }
        });
        __set__ = function(object, key, value) {
          object["$$" + key] = value;
        };
      }
    } catch (e) {
    }
    var getTextContent2;
    exports.DocumentType = DocumentType;
    exports.DOMException = DOMException;
    exports.DOMImplementation = DOMImplementation;
    exports.Element = Element;
    exports.Node = Node;
    exports.NodeList = NodeList;
    exports.XMLSerializer = XMLSerializer;
  }
});

// ../node_modules/@xmldom/xmldom/lib/entities.js
var require_entities = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/entities.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var freeze = require_conventions().freeze;
    exports.XML_ENTITIES = freeze({
      amp: "&",
      apos: "'",
      gt: ">",
      lt: "<",
      quot: '"'
    });
    exports.HTML_ENTITIES = freeze({
      Aacute: "Á",
      aacute: "á",
      Abreve: "Ă",
      abreve: "ă",
      ac: "∾",
      acd: "∿",
      acE: "∾̳",
      Acirc: "Â",
      acirc: "â",
      acute: "´",
      Acy: "А",
      acy: "а",
      AElig: "Æ",
      aelig: "æ",
      af: "⁡",
      Afr: "𝔄",
      afr: "𝔞",
      Agrave: "À",
      agrave: "à",
      alefsym: "ℵ",
      aleph: "ℵ",
      Alpha: "Α",
      alpha: "α",
      Amacr: "Ā",
      amacr: "ā",
      amalg: "⨿",
      AMP: "&",
      amp: "&",
      And: "⩓",
      and: "∧",
      andand: "⩕",
      andd: "⩜",
      andslope: "⩘",
      andv: "⩚",
      ang: "∠",
      ange: "⦤",
      angle: "∠",
      angmsd: "∡",
      angmsdaa: "⦨",
      angmsdab: "⦩",
      angmsdac: "⦪",
      angmsdad: "⦫",
      angmsdae: "⦬",
      angmsdaf: "⦭",
      angmsdag: "⦮",
      angmsdah: "⦯",
      angrt: "∟",
      angrtvb: "⊾",
      angrtvbd: "⦝",
      angsph: "∢",
      angst: "Å",
      angzarr: "⍼",
      Aogon: "Ą",
      aogon: "ą",
      Aopf: "𝔸",
      aopf: "𝕒",
      ap: "≈",
      apacir: "⩯",
      apE: "⩰",
      ape: "≊",
      apid: "≋",
      apos: "'",
      ApplyFunction: "⁡",
      approx: "≈",
      approxeq: "≊",
      Aring: "Å",
      aring: "å",
      Ascr: "𝒜",
      ascr: "𝒶",
      Assign: "≔",
      ast: "*",
      asymp: "≈",
      asympeq: "≍",
      Atilde: "Ã",
      atilde: "ã",
      Auml: "Ä",
      auml: "ä",
      awconint: "∳",
      awint: "⨑",
      backcong: "≌",
      backepsilon: "϶",
      backprime: "‵",
      backsim: "∽",
      backsimeq: "⋍",
      Backslash: "∖",
      Barv: "⫧",
      barvee: "⊽",
      Barwed: "⌆",
      barwed: "⌅",
      barwedge: "⌅",
      bbrk: "⎵",
      bbrktbrk: "⎶",
      bcong: "≌",
      Bcy: "Б",
      bcy: "б",
      bdquo: "„",
      becaus: "∵",
      Because: "∵",
      because: "∵",
      bemptyv: "⦰",
      bepsi: "϶",
      bernou: "ℬ",
      Bernoullis: "ℬ",
      Beta: "Β",
      beta: "β",
      beth: "ℶ",
      between: "≬",
      Bfr: "𝔅",
      bfr: "𝔟",
      bigcap: "⋂",
      bigcirc: "◯",
      bigcup: "⋃",
      bigodot: "⨀",
      bigoplus: "⨁",
      bigotimes: "⨂",
      bigsqcup: "⨆",
      bigstar: "★",
      bigtriangledown: "▽",
      bigtriangleup: "△",
      biguplus: "⨄",
      bigvee: "⋁",
      bigwedge: "⋀",
      bkarow: "⤍",
      blacklozenge: "⧫",
      blacksquare: "▪",
      blacktriangle: "▴",
      blacktriangledown: "▾",
      blacktriangleleft: "◂",
      blacktriangleright: "▸",
      blank: "␣",
      blk12: "▒",
      blk14: "░",
      blk34: "▓",
      block: "█",
      bne: "=⃥",
      bnequiv: "≡⃥",
      bNot: "⫭",
      bnot: "⌐",
      Bopf: "𝔹",
      bopf: "𝕓",
      bot: "⊥",
      bottom: "⊥",
      bowtie: "⋈",
      boxbox: "⧉",
      boxDL: "╗",
      boxDl: "╖",
      boxdL: "╕",
      boxdl: "┐",
      boxDR: "╔",
      boxDr: "╓",
      boxdR: "╒",
      boxdr: "┌",
      boxH: "═",
      boxh: "─",
      boxHD: "╦",
      boxHd: "╤",
      boxhD: "╥",
      boxhd: "┬",
      boxHU: "╩",
      boxHu: "╧",
      boxhU: "╨",
      boxhu: "┴",
      boxminus: "⊟",
      boxplus: "⊞",
      boxtimes: "⊠",
      boxUL: "╝",
      boxUl: "╜",
      boxuL: "╛",
      boxul: "┘",
      boxUR: "╚",
      boxUr: "╙",
      boxuR: "╘",
      boxur: "└",
      boxV: "║",
      boxv: "│",
      boxVH: "╬",
      boxVh: "╫",
      boxvH: "╪",
      boxvh: "┼",
      boxVL: "╣",
      boxVl: "╢",
      boxvL: "╡",
      boxvl: "┤",
      boxVR: "╠",
      boxVr: "╟",
      boxvR: "╞",
      boxvr: "├",
      bprime: "‵",
      Breve: "˘",
      breve: "˘",
      brvbar: "¦",
      Bscr: "ℬ",
      bscr: "𝒷",
      bsemi: "⁏",
      bsim: "∽",
      bsime: "⋍",
      bsol: "\\",
      bsolb: "⧅",
      bsolhsub: "⟈",
      bull: "•",
      bullet: "•",
      bump: "≎",
      bumpE: "⪮",
      bumpe: "≏",
      Bumpeq: "≎",
      bumpeq: "≏",
      Cacute: "Ć",
      cacute: "ć",
      Cap: "⋒",
      cap: "∩",
      capand: "⩄",
      capbrcup: "⩉",
      capcap: "⩋",
      capcup: "⩇",
      capdot: "⩀",
      CapitalDifferentialD: "ⅅ",
      caps: "∩︀",
      caret: "⁁",
      caron: "ˇ",
      Cayleys: "ℭ",
      ccaps: "⩍",
      Ccaron: "Č",
      ccaron: "č",
      Ccedil: "Ç",
      ccedil: "ç",
      Ccirc: "Ĉ",
      ccirc: "ĉ",
      Cconint: "∰",
      ccups: "⩌",
      ccupssm: "⩐",
      Cdot: "Ċ",
      cdot: "ċ",
      cedil: "¸",
      Cedilla: "¸",
      cemptyv: "⦲",
      cent: "¢",
      CenterDot: "·",
      centerdot: "·",
      Cfr: "ℭ",
      cfr: "𝔠",
      CHcy: "Ч",
      chcy: "ч",
      check: "✓",
      checkmark: "✓",
      Chi: "Χ",
      chi: "χ",
      cir: "○",
      circ: "ˆ",
      circeq: "≗",
      circlearrowleft: "↺",
      circlearrowright: "↻",
      circledast: "⊛",
      circledcirc: "⊚",
      circleddash: "⊝",
      CircleDot: "⊙",
      circledR: "®",
      circledS: "Ⓢ",
      CircleMinus: "⊖",
      CirclePlus: "⊕",
      CircleTimes: "⊗",
      cirE: "⧃",
      cire: "≗",
      cirfnint: "⨐",
      cirmid: "⫯",
      cirscir: "⧂",
      ClockwiseContourIntegral: "∲",
      CloseCurlyDoubleQuote: "”",
      CloseCurlyQuote: "’",
      clubs: "♣",
      clubsuit: "♣",
      Colon: "∷",
      colon: ":",
      Colone: "⩴",
      colone: "≔",
      coloneq: "≔",
      comma: ",",
      commat: "@",
      comp: "∁",
      compfn: "∘",
      complement: "∁",
      complexes: "ℂ",
      cong: "≅",
      congdot: "⩭",
      Congruent: "≡",
      Conint: "∯",
      conint: "∮",
      ContourIntegral: "∮",
      Copf: "ℂ",
      copf: "𝕔",
      coprod: "∐",
      Coproduct: "∐",
      COPY: "©",
      copy: "©",
      copysr: "℗",
      CounterClockwiseContourIntegral: "∳",
      crarr: "↵",
      Cross: "⨯",
      cross: "✗",
      Cscr: "𝒞",
      cscr: "𝒸",
      csub: "⫏",
      csube: "⫑",
      csup: "⫐",
      csupe: "⫒",
      ctdot: "⋯",
      cudarrl: "⤸",
      cudarrr: "⤵",
      cuepr: "⋞",
      cuesc: "⋟",
      cularr: "↶",
      cularrp: "⤽",
      Cup: "⋓",
      cup: "∪",
      cupbrcap: "⩈",
      CupCap: "≍",
      cupcap: "⩆",
      cupcup: "⩊",
      cupdot: "⊍",
      cupor: "⩅",
      cups: "∪︀",
      curarr: "↷",
      curarrm: "⤼",
      curlyeqprec: "⋞",
      curlyeqsucc: "⋟",
      curlyvee: "⋎",
      curlywedge: "⋏",
      curren: "¤",
      curvearrowleft: "↶",
      curvearrowright: "↷",
      cuvee: "⋎",
      cuwed: "⋏",
      cwconint: "∲",
      cwint: "∱",
      cylcty: "⌭",
      Dagger: "‡",
      dagger: "†",
      daleth: "ℸ",
      Darr: "↡",
      dArr: "⇓",
      darr: "↓",
      dash: "‐",
      Dashv: "⫤",
      dashv: "⊣",
      dbkarow: "⤏",
      dblac: "˝",
      Dcaron: "Ď",
      dcaron: "ď",
      Dcy: "Д",
      dcy: "д",
      DD: "ⅅ",
      dd: "ⅆ",
      ddagger: "‡",
      ddarr: "⇊",
      DDotrahd: "⤑",
      ddotseq: "⩷",
      deg: "°",
      Del: "∇",
      Delta: "Δ",
      delta: "δ",
      demptyv: "⦱",
      dfisht: "⥿",
      Dfr: "𝔇",
      dfr: "𝔡",
      dHar: "⥥",
      dharl: "⇃",
      dharr: "⇂",
      DiacriticalAcute: "´",
      DiacriticalDot: "˙",
      DiacriticalDoubleAcute: "˝",
      DiacriticalGrave: "`",
      DiacriticalTilde: "˜",
      diam: "⋄",
      Diamond: "⋄",
      diamond: "⋄",
      diamondsuit: "♦",
      diams: "♦",
      die: "¨",
      DifferentialD: "ⅆ",
      digamma: "ϝ",
      disin: "⋲",
      div: "÷",
      divide: "÷",
      divideontimes: "⋇",
      divonx: "⋇",
      DJcy: "Ђ",
      djcy: "ђ",
      dlcorn: "⌞",
      dlcrop: "⌍",
      dollar: "$",
      Dopf: "𝔻",
      dopf: "𝕕",
      Dot: "¨",
      dot: "˙",
      DotDot: "⃜",
      doteq: "≐",
      doteqdot: "≑",
      DotEqual: "≐",
      dotminus: "∸",
      dotplus: "∔",
      dotsquare: "⊡",
      doublebarwedge: "⌆",
      DoubleContourIntegral: "∯",
      DoubleDot: "¨",
      DoubleDownArrow: "⇓",
      DoubleLeftArrow: "⇐",
      DoubleLeftRightArrow: "⇔",
      DoubleLeftTee: "⫤",
      DoubleLongLeftArrow: "⟸",
      DoubleLongLeftRightArrow: "⟺",
      DoubleLongRightArrow: "⟹",
      DoubleRightArrow: "⇒",
      DoubleRightTee: "⊨",
      DoubleUpArrow: "⇑",
      DoubleUpDownArrow: "⇕",
      DoubleVerticalBar: "∥",
      DownArrow: "↓",
      Downarrow: "⇓",
      downarrow: "↓",
      DownArrowBar: "⤓",
      DownArrowUpArrow: "⇵",
      DownBreve: "̑",
      downdownarrows: "⇊",
      downharpoonleft: "⇃",
      downharpoonright: "⇂",
      DownLeftRightVector: "⥐",
      DownLeftTeeVector: "⥞",
      DownLeftVector: "↽",
      DownLeftVectorBar: "⥖",
      DownRightTeeVector: "⥟",
      DownRightVector: "⇁",
      DownRightVectorBar: "⥗",
      DownTee: "⊤",
      DownTeeArrow: "↧",
      drbkarow: "⤐",
      drcorn: "⌟",
      drcrop: "⌌",
      Dscr: "𝒟",
      dscr: "𝒹",
      DScy: "Ѕ",
      dscy: "ѕ",
      dsol: "⧶",
      Dstrok: "Đ",
      dstrok: "đ",
      dtdot: "⋱",
      dtri: "▿",
      dtrif: "▾",
      duarr: "⇵",
      duhar: "⥯",
      dwangle: "⦦",
      DZcy: "Џ",
      dzcy: "џ",
      dzigrarr: "⟿",
      Eacute: "É",
      eacute: "é",
      easter: "⩮",
      Ecaron: "Ě",
      ecaron: "ě",
      ecir: "≖",
      Ecirc: "Ê",
      ecirc: "ê",
      ecolon: "≕",
      Ecy: "Э",
      ecy: "э",
      eDDot: "⩷",
      Edot: "Ė",
      eDot: "≑",
      edot: "ė",
      ee: "ⅇ",
      efDot: "≒",
      Efr: "𝔈",
      efr: "𝔢",
      eg: "⪚",
      Egrave: "È",
      egrave: "è",
      egs: "⪖",
      egsdot: "⪘",
      el: "⪙",
      Element: "∈",
      elinters: "⏧",
      ell: "ℓ",
      els: "⪕",
      elsdot: "⪗",
      Emacr: "Ē",
      emacr: "ē",
      empty: "∅",
      emptyset: "∅",
      EmptySmallSquare: "◻",
      emptyv: "∅",
      EmptyVerySmallSquare: "▫",
      emsp: " ",
      emsp13: " ",
      emsp14: " ",
      ENG: "Ŋ",
      eng: "ŋ",
      ensp: " ",
      Eogon: "Ę",
      eogon: "ę",
      Eopf: "𝔼",
      eopf: "𝕖",
      epar: "⋕",
      eparsl: "⧣",
      eplus: "⩱",
      epsi: "ε",
      Epsilon: "Ε",
      epsilon: "ε",
      epsiv: "ϵ",
      eqcirc: "≖",
      eqcolon: "≕",
      eqsim: "≂",
      eqslantgtr: "⪖",
      eqslantless: "⪕",
      Equal: "⩵",
      equals: "=",
      EqualTilde: "≂",
      equest: "≟",
      Equilibrium: "⇌",
      equiv: "≡",
      equivDD: "⩸",
      eqvparsl: "⧥",
      erarr: "⥱",
      erDot: "≓",
      Escr: "ℰ",
      escr: "ℯ",
      esdot: "≐",
      Esim: "⩳",
      esim: "≂",
      Eta: "Η",
      eta: "η",
      ETH: "Ð",
      eth: "ð",
      Euml: "Ë",
      euml: "ë",
      euro: "€",
      excl: "!",
      exist: "∃",
      Exists: "∃",
      expectation: "ℰ",
      ExponentialE: "ⅇ",
      exponentiale: "ⅇ",
      fallingdotseq: "≒",
      Fcy: "Ф",
      fcy: "ф",
      female: "♀",
      ffilig: "ﬃ",
      fflig: "ﬀ",
      ffllig: "ﬄ",
      Ffr: "𝔉",
      ffr: "𝔣",
      filig: "ﬁ",
      FilledSmallSquare: "◼",
      FilledVerySmallSquare: "▪",
      fjlig: "fj",
      flat: "♭",
      fllig: "ﬂ",
      fltns: "▱",
      fnof: "ƒ",
      Fopf: "𝔽",
      fopf: "𝕗",
      ForAll: "∀",
      forall: "∀",
      fork: "⋔",
      forkv: "⫙",
      Fouriertrf: "ℱ",
      fpartint: "⨍",
      frac12: "½",
      frac13: "⅓",
      frac14: "¼",
      frac15: "⅕",
      frac16: "⅙",
      frac18: "⅛",
      frac23: "⅔",
      frac25: "⅖",
      frac34: "¾",
      frac35: "⅗",
      frac38: "⅜",
      frac45: "⅘",
      frac56: "⅚",
      frac58: "⅝",
      frac78: "⅞",
      frasl: "⁄",
      frown: "⌢",
      Fscr: "ℱ",
      fscr: "𝒻",
      gacute: "ǵ",
      Gamma: "Γ",
      gamma: "γ",
      Gammad: "Ϝ",
      gammad: "ϝ",
      gap: "⪆",
      Gbreve: "Ğ",
      gbreve: "ğ",
      Gcedil: "Ģ",
      Gcirc: "Ĝ",
      gcirc: "ĝ",
      Gcy: "Г",
      gcy: "г",
      Gdot: "Ġ",
      gdot: "ġ",
      gE: "≧",
      ge: "≥",
      gEl: "⪌",
      gel: "⋛",
      geq: "≥",
      geqq: "≧",
      geqslant: "⩾",
      ges: "⩾",
      gescc: "⪩",
      gesdot: "⪀",
      gesdoto: "⪂",
      gesdotol: "⪄",
      gesl: "⋛︀",
      gesles: "⪔",
      Gfr: "𝔊",
      gfr: "𝔤",
      Gg: "⋙",
      gg: "≫",
      ggg: "⋙",
      gimel: "ℷ",
      GJcy: "Ѓ",
      gjcy: "ѓ",
      gl: "≷",
      gla: "⪥",
      glE: "⪒",
      glj: "⪤",
      gnap: "⪊",
      gnapprox: "⪊",
      gnE: "≩",
      gne: "⪈",
      gneq: "⪈",
      gneqq: "≩",
      gnsim: "⋧",
      Gopf: "𝔾",
      gopf: "𝕘",
      grave: "`",
      GreaterEqual: "≥",
      GreaterEqualLess: "⋛",
      GreaterFullEqual: "≧",
      GreaterGreater: "⪢",
      GreaterLess: "≷",
      GreaterSlantEqual: "⩾",
      GreaterTilde: "≳",
      Gscr: "𝒢",
      gscr: "ℊ",
      gsim: "≳",
      gsime: "⪎",
      gsiml: "⪐",
      Gt: "≫",
      GT: ">",
      gt: ">",
      gtcc: "⪧",
      gtcir: "⩺",
      gtdot: "⋗",
      gtlPar: "⦕",
      gtquest: "⩼",
      gtrapprox: "⪆",
      gtrarr: "⥸",
      gtrdot: "⋗",
      gtreqless: "⋛",
      gtreqqless: "⪌",
      gtrless: "≷",
      gtrsim: "≳",
      gvertneqq: "≩︀",
      gvnE: "≩︀",
      Hacek: "ˇ",
      hairsp: " ",
      half: "½",
      hamilt: "ℋ",
      HARDcy: "Ъ",
      hardcy: "ъ",
      hArr: "⇔",
      harr: "↔",
      harrcir: "⥈",
      harrw: "↭",
      Hat: "^",
      hbar: "ℏ",
      Hcirc: "Ĥ",
      hcirc: "ĥ",
      hearts: "♥",
      heartsuit: "♥",
      hellip: "…",
      hercon: "⊹",
      Hfr: "ℌ",
      hfr: "𝔥",
      HilbertSpace: "ℋ",
      hksearow: "⤥",
      hkswarow: "⤦",
      hoarr: "⇿",
      homtht: "∻",
      hookleftarrow: "↩",
      hookrightarrow: "↪",
      Hopf: "ℍ",
      hopf: "𝕙",
      horbar: "―",
      HorizontalLine: "─",
      Hscr: "ℋ",
      hscr: "𝒽",
      hslash: "ℏ",
      Hstrok: "Ħ",
      hstrok: "ħ",
      HumpDownHump: "≎",
      HumpEqual: "≏",
      hybull: "⁃",
      hyphen: "‐",
      Iacute: "Í",
      iacute: "í",
      ic: "⁣",
      Icirc: "Î",
      icirc: "î",
      Icy: "И",
      icy: "и",
      Idot: "İ",
      IEcy: "Е",
      iecy: "е",
      iexcl: "¡",
      iff: "⇔",
      Ifr: "ℑ",
      ifr: "𝔦",
      Igrave: "Ì",
      igrave: "ì",
      ii: "ⅈ",
      iiiint: "⨌",
      iiint: "∭",
      iinfin: "⧜",
      iiota: "℩",
      IJlig: "Ĳ",
      ijlig: "ĳ",
      Im: "ℑ",
      Imacr: "Ī",
      imacr: "ī",
      image: "ℑ",
      ImaginaryI: "ⅈ",
      imagline: "ℐ",
      imagpart: "ℑ",
      imath: "ı",
      imof: "⊷",
      imped: "Ƶ",
      Implies: "⇒",
      in: "∈",
      incare: "℅",
      infin: "∞",
      infintie: "⧝",
      inodot: "ı",
      Int: "∬",
      int: "∫",
      intcal: "⊺",
      integers: "ℤ",
      Integral: "∫",
      intercal: "⊺",
      Intersection: "⋂",
      intlarhk: "⨗",
      intprod: "⨼",
      InvisibleComma: "⁣",
      InvisibleTimes: "⁢",
      IOcy: "Ё",
      iocy: "ё",
      Iogon: "Į",
      iogon: "į",
      Iopf: "𝕀",
      iopf: "𝕚",
      Iota: "Ι",
      iota: "ι",
      iprod: "⨼",
      iquest: "¿",
      Iscr: "ℐ",
      iscr: "𝒾",
      isin: "∈",
      isindot: "⋵",
      isinE: "⋹",
      isins: "⋴",
      isinsv: "⋳",
      isinv: "∈",
      it: "⁢",
      Itilde: "Ĩ",
      itilde: "ĩ",
      Iukcy: "І",
      iukcy: "і",
      Iuml: "Ï",
      iuml: "ï",
      Jcirc: "Ĵ",
      jcirc: "ĵ",
      Jcy: "Й",
      jcy: "й",
      Jfr: "𝔍",
      jfr: "𝔧",
      jmath: "ȷ",
      Jopf: "𝕁",
      jopf: "𝕛",
      Jscr: "𝒥",
      jscr: "𝒿",
      Jsercy: "Ј",
      jsercy: "ј",
      Jukcy: "Є",
      jukcy: "є",
      Kappa: "Κ",
      kappa: "κ",
      kappav: "ϰ",
      Kcedil: "Ķ",
      kcedil: "ķ",
      Kcy: "К",
      kcy: "к",
      Kfr: "𝔎",
      kfr: "𝔨",
      kgreen: "ĸ",
      KHcy: "Х",
      khcy: "х",
      KJcy: "Ќ",
      kjcy: "ќ",
      Kopf: "𝕂",
      kopf: "𝕜",
      Kscr: "𝒦",
      kscr: "𝓀",
      lAarr: "⇚",
      Lacute: "Ĺ",
      lacute: "ĺ",
      laemptyv: "⦴",
      lagran: "ℒ",
      Lambda: "Λ",
      lambda: "λ",
      Lang: "⟪",
      lang: "⟨",
      langd: "⦑",
      langle: "⟨",
      lap: "⪅",
      Laplacetrf: "ℒ",
      laquo: "«",
      Larr: "↞",
      lArr: "⇐",
      larr: "←",
      larrb: "⇤",
      larrbfs: "⤟",
      larrfs: "⤝",
      larrhk: "↩",
      larrlp: "↫",
      larrpl: "⤹",
      larrsim: "⥳",
      larrtl: "↢",
      lat: "⪫",
      lAtail: "⤛",
      latail: "⤙",
      late: "⪭",
      lates: "⪭︀",
      lBarr: "⤎",
      lbarr: "⤌",
      lbbrk: "❲",
      lbrace: "{",
      lbrack: "[",
      lbrke: "⦋",
      lbrksld: "⦏",
      lbrkslu: "⦍",
      Lcaron: "Ľ",
      lcaron: "ľ",
      Lcedil: "Ļ",
      lcedil: "ļ",
      lceil: "⌈",
      lcub: "{",
      Lcy: "Л",
      lcy: "л",
      ldca: "⤶",
      ldquo: "“",
      ldquor: "„",
      ldrdhar: "⥧",
      ldrushar: "⥋",
      ldsh: "↲",
      lE: "≦",
      le: "≤",
      LeftAngleBracket: "⟨",
      LeftArrow: "←",
      Leftarrow: "⇐",
      leftarrow: "←",
      LeftArrowBar: "⇤",
      LeftArrowRightArrow: "⇆",
      leftarrowtail: "↢",
      LeftCeiling: "⌈",
      LeftDoubleBracket: "⟦",
      LeftDownTeeVector: "⥡",
      LeftDownVector: "⇃",
      LeftDownVectorBar: "⥙",
      LeftFloor: "⌊",
      leftharpoondown: "↽",
      leftharpoonup: "↼",
      leftleftarrows: "⇇",
      LeftRightArrow: "↔",
      Leftrightarrow: "⇔",
      leftrightarrow: "↔",
      leftrightarrows: "⇆",
      leftrightharpoons: "⇋",
      leftrightsquigarrow: "↭",
      LeftRightVector: "⥎",
      LeftTee: "⊣",
      LeftTeeArrow: "↤",
      LeftTeeVector: "⥚",
      leftthreetimes: "⋋",
      LeftTriangle: "⊲",
      LeftTriangleBar: "⧏",
      LeftTriangleEqual: "⊴",
      LeftUpDownVector: "⥑",
      LeftUpTeeVector: "⥠",
      LeftUpVector: "↿",
      LeftUpVectorBar: "⥘",
      LeftVector: "↼",
      LeftVectorBar: "⥒",
      lEg: "⪋",
      leg: "⋚",
      leq: "≤",
      leqq: "≦",
      leqslant: "⩽",
      les: "⩽",
      lescc: "⪨",
      lesdot: "⩿",
      lesdoto: "⪁",
      lesdotor: "⪃",
      lesg: "⋚︀",
      lesges: "⪓",
      lessapprox: "⪅",
      lessdot: "⋖",
      lesseqgtr: "⋚",
      lesseqqgtr: "⪋",
      LessEqualGreater: "⋚",
      LessFullEqual: "≦",
      LessGreater: "≶",
      lessgtr: "≶",
      LessLess: "⪡",
      lesssim: "≲",
      LessSlantEqual: "⩽",
      LessTilde: "≲",
      lfisht: "⥼",
      lfloor: "⌊",
      Lfr: "𝔏",
      lfr: "𝔩",
      lg: "≶",
      lgE: "⪑",
      lHar: "⥢",
      lhard: "↽",
      lharu: "↼",
      lharul: "⥪",
      lhblk: "▄",
      LJcy: "Љ",
      ljcy: "љ",
      Ll: "⋘",
      ll: "≪",
      llarr: "⇇",
      llcorner: "⌞",
      Lleftarrow: "⇚",
      llhard: "⥫",
      lltri: "◺",
      Lmidot: "Ŀ",
      lmidot: "ŀ",
      lmoust: "⎰",
      lmoustache: "⎰",
      lnap: "⪉",
      lnapprox: "⪉",
      lnE: "≨",
      lne: "⪇",
      lneq: "⪇",
      lneqq: "≨",
      lnsim: "⋦",
      loang: "⟬",
      loarr: "⇽",
      lobrk: "⟦",
      LongLeftArrow: "⟵",
      Longleftarrow: "⟸",
      longleftarrow: "⟵",
      LongLeftRightArrow: "⟷",
      Longleftrightarrow: "⟺",
      longleftrightarrow: "⟷",
      longmapsto: "⟼",
      LongRightArrow: "⟶",
      Longrightarrow: "⟹",
      longrightarrow: "⟶",
      looparrowleft: "↫",
      looparrowright: "↬",
      lopar: "⦅",
      Lopf: "𝕃",
      lopf: "𝕝",
      loplus: "⨭",
      lotimes: "⨴",
      lowast: "∗",
      lowbar: "_",
      LowerLeftArrow: "↙",
      LowerRightArrow: "↘",
      loz: "◊",
      lozenge: "◊",
      lozf: "⧫",
      lpar: "(",
      lparlt: "⦓",
      lrarr: "⇆",
      lrcorner: "⌟",
      lrhar: "⇋",
      lrhard: "⥭",
      lrm: "‎",
      lrtri: "⊿",
      lsaquo: "‹",
      Lscr: "ℒ",
      lscr: "𝓁",
      Lsh: "↰",
      lsh: "↰",
      lsim: "≲",
      lsime: "⪍",
      lsimg: "⪏",
      lsqb: "[",
      lsquo: "‘",
      lsquor: "‚",
      Lstrok: "Ł",
      lstrok: "ł",
      Lt: "≪",
      LT: "<",
      lt: "<",
      ltcc: "⪦",
      ltcir: "⩹",
      ltdot: "⋖",
      lthree: "⋋",
      ltimes: "⋉",
      ltlarr: "⥶",
      ltquest: "⩻",
      ltri: "◃",
      ltrie: "⊴",
      ltrif: "◂",
      ltrPar: "⦖",
      lurdshar: "⥊",
      luruhar: "⥦",
      lvertneqq: "≨︀",
      lvnE: "≨︀",
      macr: "¯",
      male: "♂",
      malt: "✠",
      maltese: "✠",
      Map: "⤅",
      map: "↦",
      mapsto: "↦",
      mapstodown: "↧",
      mapstoleft: "↤",
      mapstoup: "↥",
      marker: "▮",
      mcomma: "⨩",
      Mcy: "М",
      mcy: "м",
      mdash: "—",
      mDDot: "∺",
      measuredangle: "∡",
      MediumSpace: " ",
      Mellintrf: "ℳ",
      Mfr: "𝔐",
      mfr: "𝔪",
      mho: "℧",
      micro: "µ",
      mid: "∣",
      midast: "*",
      midcir: "⫰",
      middot: "·",
      minus: "−",
      minusb: "⊟",
      minusd: "∸",
      minusdu: "⨪",
      MinusPlus: "∓",
      mlcp: "⫛",
      mldr: "…",
      mnplus: "∓",
      models: "⊧",
      Mopf: "𝕄",
      mopf: "𝕞",
      mp: "∓",
      Mscr: "ℳ",
      mscr: "𝓂",
      mstpos: "∾",
      Mu: "Μ",
      mu: "μ",
      multimap: "⊸",
      mumap: "⊸",
      nabla: "∇",
      Nacute: "Ń",
      nacute: "ń",
      nang: "∠⃒",
      nap: "≉",
      napE: "⩰̸",
      napid: "≋̸",
      napos: "ŉ",
      napprox: "≉",
      natur: "♮",
      natural: "♮",
      naturals: "ℕ",
      nbsp: " ",
      nbump: "≎̸",
      nbumpe: "≏̸",
      ncap: "⩃",
      Ncaron: "Ň",
      ncaron: "ň",
      Ncedil: "Ņ",
      ncedil: "ņ",
      ncong: "≇",
      ncongdot: "⩭̸",
      ncup: "⩂",
      Ncy: "Н",
      ncy: "н",
      ndash: "–",
      ne: "≠",
      nearhk: "⤤",
      neArr: "⇗",
      nearr: "↗",
      nearrow: "↗",
      nedot: "≐̸",
      NegativeMediumSpace: "​",
      NegativeThickSpace: "​",
      NegativeThinSpace: "​",
      NegativeVeryThinSpace: "​",
      nequiv: "≢",
      nesear: "⤨",
      nesim: "≂̸",
      NestedGreaterGreater: "≫",
      NestedLessLess: "≪",
      NewLine: "\n",
      nexist: "∄",
      nexists: "∄",
      Nfr: "𝔑",
      nfr: "𝔫",
      ngE: "≧̸",
      nge: "≱",
      ngeq: "≱",
      ngeqq: "≧̸",
      ngeqslant: "⩾̸",
      nges: "⩾̸",
      nGg: "⋙̸",
      ngsim: "≵",
      nGt: "≫⃒",
      ngt: "≯",
      ngtr: "≯",
      nGtv: "≫̸",
      nhArr: "⇎",
      nharr: "↮",
      nhpar: "⫲",
      ni: "∋",
      nis: "⋼",
      nisd: "⋺",
      niv: "∋",
      NJcy: "Њ",
      njcy: "њ",
      nlArr: "⇍",
      nlarr: "↚",
      nldr: "‥",
      nlE: "≦̸",
      nle: "≰",
      nLeftarrow: "⇍",
      nleftarrow: "↚",
      nLeftrightarrow: "⇎",
      nleftrightarrow: "↮",
      nleq: "≰",
      nleqq: "≦̸",
      nleqslant: "⩽̸",
      nles: "⩽̸",
      nless: "≮",
      nLl: "⋘̸",
      nlsim: "≴",
      nLt: "≪⃒",
      nlt: "≮",
      nltri: "⋪",
      nltrie: "⋬",
      nLtv: "≪̸",
      nmid: "∤",
      NoBreak: "⁠",
      NonBreakingSpace: " ",
      Nopf: "ℕ",
      nopf: "𝕟",
      Not: "⫬",
      not: "¬",
      NotCongruent: "≢",
      NotCupCap: "≭",
      NotDoubleVerticalBar: "∦",
      NotElement: "∉",
      NotEqual: "≠",
      NotEqualTilde: "≂̸",
      NotExists: "∄",
      NotGreater: "≯",
      NotGreaterEqual: "≱",
      NotGreaterFullEqual: "≧̸",
      NotGreaterGreater: "≫̸",
      NotGreaterLess: "≹",
      NotGreaterSlantEqual: "⩾̸",
      NotGreaterTilde: "≵",
      NotHumpDownHump: "≎̸",
      NotHumpEqual: "≏̸",
      notin: "∉",
      notindot: "⋵̸",
      notinE: "⋹̸",
      notinva: "∉",
      notinvb: "⋷",
      notinvc: "⋶",
      NotLeftTriangle: "⋪",
      NotLeftTriangleBar: "⧏̸",
      NotLeftTriangleEqual: "⋬",
      NotLess: "≮",
      NotLessEqual: "≰",
      NotLessGreater: "≸",
      NotLessLess: "≪̸",
      NotLessSlantEqual: "⩽̸",
      NotLessTilde: "≴",
      NotNestedGreaterGreater: "⪢̸",
      NotNestedLessLess: "⪡̸",
      notni: "∌",
      notniva: "∌",
      notnivb: "⋾",
      notnivc: "⋽",
      NotPrecedes: "⊀",
      NotPrecedesEqual: "⪯̸",
      NotPrecedesSlantEqual: "⋠",
      NotReverseElement: "∌",
      NotRightTriangle: "⋫",
      NotRightTriangleBar: "⧐̸",
      NotRightTriangleEqual: "⋭",
      NotSquareSubset: "⊏̸",
      NotSquareSubsetEqual: "⋢",
      NotSquareSuperset: "⊐̸",
      NotSquareSupersetEqual: "⋣",
      NotSubset: "⊂⃒",
      NotSubsetEqual: "⊈",
      NotSucceeds: "⊁",
      NotSucceedsEqual: "⪰̸",
      NotSucceedsSlantEqual: "⋡",
      NotSucceedsTilde: "≿̸",
      NotSuperset: "⊃⃒",
      NotSupersetEqual: "⊉",
      NotTilde: "≁",
      NotTildeEqual: "≄",
      NotTildeFullEqual: "≇",
      NotTildeTilde: "≉",
      NotVerticalBar: "∤",
      npar: "∦",
      nparallel: "∦",
      nparsl: "⫽⃥",
      npart: "∂̸",
      npolint: "⨔",
      npr: "⊀",
      nprcue: "⋠",
      npre: "⪯̸",
      nprec: "⊀",
      npreceq: "⪯̸",
      nrArr: "⇏",
      nrarr: "↛",
      nrarrc: "⤳̸",
      nrarrw: "↝̸",
      nRightarrow: "⇏",
      nrightarrow: "↛",
      nrtri: "⋫",
      nrtrie: "⋭",
      nsc: "⊁",
      nsccue: "⋡",
      nsce: "⪰̸",
      Nscr: "𝒩",
      nscr: "𝓃",
      nshortmid: "∤",
      nshortparallel: "∦",
      nsim: "≁",
      nsime: "≄",
      nsimeq: "≄",
      nsmid: "∤",
      nspar: "∦",
      nsqsube: "⋢",
      nsqsupe: "⋣",
      nsub: "⊄",
      nsubE: "⫅̸",
      nsube: "⊈",
      nsubset: "⊂⃒",
      nsubseteq: "⊈",
      nsubseteqq: "⫅̸",
      nsucc: "⊁",
      nsucceq: "⪰̸",
      nsup: "⊅",
      nsupE: "⫆̸",
      nsupe: "⊉",
      nsupset: "⊃⃒",
      nsupseteq: "⊉",
      nsupseteqq: "⫆̸",
      ntgl: "≹",
      Ntilde: "Ñ",
      ntilde: "ñ",
      ntlg: "≸",
      ntriangleleft: "⋪",
      ntrianglelefteq: "⋬",
      ntriangleright: "⋫",
      ntrianglerighteq: "⋭",
      Nu: "Ν",
      nu: "ν",
      num: "#",
      numero: "№",
      numsp: " ",
      nvap: "≍⃒",
      nVDash: "⊯",
      nVdash: "⊮",
      nvDash: "⊭",
      nvdash: "⊬",
      nvge: "≥⃒",
      nvgt: ">⃒",
      nvHarr: "⤄",
      nvinfin: "⧞",
      nvlArr: "⤂",
      nvle: "≤⃒",
      nvlt: "<⃒",
      nvltrie: "⊴⃒",
      nvrArr: "⤃",
      nvrtrie: "⊵⃒",
      nvsim: "∼⃒",
      nwarhk: "⤣",
      nwArr: "⇖",
      nwarr: "↖",
      nwarrow: "↖",
      nwnear: "⤧",
      Oacute: "Ó",
      oacute: "ó",
      oast: "⊛",
      ocir: "⊚",
      Ocirc: "Ô",
      ocirc: "ô",
      Ocy: "О",
      ocy: "о",
      odash: "⊝",
      Odblac: "Ő",
      odblac: "ő",
      odiv: "⨸",
      odot: "⊙",
      odsold: "⦼",
      OElig: "Œ",
      oelig: "œ",
      ofcir: "⦿",
      Ofr: "𝔒",
      ofr: "𝔬",
      ogon: "˛",
      Ograve: "Ò",
      ograve: "ò",
      ogt: "⧁",
      ohbar: "⦵",
      ohm: "Ω",
      oint: "∮",
      olarr: "↺",
      olcir: "⦾",
      olcross: "⦻",
      oline: "‾",
      olt: "⧀",
      Omacr: "Ō",
      omacr: "ō",
      Omega: "Ω",
      omega: "ω",
      Omicron: "Ο",
      omicron: "ο",
      omid: "⦶",
      ominus: "⊖",
      Oopf: "𝕆",
      oopf: "𝕠",
      opar: "⦷",
      OpenCurlyDoubleQuote: "“",
      OpenCurlyQuote: "‘",
      operp: "⦹",
      oplus: "⊕",
      Or: "⩔",
      or: "∨",
      orarr: "↻",
      ord: "⩝",
      order: "ℴ",
      orderof: "ℴ",
      ordf: "ª",
      ordm: "º",
      origof: "⊶",
      oror: "⩖",
      orslope: "⩗",
      orv: "⩛",
      oS: "Ⓢ",
      Oscr: "𝒪",
      oscr: "ℴ",
      Oslash: "Ø",
      oslash: "ø",
      osol: "⊘",
      Otilde: "Õ",
      otilde: "õ",
      Otimes: "⨷",
      otimes: "⊗",
      otimesas: "⨶",
      Ouml: "Ö",
      ouml: "ö",
      ovbar: "⌽",
      OverBar: "‾",
      OverBrace: "⏞",
      OverBracket: "⎴",
      OverParenthesis: "⏜",
      par: "∥",
      para: "¶",
      parallel: "∥",
      parsim: "⫳",
      parsl: "⫽",
      part: "∂",
      PartialD: "∂",
      Pcy: "П",
      pcy: "п",
      percnt: "%",
      period: ".",
      permil: "‰",
      perp: "⊥",
      pertenk: "‱",
      Pfr: "𝔓",
      pfr: "𝔭",
      Phi: "Φ",
      phi: "φ",
      phiv: "ϕ",
      phmmat: "ℳ",
      phone: "☎",
      Pi: "Π",
      pi: "π",
      pitchfork: "⋔",
      piv: "ϖ",
      planck: "ℏ",
      planckh: "ℎ",
      plankv: "ℏ",
      plus: "+",
      plusacir: "⨣",
      plusb: "⊞",
      pluscir: "⨢",
      plusdo: "∔",
      plusdu: "⨥",
      pluse: "⩲",
      PlusMinus: "±",
      plusmn: "±",
      plussim: "⨦",
      plustwo: "⨧",
      pm: "±",
      Poincareplane: "ℌ",
      pointint: "⨕",
      Popf: "ℙ",
      popf: "𝕡",
      pound: "£",
      Pr: "⪻",
      pr: "≺",
      prap: "⪷",
      prcue: "≼",
      prE: "⪳",
      pre: "⪯",
      prec: "≺",
      precapprox: "⪷",
      preccurlyeq: "≼",
      Precedes: "≺",
      PrecedesEqual: "⪯",
      PrecedesSlantEqual: "≼",
      PrecedesTilde: "≾",
      preceq: "⪯",
      precnapprox: "⪹",
      precneqq: "⪵",
      precnsim: "⋨",
      precsim: "≾",
      Prime: "″",
      prime: "′",
      primes: "ℙ",
      prnap: "⪹",
      prnE: "⪵",
      prnsim: "⋨",
      prod: "∏",
      Product: "∏",
      profalar: "⌮",
      profline: "⌒",
      profsurf: "⌓",
      prop: "∝",
      Proportion: "∷",
      Proportional: "∝",
      propto: "∝",
      prsim: "≾",
      prurel: "⊰",
      Pscr: "𝒫",
      pscr: "𝓅",
      Psi: "Ψ",
      psi: "ψ",
      puncsp: " ",
      Qfr: "𝔔",
      qfr: "𝔮",
      qint: "⨌",
      Qopf: "ℚ",
      qopf: "𝕢",
      qprime: "⁗",
      Qscr: "𝒬",
      qscr: "𝓆",
      quaternions: "ℍ",
      quatint: "⨖",
      quest: "?",
      questeq: "≟",
      QUOT: '"',
      quot: '"',
      rAarr: "⇛",
      race: "∽̱",
      Racute: "Ŕ",
      racute: "ŕ",
      radic: "√",
      raemptyv: "⦳",
      Rang: "⟫",
      rang: "⟩",
      rangd: "⦒",
      range: "⦥",
      rangle: "⟩",
      raquo: "»",
      Rarr: "↠",
      rArr: "⇒",
      rarr: "→",
      rarrap: "⥵",
      rarrb: "⇥",
      rarrbfs: "⤠",
      rarrc: "⤳",
      rarrfs: "⤞",
      rarrhk: "↪",
      rarrlp: "↬",
      rarrpl: "⥅",
      rarrsim: "⥴",
      Rarrtl: "⤖",
      rarrtl: "↣",
      rarrw: "↝",
      rAtail: "⤜",
      ratail: "⤚",
      ratio: "∶",
      rationals: "ℚ",
      RBarr: "⤐",
      rBarr: "⤏",
      rbarr: "⤍",
      rbbrk: "❳",
      rbrace: "}",
      rbrack: "]",
      rbrke: "⦌",
      rbrksld: "⦎",
      rbrkslu: "⦐",
      Rcaron: "Ř",
      rcaron: "ř",
      Rcedil: "Ŗ",
      rcedil: "ŗ",
      rceil: "⌉",
      rcub: "}",
      Rcy: "Р",
      rcy: "р",
      rdca: "⤷",
      rdldhar: "⥩",
      rdquo: "”",
      rdquor: "”",
      rdsh: "↳",
      Re: "ℜ",
      real: "ℜ",
      realine: "ℛ",
      realpart: "ℜ",
      reals: "ℝ",
      rect: "▭",
      REG: "®",
      reg: "®",
      ReverseElement: "∋",
      ReverseEquilibrium: "⇋",
      ReverseUpEquilibrium: "⥯",
      rfisht: "⥽",
      rfloor: "⌋",
      Rfr: "ℜ",
      rfr: "𝔯",
      rHar: "⥤",
      rhard: "⇁",
      rharu: "⇀",
      rharul: "⥬",
      Rho: "Ρ",
      rho: "ρ",
      rhov: "ϱ",
      RightAngleBracket: "⟩",
      RightArrow: "→",
      Rightarrow: "⇒",
      rightarrow: "→",
      RightArrowBar: "⇥",
      RightArrowLeftArrow: "⇄",
      rightarrowtail: "↣",
      RightCeiling: "⌉",
      RightDoubleBracket: "⟧",
      RightDownTeeVector: "⥝",
      RightDownVector: "⇂",
      RightDownVectorBar: "⥕",
      RightFloor: "⌋",
      rightharpoondown: "⇁",
      rightharpoonup: "⇀",
      rightleftarrows: "⇄",
      rightleftharpoons: "⇌",
      rightrightarrows: "⇉",
      rightsquigarrow: "↝",
      RightTee: "⊢",
      RightTeeArrow: "↦",
      RightTeeVector: "⥛",
      rightthreetimes: "⋌",
      RightTriangle: "⊳",
      RightTriangleBar: "⧐",
      RightTriangleEqual: "⊵",
      RightUpDownVector: "⥏",
      RightUpTeeVector: "⥜",
      RightUpVector: "↾",
      RightUpVectorBar: "⥔",
      RightVector: "⇀",
      RightVectorBar: "⥓",
      ring: "˚",
      risingdotseq: "≓",
      rlarr: "⇄",
      rlhar: "⇌",
      rlm: "‏",
      rmoust: "⎱",
      rmoustache: "⎱",
      rnmid: "⫮",
      roang: "⟭",
      roarr: "⇾",
      robrk: "⟧",
      ropar: "⦆",
      Ropf: "ℝ",
      ropf: "𝕣",
      roplus: "⨮",
      rotimes: "⨵",
      RoundImplies: "⥰",
      rpar: ")",
      rpargt: "⦔",
      rppolint: "⨒",
      rrarr: "⇉",
      Rrightarrow: "⇛",
      rsaquo: "›",
      Rscr: "ℛ",
      rscr: "𝓇",
      Rsh: "↱",
      rsh: "↱",
      rsqb: "]",
      rsquo: "’",
      rsquor: "’",
      rthree: "⋌",
      rtimes: "⋊",
      rtri: "▹",
      rtrie: "⊵",
      rtrif: "▸",
      rtriltri: "⧎",
      RuleDelayed: "⧴",
      ruluhar: "⥨",
      rx: "℞",
      Sacute: "Ś",
      sacute: "ś",
      sbquo: "‚",
      Sc: "⪼",
      sc: "≻",
      scap: "⪸",
      Scaron: "Š",
      scaron: "š",
      sccue: "≽",
      scE: "⪴",
      sce: "⪰",
      Scedil: "Ş",
      scedil: "ş",
      Scirc: "Ŝ",
      scirc: "ŝ",
      scnap: "⪺",
      scnE: "⪶",
      scnsim: "⋩",
      scpolint: "⨓",
      scsim: "≿",
      Scy: "С",
      scy: "с",
      sdot: "⋅",
      sdotb: "⊡",
      sdote: "⩦",
      searhk: "⤥",
      seArr: "⇘",
      searr: "↘",
      searrow: "↘",
      sect: "§",
      semi: ";",
      seswar: "⤩",
      setminus: "∖",
      setmn: "∖",
      sext: "✶",
      Sfr: "𝔖",
      sfr: "𝔰",
      sfrown: "⌢",
      sharp: "♯",
      SHCHcy: "Щ",
      shchcy: "щ",
      SHcy: "Ш",
      shcy: "ш",
      ShortDownArrow: "↓",
      ShortLeftArrow: "←",
      shortmid: "∣",
      shortparallel: "∥",
      ShortRightArrow: "→",
      ShortUpArrow: "↑",
      shy: "­",
      Sigma: "Σ",
      sigma: "σ",
      sigmaf: "ς",
      sigmav: "ς",
      sim: "∼",
      simdot: "⩪",
      sime: "≃",
      simeq: "≃",
      simg: "⪞",
      simgE: "⪠",
      siml: "⪝",
      simlE: "⪟",
      simne: "≆",
      simplus: "⨤",
      simrarr: "⥲",
      slarr: "←",
      SmallCircle: "∘",
      smallsetminus: "∖",
      smashp: "⨳",
      smeparsl: "⧤",
      smid: "∣",
      smile: "⌣",
      smt: "⪪",
      smte: "⪬",
      smtes: "⪬︀",
      SOFTcy: "Ь",
      softcy: "ь",
      sol: "/",
      solb: "⧄",
      solbar: "⌿",
      Sopf: "𝕊",
      sopf: "𝕤",
      spades: "♠",
      spadesuit: "♠",
      spar: "∥",
      sqcap: "⊓",
      sqcaps: "⊓︀",
      sqcup: "⊔",
      sqcups: "⊔︀",
      Sqrt: "√",
      sqsub: "⊏",
      sqsube: "⊑",
      sqsubset: "⊏",
      sqsubseteq: "⊑",
      sqsup: "⊐",
      sqsupe: "⊒",
      sqsupset: "⊐",
      sqsupseteq: "⊒",
      squ: "□",
      Square: "□",
      square: "□",
      SquareIntersection: "⊓",
      SquareSubset: "⊏",
      SquareSubsetEqual: "⊑",
      SquareSuperset: "⊐",
      SquareSupersetEqual: "⊒",
      SquareUnion: "⊔",
      squarf: "▪",
      squf: "▪",
      srarr: "→",
      Sscr: "𝒮",
      sscr: "𝓈",
      ssetmn: "∖",
      ssmile: "⌣",
      sstarf: "⋆",
      Star: "⋆",
      star: "☆",
      starf: "★",
      straightepsilon: "ϵ",
      straightphi: "ϕ",
      strns: "¯",
      Sub: "⋐",
      sub: "⊂",
      subdot: "⪽",
      subE: "⫅",
      sube: "⊆",
      subedot: "⫃",
      submult: "⫁",
      subnE: "⫋",
      subne: "⊊",
      subplus: "⪿",
      subrarr: "⥹",
      Subset: "⋐",
      subset: "⊂",
      subseteq: "⊆",
      subseteqq: "⫅",
      SubsetEqual: "⊆",
      subsetneq: "⊊",
      subsetneqq: "⫋",
      subsim: "⫇",
      subsub: "⫕",
      subsup: "⫓",
      succ: "≻",
      succapprox: "⪸",
      succcurlyeq: "≽",
      Succeeds: "≻",
      SucceedsEqual: "⪰",
      SucceedsSlantEqual: "≽",
      SucceedsTilde: "≿",
      succeq: "⪰",
      succnapprox: "⪺",
      succneqq: "⪶",
      succnsim: "⋩",
      succsim: "≿",
      SuchThat: "∋",
      Sum: "∑",
      sum: "∑",
      sung: "♪",
      Sup: "⋑",
      sup: "⊃",
      sup1: "¹",
      sup2: "²",
      sup3: "³",
      supdot: "⪾",
      supdsub: "⫘",
      supE: "⫆",
      supe: "⊇",
      supedot: "⫄",
      Superset: "⊃",
      SupersetEqual: "⊇",
      suphsol: "⟉",
      suphsub: "⫗",
      suplarr: "⥻",
      supmult: "⫂",
      supnE: "⫌",
      supne: "⊋",
      supplus: "⫀",
      Supset: "⋑",
      supset: "⊃",
      supseteq: "⊇",
      supseteqq: "⫆",
      supsetneq: "⊋",
      supsetneqq: "⫌",
      supsim: "⫈",
      supsub: "⫔",
      supsup: "⫖",
      swarhk: "⤦",
      swArr: "⇙",
      swarr: "↙",
      swarrow: "↙",
      swnwar: "⤪",
      szlig: "ß",
      Tab: "	",
      target: "⌖",
      Tau: "Τ",
      tau: "τ",
      tbrk: "⎴",
      Tcaron: "Ť",
      tcaron: "ť",
      Tcedil: "Ţ",
      tcedil: "ţ",
      Tcy: "Т",
      tcy: "т",
      tdot: "⃛",
      telrec: "⌕",
      Tfr: "𝔗",
      tfr: "𝔱",
      there4: "∴",
      Therefore: "∴",
      therefore: "∴",
      Theta: "Θ",
      theta: "θ",
      thetasym: "ϑ",
      thetav: "ϑ",
      thickapprox: "≈",
      thicksim: "∼",
      ThickSpace: "  ",
      thinsp: " ",
      ThinSpace: " ",
      thkap: "≈",
      thksim: "∼",
      THORN: "Þ",
      thorn: "þ",
      Tilde: "∼",
      tilde: "˜",
      TildeEqual: "≃",
      TildeFullEqual: "≅",
      TildeTilde: "≈",
      times: "×",
      timesb: "⊠",
      timesbar: "⨱",
      timesd: "⨰",
      tint: "∭",
      toea: "⤨",
      top: "⊤",
      topbot: "⌶",
      topcir: "⫱",
      Topf: "𝕋",
      topf: "𝕥",
      topfork: "⫚",
      tosa: "⤩",
      tprime: "‴",
      TRADE: "™",
      trade: "™",
      triangle: "▵",
      triangledown: "▿",
      triangleleft: "◃",
      trianglelefteq: "⊴",
      triangleq: "≜",
      triangleright: "▹",
      trianglerighteq: "⊵",
      tridot: "◬",
      trie: "≜",
      triminus: "⨺",
      TripleDot: "⃛",
      triplus: "⨹",
      trisb: "⧍",
      tritime: "⨻",
      trpezium: "⏢",
      Tscr: "𝒯",
      tscr: "𝓉",
      TScy: "Ц",
      tscy: "ц",
      TSHcy: "Ћ",
      tshcy: "ћ",
      Tstrok: "Ŧ",
      tstrok: "ŧ",
      twixt: "≬",
      twoheadleftarrow: "↞",
      twoheadrightarrow: "↠",
      Uacute: "Ú",
      uacute: "ú",
      Uarr: "↟",
      uArr: "⇑",
      uarr: "↑",
      Uarrocir: "⥉",
      Ubrcy: "Ў",
      ubrcy: "ў",
      Ubreve: "Ŭ",
      ubreve: "ŭ",
      Ucirc: "Û",
      ucirc: "û",
      Ucy: "У",
      ucy: "у",
      udarr: "⇅",
      Udblac: "Ű",
      udblac: "ű",
      udhar: "⥮",
      ufisht: "⥾",
      Ufr: "𝔘",
      ufr: "𝔲",
      Ugrave: "Ù",
      ugrave: "ù",
      uHar: "⥣",
      uharl: "↿",
      uharr: "↾",
      uhblk: "▀",
      ulcorn: "⌜",
      ulcorner: "⌜",
      ulcrop: "⌏",
      ultri: "◸",
      Umacr: "Ū",
      umacr: "ū",
      uml: "¨",
      UnderBar: "_",
      UnderBrace: "⏟",
      UnderBracket: "⎵",
      UnderParenthesis: "⏝",
      Union: "⋃",
      UnionPlus: "⊎",
      Uogon: "Ų",
      uogon: "ų",
      Uopf: "𝕌",
      uopf: "𝕦",
      UpArrow: "↑",
      Uparrow: "⇑",
      uparrow: "↑",
      UpArrowBar: "⤒",
      UpArrowDownArrow: "⇅",
      UpDownArrow: "↕",
      Updownarrow: "⇕",
      updownarrow: "↕",
      UpEquilibrium: "⥮",
      upharpoonleft: "↿",
      upharpoonright: "↾",
      uplus: "⊎",
      UpperLeftArrow: "↖",
      UpperRightArrow: "↗",
      Upsi: "ϒ",
      upsi: "υ",
      upsih: "ϒ",
      Upsilon: "Υ",
      upsilon: "υ",
      UpTee: "⊥",
      UpTeeArrow: "↥",
      upuparrows: "⇈",
      urcorn: "⌝",
      urcorner: "⌝",
      urcrop: "⌎",
      Uring: "Ů",
      uring: "ů",
      urtri: "◹",
      Uscr: "𝒰",
      uscr: "𝓊",
      utdot: "⋰",
      Utilde: "Ũ",
      utilde: "ũ",
      utri: "▵",
      utrif: "▴",
      uuarr: "⇈",
      Uuml: "Ü",
      uuml: "ü",
      uwangle: "⦧",
      vangrt: "⦜",
      varepsilon: "ϵ",
      varkappa: "ϰ",
      varnothing: "∅",
      varphi: "ϕ",
      varpi: "ϖ",
      varpropto: "∝",
      vArr: "⇕",
      varr: "↕",
      varrho: "ϱ",
      varsigma: "ς",
      varsubsetneq: "⊊︀",
      varsubsetneqq: "⫋︀",
      varsupsetneq: "⊋︀",
      varsupsetneqq: "⫌︀",
      vartheta: "ϑ",
      vartriangleleft: "⊲",
      vartriangleright: "⊳",
      Vbar: "⫫",
      vBar: "⫨",
      vBarv: "⫩",
      Vcy: "В",
      vcy: "в",
      VDash: "⊫",
      Vdash: "⊩",
      vDash: "⊨",
      vdash: "⊢",
      Vdashl: "⫦",
      Vee: "⋁",
      vee: "∨",
      veebar: "⊻",
      veeeq: "≚",
      vellip: "⋮",
      Verbar: "‖",
      verbar: "|",
      Vert: "‖",
      vert: "|",
      VerticalBar: "∣",
      VerticalLine: "|",
      VerticalSeparator: "❘",
      VerticalTilde: "≀",
      VeryThinSpace: " ",
      Vfr: "𝔙",
      vfr: "𝔳",
      vltri: "⊲",
      vnsub: "⊂⃒",
      vnsup: "⊃⃒",
      Vopf: "𝕍",
      vopf: "𝕧",
      vprop: "∝",
      vrtri: "⊳",
      Vscr: "𝒱",
      vscr: "𝓋",
      vsubnE: "⫋︀",
      vsubne: "⊊︀",
      vsupnE: "⫌︀",
      vsupne: "⊋︀",
      Vvdash: "⊪",
      vzigzag: "⦚",
      Wcirc: "Ŵ",
      wcirc: "ŵ",
      wedbar: "⩟",
      Wedge: "⋀",
      wedge: "∧",
      wedgeq: "≙",
      weierp: "℘",
      Wfr: "𝔚",
      wfr: "𝔴",
      Wopf: "𝕎",
      wopf: "𝕨",
      wp: "℘",
      wr: "≀",
      wreath: "≀",
      Wscr: "𝒲",
      wscr: "𝓌",
      xcap: "⋂",
      xcirc: "◯",
      xcup: "⋃",
      xdtri: "▽",
      Xfr: "𝔛",
      xfr: "𝔵",
      xhArr: "⟺",
      xharr: "⟷",
      Xi: "Ξ",
      xi: "ξ",
      xlArr: "⟸",
      xlarr: "⟵",
      xmap: "⟼",
      xnis: "⋻",
      xodot: "⨀",
      Xopf: "𝕏",
      xopf: "𝕩",
      xoplus: "⨁",
      xotime: "⨂",
      xrArr: "⟹",
      xrarr: "⟶",
      Xscr: "𝒳",
      xscr: "𝓍",
      xsqcup: "⨆",
      xuplus: "⨄",
      xutri: "△",
      xvee: "⋁",
      xwedge: "⋀",
      Yacute: "Ý",
      yacute: "ý",
      YAcy: "Я",
      yacy: "я",
      Ycirc: "Ŷ",
      ycirc: "ŷ",
      Ycy: "Ы",
      ycy: "ы",
      yen: "¥",
      Yfr: "𝔜",
      yfr: "𝔶",
      YIcy: "Ї",
      yicy: "ї",
      Yopf: "𝕐",
      yopf: "𝕪",
      Yscr: "𝒴",
      yscr: "𝓎",
      YUcy: "Ю",
      yucy: "ю",
      Yuml: "Ÿ",
      yuml: "ÿ",
      Zacute: "Ź",
      zacute: "ź",
      Zcaron: "Ž",
      zcaron: "ž",
      Zcy: "З",
      zcy: "з",
      Zdot: "Ż",
      zdot: "ż",
      zeetrf: "ℨ",
      ZeroWidthSpace: "​",
      Zeta: "Ζ",
      zeta: "ζ",
      Zfr: "ℨ",
      zfr: "𝔷",
      ZHcy: "Ж",
      zhcy: "ж",
      zigrarr: "⇝",
      Zopf: "ℤ",
      zopf: "𝕫",
      Zscr: "𝒵",
      zscr: "𝓏",
      zwj: "‍",
      zwnj: "‌"
    });
    exports.entityMap = exports.HTML_ENTITIES;
  }
});

// ../node_modules/@xmldom/xmldom/lib/sax.js
var require_sax = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/sax.js"(exports) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var NAMESPACE = require_conventions().NAMESPACE;
    var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var nameChar = new RegExp("[\\-\\.0-9" + nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
    var tagNamePattern = new RegExp("^" + nameStartChar.source + nameChar.source + "*(?::" + nameStartChar.source + nameChar.source + "*)?$");
    var S_TAG = 0;
    var S_ATTR = 1;
    var S_ATTR_SPACE = 2;
    var S_EQ = 3;
    var S_ATTR_NOQUOT_VALUE = 4;
    var S_ATTR_END = 5;
    var S_TAG_SPACE = 6;
    var S_TAG_CLOSE = 7;
    function ParseError(message, locator) {
      this.message = message;
      this.locator = locator;
      if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
    }
    ParseError.prototype = new Error();
    ParseError.prototype.name = ParseError.name;
    function XMLReader() {
    }
    XMLReader.prototype = {
      parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        _copy(defaultNSMap, defaultNSMap = {});
        parse2(
          source,
          defaultNSMap,
          entityMap,
          domBuilder,
          this.errorHandler
        );
        domBuilder.endDocument();
      }
    };
    function parse2(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
      function fixedFromCharCode(code) {
        if (code > 65535) {
          code -= 65536;
          var surrogate1 = 55296 + (code >> 10), surrogate2 = 56320 + (code & 1023);
          return String.fromCharCode(surrogate1, surrogate2);
        } else {
          return String.fromCharCode(code);
        }
      }
      function entityReplacer(a2) {
        var k = a2.slice(1, -1);
        if (Object.hasOwnProperty.call(entityMap, k)) {
          return entityMap[k];
        } else if (k.charAt(0) === "#") {
          return fixedFromCharCode(parseInt(k.substr(1).replace("x", "0x")));
        } else {
          errorHandler.error("entity not found:" + a2);
          return a2;
        }
      }
      function appendText(end2) {
        if (end2 > start) {
          var xt = source.substring(start, end2).replace(/&#?\w+;/g, entityReplacer);
          locator && position(start);
          domBuilder.characters(xt, 0, end2 - start);
          start = end2;
        }
      }
      function position(p, m) {
        while (p >= lineEnd && (m = linePattern.exec(source))) {
          lineStart = m.index;
          lineEnd = lineStart + m[0].length;
          locator.lineNumber++;
        }
        locator.columnNumber = p - lineStart + 1;
      }
      var lineStart = 0;
      var lineEnd = 0;
      var linePattern = /.*(?:\r\n?|\n)|.*$/g;
      var locator = domBuilder.locator;
      var parseStack = [{ currentNSMap: defaultNSMapCopy }];
      var closeMap = {};
      var start = 0;
      while (true) {
        try {
          var tagStart = source.indexOf("<", start);
          if (tagStart < 0) {
            if (!source.substr(start).match(/^\s*$/)) {
              var doc = domBuilder.doc;
              var text = doc.createTextNode(source.substr(start));
              doc.appendChild(text);
              domBuilder.currentElement = text;
            }
            return;
          }
          if (tagStart > start) {
            appendText(tagStart);
          }
          switch (source.charAt(tagStart + 1)) {
            case "/":
              var end = source.indexOf(">", tagStart + 3);
              var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, "");
              var config2 = parseStack.pop();
              if (end < 0) {
                tagName = source.substring(tagStart + 2).replace(/[\s<].*/, "");
                errorHandler.error("end tag name: " + tagName + " is not complete:" + config2.tagName);
                end = tagStart + 1 + tagName.length;
              } else if (tagName.match(/\s</)) {
                tagName = tagName.replace(/[\s<].*/, "");
                errorHandler.error("end tag name: " + tagName + " maybe not complete");
                end = tagStart + 1 + tagName.length;
              }
              var localNSMap = config2.localNSMap;
              var endMatch = config2.tagName == tagName;
              var endIgnoreCaseMach = endMatch || config2.tagName && config2.tagName.toLowerCase() == tagName.toLowerCase();
              if (endIgnoreCaseMach) {
                domBuilder.endElement(config2.uri, config2.localName, tagName);
                if (localNSMap) {
                  for (var prefix in localNSMap) {
                    if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
                      domBuilder.endPrefixMapping(prefix);
                    }
                  }
                }
                if (!endMatch) {
                  errorHandler.fatalError("end tag name: " + tagName + " is not match the current start tagName:" + config2.tagName);
                }
              } else {
                parseStack.push(config2);
              }
              end++;
              break;
            case "?":
              locator && position(tagStart);
              end = parseInstruction(source, tagStart, domBuilder);
              break;
            case "!":
              locator && position(tagStart);
              end = parseDCC(source, tagStart, domBuilder, errorHandler);
              break;
            default:
              locator && position(tagStart);
              var el = new ElementAttributes();
              var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
              var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
              var len = el.length;
              if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {
                el.closed = true;
                if (!entityMap.nbsp) {
                  errorHandler.warning("unclosed xml attribute");
                }
              }
              if (locator && len) {
                var locator2 = copyLocator(locator, {});
                for (var i = 0; i < len; i++) {
                  var a = el[i];
                  position(a.offset);
                  a.locator = copyLocator(locator, {});
                }
                domBuilder.locator = locator2;
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
                domBuilder.locator = locator;
              } else {
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
              }
              if (NAMESPACE.isHTML(el.uri) && !el.closed) {
                end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);
              } else {
                end++;
              }
          }
        } catch (e) {
          if (e instanceof ParseError) {
            throw e;
          }
          errorHandler.error("element parse error: " + e);
          end = -1;
        }
        if (end > start) {
          start = end;
        } else {
          appendText(Math.max(tagStart, start) + 1);
        }
      }
    }
    function copyLocator(f, t) {
      t.lineNumber = f.lineNumber;
      t.columnNumber = f.columnNumber;
      return t;
    }
    function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {
      function addAttribute(qname, value2, startIndex) {
        if (el.attributeNames.hasOwnProperty(qname)) {
          errorHandler.fatalError("Attribute " + qname + " redefined");
        }
        el.addValue(
          qname,
          // @see https://www.w3.org/TR/xml/#AVNormalize
          // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
          // - recursive replacement of (DTD) entity references
          // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
          value2.replace(/[\t\n\r]/g, " ").replace(/&#?\w+;/g, entityReplacer),
          startIndex
        );
      }
      var attrName;
      var value;
      var p = ++start;
      var s = S_TAG;
      while (true) {
        var c = source.charAt(p);
        switch (c) {
          case "=":
            if (s === S_ATTR) {
              attrName = source.slice(start, p);
              s = S_EQ;
            } else if (s === S_ATTR_SPACE) {
              s = S_EQ;
            } else {
              throw new Error("attribute equal must after attrName");
            }
            break;
          case "'":
          case '"':
            if (s === S_EQ || s === S_ATTR) {
              if (s === S_ATTR) {
                errorHandler.warning('attribute value must after "="');
                attrName = source.slice(start, p);
              }
              start = p + 1;
              p = source.indexOf(c, start);
              if (p > 0) {
                value = source.slice(start, p);
                addAttribute(attrName, value, start - 1);
                s = S_ATTR_END;
              } else {
                throw new Error("attribute value no end '" + c + "' match");
              }
            } else if (s == S_ATTR_NOQUOT_VALUE) {
              value = source.slice(start, p);
              addAttribute(attrName, value, start);
              errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ")!!");
              start = p + 1;
              s = S_ATTR_END;
            } else {
              throw new Error('attribute value must after "="');
            }
            break;
          case "/":
            switch (s) {
              case S_TAG:
                el.setTagName(source.slice(start, p));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                s = S_TAG_CLOSE;
                el.closed = true;
              case S_ATTR_NOQUOT_VALUE:
              case S_ATTR:
                break;
              case S_ATTR_SPACE:
                el.closed = true;
                break;
              default:
                throw new Error("attribute invalid close char('/')");
            }
            break;
          case "":
            errorHandler.error("unexpected end of input");
            if (s == S_TAG) {
              el.setTagName(source.slice(start, p));
            }
            return p;
          case ">":
            switch (s) {
              case S_TAG:
                el.setTagName(source.slice(start, p));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                break;
              case S_ATTR_NOQUOT_VALUE:
              case S_ATTR:
                value = source.slice(start, p);
                if (value.slice(-1) === "/") {
                  el.closed = true;
                  value = value.slice(0, -1);
                }
              case S_ATTR_SPACE:
                if (s === S_ATTR_SPACE) {
                  value = attrName;
                }
                if (s == S_ATTR_NOQUOT_VALUE) {
                  errorHandler.warning('attribute "' + value + '" missed quot(")!');
                  addAttribute(attrName, value, start);
                } else {
                  if (!NAMESPACE.isHTML(currentNSMap[""]) || !value.match(/^(?:disabled|checked|selected)$/i)) {
                    errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
                  }
                  addAttribute(value, value, start);
                }
                break;
              case S_EQ:
                throw new Error("attribute value missed!!");
            }
            return p;
          case "":
            c = " ";
          default:
            if (c <= " ") {
              switch (s) {
                case S_TAG:
                  el.setTagName(source.slice(start, p));
                  s = S_TAG_SPACE;
                  break;
                case S_ATTR:
                  attrName = source.slice(start, p);
                  s = S_ATTR_SPACE;
                  break;
                case S_ATTR_NOQUOT_VALUE:
                  var value = source.slice(start, p);
                  errorHandler.warning('attribute "' + value + '" missed quot(")!!');
                  addAttribute(attrName, value, start);
                case S_ATTR_END:
                  s = S_TAG_SPACE;
                  break;
              }
            } else {
              switch (s) {
                case S_ATTR_SPACE:
                  var tagName = el.tagName;
                  if (!NAMESPACE.isHTML(currentNSMap[""]) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
                    errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
                  }
                  addAttribute(attrName, attrName, start);
                  start = p;
                  s = S_ATTR;
                  break;
                case S_ATTR_END:
                  errorHandler.warning('attribute space is required"' + attrName + '"!!');
                case S_TAG_SPACE:
                  s = S_ATTR;
                  start = p;
                  break;
                case S_EQ:
                  s = S_ATTR_NOQUOT_VALUE;
                  start = p;
                  break;
                case S_TAG_CLOSE:
                  throw new Error("elements closed character '/' and '>' must be connected to");
              }
            }
        }
        p++;
      }
    }
    function appendElement(el, domBuilder, currentNSMap) {
      var tagName = el.tagName;
      var localNSMap = null;
      var i = el.length;
      while (i--) {
        var a = el[i];
        var qName = a.qName;
        var value = a.value;
        var nsp = qName.indexOf(":");
        if (nsp > 0) {
          var prefix = a.prefix = qName.slice(0, nsp);
          var localName = qName.slice(nsp + 1);
          var nsPrefix = prefix === "xmlns" && localName;
        } else {
          localName = qName;
          prefix = null;
          nsPrefix = qName === "xmlns" && "";
        }
        a.localName = localName;
        if (nsPrefix !== false) {
          if (localNSMap == null) {
            localNSMap = {};
            _copy(currentNSMap, currentNSMap = {});
          }
          currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
          a.uri = NAMESPACE.XMLNS;
          domBuilder.startPrefixMapping(nsPrefix, value);
        }
      }
      var i = el.length;
      while (i--) {
        a = el[i];
        var prefix = a.prefix;
        if (prefix) {
          if (prefix === "xml") {
            a.uri = NAMESPACE.XML;
          }
          if (prefix !== "xmlns") {
            a.uri = currentNSMap[prefix || ""];
          }
        }
      }
      var nsp = tagName.indexOf(":");
      if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
      } else {
        prefix = null;
        localName = el.localName = tagName;
      }
      var ns = el.uri = currentNSMap[prefix || ""];
      domBuilder.startElement(ns, localName, tagName, el);
      if (el.closed) {
        domBuilder.endElement(ns, localName, tagName);
        if (localNSMap) {
          for (prefix in localNSMap) {
            if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {
              domBuilder.endPrefixMapping(prefix);
            }
          }
        }
      } else {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        return true;
      }
    }
    function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
      if (/^(?:script|textarea)$/i.test(tagName)) {
        var elEndStart = source.indexOf("</" + tagName + ">", elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (/[&<]/.test(text)) {
          if (/^script$/i.test(tagName)) {
            domBuilder.characters(text, 0, text.length);
            return elEndStart;
          }
          text = text.replace(/&#?\w+;/g, entityReplacer);
          domBuilder.characters(text, 0, text.length);
          return elEndStart;
        }
      }
      return elStartEnd + 1;
    }
    function fixSelfClosed(source, elStartEnd, tagName, closeMap) {
      var pos = closeMap[tagName];
      if (pos == null) {
        pos = source.lastIndexOf("</" + tagName + ">");
        if (pos < elStartEnd) {
          pos = source.lastIndexOf("</" + tagName);
        }
        closeMap[tagName] = pos;
      }
      return pos < elStartEnd;
    }
    function _copy(source, target) {
      for (var n in source) {
        if (Object.prototype.hasOwnProperty.call(source, n)) {
          target[n] = source[n];
        }
      }
    }
    function parseDCC(source, start, domBuilder, errorHandler) {
      var next = source.charAt(start + 2);
      switch (next) {
        case "-":
          if (source.charAt(start + 3) === "-") {
            var end = source.indexOf("-->", start + 4);
            if (end > start) {
              domBuilder.comment(source, start + 4, end - start - 4);
              return end + 3;
            } else {
              errorHandler.error("Unclosed comment");
              return -1;
            }
          } else {
            return -1;
          }
        default:
          if (source.substr(start + 3, 6) == "CDATA[") {
            var end = source.indexOf("]]>", start + 9);
            domBuilder.startCDATA();
            domBuilder.characters(source, start + 9, end - start - 9);
            domBuilder.endCDATA();
            return end + 3;
          }
          var matchs = split(source, start);
          var len = matchs.length;
          if (len > 1 && /!doctype/i.test(matchs[0][0])) {
            var name = matchs[1][0];
            var pubid = false;
            var sysid = false;
            if (len > 3) {
              if (/^public$/i.test(matchs[2][0])) {
                pubid = matchs[3][0];
                sysid = len > 4 && matchs[4][0];
              } else if (/^system$/i.test(matchs[2][0])) {
                sysid = matchs[3][0];
              }
            }
            var lastMatch = matchs[len - 1];
            domBuilder.startDTD(name, pubid, sysid);
            domBuilder.endDTD();
            return lastMatch.index + lastMatch[0].length;
          }
      }
      return -1;
    }
    function parseInstruction(source, start, domBuilder) {
      var end = source.indexOf("?>", start);
      if (end) {
        var match2 = source.substring(start, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
        if (match2) {
          var len = match2[0].length;
          domBuilder.processingInstruction(match2[1], match2[2]);
          return end + 2;
        } else {
          return -1;
        }
      }
      return -1;
    }
    function ElementAttributes() {
      this.attributeNames = {};
    }
    ElementAttributes.prototype = {
      setTagName: function(tagName) {
        if (!tagNamePattern.test(tagName)) {
          throw new Error("invalid tagName:" + tagName);
        }
        this.tagName = tagName;
      },
      addValue: function(qName, value, offset) {
        if (!tagNamePattern.test(qName)) {
          throw new Error("invalid attribute:" + qName);
        }
        this.attributeNames[qName] = this.length;
        this[this.length++] = { qName, value, offset };
      },
      length: 0,
      getLocalName: function(i) {
        return this[i].localName;
      },
      getLocator: function(i) {
        return this[i].locator;
      },
      getQName: function(i) {
        return this[i].qName;
      },
      getURI: function(i) {
        return this[i].uri;
      },
      getValue: function(i) {
        return this[i].value;
      }
      //	,getIndex:function(uri, localName)){
      //		if(localName){
      //
      //		}else{
      //			var qName = uri
      //		}
      //	},
      //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
      //	getType:function(uri,localName){}
      //	getType:function(i){},
    };
    function split(source, start) {
      var match2;
      var buf = [];
      var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
      reg.lastIndex = start;
      reg.exec(source);
      while (match2 = reg.exec(source)) {
        buf.push(match2);
        if (match2[1]) return buf;
      }
    }
    exports.XMLReader = XMLReader;
    exports.ParseError = ParseError;
  }
});

// ../node_modules/@xmldom/xmldom/lib/dom-parser.js
var require_dom_parser = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/dom-parser.js"(exports) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var conventions = require_conventions();
    var dom = require_dom();
    var entities = require_entities();
    var sax = require_sax();
    var DOMImplementation = dom.DOMImplementation;
    var NAMESPACE = conventions.NAMESPACE;
    var ParseError = sax.ParseError;
    var XMLReader = sax.XMLReader;
    function normalizeLineEndings(input) {
      return input.replace(/\r[\n\u0085]/g, "\n").replace(/[\r\u0085\u2028]/g, "\n");
    }
    function DOMParser(options) {
      this.options = options || { locator: {} };
    }
    DOMParser.prototype.parseFromString = function(source, mimeType) {
      var options = this.options;
      var sax2 = new XMLReader();
      var domBuilder = options.domBuilder || new DOMHandler();
      var errorHandler = options.errorHandler;
      var locator = options.locator;
      var defaultNSMap = options.xmlns || {};
      var isHTML = /\/x?html?$/.test(mimeType);
      var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
      if (locator) {
        domBuilder.setDocumentLocator(locator);
      }
      sax2.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);
      sax2.domBuilder = options.domBuilder || domBuilder;
      if (isHTML) {
        defaultNSMap[""] = NAMESPACE.HTML;
      }
      defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
      var normalize2 = options.normalizeLineEndings || normalizeLineEndings;
      if (source && typeof source === "string") {
        sax2.parse(
          normalize2(source),
          defaultNSMap,
          entityMap
        );
      } else {
        sax2.errorHandler.error("invalid doc source");
      }
      return domBuilder.doc;
    };
    function buildErrorHandler(errorImpl, domBuilder, locator) {
      if (!errorImpl) {
        if (domBuilder instanceof DOMHandler) {
          return domBuilder;
        }
        errorImpl = domBuilder;
      }
      var errorHandler = {};
      var isCallback = errorImpl instanceof Function;
      locator = locator || {};
      function build(key) {
        var fn = errorImpl[key];
        if (!fn && isCallback) {
          fn = errorImpl.length == 2 ? function(msg) {
            errorImpl(key, msg);
          } : errorImpl;
        }
        errorHandler[key] = fn && function(msg) {
          fn("[xmldom " + key + "]	" + msg + _locator(locator));
        } || function() {
        };
      }
      build("warning");
      build("error");
      build("fatalError");
      return errorHandler;
    }
    function DOMHandler() {
      this.cdata = false;
    }
    function position(locator, node) {
      node.lineNumber = locator.lineNumber;
      node.columnNumber = locator.columnNumber;
    }
    DOMHandler.prototype = {
      startDocument: function() {
        this.doc = new DOMImplementation().createDocument(null, null, null);
        if (this.locator) {
          this.doc.documentURI = this.locator.systemId;
        }
      },
      startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        appendElement(this, el);
        this.currentElement = el;
        this.locator && position(this.locator, el);
        for (var i = 0; i < len; i++) {
          var namespaceURI = attrs.getURI(i);
          var value = attrs.getValue(i);
          var qName = attrs.getQName(i);
          var attr = doc.createAttributeNS(namespaceURI, qName);
          this.locator && position(attrs.getLocator(i), attr);
          attr.value = attr.nodeValue = value;
          el.setAttributeNode(attr);
        }
      },
      endElement: function(namespaceURI, localName, qName) {
        var current = this.currentElement;
        var tagName = current.tagName;
        this.currentElement = current.parentNode;
      },
      startPrefixMapping: function(prefix, uri) {
      },
      endPrefixMapping: function(prefix) {
      },
      processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && position(this.locator, ins);
        appendElement(this, ins);
      },
      ignorableWhitespace: function(ch, start, length) {
      },
      characters: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        if (chars) {
          if (this.cdata) {
            var charNode = this.doc.createCDATASection(chars);
          } else {
            var charNode = this.doc.createTextNode(chars);
          }
          if (this.currentElement) {
            this.currentElement.appendChild(charNode);
          } else if (/^\s*$/.test(chars)) {
            this.doc.appendChild(charNode);
          }
          this.locator && position(this.locator, charNode);
        }
      },
      skippedEntity: function(name) {
      },
      endDocument: function() {
        this.doc.normalize();
      },
      setDocumentLocator: function(locator) {
        if (this.locator = locator) {
          locator.lineNumber = 0;
        }
      },
      //LexicalHandler
      comment: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && position(this.locator, comm);
        appendElement(this, comm);
      },
      startCDATA: function() {
        this.cdata = true;
      },
      endCDATA: function() {
        this.cdata = false;
      },
      startDTD: function(name, publicId, systemId) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
          var dt = impl.createDocumentType(name, publicId, systemId);
          this.locator && position(this.locator, dt);
          appendElement(this, dt);
          this.doc.doctype = dt;
        }
      },
      /**
       * @see org.xml.sax.ErrorHandler
       * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
       */
      warning: function(error) {
        console.warn("[xmldom warning]	" + error, _locator(this.locator));
      },
      error: function(error) {
        console.error("[xmldom error]	" + error, _locator(this.locator));
      },
      fatalError: function(error) {
        throw new ParseError(error, this.locator);
      }
    };
    function _locator(l) {
      if (l) {
        return "\n@" + (l.systemId || "") + "#[line:" + l.lineNumber + ",col:" + l.columnNumber + "]";
      }
    }
    function _toString(chars, start, length) {
      if (typeof chars == "string") {
        return chars.substr(start, length);
      } else {
        if (chars.length >= start + length || start) {
          return new java.lang.String(chars, start, length) + "";
        }
        return chars;
      }
    }
    "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(key) {
      DOMHandler.prototype[key] = function() {
        return null;
      };
    });
    function appendElement(hander, node) {
      if (!hander.currentElement) {
        hander.doc.appendChild(node);
      } else {
        hander.currentElement.appendChild(node);
      }
    }
    exports.__DOMHandler = DOMHandler;
    exports.normalizeLineEndings = normalizeLineEndings;
    exports.DOMParser = DOMParser;
  }
});

// ../node_modules/@xmldom/xmldom/lib/index.js
var require_lib11 = __commonJS({
  "../node_modules/@xmldom/xmldom/lib/index.js"(exports) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var dom = require_dom();
    exports.DOMImplementation = dom.DOMImplementation;
    exports.XMLSerializer = dom.XMLSerializer;
    exports.DOMParser = require_dom_parser().DOMParser;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/parseJson.js
var require_parseJson = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/parseJson.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseJson = void 0;
    function parseJson(data) {
      try {
        var json = JSON.parse(data);
        return json;
      } catch (_) {
        return null;
      }
    }
    exports.parseJson = parseJson;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/utils/bufferFrom.js
var require_bufferFrom = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/utils/bufferFrom.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferFrom = void 0;
    function bufferFrom(init) {
      var encodedString = encodeURIComponent(init);
      var binaryString = encodedString.replace(/%([0-9A-F]{2})/g, function(_, char) {
        return String.fromCharCode("0x" + char);
      });
      var buffer = new Uint8Array(binaryString.length);
      Array.prototype.forEach.call(binaryString, function(char, index) {
        buffer[index] = char.charCodeAt(0);
      });
      return buffer;
    }
    exports.bufferFrom = bufferFrom;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/polyfills/EventPolyfill.js
var require_EventPolyfill = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/polyfills/EventPolyfill.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventPolyfill = void 0;
    var EventPolyfill = (
      /** @class */
      function() {
        function EventPolyfill2(type, options) {
          this.AT_TARGET = 0;
          this.BUBBLING_PHASE = 0;
          this.CAPTURING_PHASE = 0;
          this.NONE = 0;
          this.type = "";
          this.srcElement = null;
          this.currentTarget = null;
          this.eventPhase = 0;
          this.isTrusted = true;
          this.composed = false;
          this.cancelable = true;
          this.defaultPrevented = false;
          this.bubbles = true;
          this.lengthComputable = true;
          this.loaded = 0;
          this.total = 0;
          this.cancelBubble = false;
          this.returnValue = true;
          this.type = type;
          this.target = (options === null || options === void 0 ? void 0 : options.target) || null;
          this.currentTarget = (options === null || options === void 0 ? void 0 : options.currentTarget) || null;
          this.timeStamp = Date.now();
        }
        EventPolyfill2.prototype.composedPath = function() {
          return [];
        };
        EventPolyfill2.prototype.initEvent = function(type, bubbles, cancelable) {
          this.type = type;
          this.bubbles = !!bubbles;
          this.cancelable = !!cancelable;
        };
        EventPolyfill2.prototype.preventDefault = function() {
          this.defaultPrevented = true;
        };
        EventPolyfill2.prototype.stopPropagation = function() {
        };
        EventPolyfill2.prototype.stopImmediatePropagation = function() {
        };
        return EventPolyfill2;
      }()
    );
    exports.EventPolyfill = EventPolyfill;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.js
var require_ProgressEventPolyfill = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProgressEventPolyfill = void 0;
    var EventPolyfill_1 = require_EventPolyfill();
    var ProgressEventPolyfill = (
      /** @class */
      function(_super) {
        __extends(ProgressEventPolyfill2, _super);
        function ProgressEventPolyfill2(type, init) {
          var _this = _super.call(this, type) || this;
          _this.lengthComputable = (init === null || init === void 0 ? void 0 : init.lengthComputable) || false;
          _this.composed = (init === null || init === void 0 ? void 0 : init.composed) || false;
          _this.loaded = (init === null || init === void 0 ? void 0 : init.loaded) || 0;
          _this.total = (init === null || init === void 0 ? void 0 : init.total) || 0;
          return _this;
        }
        return ProgressEventPolyfill2;
      }(EventPolyfill_1.EventPolyfill)
    );
    exports.ProgressEventPolyfill = ProgressEventPolyfill;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/utils/createEvent.js
var require_createEvent = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/utils/createEvent.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createEvent = void 0;
    var EventPolyfill_1 = require_EventPolyfill();
    var ProgressEventPolyfill_1 = require_ProgressEventPolyfill();
    var SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== "undefined";
    function createEvent2(target, type, init) {
      var progressEvents = [
        "error",
        "progress",
        "loadstart",
        "loadend",
        "load",
        "timeout",
        "abort"
      ];
      var ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill_1.ProgressEventPolyfill;
      var event = progressEvents.includes(type) ? new ProgressEventClass(type, {
        lengthComputable: true,
        loaded: (init === null || init === void 0 ? void 0 : init.loaded) || 0,
        total: (init === null || init === void 0 ? void 0 : init.total) || 0
      }) : new EventPolyfill_1.EventPolyfill(type, {
        target,
        currentTarget: target
      });
      return event;
    }
    exports.createEvent = createEvent2;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/XMLHttpRequestOverride.js
var require_XMLHttpRequestOverride = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/XMLHttpRequestOverride.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createXMLHttpRequestOverride = void 0;
    var until_1 = require_lib6();
    var headers_polyfill_1 = require_lib3();
    var xmldom_1 = require_lib11();
    var parseJson_1 = require_parseJson();
    var toIsoResponse_1 = require_toIsoResponse();
    var bufferFrom_1 = require_bufferFrom();
    var createEvent_1 = require_createEvent();
    var IsomorphicRequest_1 = require_IsomorphicRequest();
    var bufferUtils_1 = require_bufferUtils();
    var InteractiveIsomorphicRequest_1 = require_InteractiveIsomorphicRequest();
    var createXMLHttpRequestOverride = function(options) {
      var _a2;
      var XMLHttpRequest = options.XMLHttpRequest, emitter = options.emitter, log = options.log;
      return _a2 = /** @class */
      function() {
        function XMLHttpRequestOverride() {
          this._events = [];
          this.log = log;
          this.UNSENT = 0;
          this.OPENED = 1;
          this.HEADERS_RECEIVED = 2;
          this.LOADING = 3;
          this.DONE = 4;
          this.onreadystatechange = null;
          this.onabort = null;
          this.onerror = null;
          this.onload = null;
          this.onloadend = null;
          this.onloadstart = null;
          this.onprogress = null;
          this.ontimeout = null;
          this.url = "";
          this.method = "GET";
          this.readyState = this.UNSENT;
          this.withCredentials = false;
          this.status = 200;
          this.statusText = "OK";
          this.response = "";
          this.responseType = "text";
          this.responseText = "";
          this.responseXML = null;
          this.responseURL = "";
          this.upload = {};
          this.timeout = 0;
          this._requestHeaders = new headers_polyfill_1.Headers();
          this._responseHeaders = new headers_polyfill_1.Headers();
        }
        XMLHttpRequestOverride.prototype.setReadyState = function(nextState) {
          if (nextState === this.readyState) {
            return;
          }
          this.log("readyState change %d -> %d", this.readyState, nextState);
          this.readyState = nextState;
          if (nextState !== this.UNSENT) {
            this.log("triggering readystate change...");
            this.trigger("readystatechange");
          }
        };
        XMLHttpRequestOverride.prototype.trigger = function(eventName, options2) {
          var e_1, _a3;
          this.log('trigger "%s" (%d)', eventName, this.readyState);
          this.log('resolve listener for event "%s"', eventName);
          var callback = this["on" + eventName];
          callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options2));
          try {
            for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {
              var event_1 = _c.value;
              if (event_1.name === eventName) {
                log('calling mock event listener "%s" (%d)', eventName, this.readyState);
                event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options2));
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a3 = _b.return)) _a3.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return this;
        };
        XMLHttpRequestOverride.prototype.reset = function() {
          this.log("reset");
          this.setReadyState(this.UNSENT);
          this.status = 200;
          this.statusText = "OK";
          this.response = null;
          this.responseText = null;
          this.responseXML = null;
          this._requestHeaders = new headers_polyfill_1.Headers();
          this._responseHeaders = new headers_polyfill_1.Headers();
        };
        XMLHttpRequestOverride.prototype.open = function(method, url, async, user, password) {
          if (async === void 0) {
            async = true;
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a3) {
              this.log = this.log.extend("request " + method + " " + url);
              this.log("open", { method, url, async, user, password });
              this.reset();
              this.setReadyState(this.OPENED);
              if (typeof url === "undefined") {
                this.url = method;
                this.method = "GET";
              } else {
                this.url = url;
                this.method = method;
                this.async = async;
                this.user = user;
                this.password = password;
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        XMLHttpRequestOverride.prototype.send = function(data) {
          var _this = this;
          this.log("send %s %s", this.method, this.url);
          var buffer;
          if (typeof data === "string") {
            buffer = bufferUtils_1.encodeBuffer(data);
          } else {
            buffer = data || new ArrayBuffer(0);
          }
          var url;
          try {
            url = new URL(this.url);
          } catch (error) {
            url = new URL(this.url, window.location.href);
          }
          this.log("request headers", this._requestHeaders);
          var isomorphicRequest = new IsomorphicRequest_1.IsomorphicRequest(url, {
            body: buffer,
            method: this.method,
            headers: this._requestHeaders,
            credentials: this.withCredentials ? "include" : "omit"
          });
          var interactiveIsomorphicRequest = new InteractiveIsomorphicRequest_1.InteractiveIsomorphicRequest(isomorphicRequest);
          this.log('emitting the "request" event for %d listener(s)...', emitter.listenerCount("request"));
          emitter.emit("request", interactiveIsomorphicRequest);
          this.log("awaiting mocked response...");
          Promise.resolve(until_1.until(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var _a3, mockedResponse;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, emitter.untilIdle("request", function(_a4) {
                      var _b2 = __read(_a4.args, 1), request = _b2[0];
                      return request.id === interactiveIsomorphicRequest.id;
                    })];
                  case 1:
                    _b.sent();
                    this.log("all request listeners have been resolved!");
                    return [4, interactiveIsomorphicRequest.respondWith.invoked()];
                  case 2:
                    _a3 = __read.apply(void 0, [_b.sent(), 1]), mockedResponse = _a3[0];
                    this.log("event.respondWith called with:", mockedResponse);
                    return [2, mockedResponse];
                }
              });
            });
          })).then(function(_a3) {
            var _b, _c;
            var _d = __read(_a3, 2), middlewareException = _d[0], mockedResponse = _d[1];
            if (middlewareException) {
              _this.log("middleware function threw an exception!", middlewareException);
              _this.trigger("error");
              _this.abort();
              return;
            }
            if (mockedResponse) {
              _this.log("received mocked response", mockedResponse);
              _this.trigger("loadstart");
              _this.status = (_b = mockedResponse.status) !== null && _b !== void 0 ? _b : 200;
              _this.statusText = mockedResponse.statusText || "OK";
              _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();
              _this.log("set response status", _this.status, _this.statusText);
              _this.log("set response headers", _this._responseHeaders);
              _this.setReadyState(_this.HEADERS_RECEIVED);
              _this.log("response type", _this.responseType);
              _this.response = _this.getResponseBody(mockedResponse.body);
              _this.responseURL = _this.url;
              _this.responseText = mockedResponse.body || "";
              _this.responseXML = _this.getResponseXML();
              _this.log("set response body", _this.response);
              if (mockedResponse.body && _this.response) {
                _this.setReadyState(_this.LOADING);
                var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);
                _this.trigger("progress", {
                  loaded: bodyBuffer.length,
                  total: bodyBuffer.length
                });
              }
              _this.setReadyState(_this.DONE);
              _this.trigger("load");
              _this.trigger("loadend");
              emitter.emit("response", isomorphicRequest, toIsoResponse_1.toIsoResponse(mockedResponse));
            } else {
              _this.log("no mocked response received!");
              var originalRequest_1 = new XMLHttpRequest();
              _this.log("opening an original request %s %s", _this.method, _this.url);
              originalRequest_1.open(_this.method, _this.url, (_c = _this.async) !== null && _c !== void 0 ? _c : true, _this.user, _this.password);
              originalRequest_1.addEventListener("load", function() {
                _this.log('original "onload"');
                _this.status = originalRequest_1.status;
                _this.statusText = originalRequest_1.statusText;
                _this.responseURL = originalRequest_1.responseURL;
                _this.responseType = originalRequest_1.responseType;
                _this.response = originalRequest_1.response;
                _this.responseText = originalRequest_1.responseText;
                _this.responseXML = originalRequest_1.responseXML;
                _this.log("set mock request readyState to DONE");
                _this.setReadyState(_this.DONE);
                _this.log("received original response", _this.status, _this.statusText);
                _this.log("original response body:", _this.response);
                var responseHeaders = originalRequest_1.getAllResponseHeaders();
                _this.log("original response headers:\n", responseHeaders);
                _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);
                _this.log("original response headers (normalized)", _this._responseHeaders);
                _this.log("original response finished");
                emitter.emit("response", isomorphicRequest, {
                  status: originalRequest_1.status,
                  statusText: originalRequest_1.statusText,
                  headers: _this._responseHeaders,
                  body: originalRequest_1.response
                });
              });
              _this.propagateCallbacks(originalRequest_1);
              _this.propagateListeners(originalRequest_1);
              _this.propagateHeaders(originalRequest_1, _this._requestHeaders);
              if (_this.async) {
                originalRequest_1.timeout = _this.timeout;
              }
              _this.log("send", data);
              originalRequest_1.send(data);
            }
          });
        };
        XMLHttpRequestOverride.prototype.abort = function() {
          this.log("abort");
          if (this.readyState > this.UNSENT && this.readyState < this.DONE) {
            this.setReadyState(this.UNSENT);
            this.trigger("abort");
          }
        };
        XMLHttpRequestOverride.prototype.dispatchEvent = function() {
          return false;
        };
        XMLHttpRequestOverride.prototype.setRequestHeader = function(name, value) {
          this.log('set request header "%s" to "%s"', name, value);
          this._requestHeaders.append(name, value);
        };
        XMLHttpRequestOverride.prototype.getResponseHeader = function(name) {
          this.log('get response header "%s"', name);
          if (this.readyState < this.HEADERS_RECEIVED) {
            this.log("cannot return a header: headers not received (state: %s)", this.readyState);
            return null;
          }
          var headerValue = this._responseHeaders.get(name);
          this.log('resolved response header "%s" to "%s"', name, headerValue, this._responseHeaders);
          return headerValue;
        };
        XMLHttpRequestOverride.prototype.getAllResponseHeaders = function() {
          this.log("get all response headers");
          if (this.readyState < this.HEADERS_RECEIVED) {
            this.log("cannot return headers: headers not received (state: %s)", this.readyState);
            return "";
          }
          return headers_polyfill_1.headersToString(this._responseHeaders);
        };
        XMLHttpRequestOverride.prototype.addEventListener = function(name, listener) {
          this.log("addEventListener", name, listener);
          this._events.push({
            name,
            listener
          });
        };
        XMLHttpRequestOverride.prototype.removeEventListener = function(name, listener) {
          this.log("removeEventListener", name, listener);
          this._events = this._events.filter(function(storedEvent) {
            return storedEvent.name !== name && storedEvent.listener !== listener;
          });
        };
        XMLHttpRequestOverride.prototype.overrideMimeType = function() {
        };
        XMLHttpRequestOverride.prototype.getResponseBody = function(body) {
          var textBody = body !== null && body !== void 0 ? body : "";
          this.log("coerced response body to", textBody);
          switch (this.responseType) {
            case "json": {
              this.log("resolving response body as JSON");
              return parseJson_1.parseJson(textBody);
            }
            case "blob": {
              var blobType = this.getResponseHeader("content-type") || "text/plain";
              this.log("resolving response body as Blob", { type: blobType });
              return new Blob([textBody], {
                type: blobType
              });
            }
            case "arraybuffer": {
              this.log("resolving response body as ArrayBuffer");
              var arrayBuffer = bufferFrom_1.bufferFrom(textBody);
              return arrayBuffer;
            }
            default:
              return textBody;
          }
        };
        XMLHttpRequestOverride.prototype.getResponseXML = function() {
          var contentType = this.getResponseHeader("Content-Type");
          if (contentType === "application/xml" || contentType === "text/xml") {
            return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);
          }
          return null;
        };
        XMLHttpRequestOverride.prototype.propagateCallbacks = function(request) {
          var e_2, _a3;
          this.log("propagating request callbacks to the original request");
          var callbackNames = [
            "abort",
            "onerror",
            "ontimeout",
            "onload",
            "onloadstart",
            "onloadend",
            "onprogress",
            "onreadystatechange"
          ];
          try {
            for (var callbackNames_1 = __values(callbackNames), callbackNames_1_1 = callbackNames_1.next(); !callbackNames_1_1.done; callbackNames_1_1 = callbackNames_1.next()) {
              var callbackName = callbackNames_1_1.value;
              var callback = this[callbackName];
              if (callback) {
                request[callbackName] = this[callbackName];
                this.log('propagated the "%s" callback', callbackName, callback);
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (callbackNames_1_1 && !callbackNames_1_1.done && (_a3 = callbackNames_1.return)) _a3.call(callbackNames_1);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          request.onabort = this.abort;
          request.onerror = this.onerror;
          request.ontimeout = this.ontimeout;
          request.onload = this.onload;
          request.onloadstart = this.onloadstart;
          request.onloadend = this.onloadend;
          request.onprogress = this.onprogress;
          request.onreadystatechange = this.onreadystatechange;
        };
        XMLHttpRequestOverride.prototype.propagateListeners = function(request) {
          this.log("propagating request listeners (%d) to the original request", this._events.length, this._events);
          this._events.forEach(function(_a3) {
            var name = _a3.name, listener = _a3.listener;
            request.addEventListener(name, listener);
          });
        };
        XMLHttpRequestOverride.prototype.propagateHeaders = function(request, headers) {
          var _this = this;
          this.log("propagating request headers to the original request", headers);
          Object.entries(headers.raw()).forEach(function(_a3) {
            var _b = __read(_a3, 2), name = _b[0], value = _b[1];
            _this.log('setting "%s" (%s) header on the original request', name, value);
            request.setRequestHeader(name, value);
          });
        };
        return XMLHttpRequestOverride;
      }(), /* Request state */
      _a2.UNSENT = 0, _a2.OPENED = 1, _a2.HEADERS_RECEIVED = 2, _a2.LOADING = 3, _a2.DONE = 4, _a2;
    };
    exports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js
var require_XMLHttpRequest = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/XMLHttpRequest/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XMLHttpRequestInterceptor = void 0;
    var outvariant_1 = require_lib5();
    var glossary_1 = require_glossary();
    var Interceptor_1 = require_Interceptor();
    var XMLHttpRequestOverride_1 = require_XMLHttpRequestOverride();
    var XMLHttpRequestInterceptor = (
      /** @class */
      function(_super) {
        __extends(XMLHttpRequestInterceptor2, _super);
        function XMLHttpRequestInterceptor2() {
          return _super.call(this, XMLHttpRequestInterceptor2.symbol) || this;
        }
        XMLHttpRequestInterceptor2.prototype.checkEnvironment = function() {
          return typeof window !== "undefined" && typeof window.XMLHttpRequest !== "undefined";
        };
        XMLHttpRequestInterceptor2.prototype.setup = function() {
          var log = this.log.extend("setup");
          log('patching "XMLHttpRequest" module...');
          var PureXMLHttpRequest = window.XMLHttpRequest;
          outvariant_1.invariant(!PureXMLHttpRequest[glossary_1.IS_PATCHED_MODULE], 'Failed to patch the "XMLHttpRequest" module: already patched.');
          window.XMLHttpRequest = XMLHttpRequestOverride_1.createXMLHttpRequestOverride({
            XMLHttpRequest: PureXMLHttpRequest,
            emitter: this.emitter,
            log: this.log
          });
          log('native "XMLHttpRequest" module patched!', window.XMLHttpRequest.name);
          Object.defineProperty(window.XMLHttpRequest, glossary_1.IS_PATCHED_MODULE, {
            enumerable: true,
            configurable: true,
            value: true
          });
          this.subscriptions.push(function() {
            Object.defineProperty(window.XMLHttpRequest, glossary_1.IS_PATCHED_MODULE, {
              value: void 0
            });
            window.XMLHttpRequest = PureXMLHttpRequest;
            log('native "XMLHttpRequest" module restored!', window.XMLHttpRequest.name);
          });
        };
        XMLHttpRequestInterceptor2.symbol = Symbol("xhr");
        return XMLHttpRequestInterceptor2;
      }(Interceptor_1.Interceptor)
    );
    exports.XMLHttpRequestInterceptor = XMLHttpRequestInterceptor;
  }
});

// ../node_modules/msw/node_modules/strict-event-emitter/lib/MemoryLeakError.js
var require_MemoryLeakError = __commonJS({
  "../node_modules/msw/node_modules/strict-event-emitter/lib/MemoryLeakError.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MemoryLeakError = void 0;
    var MemoryLeakError = class extends Error {
      constructor(emitter, type, count) {
        super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);
        this.emitter = emitter;
        this.type = type;
        this.count = count;
        this.name = "MaxListenersExceededWarning";
      }
    };
    exports.MemoryLeakError = MemoryLeakError;
  }
});

// ../node_modules/msw/node_modules/strict-event-emitter/lib/Emitter.js
var require_Emitter = __commonJS({
  "../node_modules/msw/node_modules/strict-event-emitter/lib/Emitter.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Emitter = void 0;
    var MemoryLeakError_1 = require_MemoryLeakError();
    var Emitter = class _Emitter {
      constructor() {
        this.events = /* @__PURE__ */ new Map();
        this.maxListeners = _Emitter.defaultMaxListeners;
        this.hasWarnedAboutPotentialMemoryLeak = false;
      }
      static listenerCount(emitter, eventName) {
        return emitter.listenerCount(eventName);
      }
      _emitInternalEvent(internalEventName, eventName, listener) {
        this.emit(
          internalEventName,
          ...[eventName, listener]
        );
      }
      _getListeners(eventName) {
        return this.events.get(eventName) || [];
      }
      _removeListener(listeners, listener) {
        const index = listeners.indexOf(listener);
        if (index > -1) {
          listeners.splice(index, 1);
        }
        return [];
      }
      _wrapOnceListener(eventName, listener) {
        const onceListener = (...data) => {
          this.removeListener(eventName, onceListener);
          listener.apply(this, data);
        };
        return onceListener;
      }
      setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
      }
      /**
       * Returns the current max listener value for the `Emitter` which is
       * either set by `emitter.setMaxListeners(n)` or defaults to
       * `Emitter.defaultMaxListeners`.
       */
      getMaxListeners() {
        return this.maxListeners;
      }
      /**
       * Returns an array listing the events for which the emitter has registered listeners.
       * The values in the array will be strings or Symbols.
       */
      eventNames() {
        return Array.from(this.events.keys());
      }
      /**
       * Synchronously calls each of the listeners registered for the event named `eventName`,
       * in the order they were registered, passing the supplied arguments to each.
       * Returns `true` if the event has listeners, `false` otherwise.
       *
       * @example
       * const emitter = new Emitter<{ hello: [string] }>()
       * emitter.emit('hello', 'John')
       */
      emit(eventName, ...data) {
        const listeners = this._getListeners(eventName);
        listeners.forEach((listener) => {
          listener.apply(this, data);
        });
        return listeners.length > 0;
      }
      addListener(eventName, listener) {
        this._emitInternalEvent("newListener", eventName, listener);
        const nextListeners = this._getListeners(eventName).concat(listener);
        this.events.set(eventName, nextListeners);
        if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {
          this.hasWarnedAboutPotentialMemoryLeak = true;
          const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));
          console.warn(memoryLeakWarning);
        }
        return this;
      }
      on(eventName, listener) {
        return this.addListener(eventName, listener);
      }
      once(eventName, listener) {
        return this.addListener(eventName, this._wrapOnceListener(eventName, listener));
      }
      prependListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          const nextListeners = [listener].concat(listeners);
          this.events.set(eventName, nextListeners);
        } else {
          this.events.set(eventName, listeners.concat(listener));
        }
        return this;
      }
      prependOnceListener(eventName, listener) {
        return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));
      }
      removeListener(eventName, listener) {
        const listeners = this._getListeners(eventName);
        if (listeners.length > 0) {
          this._removeListener(listeners, listener);
          this.events.set(eventName, listeners);
          this._emitInternalEvent("removeListener", eventName, listener);
        }
        return this;
      }
      /**
       * Alias for `emitter.removeListener()`.
       *
       * @example
       * emitter.off('hello', listener)
       */
      off(eventName, listener) {
        return this.removeListener(eventName, listener);
      }
      removeAllListeners(eventName) {
        if (eventName) {
          this.events.delete(eventName);
        } else {
          this.events.clear();
        }
        return this;
      }
      /**
       * Returns a copy of the array of listeners for the event named `eventName`.
       */
      listeners(eventName) {
        return Array.from(this._getListeners(eventName));
      }
      /**
       * Returns the number of listeners listening to the event named `eventName`.
       */
      listenerCount(eventName) {
        return this._getListeners(eventName).length;
      }
      rawListeners(eventName) {
        return this.listeners(eventName);
      }
    };
    exports.Emitter = Emitter;
    Emitter.defaultMaxListeners = 10;
  }
});

// ../node_modules/msw/node_modules/strict-event-emitter/lib/index.js
var require_lib12 = __commonJS({
  "../node_modules/msw/node_modules/strict-event-emitter/lib/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Emitter(), exports);
    __exportStar(require_MemoryLeakError(), exports);
  }
});

// ../node_modules/msw/lib/index.js
var require_lib13 = __commonJS({
  "../node_modules/msw/lib/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      GraphQLHandler: () => GraphQLHandler,
      MockedRequest: () => MockedRequest,
      RESTMethods: () => RESTMethods,
      RequestHandler: () => RequestHandler,
      RestHandler: () => RestHandler,
      SetupApi: () => SetupApi,
      SetupWorkerApi: () => SetupWorkerApi,
      cleanUrl: () => cleanUrl,
      compose: () => compose,
      context: () => context_exports,
      createResponseComposition: () => createResponseComposition,
      defaultContext: () => defaultContext,
      defaultResponse: () => defaultResponse,
      graphql: () => graphql,
      graphqlContext: () => graphqlContext,
      handleRequest: () => handleRequest,
      matchRequestUrl: () => matchRequestUrl,
      response: () => response,
      rest: () => rest,
      restContext: () => restContext,
      setupWorker: () => setupWorker
    });
    module2.exports = __toCommonJS2(src_exports);
    var context_exports = {};
    __export2(context_exports, {
      body: () => body,
      cookie: () => cookie,
      data: () => data,
      delay: () => delay,
      errors: () => errors,
      extensions: () => extensions,
      fetch: () => fetch2,
      json: () => json,
      set: () => set,
      status: () => status,
      text: () => text,
      xml: () => xml
    });
    var codes_default = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "103": "Early Hints",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a Teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Too Early",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    };
    var status = (statusCode, statusText) => {
      return (res) => {
        res.status = statusCode;
        res.statusText = statusText || codes_default[String(statusCode)];
        return res;
      };
    };
    var import_headers_polyfill = require_lib3();
    function set(...args) {
      return (res) => {
        const [name, value] = args;
        if (typeof name === "string") {
          res.headers.append(name, value);
        } else {
          const headers = (0, import_headers_polyfill.objectToHeaders)(name);
          headers.forEach((value2, name2) => {
            res.headers.append(name2, value2);
          });
        }
        return res;
      };
    }
    var cookieUtils = __toESM2(require_cookie());
    var cookie = (name, value, options) => {
      return (res) => {
        const serializedCookie = cookieUtils.serialize(name, value, options);
        res.headers.append("Set-Cookie", serializedCookie);
        if (typeof document !== "undefined") {
          document.cookie = serializedCookie;
        }
        return res;
      };
    };
    var body = (value) => {
      return (res) => {
        res.body = value;
        return res;
      };
    };
    function jsonParse(value) {
      try {
        return JSON.parse(value);
      } catch (error2) {
        return void 0;
      }
    }
    function isObject(value) {
      return value != null && typeof value === "object" && !Array.isArray(value);
    }
    function mergeRight(left, right) {
      return Object.entries(right).reduce((result, [key, rightValue]) => {
        const leftValue = result[key];
        if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
          result[key] = leftValue.concat(rightValue);
          return result;
        }
        if (isObject(leftValue) && isObject(rightValue)) {
          result[key] = mergeRight(leftValue, rightValue);
          return result;
        }
        result[key] = rightValue;
        return result;
      }, Object.assign({}, left));
    }
    var json = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "application/json");
        res.body = JSON.stringify(body2);
        return res;
      };
    };
    var data = (payload) => {
      return (res) => {
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { data: payload });
        return json(nextBody)(res);
      };
    };
    var extensions = (payload) => {
      return (res) => {
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { extensions: payload });
        return json(nextBody)(res);
      };
    };
    var import_is_node_process = require_lib4();
    var SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;
    var MIN_SERVER_RESPONSE_TIME = 100;
    var MAX_SERVER_RESPONSE_TIME = 400;
    var NODE_SERVER_RESPONSE_TIME = 5;
    var getRandomServerResponseTime = () => {
      if ((0, import_is_node_process.isNodeProcess)()) {
        return NODE_SERVER_RESPONSE_TIME;
      }
      return Math.floor(
        Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME
      );
    };
    var delay = (durationOrMode) => {
      return (res) => {
        let delayTime;
        if (typeof durationOrMode === "string") {
          switch (durationOrMode) {
            case "infinite": {
              delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;
              break;
            }
            case "real": {
              delayTime = getRandomServerResponseTime();
              break;
            }
            default: {
              throw new Error(
                `Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`
              );
            }
          }
        } else if (typeof durationOrMode === "undefined") {
          delayTime = getRandomServerResponseTime();
        } else {
          if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {
            throw new Error(
              `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`
            );
          }
          delayTime = durationOrMode;
        }
        res.delay = delayTime;
        return res;
      };
    };
    var errors = (errorsList) => {
      return (res) => {
        if (errorsList == null) {
          return res;
        }
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { errors: errorsList });
        return json(nextBody)(res);
      };
    };
    var import_is_node_process2 = require_lib4();
    var import_headers_polyfill2 = require_lib3();
    var useFetch = (0, import_is_node_process2.isNodeProcess)() ? (input, init) => Promise.resolve().then(() => __toESM2(require_browser())).then(
      ({ default: nodeFetch }) => nodeFetch(input, init)
    ) : globalThis.fetch;
    var augmentRequestInit = (requestInit) => {
      const headers = new import_headers_polyfill2.Headers(requestInit.headers);
      headers.set("x-msw-bypass", "true");
      return {
        ...requestInit,
        headers: headers.all()
      };
    };
    var createFetchRequestParameters = (input) => {
      const { body: body2, method } = input;
      const requestParameters = {
        ...input,
        body: void 0
      };
      if (["GET", "HEAD"].includes(method)) {
        return requestParameters;
      }
      if (typeof body2 === "object" || typeof body2 === "number" || typeof body2 === "boolean") {
        requestParameters.body = JSON.stringify(body2);
      } else {
        requestParameters.body = body2;
      }
      return requestParameters;
    };
    var fetch2 = (input, requestInit = {}) => {
      if (typeof input === "string") {
        return useFetch(input, augmentRequestInit(requestInit));
      }
      const requestParameters = createFetchRequestParameters(input);
      const derivedRequestInit = augmentRequestInit(requestParameters);
      return useFetch(input.url.href, derivedRequestInit);
    };
    var text = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "text/plain");
        res.body = body2;
        return res;
      };
    };
    var xml = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "text/xml");
        res.body = body2;
        return res;
      };
    };
    var import_outvariant2 = require_lib5();
    var import_outvariant = require_lib5();
    var LIBRARY_PREFIX = "[MSW]";
    function formatMessage(message, ...positionals) {
      const interpolatedMessage = (0, import_outvariant.format)(message, ...positionals);
      return `${LIBRARY_PREFIX} ${interpolatedMessage}`;
    }
    function warn(message, ...positionals) {
      console.warn(formatMessage(message, ...positionals));
    }
    function error(message, ...positionals) {
      console.error(formatMessage(message, ...positionals));
    }
    var devUtils = {
      formatMessage,
      warn,
      error
    };
    function checkGlobals() {
      (0, import_outvariant2.invariant)(
        typeof URL !== "undefined",
        devUtils.formatMessage(
          `Global "URL" class is not defined. This likely means that you're running MSW in an environment that doesn't support all Node.js standard API (e.g. React Native). If that's the case, please use an appropriate polyfill for the "URL" class, like "react-native-url-polyfill".`
        )
      );
    }
    var import_outvariant5 = require_lib5();
    var import_is_node_process3 = require_lib4();
    var import_until4 = require_lib6();
    var import_until = require_lib6();
    function getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {
      const allStates = [
        registration.active,
        registration.installing,
        registration.waiting
      ];
      const relevantStates = allStates.filter((state) => {
        return state != null;
      });
      const worker = relevantStates.find((worker2) => {
        return findWorker(worker2.scriptURL, absoluteWorkerUrl);
      });
      return worker || null;
    }
    function getAbsoluteWorkerUrl(workerUrl) {
      return new URL(workerUrl, location.href).href;
    }
    var getWorkerInstance = async (url, options = {}, findWorker) => {
      const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);
      const mockRegistrations = await navigator.serviceWorker.getRegistrations().then(
        (registrations) => registrations.filter(
          (registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)
        )
      );
      if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {
        location.reload();
      }
      const [existingRegistration] = mockRegistrations;
      if (existingRegistration) {
        return existingRegistration.update().then(() => {
          return [
            getWorkerByRegistration(
              existingRegistration,
              absoluteWorkerUrl,
              findWorker
            ),
            existingRegistration
          ];
        });
      }
      const [error2, instance] = await (0, import_until.until)(
        async () => {
          const registration = await navigator.serviceWorker.register(url, options);
          return [
            getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),
            registration
          ];
        }
      );
      if (error2) {
        const isWorkerMissing = error2.message.includes("(404)");
        if (isWorkerMissing) {
          const scopeUrl = new URL((options == null ? void 0 : options.scope) || "/", location.href);
          throw new Error(
            devUtils.formatMessage(`Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.

Did you forget to run "npx msw init <PUBLIC_DIR>"?

Learn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`)
          );
        }
        throw new Error(
          devUtils.formatMessage(
            "Failed to register the Service Worker:\n\n%s",
            error2.message
          )
        );
      }
      return instance;
    };
    function printStartMessage(args = {}) {
      if (args.quiet) {
        return;
      }
      const message = args.message || "Mocking enabled.";
      console.groupCollapsed(
        `%c${devUtils.formatMessage(message)}`,
        "color:orangered;font-weight:bold;"
      );
      console.log(
        "%cDocumentation: %chttps://mswjs.io/docs",
        "font-weight:bold",
        "font-weight:normal"
      );
      console.log("Found an issue? https://github.com/mswjs/msw/issues");
      if (args.workerUrl) {
        console.log("Worker script URL:", args.workerUrl);
      }
      if (args.workerScope) {
        console.log("Worker scope:", args.workerScope);
      }
      console.groupEnd();
    }
    async function enableMocking(context2, options) {
      var _a2, _b;
      context2.workerChannel.send("MOCK_ACTIVATE");
      await context2.events.once("MOCKING_ENABLED");
      if (context2.isMockingEnabled) {
        devUtils.warn(
          `Found a redundant "worker.start()" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this "worker.start()" call.`
        );
        return;
      }
      context2.isMockingEnabled = true;
      printStartMessage({
        quiet: options.quiet,
        workerScope: (_a2 = context2.registration) == null ? void 0 : _a2.scope,
        workerUrl: (_b = context2.worker) == null ? void 0 : _b.scriptURL
      });
    }
    var WorkerChannel = class {
      constructor(port) {
        this.port = port;
      }
      postMessage(event, ...rest2) {
        const [data2, transfer] = rest2;
        this.port.postMessage({ type: event, data: data2 }, { transfer });
      }
    };
    var NetworkError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "NetworkError";
      }
    };
    var import_interceptors2 = require_lib9();
    var import_headers_polyfill5 = require_lib3();
    var cookieUtils3 = __toESM2(require_cookie());
    var import_cookies = require_lib10();
    var import_interceptors = require_lib9();
    var import_bufferUtils = require_bufferUtils();
    var import_headers_polyfill4 = require_lib3();
    var cookieUtils2 = __toESM2(require_cookie());
    function getAllCookies() {
      return cookieUtils2.parse(document.cookie);
    }
    function getRequestCookies(request) {
      if (typeof document === "undefined" || typeof location === "undefined") {
        return {};
      }
      switch (request.credentials) {
        case "same-origin": {
          return location.origin === request.url.origin ? getAllCookies() : {};
        }
        case "include": {
          return getAllCookies();
        }
        default: {
          return {};
        }
      }
    }
    var import_headers_polyfill3 = require_lib3();
    function parseContentHeaders(headersString) {
      var _a2, _b;
      const headers = (0, import_headers_polyfill3.stringToHeaders)(headersString);
      const contentType = headers.get("content-type") || "text/plain";
      const disposition = headers.get("content-disposition");
      if (!disposition) {
        throw new Error('"Content-Disposition" header is required.');
      }
      const directives = disposition.split(";").reduce((acc, chunk) => {
        const [name2, ...rest2] = chunk.trim().split("=");
        acc[name2] = rest2.join("=");
        return acc;
      }, {});
      const name = (_a2 = directives.name) == null ? void 0 : _a2.slice(1, -1);
      const filename = (_b = directives.filename) == null ? void 0 : _b.slice(1, -1);
      return {
        name,
        filename,
        contentType
      };
    }
    function parseMultipartData(data2, headers) {
      const contentType = headers == null ? void 0 : headers.get("content-type");
      if (!contentType) {
        return void 0;
      }
      const [, ...directives] = contentType.split(/; */);
      const boundary = directives.filter((d) => d.startsWith("boundary=")).map((s) => s.replace(/^boundary=/, ""))[0];
      if (!boundary) {
        return void 0;
      }
      const boundaryRegExp = new RegExp(`--+${boundary}`);
      const fields = data2.split(boundaryRegExp).filter((chunk) => chunk.startsWith("\r\n") && chunk.endsWith("\r\n")).map((chunk) => chunk.trimStart().replace(/\r\n$/, ""));
      if (!fields.length) {
        return void 0;
      }
      const parsedBody = {};
      try {
        for (const field2 of fields) {
          const [contentHeaders, ...rest2] = field2.split("\r\n\r\n");
          const contentBody = rest2.join("\r\n\r\n");
          const { contentType: contentType2, filename, name } = parseContentHeaders(contentHeaders);
          const value = filename === void 0 ? contentBody : new File([contentBody], filename, { type: contentType2 });
          const parsedValue = parsedBody[name];
          if (parsedValue === void 0) {
            parsedBody[name] = value;
          } else if (Array.isArray(parsedValue)) {
            parsedBody[name] = [...parsedValue, value];
          } else {
            parsedBody[name] = [parsedValue, value];
          }
        }
        return parsedBody;
      } catch (error2) {
        return void 0;
      }
    }
    function parseBody(body2, headers) {
      var _a2;
      if (!body2) {
        return body2;
      }
      const contentType = ((_a2 = headers == null ? void 0 : headers.get("content-type")) == null ? void 0 : _a2.toLowerCase()) || "";
      const hasMultipartContent = contentType.startsWith("multipart/form-data");
      if (hasMultipartContent && typeof body2 !== "object") {
        return parseMultipartData(body2.toString(), headers) || body2;
      }
      const hasJsonContent = contentType.includes("json");
      if (hasJsonContent && typeof body2 !== "object") {
        return jsonParse(body2.toString()) || body2;
      }
      return body2;
    }
    function isStringEqual(actual, expected) {
      return actual.toLowerCase() === expected.toLowerCase();
    }
    var MockedRequest = class extends import_interceptors.IsomorphicRequest {
      constructor(url, init = {}) {
        super(url, init);
        if (init.id) {
          this.id = init.id;
        }
        this.cache = init.cache || "default";
        this.destination = init.destination || "";
        this.integrity = init.integrity || "";
        this.keepalive = init.keepalive || false;
        this.mode = init.mode || "cors";
        this.priority = init.priority || "auto";
        this.redirect = init.redirect || "follow";
        this.referrer = init.referrer || "";
        this.referrerPolicy = init.referrerPolicy || "no-referrer";
        this.cookies = init.cookies || this.getCookies();
      }
      get body() {
        const text2 = (0, import_bufferUtils.decodeBuffer)(this["_body"]);
        const body2 = parseBody(text2, this.headers);
        if (isStringEqual(this.method, "GET") && body2 === "") {
          return void 0;
        }
        return body2;
      }
      passthrough() {
        return {
          status: 101,
          statusText: "Continue",
          headers: new import_headers_polyfill4.Headers(),
          body: null,
          passthrough: true,
          once: false
        };
      }
      getCookies() {
        var _a2;
        const requestCookiesString = this.headers.get("cookie");
        const ownCookies = requestCookiesString ? cookieUtils3.parse(requestCookiesString) : {};
        import_cookies.store.hydrate();
        const cookiesFromStore = Array.from(
          (_a2 = import_cookies.store.get({ ...this, url: this.url.href })) == null ? void 0 : _a2.entries()
        ).reduce((cookies, [name, { value }]) => {
          return Object.assign(cookies, { [name.trim()]: value });
        }, {});
        const cookiesFromDocument = getRequestCookies(this);
        const forwardedCookies = {
          ...cookiesFromDocument,
          ...cookiesFromStore
        };
        for (const [name, value] of Object.entries(forwardedCookies)) {
          this.headers.append("cookie", `${name}=${value}`);
        }
        return {
          ...forwardedCookies,
          ...ownCookies
        };
      }
    };
    function parseWorkerRequest(rawRequest) {
      const url = new URL(rawRequest.url);
      const headers = new import_headers_polyfill5.Headers(rawRequest.headers);
      return new MockedRequest(url, {
        ...rawRequest,
        body: (0, import_interceptors2.encodeBuffer)(rawRequest.body || ""),
        headers
      });
    }
    var import_until2 = require_lib6();
    var getResponse = async (request, handlers, resolutionContext) => {
      const relevantHandlers = handlers.filter((handler) => {
        return handler.test(request, resolutionContext);
      });
      if (relevantHandlers.length === 0) {
        return {
          handler: void 0,
          response: void 0
        };
      }
      const result = await relevantHandlers.reduce(async (executionResult, handler) => {
        const previousResults = await executionResult;
        if (!!(previousResults == null ? void 0 : previousResults.response)) {
          return executionResult;
        }
        const result2 = await handler.run(request, resolutionContext);
        if (result2 === null || result2.handler.shouldSkip) {
          return null;
        }
        if (!result2.response) {
          return {
            request: result2.request,
            handler: result2.handler,
            response: void 0,
            parsedResult: result2.parsedResult
          };
        }
        if (result2.response.once) {
          handler.markAsSkipped(true);
        }
        return result2;
      }, Promise.resolve(null));
      if (!result) {
        return {
          handler: void 0,
          response: void 0
        };
      }
      return {
        handler: result.handler,
        publicRequest: result.request,
        parsedRequest: result.parsedResult,
        response: result.response
      };
    };
    var import_js_levenshtein = __toESM2(require_js_levenshtein());
    var import_graphql = (init_graphql(), __toCommonJS(graphql_exports));
    var getPublicUrlFromRequest = (request) => {
      return request.referrer.startsWith(request.url.origin) ? request.url.pathname : new URL(
        request.url.pathname,
        `${request.url.protocol}//${request.url.host}`
      ).href;
    };
    function parseDocumentNode(node) {
      var _a2;
      const operationDef = node.definitions.find((def) => {
        return def.kind === "OperationDefinition";
      });
      return {
        operationType: operationDef == null ? void 0 : operationDef.operation,
        operationName: (_a2 = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a2.value
      };
    }
    function parseQuery(query) {
      try {
        const ast = (0, import_graphql.parse)(query);
        return parseDocumentNode(ast);
      } catch (error2) {
        return error2;
      }
    }
    function extractMultipartVariables(variables, map, files) {
      const operations = { variables };
      for (const [key, pathArray] of Object.entries(map)) {
        if (!(key in files)) {
          throw new Error(`Given files do not have a key '${key}' .`);
        }
        for (const dotPath of pathArray) {
          const [lastPath, ...reversedPaths] = dotPath.split(".").reverse();
          const paths = reversedPaths.reverse();
          let target = operations;
          for (const path of paths) {
            if (!(path in target)) {
              throw new Error(`Property '${paths}' is not in operations.`);
            }
            target = target[path];
          }
          target[lastPath] = files[key];
        }
      }
      return operations.variables;
    }
    function getGraphQLInput(request) {
      var _a2, _b;
      switch (request.method) {
        case "GET": {
          const query = request.url.searchParams.get("query");
          const variables = request.url.searchParams.get("variables") || "";
          return {
            query,
            variables: jsonParse(variables)
          };
        }
        case "POST": {
          if ((_a2 = request.body) == null ? void 0 : _a2.query) {
            const { query, variables } = request.body;
            return {
              query,
              variables
            };
          }
          if ((_b = request.body) == null ? void 0 : _b.operations) {
            const { operations, map, ...files } = request.body;
            const parsedOperations = jsonParse(
              operations
            ) || {};
            if (!parsedOperations.query) {
              return null;
            }
            const parsedMap = jsonParse(map || "") || {};
            const variables = parsedOperations.variables ? extractMultipartVariables(
              parsedOperations.variables,
              parsedMap,
              files
            ) : {};
            return {
              query: parsedOperations.query,
              variables
            };
          }
        }
        default:
          return null;
      }
    }
    function parseGraphQLRequest(request) {
      const input = getGraphQLInput(request);
      if (!input || !input.query) {
        return void 0;
      }
      const { query, variables } = input;
      const parsedResult = parseQuery(query);
      if (parsedResult instanceof Error) {
        const requestPublicUrl = getPublicUrlFromRequest(request);
        throw new Error(
          devUtils.formatMessage(
            'Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.\n\n%s',
            request.method,
            requestPublicUrl,
            parsedResult.message
          )
        );
      }
      return {
        operationType: parsedResult.operationType,
        operationName: parsedResult.operationName,
        variables
      };
    }
    function getStatusCodeColor(status2) {
      if (status2 < 300) {
        return "#69AB32";
      }
      if (status2 < 400) {
        return "#F0BB4B";
      }
      return "#E95F5D";
    }
    function getTimestamp() {
      const now = /* @__PURE__ */ new Date();
      return [now.getHours(), now.getMinutes(), now.getSeconds()].map(String).map((chunk) => chunk.slice(0, 2)).map((chunk) => chunk.padStart(2, "0")).join(":");
    }
    function prepareRequest(request) {
      return {
        ...request,
        body: request.body,
        headers: request.headers.all()
      };
    }
    var import_headers_polyfill6 = require_lib3();
    function prepareResponse(res) {
      const responseHeaders = (0, import_headers_polyfill6.objectToHeaders)(res.headers);
      const parsedBody = parseBody(res.body, responseHeaders);
      return {
        ...res,
        body: parsedBody
      };
    }
    var import_path_to_regexp = (init_dist2(), __toCommonJS(dist_exports));
    var import_getCleanUrl = require_getCleanUrl();
    var REDUNDANT_CHARACTERS_EXP = /[\?|#].*$/g;
    function getSearchParams(path) {
      return new URL(`/${path}`, "http://localhost").searchParams;
    }
    function cleanUrl(path) {
      return path.replace(REDUNDANT_CHARACTERS_EXP, "");
    }
    function isAbsoluteUrl(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    }
    function getAbsoluteUrl(path, baseUrl) {
      if (isAbsoluteUrl(path)) {
        return path;
      }
      if (path.startsWith("*")) {
        return path;
      }
      const origin = baseUrl || typeof document !== "undefined" && document.baseURI;
      return origin ? decodeURI(new URL(encodeURI(path), origin).href) : path;
    }
    function normalizePath(path, baseUrl) {
      if (path instanceof RegExp) {
        return path;
      }
      const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);
      return cleanUrl(maybeAbsoluteUrl);
    }
    function coercePath(path) {
      return path.replace(
        /([:a-zA-Z_-]*)(\*{1,2})+/g,
        (_, parameterName, wildcard) => {
          const expression = "(.*)";
          if (!parameterName) {
            return expression;
          }
          return parameterName.startsWith(":") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;
        }
      ).replace(/([^\/])(:)(?=\d+)/, "$1\\$2").replace(/^([^\/]+)(:)(?=\/\/)/, "$1\\$2");
    }
    function matchRequestUrl(url, path, baseUrl) {
      const normalizedPath = normalizePath(path, baseUrl);
      const cleanPath = typeof normalizedPath === "string" ? coercePath(normalizedPath) : normalizedPath;
      const cleanUrl2 = (0, import_getCleanUrl.getCleanUrl)(url);
      const result = (0, import_path_to_regexp.match)(cleanPath, { decode: decodeURIComponent })(cleanUrl2);
      const params = result && result.params || {};
      return {
        matches: result !== false,
        params
      };
    }
    var import_headers_polyfill8 = require_lib3();
    var import_headers_polyfill7 = require_lib3();
    function compose(...fns) {
      return (...args) => {
        return fns.reduceRight((leftFn, rightFn) => {
          return leftFn instanceof Promise ? Promise.resolve(leftFn).then(rightFn) : rightFn(leftFn);
        }, args[0]);
      };
    }
    var defaultResponse = {
      status: 200,
      statusText: "OK",
      body: null,
      delay: 0,
      once: false,
      passthrough: false
    };
    var defaultResponseTransformers = [];
    function createResponseComposition(responseOverrides, defaultTransformers = defaultResponseTransformers) {
      return async (...transformers) => {
        const initialResponse = Object.assign(
          {},
          defaultResponse,
          {
            headers: new import_headers_polyfill7.Headers({
              "x-powered-by": "msw"
            })
          },
          responseOverrides
        );
        const resolvedTransformers = [
          ...defaultTransformers,
          ...transformers
        ].filter(Boolean);
        const resolvedResponse = resolvedTransformers.length > 0 ? compose(...resolvedTransformers)(initialResponse) : initialResponse;
        return resolvedResponse;
      };
    }
    var response = Object.assign(createResponseComposition(), {
      once: createResponseComposition({ once: true }),
      networkError(message) {
        throw new NetworkError(message);
      }
    });
    var SOURCE_FRAME = /[\/\\]msw[\/\\]src[\/\\](.+)/;
    var BUILD_FRAME = /(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/;
    function getCallFrame(error2) {
      const stack = error2.stack;
      if (!stack) {
        return;
      }
      const frames = stack.split("\n").slice(1);
      const declarationFrame = frames.find((frame) => {
        return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));
      });
      if (!declarationFrame) {
        return;
      }
      const declarationPath = declarationFrame.replace(/\s*at [^()]*\(([^)]+)\)/, "$1").replace(/^@/, "");
      return declarationPath;
    }
    function isIterable(fn) {
      if (!fn) {
        return false;
      }
      return typeof fn[Symbol.iterator] == "function";
    }
    var defaultContext = {
      status,
      set,
      delay,
      fetch: fetch2
    };
    var RequestHandler = class {
      constructor(options) {
        this.shouldSkip = false;
        this.ctx = options.ctx || defaultContext;
        this.resolver = options.resolver;
        const callFrame = getCallFrame(new Error());
        this.info = {
          ...options.info,
          callFrame
        };
      }
      parse(_request, _resolutionContext) {
        return null;
      }
      test(request, resolutionContext) {
        return this.predicate(
          request,
          this.parse(request, resolutionContext),
          resolutionContext
        );
      }
      getPublicRequest(request, _parsedResult) {
        return request;
      }
      markAsSkipped(shouldSkip = true) {
        this.shouldSkip = shouldSkip;
      }
      async run(request, resolutionContext) {
        if (this.shouldSkip) {
          return null;
        }
        const parsedResult = this.parse(request, resolutionContext);
        const shouldIntercept = this.predicate(
          request,
          parsedResult,
          resolutionContext
        );
        if (!shouldIntercept) {
          return null;
        }
        const publicRequest = this.getPublicRequest(request, parsedResult);
        const executeResolver = this.wrapResolver(this.resolver);
        const mockedResponse = await executeResolver(
          publicRequest,
          response,
          this.ctx
        );
        return this.createExecutionResult(
          parsedResult,
          publicRequest,
          mockedResponse
        );
      }
      wrapResolver(resolver) {
        return async (req, res, ctx) => {
          const result = this.resolverGenerator || await resolver(req, res, ctx);
          if (isIterable(result)) {
            const { value, done } = result[Symbol.iterator]().next();
            const nextResponse = await value;
            if (!nextResponse && done) {
              return this.resolverGeneratorResult;
            }
            if (!this.resolverGenerator) {
              this.resolverGenerator = result;
            }
            this.resolverGeneratorResult = nextResponse;
            return nextResponse;
          }
          return result;
        };
      }
      createExecutionResult(parsedResult, request, response2) {
        return {
          handler: this,
          parsedResult: parsedResult || null,
          request,
          response: response2 || null
        };
      }
    };
    var RESTMethods = ((RESTMethods2) => {
      RESTMethods2["HEAD"] = "HEAD";
      RESTMethods2["GET"] = "GET";
      RESTMethods2["POST"] = "POST";
      RESTMethods2["PUT"] = "PUT";
      RESTMethods2["PATCH"] = "PATCH";
      RESTMethods2["OPTIONS"] = "OPTIONS";
      RESTMethods2["DELETE"] = "DELETE";
      return RESTMethods2;
    })(RESTMethods || {});
    var restContext = {
      ...defaultContext,
      cookie,
      body,
      text,
      json,
      xml
    };
    var RestRequest = class extends MockedRequest {
      constructor(request, params) {
        super(request.url, {
          ...request,
          body: request["_body"]
        });
        this.params = params;
        this.id = request.id;
      }
    };
    var RestHandler = class extends RequestHandler {
      constructor(method, path, resolver) {
        super({
          info: {
            header: `${method} ${path}`,
            path,
            method
          },
          ctx: restContext,
          resolver
        });
        this.checkRedundantQueryParameters();
      }
      checkRedundantQueryParameters() {
        const { method, path } = this.info;
        if (path instanceof RegExp) {
          return;
        }
        const url = cleanUrl(path);
        if (url === path) {
          return;
        }
        const searchParams = getSearchParams(path);
        const queryParams = [];
        searchParams.forEach((_, paramName) => {
          queryParams.push(paramName);
        });
        devUtils.warn(
          `Found a redundant usage of query parameters in the request handler URL for "${method} ${path}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`
        );
      }
      parse(request, resolutionContext) {
        return matchRequestUrl(
          request.url,
          this.info.path,
          resolutionContext == null ? void 0 : resolutionContext.baseUrl
        );
      }
      getPublicRequest(request, parsedResult) {
        return new RestRequest(request, parsedResult.params || {});
      }
      predicate(request, parsedResult) {
        const matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);
        return matchesMethod && parsedResult.matches;
      }
      log(request, response2) {
        const publicUrl = getPublicUrlFromRequest(request);
        const loggedRequest = prepareRequest(request);
        const loggedResponse = prepareResponse(response2);
        const statusColor = getStatusCodeColor(response2.status);
        console.groupCollapsed(
          devUtils.formatMessage("%s %s %s (%c%s%c)"),
          getTimestamp(),
          request.method,
          publicUrl,
          `color:${statusColor}`,
          `${response2.status} ${response2.statusText}`,
          "color:inherit"
        );
        console.log("Request", loggedRequest);
        console.log("Handler:", this);
        console.log("Response", loggedResponse);
        console.groupEnd();
      }
    };
    var import_outvariant3 = require_lib5();
    var field = (fieldName, fieldValue) => {
      return (res) => {
        validateFieldName(fieldName);
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { [fieldName]: fieldValue });
        return json(nextBody)(res);
      };
    };
    function validateFieldName(fieldName) {
      (0, import_outvariant3.invariant)(
        fieldName.trim() !== "",
        devUtils.formatMessage(
          "Failed to set a custom field on a GraphQL response: field name cannot be empty."
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "data",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?',
          fieldName
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "errors",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?',
          fieldName
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "extensions",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?',
          fieldName
        )
      );
    }
    function tryCatch(fn, onException) {
      try {
        const result = fn();
        return result;
      } catch (error2) {
        onException == null ? void 0 : onException(error2);
      }
    }
    var graphqlContext = {
      ...defaultContext,
      data,
      extensions,
      errors,
      cookie,
      field
    };
    function isDocumentNode(value) {
      if (value == null) {
        return false;
      }
      return typeof value === "object" && "kind" in value && "definitions" in value;
    }
    var GraphQLRequest = class extends MockedRequest {
      constructor(request, variables, operationName) {
        super(request.url, {
          ...request,
          body: request["_body"]
        });
        this.variables = variables;
        this.operationName = operationName;
      }
    };
    var GraphQLHandler = class extends RequestHandler {
      constructor(operationType, operationName, endpoint, resolver) {
        let resolvedOperationName = operationName;
        if (isDocumentNode(operationName)) {
          const parsedNode = parseDocumentNode(operationName);
          if (parsedNode.operationType !== operationType) {
            throw new Error(
              `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${operationType}", but got "${parsedNode.operationType}").`
            );
          }
          if (!parsedNode.operationName) {
            throw new Error(
              `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`
            );
          }
          resolvedOperationName = parsedNode.operationName;
        }
        const header = operationType === "all" ? `${operationType} (origin: ${endpoint.toString()})` : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;
        super({
          info: {
            header,
            operationType,
            operationName: resolvedOperationName
          },
          ctx: graphqlContext,
          resolver
        });
        this.endpoint = endpoint;
      }
      parse(request) {
        return tryCatch(
          () => parseGraphQLRequest(request),
          (error2) => console.error(error2.message)
        );
      }
      getPublicRequest(request, parsedResult) {
        var _a2, _b;
        return new GraphQLRequest(
          request,
          (_a2 = parsedResult == null ? void 0 : parsedResult.variables) != null ? _a2 : {},
          (_b = parsedResult == null ? void 0 : parsedResult.operationName) != null ? _b : ""
        );
      }
      predicate(request, parsedResult) {
        if (!parsedResult) {
          return false;
        }
        if (!parsedResult.operationName && this.info.operationType !== "all") {
          const publicUrl = getPublicUrlFromRequest(request);
          devUtils.warn(`Failed to intercept a GraphQL request at "${request.method} ${publicUrl}": anonymous GraphQL operations are not supported.

Consider naming this operation or using "graphql.operation()" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `);
          return false;
        }
        const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint);
        const hasMatchingOperationType = this.info.operationType === "all" || parsedResult.operationType === this.info.operationType;
        const hasMatchingOperationName = this.info.operationName instanceof RegExp ? this.info.operationName.test(parsedResult.operationName || "") : parsedResult.operationName === this.info.operationName;
        return hasMatchingUrl.matches && hasMatchingOperationType && hasMatchingOperationName;
      }
      log(request, response2, parsedRequest) {
        const loggedRequest = prepareRequest(request);
        const loggedResponse = prepareResponse(response2);
        const statusColor = getStatusCodeColor(response2.status);
        const requestInfo = (parsedRequest == null ? void 0 : parsedRequest.operationName) ? `${parsedRequest == null ? void 0 : parsedRequest.operationType} ${parsedRequest == null ? void 0 : parsedRequest.operationName}` : `anonymous ${parsedRequest == null ? void 0 : parsedRequest.operationType}`;
        console.groupCollapsed(
          devUtils.formatMessage("%s %s (%c%s%c)"),
          getTimestamp(),
          `${requestInfo}`,
          `color:${statusColor}`,
          `${response2.status} ${response2.statusText}`,
          "color:inherit"
        );
        console.log("Request:", loggedRequest);
        console.log("Handler:", this);
        console.log("Response:", loggedResponse);
        console.groupEnd();
      }
    };
    var MAX_MATCH_SCORE = 3;
    var MAX_SUGGESTION_COUNT = 4;
    var TYPE_MATCH_DELTA = 0.5;
    function groupHandlersByType(handlers) {
      return handlers.reduce(
        (groups, handler) => {
          if (handler instanceof RestHandler) {
            groups.rest.push(handler);
          }
          if (handler instanceof GraphQLHandler) {
            groups.graphql.push(handler);
          }
          return groups;
        },
        {
          rest: [],
          graphql: []
        }
      );
    }
    function getRestHandlerScore() {
      return (request, handler) => {
        const { path, method } = handler.info;
        if (path instanceof RegExp || method instanceof RegExp) {
          return Infinity;
        }
        const hasSameMethod = isStringEqual(request.method, method);
        const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;
        const requestPublicUrl = getPublicUrlFromRequest(request);
        const score = (0, import_js_levenshtein.default)(requestPublicUrl, path);
        return score - methodScoreDelta;
      };
    }
    function getGraphQLHandlerScore(parsedQuery) {
      return (_, handler) => {
        if (typeof parsedQuery.operationName === "undefined") {
          return Infinity;
        }
        const { operationType, operationName } = handler.info;
        if (typeof operationName !== "string") {
          return Infinity;
        }
        const hasSameOperationType = parsedQuery.operationType === operationType;
        const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;
        const score = (0, import_js_levenshtein.default)(parsedQuery.operationName, operationName);
        return score - operationTypeScoreDelta;
      };
    }
    function getSuggestedHandler(request, handlers, getScore) {
      const suggestedHandlers = handlers.reduce((suggestions, handler) => {
        const score = getScore(request, handler);
        return suggestions.concat([[score, handler]]);
      }, []).sort(([leftScore], [rightScore]) => leftScore - rightScore).filter(([score]) => score <= MAX_MATCH_SCORE).slice(0, MAX_SUGGESTION_COUNT).map(([, handler]) => handler);
      return suggestedHandlers;
    }
    function getSuggestedHandlersMessage(handlers) {
      if (handlers.length > 1) {
        return `Did you mean to request one of the following resources instead?

${handlers.map((handler) => `  • ${handler.info.header}`).join("\n")}`;
      }
      return `Did you mean to request "${handlers[0].info.header}" instead?`;
    }
    function onUnhandledRequest(request, handlers, strategy = "warn") {
      const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request));
      function generateHandlerSuggestion() {
        const handlerGroups = groupHandlersByType(handlers);
        const relevantHandlers = parsedGraphQLQuery ? handlerGroups.graphql : handlerGroups.rest;
        const suggestedHandlers = getSuggestedHandler(
          request,
          relevantHandlers,
          parsedGraphQLQuery ? getGraphQLHandlerScore(parsedGraphQLQuery) : getRestHandlerScore()
        );
        return suggestedHandlers.length > 0 ? getSuggestedHandlersMessage(suggestedHandlers) : "";
      }
      function generateUnhandledRequestMessage() {
        const publicUrl = getPublicUrlFromRequest(request);
        const requestHeader = parsedGraphQLQuery ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})` : `${request.method} ${publicUrl}`;
        const handlerSuggestion = generateHandlerSuggestion();
        const messageTemplate = [
          `captured a request without a matching request handler:`,
          `  • ${requestHeader}`,
          handlerSuggestion,
          `If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks`
        ].filter(Boolean);
        return messageTemplate.join("\n\n");
      }
      function applyStrategy(strategy2) {
        const message = generateUnhandledRequestMessage();
        switch (strategy2) {
          case "error": {
            devUtils.error("Error: %s", message);
            throw new Error(
              devUtils.formatMessage(
                'Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.'
              )
            );
          }
          case "warn": {
            devUtils.warn("Warning: %s", message);
            break;
          }
          case "bypass":
            break;
          default:
            throw new Error(
              devUtils.formatMessage(
                'Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.',
                strategy2
              )
            );
        }
      }
      if (typeof strategy === "function") {
        strategy(request, {
          warning: applyStrategy.bind(null, "warn"),
          error: applyStrategy.bind(null, "error")
        });
        return;
      }
      applyStrategy(strategy);
    }
    var import_cookies2 = require_lib10();
    function readResponseCookies(request, response2) {
      import_cookies2.store.add({ ...request, url: request.url.toString() }, response2);
      import_cookies2.store.persist();
    }
    async function handleRequest(request, handlers, options, emitter, handleRequestOptions) {
      var _a2, _b, _c, _d, _e, _f;
      emitter.emit("request:start", request);
      if (request.headers.get("x-msw-bypass") === "true") {
        emitter.emit("request:end", request);
        (_a2 = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _a2.call(handleRequestOptions, request);
        return;
      }
      const [lookupError, lookupResult] = await (0, import_until2.until)(() => {
        return getResponse(
          request,
          handlers,
          handleRequestOptions == null ? void 0 : handleRequestOptions.resolutionContext
        );
      });
      if (lookupError) {
        emitter.emit("unhandledException", lookupError, request);
        throw lookupError;
      }
      const { handler, response: response2 } = lookupResult;
      if (!handler) {
        onUnhandledRequest(request, handlers, options.onUnhandledRequest);
        emitter.emit("request:unhandled", request);
        emitter.emit("request:end", request);
        (_b = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _b.call(handleRequestOptions, request);
        return;
      }
      if (!response2) {
        devUtils.warn(
          `Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.

  • %s
    %s`,
          response2,
          handler.info.header,
          handler.info.callFrame
        );
        emitter.emit("request:end", request);
        (_c = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _c.call(handleRequestOptions, request);
        return;
      }
      if (response2.passthrough) {
        emitter.emit("request:end", request);
        (_d = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _d.call(handleRequestOptions, request);
        return;
      }
      readResponseCookies(request, response2);
      emitter.emit("request:match", request);
      const requiredLookupResult = lookupResult;
      const transformedResponse = ((_e = handleRequestOptions == null ? void 0 : handleRequestOptions.transformResponse) == null ? void 0 : _e.call(handleRequestOptions, response2)) || response2;
      (_f = handleRequestOptions == null ? void 0 : handleRequestOptions.onMockedResponse) == null ? void 0 : _f.call(
        handleRequestOptions,
        transformedResponse,
        requiredLookupResult
      );
      emitter.emit("request:end", request);
      return transformedResponse;
    }
    var import_headers_polyfill9 = require_lib3();
    async function serializeResponse(response2) {
      return {
        status: response2.status,
        statusText: response2.statusText,
        headers: (0, import_headers_polyfill9.flattenHeadersObject)((0, import_headers_polyfill9.headersToObject)(response2.headers)),
        body: await response2.clone().text()
      };
    }
    var createRequestListener = (context2, options) => {
      return async (event, message) => {
        var _a2;
        const messageChannel = new WorkerChannel(event.ports[0]);
        const request = parseWorkerRequest(message.payload);
        try {
          await handleRequest(
            request,
            context2.requestHandlers,
            options,
            context2.emitter,
            {
              transformResponse,
              onPassthroughResponse() {
                messageChannel.postMessage("NOT_FOUND");
              },
              async onMockedResponse(response2, { handler, publicRequest, parsedRequest }) {
                if (response2.body instanceof ReadableStream) {
                  throw new Error(
                    devUtils.formatMessage(
                      'Failed to construct a mocked response with a "ReadableStream" body: mocked streams are not supported. Follow https://github.com/mswjs/msw/issues/1336 for more details.'
                    )
                  );
                }
                const responseInstance = new Response(response2.body, response2);
                const responseForLogs = responseInstance.clone();
                const responseBodyBuffer = await responseInstance.arrayBuffer();
                const responseBody = response2.body == null ? null : responseBodyBuffer;
                messageChannel.postMessage(
                  "MOCK_RESPONSE",
                  {
                    ...response2,
                    body: responseBody
                  },
                  [responseBodyBuffer]
                );
                if (!options.quiet) {
                  context2.emitter.once("response:mocked", async () => {
                    handler.log(
                      publicRequest,
                      await serializeResponse(responseForLogs),
                      parsedRequest
                    );
                  });
                }
              }
            }
          );
        } catch (error2) {
          if (error2 instanceof NetworkError) {
            messageChannel.postMessage("NETWORK_ERROR", {
              name: error2.name,
              message: error2.message
            });
            return;
          }
          if (error2 instanceof Error) {
            devUtils.error(
              `Uncaught exception in the request handler for "%s %s":

%s

This exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,
              request.method,
              request.url,
              (_a2 = error2.stack) != null ? _a2 : error2
            );
            messageChannel.postMessage("MOCK_RESPONSE", {
              status: 500,
              statusText: "Request Handler Error",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                name: error2.name,
                message: error2.message,
                stack: error2.stack
              })
            });
          }
        }
      };
    };
    function transformResponse(response2) {
      return {
        status: response2.status,
        statusText: response2.statusText,
        headers: response2.headers.all(),
        body: response2.body,
        delay: response2.delay
      };
    }
    async function requestIntegrityCheck(context2, serviceWorker) {
      context2.workerChannel.send("INTEGRITY_CHECK_REQUEST");
      const { payload: actualChecksum } = await context2.events.once(
        "INTEGRITY_CHECK_RESPONSE"
      );
      if (actualChecksum !== "3d6b9f06410d179a7f7404d4bf4c3c70") {
        throw new Error(
          `Currently active Service Worker (${actualChecksum}) is behind the latest published one (${"3d6b9f06410d179a7f7404d4bf4c3c70"}).`
        );
      }
      return serviceWorker;
    }
    var import_until3 = require_lib6();
    function deferNetworkRequestsUntil(predicatePromise) {
      const originalXhrSend = window.XMLHttpRequest.prototype.send;
      window.XMLHttpRequest.prototype.send = function(...args) {
        (0, import_until3.until)(() => predicatePromise).then(() => {
          window.XMLHttpRequest.prototype.send = originalXhrSend;
          this.send(...args);
        });
      };
      const originalFetch = window.fetch;
      window.fetch = async (...args) => {
        await (0, import_until3.until)(() => predicatePromise);
        window.fetch = originalFetch;
        return window.fetch(...args);
      };
    }
    function createResponseListener(context2) {
      return (_, message) => {
        var _a2;
        const { payload: responseJson } = message;
        if ((_a2 = responseJson.type) == null ? void 0 : _a2.includes("opaque")) {
          return;
        }
        const response2 = new Response(responseJson.body || null, responseJson);
        const isMockedResponse = response2.headers.get("x-powered-by") === "msw";
        if (isMockedResponse) {
          context2.emitter.emit("response:mocked", response2, responseJson.requestId);
        } else {
          context2.emitter.emit("response:bypass", response2, responseJson.requestId);
        }
      };
    }
    function validateWorkerScope(registration, options) {
      if (!(options == null ? void 0 : options.quiet) && !location.href.startsWith(registration.scope)) {
        devUtils.warn(
          `Cannot intercept requests on this page because it's outside of the worker's scope ("${registration.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.

- (Recommended) Register the worker at the root level ("/") of your application.
- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.`
        );
      }
    }
    var createStartHandler = (context2) => {
      return function start(options, customOptions) {
        const startWorkerInstance = async () => {
          context2.events.removeAllListeners();
          context2.workerChannel.on(
            "REQUEST",
            createRequestListener(context2, options)
          );
          context2.workerChannel.on("RESPONSE", createResponseListener(context2));
          const instance = await getWorkerInstance(
            options.serviceWorker.url,
            options.serviceWorker.options,
            options.findWorker
          );
          const [worker, registration] = instance;
          if (!worker) {
            const missingWorkerMessage = (customOptions == null ? void 0 : customOptions.findWorker) ? devUtils.formatMessage(
              `Failed to locate the Service Worker registration using a custom "findWorker" predicate.

Please ensure that the custom predicate properly locates the Service Worker registration at "%s".
More details: https://mswjs.io/docs/api/setup-worker/start#findworker
`,
              options.serviceWorker.url
            ) : devUtils.formatMessage(
              `Failed to locate the Service Worker registration.

This most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.

Please consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,
              options.serviceWorker.url,
              location.host
            );
            throw new Error(missingWorkerMessage);
          }
          context2.worker = worker;
          context2.registration = registration;
          context2.events.addListener(window, "beforeunload", () => {
            if (worker.state !== "redundant") {
              context2.workerChannel.send("CLIENT_CLOSED");
            }
            window.clearInterval(context2.keepAliveInterval);
          });
          const [integrityError] = await (0, import_until4.until)(
            () => requestIntegrityCheck(context2, worker)
          );
          if (integrityError) {
            devUtils.error(`Detected outdated Service Worker: ${integrityError.message}

The mocking is still enabled, but it's highly recommended that you update your Service Worker by running:

$ npx msw init <PUBLIC_DIR>

This is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.
If this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `);
          }
          context2.keepAliveInterval = window.setInterval(
            () => context2.workerChannel.send("KEEPALIVE_REQUEST"),
            5e3
          );
          validateWorkerScope(registration, context2.startOptions);
          return registration;
        };
        const workerRegistration = startWorkerInstance().then(
          async (registration) => {
            const pendingInstance = registration.installing || registration.waiting;
            if (pendingInstance) {
              await new Promise((resolve) => {
                pendingInstance.addEventListener("statechange", () => {
                  if (pendingInstance.state === "activated") {
                    return resolve();
                  }
                });
              });
            }
            await enableMocking(context2, options).catch((error2) => {
              throw new Error(`Failed to enable mocking: ${error2 == null ? void 0 : error2.message}`);
            });
            return registration;
          }
        );
        if (options.waitUntilReady) {
          deferNetworkRequestsUntil(workerRegistration);
        }
        return workerRegistration;
      };
    };
    function printStopMessage(args = {}) {
      if (args.quiet) {
        return;
      }
      console.log(
        `%c${devUtils.formatMessage("Mocking disabled.")}`,
        "color:orangered;font-weight:bold;"
      );
    }
    var createStop = (context2) => {
      return function stop() {
        var _a2;
        if (!context2.isMockingEnabled) {
          devUtils.warn(
            'Found a redundant "worker.stop()" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this "worker.stop()" call.'
          );
          return;
        }
        context2.workerChannel.send("MOCK_DEACTIVATE");
        context2.isMockingEnabled = false;
        window.clearInterval(context2.keepAliveInterval);
        printStopMessage({ quiet: (_a2 = context2.startOptions) == null ? void 0 : _a2.quiet });
      };
    };
    var DEFAULT_START_OPTIONS = {
      serviceWorker: {
        url: "/mockServiceWorker.js",
        options: null
      },
      quiet: false,
      waitUntilReady: true,
      onUnhandledRequest: "warn",
      findWorker(scriptURL, mockServiceWorkerUrl) {
        return scriptURL === mockServiceWorkerUrl;
      }
    };
    var import_interceptors3 = require_lib9();
    var import_fetch3 = require_fetch();
    var import_XMLHttpRequest = require_XMLHttpRequest();
    function createResponseFromIsomorphicResponse(response2) {
      return new Response(response2.body, {
        status: response2.status,
        statusText: response2.statusText,
        headers: response2.headers
      });
    }
    function createFallbackRequestListener(context2, options) {
      const interceptor = new import_interceptors3.BatchInterceptor({
        name: "fallback",
        interceptors: [new import_fetch3.FetchInterceptor(), new import_XMLHttpRequest.XMLHttpRequestInterceptor()]
      });
      interceptor.on("request", async (request) => {
        const mockedRequest = new MockedRequest(request.url, {
          ...request,
          body: await request.arrayBuffer()
        });
        const response2 = await handleRequest(
          mockedRequest,
          context2.requestHandlers,
          options,
          context2.emitter,
          {
            transformResponse(response3) {
              return {
                status: response3.status,
                statusText: response3.statusText,
                headers: response3.headers.all(),
                body: response3.body,
                delay: response3.delay
              };
            },
            onMockedResponse(_, { handler, publicRequest, parsedRequest }) {
              if (!options.quiet) {
                context2.emitter.once("response:mocked", async (response3) => {
                  handler.log(
                    publicRequest,
                    await serializeResponse(response3),
                    parsedRequest
                  );
                });
              }
            }
          }
        );
        if (response2) {
          request.respondWith(response2);
        }
      });
      interceptor.on("response", (request, response2) => {
        if (!request.id) {
          return;
        }
        const browserResponse = createResponseFromIsomorphicResponse(response2);
        if (response2.headers.get("x-powered-by") === "msw") {
          context2.emitter.emit("response:mocked", browserResponse, request.id);
        } else {
          context2.emitter.emit("response:bypass", browserResponse, request.id);
        }
      });
      interceptor.apply();
      return interceptor;
    }
    function createFallbackStart(context2) {
      return async function start(options) {
        context2.fallbackInterceptor = createFallbackRequestListener(
          context2,
          options
        );
        printStartMessage({
          message: "Mocking enabled (fallback mode).",
          quiet: options.quiet
        });
        return void 0;
      };
    }
    function createFallbackStop(context2) {
      return function stop() {
        var _a2, _b;
        (_a2 = context2.fallbackInterceptor) == null ? void 0 : _a2.dispose();
        printStopMessage({ quiet: (_b = context2.startOptions) == null ? void 0 : _b.quiet });
      };
    }
    var import_outvariant4 = require_lib5();
    var import_strict_event_emitter = require_lib12();
    function pipeEvents(source, destination) {
      const rawEmit = source.emit;
      if (rawEmit._isPiped) {
        return;
      }
      source.emit = function(event, ...data2) {
        destination.emit(event, ...data2);
        return rawEmit.call(this, event, ...data2);
      };
      source.emit._isPiped = true;
    }
    function toReadonlyArray(source) {
      const clone = [...source];
      Object.freeze(clone);
      return clone;
    }
    var SetupApi = class {
      constructor(...initialHandlers) {
        this.validateHandlers(...initialHandlers);
        this.initialHandlers = toReadonlyArray(initialHandlers);
        this.currentHandlers = [...initialHandlers];
        this.emitter = new import_strict_event_emitter.Emitter();
        this.publicEmitter = new import_strict_event_emitter.Emitter();
        pipeEvents(this.emitter, this.publicEmitter);
        this.events = this.createLifeCycleEvents();
      }
      validateHandlers(...handlers) {
        for (const handler of handlers) {
          (0, import_outvariant4.invariant)(
            !Array.isArray(handler),
            devUtils.formatMessage(
              'Failed to construct "%s" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.'
            ),
            this.constructor.name
          );
        }
      }
      dispose() {
        this.emitter.removeAllListeners();
        this.publicEmitter.removeAllListeners();
      }
      use(...runtimeHandlers) {
        this.currentHandlers.unshift(...runtimeHandlers);
      }
      restoreHandlers() {
        this.currentHandlers.forEach((handler) => {
          handler.markAsSkipped(false);
        });
      }
      resetHandlers(...nextHandlers) {
        this.currentHandlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];
      }
      listHandlers() {
        return toReadonlyArray(this.currentHandlers);
      }
      createLifeCycleEvents() {
        return {
          on: (...args) => {
            return this.publicEmitter.on(...args);
          },
          removeListener: (...args) => {
            return this.publicEmitter.removeListener(...args);
          },
          removeAllListeners: (...args) => {
            return this.publicEmitter.removeAllListeners(...args);
          }
        };
      }
    };
    var SetupWorkerApi = class extends SetupApi {
      constructor(...handlers) {
        super(...handlers);
        this.startHandler = null;
        this.stopHandler = null;
        (0, import_outvariant5.invariant)(
          !(0, import_is_node_process3.isNodeProcess)(),
          devUtils.formatMessage(
            "Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead."
          )
        );
        this.listeners = [];
        this.context = this.createWorkerContext();
      }
      createWorkerContext() {
        const context2 = {
          isMockingEnabled: false,
          startOptions: null,
          worker: null,
          registration: null,
          requestHandlers: this.currentHandlers,
          emitter: this.emitter,
          workerChannel: {
            on: (eventType, callback) => {
              this.context.events.addListener(
                navigator.serviceWorker,
                "message",
                (event) => {
                  if (event.source !== this.context.worker) {
                    return;
                  }
                  const message = event.data;
                  if (!message) {
                    return;
                  }
                  if (message.type === eventType) {
                    callback(event, message);
                  }
                }
              );
            },
            send: (type) => {
              var _a2;
              (_a2 = this.context.worker) == null ? void 0 : _a2.postMessage(type);
            }
          },
          events: {
            addListener: (target, eventType, callback) => {
              target.addEventListener(eventType, callback);
              this.listeners.push({ eventType, target, callback });
              return () => {
                target.removeEventListener(eventType, callback);
              };
            },
            removeAllListeners: () => {
              for (const { target, eventType, callback } of this.listeners) {
                target.removeEventListener(eventType, callback);
              }
              this.listeners = [];
            },
            once: (eventType) => {
              const bindings = [];
              return new Promise((resolve, reject) => {
                const handleIncomingMessage = (event) => {
                  try {
                    const message = event.data;
                    if (message.type === eventType) {
                      resolve(message);
                    }
                  } catch (error2) {
                    reject(error2);
                  }
                };
                bindings.push(
                  this.context.events.addListener(
                    navigator.serviceWorker,
                    "message",
                    handleIncomingMessage
                  ),
                  this.context.events.addListener(
                    navigator.serviceWorker,
                    "messageerror",
                    reject
                  )
                );
              }).finally(() => {
                bindings.forEach((unbind) => unbind());
              });
            }
          },
          useFallbackMode: !("serviceWorker" in navigator) || location.protocol === "file:"
        };
        Object.defineProperties(context2, {
          requestHandlers: {
            get: () => this.currentHandlers
          }
        });
        this.startHandler = context2.useFallbackMode ? createFallbackStart(context2) : createStartHandler(context2);
        this.stopHandler = context2.useFallbackMode ? createFallbackStop(context2) : createStop(context2);
        return context2;
      }
      async start(options = {}) {
        this.context.startOptions = mergeRight(
          DEFAULT_START_OPTIONS,
          options
        );
        return await this.startHandler(this.context.startOptions, options);
      }
      printHandlers() {
        const handlers = this.listHandlers();
        handlers.forEach((handler) => {
          const { header, callFrame } = handler.info;
          const pragma = handler.info.hasOwnProperty("operationType") ? "[graphql]" : "[rest]";
          console.groupCollapsed(`${pragma} ${header}`);
          if (callFrame) {
            console.log(`Declaration: ${callFrame}`);
          }
          console.log("Handler:", handler);
          console.groupEnd();
        });
      }
      stop() {
        super.dispose();
        this.context.events.removeAllListeners();
        this.context.emitter.removeAllListeners();
        this.stopHandler();
      }
    };
    function setupWorker(...handlers) {
      return new SetupWorkerApi(...handlers);
    }
    function createRestHandler(method) {
      return (path, resolver) => {
        return new RestHandler(method, path, resolver);
      };
    }
    var rest = {
      all: createRestHandler(/.+/),
      head: createRestHandler(
        "HEAD"
        /* HEAD */
      ),
      get: createRestHandler(
        "GET"
        /* GET */
      ),
      post: createRestHandler(
        "POST"
        /* POST */
      ),
      put: createRestHandler(
        "PUT"
        /* PUT */
      ),
      delete: createRestHandler(
        "DELETE"
        /* DELETE */
      ),
      patch: createRestHandler(
        "PATCH"
        /* PATCH */
      ),
      options: createRestHandler(
        "OPTIONS"
        /* OPTIONS */
      )
    };
    function createScopedGraphQLHandler(operationType, url) {
      return (operationName, resolver) => {
        return new GraphQLHandler(
          operationType,
          operationName,
          url,
          resolver
        );
      };
    }
    function createGraphQLOperationHandler(url) {
      return (resolver) => {
        return new GraphQLHandler(
          "all",
          new RegExp(".*"),
          url,
          resolver
        );
      };
    }
    var standardGraphQLHandlers = {
      operation: createGraphQLOperationHandler("*"),
      query: createScopedGraphQLHandler("query", "*"),
      mutation: createScopedGraphQLHandler("mutation", "*")
    };
    function createGraphQLLink(url) {
      return {
        operation: createGraphQLOperationHandler(url),
        query: createScopedGraphQLHandler("query", url),
        mutation: createScopedGraphQLHandler("mutation", url)
      };
    }
    var graphql = {
      ...standardGraphQLHandlers,
      link: createGraphQLLink
    };
    checkGlobals();
  }
});

// browser-external:timers
var require_timers = __commonJS({
  "browser-external:timers"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "timers" has been externalized for browser compatibility. Cannot access "timers.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/concatChunkToBuffer.js
var require_concatChunkToBuffer = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/concatChunkToBuffer.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatChunkToBuffer = void 0;
    function concatChunkToBuffer(chunk, buffer) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk);
      }
      return buffer.concat(chunk);
    }
    exports.concatChunkToBuffer = concatChunkToBuffer;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestEndArgs.js
var require_normalizeClientRequestEndArgs = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestEndArgs.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeClientRequestEndArgs = void 0;
    var debug2 = require_browser2()("http normalizeClientRequestEndArgs");
    function normalizeClientRequestEndArgs() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      debug2("arguments", args);
      var normalizedArgs = new Array(3).fill(null).map(function(value, index) {
        return args[index] || value;
      });
      normalizedArgs.sort(function(a, b) {
        if (typeof a === "function") {
          return 1;
        }
        if (typeof b === "function") {
          return -1;
        }
        if (typeof a === "string" && typeof b === "string") {
          return normalizedArgs.indexOf(a) - normalizedArgs.indexOf(b);
        }
        return 0;
      });
      debug2("normalized args", normalizedArgs);
      return normalizedArgs;
    }
    exports.normalizeClientRequestEndArgs = normalizeClientRequestEndArgs;
  }
});

// browser-external:zlib
var require_zlib = __commonJS({
  "browser-external:zlib"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "zlib" has been externalized for browser compatibility. Cannot access "zlib.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/getIncomingMessageBody.js
var require_getIncomingMessageBody = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/getIncomingMessageBody.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIncomingMessageBody = void 0;
    var debug_1 = require_browser2();
    var stream_1 = require_stream();
    var zlib = __importStar(require_zlib());
    var log = debug_1.debug("http getIncomingMessageBody");
    function getIncomingMessageBody(response) {
      return new Promise(function(resolve, reject) {
        log("cloning the original response...");
        var responseClone = response.pipe(new stream_1.PassThrough());
        var stream = response.headers["content-encoding"] === "gzip" ? responseClone.pipe(zlib.createGunzip()) : responseClone;
        var encoding = response.readableEncoding || "utf8";
        stream.setEncoding(encoding);
        log("using encoding:", encoding);
        var body = "";
        stream.on("data", function(responseBody) {
          log("response body read:", responseBody);
          body += responseBody;
        });
        stream.once("end", function() {
          log("response body end");
          resolve(body);
        });
        stream.once("error", function(error) {
          log("error while reading response body:", error);
          reject(error);
        });
      });
    }
    exports.getIncomingMessageBody = getIncomingMessageBody;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/bodyBufferToString.js
var require_bodyBufferToString = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/bodyBufferToString.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bodyBufferToString = void 0;
    function bodyBufferToString(buffer) {
      var utfEncodedBuffer = buffer.toString("utf8");
      var bufferCopy = Buffer.from(utfEncodedBuffer);
      var isUtf8 = bufferCopy.equals(buffer);
      return isUtf8 ? utfEncodedBuffer : buffer.toString("hex");
    }
    exports.bodyBufferToString = bodyBufferToString;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestWriteArgs.js
var require_normalizeClientRequestWriteArgs = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestWriteArgs.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeClientRequestWriteArgs = void 0;
    var debug_1 = require_browser2();
    var log = debug_1.debug("http normalizeWriteArgs");
    function normalizeClientRequestWriteArgs(args) {
      log("normalizing ClientRequest.write arguments...", args);
      var chunk = args[0];
      var encoding = typeof args[1] === "string" ? args[1] : void 0;
      var callback = typeof args[1] === "function" ? args[1] : args[2];
      var writeArgs = [
        chunk,
        encoding,
        callback
      ];
      log("successfully normalized ClientRequest.write arguments:", writeArgs);
      return writeArgs;
    }
    exports.normalizeClientRequestWriteArgs = normalizeClientRequestWriteArgs;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/cloneIncomingMessage.js
var require_cloneIncomingMessage = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/cloneIncomingMessage.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneIncomingMessage = exports.IS_CLONE = void 0;
    var http_1 = require_http();
    var stream_1 = require_stream();
    exports.IS_CLONE = Symbol("isClone");
    function cloneIncomingMessage(message) {
      var clone = message.pipe(new stream_1.PassThrough());
      inheritProperties(message, clone);
      var clonedPrototype = Object.create(http_1.IncomingMessage.prototype);
      getPrototypes(clone).forEach(function(prototype) {
        inheritProperties(prototype, clonedPrototype);
      });
      Object.setPrototypeOf(clone, clonedPrototype);
      Object.defineProperty(clone, exports.IS_CLONE, {
        enumerable: true,
        value: true
      });
      return clone;
    }
    exports.cloneIncomingMessage = cloneIncomingMessage;
    function getPrototypes(source) {
      var prototypes = [];
      var current = source;
      while (current = Object.getPrototypeOf(current)) {
        prototypes.push(current);
      }
      return prototypes;
    }
    function inheritProperties(source, target) {
      var e_1, _a2;
      var properties = __spreadArray(__spreadArray([], __read(Object.getOwnPropertyNames(source))), __read(Object.getOwnPropertySymbols(source)));
      try {
        for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
          var property = properties_1_1.value;
          if (target.hasOwnProperty(property)) {
            continue;
          }
          var descriptor = Object.getOwnPropertyDescriptor(source, property);
          if (!descriptor) {
            continue;
          }
          Object.defineProperty(target, property, descriptor);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (properties_1_1 && !properties_1_1.done && (_a2 = properties_1.return)) _a2.call(properties_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/NodeClientRequest.js
var require_NodeClientRequest = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/NodeClientRequest.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeClientRequest = void 0;
    var http_1 = require_http();
    var until_1 = require_lib6();
    var headers_polyfill_1 = require_lib3();
    var concatChunkToBuffer_1 = require_concatChunkToBuffer();
    var normalizeClientRequestEndArgs_1 = require_normalizeClientRequestEndArgs();
    var toIsoResponse_1 = require_toIsoResponse();
    var getIncomingMessageBody_1 = require_getIncomingMessageBody();
    var bodyBufferToString_1 = require_bodyBufferToString();
    var normalizeClientRequestWriteArgs_1 = require_normalizeClientRequestWriteArgs();
    var cloneIncomingMessage_1 = require_cloneIncomingMessage();
    var IsomorphicRequest_1 = require_IsomorphicRequest();
    var InteractiveIsomorphicRequest_1 = require_InteractiveIsomorphicRequest();
    var bufferUtils_1 = require_bufferUtils();
    var NodeClientRequest = (
      /** @class */
      function(_super) {
        __extends(NodeClientRequest2, _super);
        function NodeClientRequest2(_a2, options) {
          var _b = __read(_a2, 3), url = _b[0], requestOptions = _b[1], callback = _b[2];
          var _this = _super.call(this, requestOptions, callback) || this;
          _this.chunks = [];
          _this.responseSource = "mock";
          _this.requestBody = [];
          _this.log = options.log.extend("request " + requestOptions.method + " " + url.href);
          _this.log("constructing ClientRequest using options:", {
            url,
            requestOptions,
            callback
          });
          _this.url = url;
          _this.options = requestOptions;
          _this.emitter = options.emitter;
          _this.response = new http_1.IncomingMessage(_this.socket);
          return _this;
        }
        NodeClientRequest2.prototype.write = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var _a2 = __read(normalizeClientRequestWriteArgs_1.normalizeClientRequestWriteArgs(args), 3), chunk = _a2[0], encoding = _a2[1], callback = _a2[2];
          this.log("write:", { chunk, encoding, callback });
          this.chunks.push({ chunk, encoding });
          this.requestBody = concatChunkToBuffer_1.concatChunkToBuffer(chunk, this.requestBody);
          this.log("chunk successfully stored!", this.requestBody);
          if (!chunk || chunk.length === 0) {
            this.log("written chunk is empty, skipping callback...");
          } else {
            callback === null || callback === void 0 ? void 0 : callback();
          }
          return true;
        };
        NodeClientRequest2.prototype.end = function() {
          var _this = this;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this.log("end", args);
          var _a2 = __read(normalizeClientRequestEndArgs_1.normalizeClientRequestEndArgs.apply(void 0, __spreadArray([], __read(args))), 3), chunk = _a2[0], encoding = _a2[1], callback = _a2[2];
          this.log("normalized arguments:", { chunk, encoding, callback });
          var requestBody = this.getRequestBody(chunk);
          var isomorphicRequest = this.toIsomorphicRequest(requestBody);
          var interactiveIsomorphicRequest = new InteractiveIsomorphicRequest_1.InteractiveIsomorphicRequest(isomorphicRequest);
          this.log('emitting the "request" event for %d listener(s)...', this.emitter.listenerCount("request"));
          this.emitter.emit("request", interactiveIsomorphicRequest);
          until_1.until(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var _a3, mockedResponse;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, this.emitter.untilIdle("request", function(_a4) {
                      var _b2 = __read(_a4.args, 1), request = _b2[0];
                      return request.id === interactiveIsomorphicRequest.id;
                    })];
                  case 1:
                    _b.sent();
                    return [4, interactiveIsomorphicRequest.respondWith.invoked()];
                  case 2:
                    _a3 = __read.apply(void 0, [_b.sent(), 1]), mockedResponse = _a3[0];
                    this.log("event.respondWith called with:", mockedResponse);
                    return [2, mockedResponse];
                }
              });
            });
          }).then(function(_a3) {
            var e_1, _b;
            var _c = __read(_a3, 2), resolverException = _c[0], mockedResponse = _c[1];
            _this.log("the listeners promise awaited!");
            if (resolverException) {
              _this.log("encountered resolver exception, aborting request...", resolverException);
              _this.emit("error", resolverException);
              _this.terminate();
              return _this;
            }
            if (mockedResponse) {
              _this.log("received mocked response:", mockedResponse);
              _this.responseSource = "mock";
              var isomorphicResponse = toIsoResponse_1.toIsoResponse(mockedResponse);
              _this.respondWith(mockedResponse);
              _this.log(isomorphicResponse.status, isomorphicResponse.statusText, isomorphicResponse.body, "(MOCKED)");
              callback === null || callback === void 0 ? void 0 : callback();
              _this.log('emitting the custom "response" event...');
              _this.emitter.emit("response", isomorphicRequest, isomorphicResponse);
              return _this;
            }
            _this.log("no mocked response received!");
            _this.responseSource = "bypass";
            if (_this.capturedError) {
              _this.emit("error", _this.capturedError);
              return _this;
            }
            _this.log("writing request chunks...", _this.chunks);
            try {
              for (var _d = __values(_this.chunks), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = _e.value, chunk_1 = _f.chunk, encoding_1 = _f.encoding;
                if (encoding_1) {
                  _super.prototype.write.call(_this, chunk_1, encoding_1);
                } else {
                  _super.prototype.write.call(_this, chunk_1);
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            _this.once("error", function(error) {
              _this.log("original request error:", error);
            });
            _this.once("abort", function() {
              _this.log("original request aborted!");
            });
            _this.once("response-internal", function(response) {
              return __awaiter(_this, void 0, void 0, function() {
                var responseBody;
                return __generator(this, function(_a4) {
                  switch (_a4.label) {
                    case 0:
                      return [4, getIncomingMessageBody_1.getIncomingMessageBody(response)];
                    case 1:
                      responseBody = _a4.sent();
                      this.log(response.statusCode, response.statusMessage, responseBody);
                      this.log("original response headers:", response.headers);
                      this.log('emitting the custom "response" event...');
                      this.emitter.emit("response", isomorphicRequest, {
                        status: response.statusCode || 200,
                        statusText: response.statusMessage || "OK",
                        headers: headers_polyfill_1.objectToHeaders(response.headers),
                        body: responseBody
                      });
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            });
            _this.log("performing original request...");
            return _super.prototype.end.apply(_this, __spreadArray([], __read([
              chunk,
              encoding,
              function() {
                _this.log("original request end!");
                callback === null || callback === void 0 ? void 0 : callback();
              }
            ].filter(Boolean))));
          });
          return this;
        };
        NodeClientRequest2.prototype.emit = function(event) {
          var data = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
          }
          this.log("event:%s", event);
          if (event === "response") {
            this.log('found "response" event, cloning the response...');
            try {
              var response = data[0];
              var firstClone = cloneIncomingMessage_1.cloneIncomingMessage(response);
              var secondClone = cloneIncomingMessage_1.cloneIncomingMessage(response);
              this.emit("response-internal", secondClone);
              this.log('response successfully cloned, emitting "response" event...');
              return _super.prototype.emit.apply(this, __spreadArray([event, firstClone], __read(data.slice(1))));
            } catch (error2) {
              this.log("error when cloning response:", error2);
              return _super.prototype.emit.apply(this, __spreadArray([event], __read(data)));
            }
          }
          if (event === "error") {
            var error = data[0];
            var errorCode = error.code || "";
            this.log("error:\n", error);
            if (this.responseSource === "mock" && NodeClientRequest2.suppressErrorCodes.includes(errorCode)) {
              if (!this.capturedError) {
                this.capturedError = error;
                this.log("captured the first error:", this.capturedError);
              }
              return false;
            }
          }
          return _super.prototype.emit.apply(this, __spreadArray([event], __read(data)));
        };
        NodeClientRequest2.prototype.respondWith = function(mockedResponse) {
          var e_2, _a2, _b;
          this.log("responding with a mocked response...", mockedResponse);
          var status = mockedResponse.status, statusText = mockedResponse.statusText, headers = mockedResponse.headers, body = mockedResponse.body;
          this.response.statusCode = status;
          this.response.statusMessage = statusText;
          if (headers) {
            this.response.headers = {};
            try {
              for (var _c = __values(Object.entries(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), headerName = _e[0], headerValue = _e[1];
                (_b = this.response.rawHeaders).push.apply(_b, __spreadArray([headerName], __read(Array.isArray(headerValue) ? headerValue : [headerValue])));
                var insensitiveHeaderName = headerName.toLowerCase();
                var prevHeaders = this.response.headers[insensitiveHeaderName];
                this.response.headers[insensitiveHeaderName] = prevHeaders ? Array.prototype.concat([], prevHeaders, headerValue) : headerValue;
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_d && !_d.done && (_a2 = _c.return)) _a2.call(_c);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          }
          this.log("mocked response headers ready:", headers);
          if (body) {
            this.response.push(Buffer.from(body));
          }
          this.response.push(null);
          this.response.complete = true;
          this.res = this.response;
          this.finished = true;
          Object.defineProperty(this, "writableEnded", {
            value: true
          });
          this.emit("finish");
          this.emit("response", this.response);
          this.terminate();
        };
        NodeClientRequest2.prototype.terminate = function() {
          var _a2;
          (_a2 = this.agent) === null || _a2 === void 0 ? void 0 : _a2.destroy();
        };
        NodeClientRequest2.prototype.getRequestBody = function(chunk) {
          var writtenRequestBody = bodyBufferToString_1.bodyBufferToString(Buffer.concat(this.requestBody));
          this.log("written request body:", writtenRequestBody);
          if (chunk) {
            this.requestBody = concatChunkToBuffer_1.concatChunkToBuffer(chunk, this.requestBody);
          }
          var resolvedRequestBody = Buffer.concat(this.requestBody);
          this.log("resolved request body:", resolvedRequestBody);
          return bufferUtils_1.getArrayBuffer(resolvedRequestBody);
        };
        NodeClientRequest2.prototype.toIsomorphicRequest = function(body) {
          var e_3, _a2;
          this.log("creating isomorphic request object...");
          var outgoingHeaders = this.getHeaders();
          this.log("request outgoing headers:", outgoingHeaders);
          var headers = new headers_polyfill_1.Headers();
          try {
            for (var _b = __values(Object.entries(outgoingHeaders)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), headerName = _d[0], headerValue = _d[1];
              if (!headerValue) {
                continue;
              }
              headers.set(headerName.toLowerCase(), headerValue.toString());
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          var isomorphicRequest = new IsomorphicRequest_1.IsomorphicRequest(this.url, {
            body,
            method: this.options.method || "GET",
            credentials: "same-origin",
            headers
          });
          this.log("successfully created isomorphic request!", isomorphicRequest);
          return isomorphicRequest;
        };
        NodeClientRequest2.suppressErrorCodes = [
          "ENOTFOUND",
          "ECONNREFUSED",
          "ECONNRESET",
          "EAI_AGAIN"
        ];
        return NodeClientRequest2;
      }(http_1.ClientRequest)
    );
    exports.NodeClientRequest = NodeClientRequest;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/getRequestOptionsByUrl.js
var require_getRequestOptionsByUrl = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/getRequestOptionsByUrl.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRequestOptionsByUrl = void 0;
    function getRequestOptionsByUrl(url) {
      var options = {
        method: "GET",
        protocol: url.protocol,
        hostname: typeof url.hostname === "string" && url.hostname.startsWith("[") ? url.hostname.slice(1, -1) : url.hostname,
        host: url.host,
        path: "" + url.pathname + (url.search || "")
      };
      if (!!url.port) {
        options.port = Number(url.port);
      }
      if (url.username || url.password) {
        options.auth = url.username + ":" + url.password;
      }
      return options;
    }
    exports.getRequestOptionsByUrl = getRequestOptionsByUrl;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/getUrlByRequestOptions.js
var require_getUrlByRequestOptions = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/getUrlByRequestOptions.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUrlByRequestOptions = exports.DEFAULT_PATH = void 0;
    var http_1 = require_http();
    var debug2 = require_browser2()("utils getUrlByRequestOptions");
    exports.DEFAULT_PATH = "/";
    var DEFAULT_PROTOCOL = "http:";
    var DEFAULT_HOST = "localhost";
    var DEFAULT_PORT = 80;
    var SSL_PORT = 443;
    function getAgent(options) {
      return options.agent instanceof http_1.Agent ? options.agent : void 0;
    }
    function getProtocolByRequestOptions(options) {
      var _a2, _b;
      if (options.protocol) {
        return options.protocol;
      }
      var agent = getAgent(options);
      var agentProtocol = (_a2 = agent) === null || _a2 === void 0 ? void 0 : _a2.protocol;
      if (agentProtocol) {
        return agentProtocol;
      }
      var port = getPortByRequestOptions(options);
      var isSecureRequest = options.cert || port === SSL_PORT;
      return isSecureRequest ? "https:" : ((_b = options.uri) === null || _b === void 0 ? void 0 : _b.protocol) || DEFAULT_PROTOCOL;
    }
    function getPortByRequestOptions(options) {
      var _a2, _b;
      var agent = getAgent(options);
      var agentPort = ((_a2 = agent) === null || _a2 === void 0 ? void 0 : _a2.options.port) || ((_b = agent) === null || _b === void 0 ? void 0 : _b.defaultPort);
      var optionsPort = options.port;
      if (optionsPort || agentPort) {
        var explicitPort = optionsPort || agentPort || DEFAULT_PORT;
        return Number(explicitPort);
      }
    }
    function getHostByRequestOptions(options) {
      return options.hostname || options.host || DEFAULT_HOST;
    }
    function getAuthByRequestOptions(options) {
      if (options.auth) {
        var _a2 = __read(options.auth.split(":"), 2), username = _a2[0], password = _a2[1];
        return { username, password };
      }
    }
    function getUrlByRequestOptions(options) {
      debug2("request options", options);
      var protocol = getProtocolByRequestOptions(options);
      var host = getHostByRequestOptions(options);
      var port = getPortByRequestOptions(options);
      var path = options.path || exports.DEFAULT_PATH;
      var auth = getAuthByRequestOptions(options);
      debug2("protocol", protocol);
      debug2("host", host);
      debug2("port", port);
      debug2("path", path);
      var baseUrl = protocol + "//" + host;
      debug2("base URL:", baseUrl);
      var url = options.uri ? new URL(options.uri.href) : new URL(path, baseUrl);
      if (port) {
        debug2("detected explicit port", port);
        url.port = port.toString();
      }
      if (auth) {
        debug2("resolved auth", auth);
        url.username = auth.username;
        url.password = auth.password;
      }
      debug2("created URL:", url);
      return url;
    }
    exports.getUrlByRequestOptions = getUrlByRequestOptions;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/cloneObject.js
var require_cloneObject = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/cloneObject.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneObject = void 0;
    var debug2 = require_browser2()("cloneObject");
    function isPlainObject(obj) {
      var _a2;
      debug2("is plain object?", obj);
      if (obj == null || !((_a2 = obj.constructor) === null || _a2 === void 0 ? void 0 : _a2.name)) {
        debug2("given object is undefined, not a plain object...");
        return false;
      }
      debug2("checking the object constructor:", obj.constructor.name);
      return obj.constructor.name === "Object";
    }
    function cloneObject(obj) {
      debug2("cloning object:", obj);
      var enumerableProperties = Object.entries(obj).reduce(function(acc, _a2) {
        var _b = __read(_a2, 2), key = _b[0], value = _b[1];
        debug2("analyzing key-value pair:", key, value);
        acc[key] = isPlainObject(value) ? cloneObject(value) : value;
        return acc;
      }, {});
      return isPlainObject(obj) ? enumerableProperties : Object.assign(Object.getPrototypeOf(obj), enumerableProperties);
    }
    exports.cloneObject = cloneObject;
  }
});

// ../node_modules/@mswjs/interceptors/lib/utils/isObject.js
var require_isObject = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/utils/isObject.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = void 0;
    function isObject(value) {
      return Object.prototype.toString.call(value) === "[object Object]";
    }
    exports.isObject = isObject;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestArgs.js
var require_normalizeClientRequestArgs = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/utils/normalizeClientRequestArgs.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeClientRequestArgs = void 0;
    var debug_1 = require_browser2();
    var http_1 = require_http();
    var https_1 = require_https();
    var getRequestOptionsByUrl_1 = require_getRequestOptionsByUrl();
    var getUrlByRequestOptions_1 = require_getUrlByRequestOptions();
    var cloneObject_1 = require_cloneObject();
    var isObject_1 = require_isObject();
    var log = debug_1.debug("http normalizeClientRequestArgs");
    function resolveRequestOptions(args, url) {
      if (typeof args[1] === "undefined" || typeof args[1] === "function") {
        log("request options not provided, deriving from the url", url);
        return getRequestOptionsByUrl_1.getRequestOptionsByUrl(url);
      }
      if (args[1]) {
        log("has custom RequestOptions!", args[1]);
        var requestOptionsFromUrl = getRequestOptionsByUrl_1.getRequestOptionsByUrl(url);
        log("derived RequestOptions from the URL:", requestOptionsFromUrl);
        log("cloning RequestOptions...");
        var clonedRequestOptions = cloneObject_1.cloneObject(args[1]);
        log("successfully cloned RequestOptions!", clonedRequestOptions);
        return __assign(__assign({}, requestOptionsFromUrl), clonedRequestOptions);
      }
      log("using an empty object as request options");
      return {};
    }
    function resolveCallback(args) {
      return typeof args[1] === "function" ? args[1] : args[2];
    }
    function normalizeClientRequestArgs(defaultProtocol) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var url;
      var options;
      var callback;
      log("arguments", args);
      log("using default protocol:", defaultProtocol);
      if (typeof args[0] === "string") {
        log("first argument is a location string:", args[0]);
        url = new URL(args[0]);
        log("created a url:", url);
        var requestOptionsFromUrl = getRequestOptionsByUrl_1.getRequestOptionsByUrl(url);
        log("request options from url:", requestOptionsFromUrl);
        options = resolveRequestOptions(args, url);
        log("resolved request options:", options);
        callback = resolveCallback(args);
      } else if (args[0] instanceof URL) {
        url = args[0];
        log("first argument is a URL:", url);
        options = resolveRequestOptions(args, url);
        log("derived request options:", options);
        callback = resolveCallback(args);
      } else if ("hash" in args[0] && !("method" in args[0])) {
        var _a2 = __read(args, 1), legacyUrl = _a2[0];
        log("first argument is a legacy URL:", legacyUrl);
        if (legacyUrl.hostname === null) {
          log("given legacy URL is relative (no hostname)");
          return isObject_1.isObject(args[1]) ? normalizeClientRequestArgs(defaultProtocol, __assign({ path: legacyUrl.path }, args[1]), args[2]) : normalizeClientRequestArgs(defaultProtocol, { path: legacyUrl.path }, args[1]);
        }
        log("given legacy url is absolute");
        var resolvedUrl = new URL(legacyUrl.href);
        return args[1] === void 0 ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl) : typeof args[1] === "function" ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl, args[1]) : normalizeClientRequestArgs(defaultProtocol, resolvedUrl, args[1], args[2]);
      } else if (isObject_1.isObject(args[0])) {
        options = args[0];
        log("first argument is RequestOptions:", options);
        options.protocol = options.protocol || defaultProtocol;
        log("normalized request options:", options);
        url = getUrlByRequestOptions_1.getUrlByRequestOptions(options);
        log("created a URL from RequestOptions:", url.href);
        callback = resolveCallback(args);
      } else {
        throw new Error("Failed to construct ClientRequest with these parameters: " + args);
      }
      options.protocol = options.protocol || url.protocol;
      options.method = options.method || "GET";
      if (typeof options.agent === "undefined") {
        var agent = options.protocol === "https:" ? new https_1.Agent({
          rejectUnauthorized: options.rejectUnauthorized
        }) : new http_1.Agent();
        options.agent = agent;
        log("resolved fallback agent:", agent);
      }
      if (!options._defaultAgent) {
        log('has no default agent, setting the default agent for "%s"', options.protocol);
        options._defaultAgent = options.protocol === "https:" ? https_1.globalAgent : http_1.globalAgent;
      }
      log("successfully resolved url:", url.href);
      log("successfully resolved options:", options);
      log("successfully resolved callback:", callback);
      return [url, options, callback];
    }
    exports.normalizeClientRequestArgs = normalizeClientRequestArgs;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/http.get.js
var require_http_get = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/http.get.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.get = void 0;
    var NodeClientRequest_1 = require_NodeClientRequest();
    var normalizeClientRequestArgs_1 = require_normalizeClientRequestArgs();
    function get(protocol, options) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var clientRequestArgs = normalizeClientRequestArgs_1.normalizeClientRequestArgs.apply(void 0, __spreadArray([protocol + ":"], __read(args)));
        var request = new NodeClientRequest_1.NodeClientRequest(clientRequestArgs, options);
        request.end();
        return request;
      };
    }
    exports.get = get;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/http.request.js
var require_http_request = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/http.request.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.request = void 0;
    var debug_1 = require_browser2();
    var NodeClientRequest_1 = require_NodeClientRequest();
    var normalizeClientRequestArgs_1 = require_normalizeClientRequestArgs();
    var log = debug_1.debug("http request");
    function request(protocol, options) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        log('request call (protocol "%s"):', protocol, args);
        var clientRequestArgs = normalizeClientRequestArgs_1.normalizeClientRequestArgs.apply(void 0, __spreadArray([protocol + ":"], __read(args)));
        return new NodeClientRequest_1.NodeClientRequest(clientRequestArgs, options);
      };
    }
    exports.request = request;
  }
});

// ../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/index.js
var require_ClientRequest = __commonJS({
  "../node_modules/@mswjs/interceptors/lib/interceptors/ClientRequest/index.js"(exports) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientRequestInterceptor = void 0;
    var http_1 = __importDefault(require_http());
    var https_1 = __importDefault(require_https());
    var outvariant_1 = require_lib5();
    var glossary_1 = require_glossary();
    var Interceptor_1 = require_Interceptor();
    var http_get_1 = require_http_get();
    var http_request_1 = require_http_request();
    var ClientRequestInterceptor = (
      /** @class */
      function(_super) {
        __extends(ClientRequestInterceptor2, _super);
        function ClientRequestInterceptor2() {
          var _this = _super.call(this, ClientRequestInterceptor2.symbol) || this;
          _this.modules = /* @__PURE__ */ new Map();
          _this.modules.set("http", http_1.default);
          _this.modules.set("https", https_1.default);
          return _this;
        }
        ClientRequestInterceptor2.prototype.setup = function() {
          var e_1, _a2;
          var log = this.log.extend("setup");
          var _loop_1 = function(protocol2, requestModule2) {
            var pureRequest = requestModule2.request, pureGet = requestModule2.get;
            outvariant_1.invariant(!requestModule2[glossary_1.IS_PATCHED_MODULE], 'Failed to patch the "%s" module: already patched.', protocol2);
            this_1.subscriptions.push(function() {
              Object.defineProperty(requestModule2, glossary_1.IS_PATCHED_MODULE, {
                value: void 0
              });
              requestModule2.request = pureRequest;
              requestModule2.get = pureGet;
              log('native "%s" module restored!', protocol2);
            });
            var options = {
              emitter: this_1.emitter,
              log: this_1.log
            };
            requestModule2.request = // Force a line break.
            http_request_1.request(protocol2, options);
            requestModule2.get = // Force a line break.
            http_get_1.get(protocol2, options);
            Object.defineProperty(requestModule2, glossary_1.IS_PATCHED_MODULE, {
              configurable: true,
              enumerable: true,
              value: true
            });
            log('native "%s" module patched!', protocol2);
          };
          var this_1 = this;
          try {
            for (var _b = __values(this.modules), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), protocol = _d[0], requestModule = _d[1];
              _loop_1(protocol, requestModule);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        };
        ClientRequestInterceptor2.symbol = Symbol("http");
        return ClientRequestInterceptor2;
      }(Interceptor_1.Interceptor)
    );
    exports.ClientRequestInterceptor = ClientRequestInterceptor;
  }
});

// ../node_modules/msw/lib/node/index.js
var require_node = __commonJS({
  "../node_modules/msw/lib/node/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var node_exports = {};
    __export2(node_exports, {
      SetupServerApi: () => SetupServerApi,
      setupServer: () => setupServer
    });
    module2.exports = __toCommonJS2(node_exports);
    var import_timers = require_timers();
    var setTimeout2 = import_timers.setTimeout;
    var import_chalk = __toESM2(require_source());
    var import_outvariant4 = require_lib5();
    var import_interceptors2 = require_lib9();
    var import_outvariant2 = require_lib5();
    var import_strict_event_emitter = require_lib12();
    var import_outvariant = require_lib5();
    var LIBRARY_PREFIX = "[MSW]";
    function formatMessage(message, ...positionals) {
      const interpolatedMessage = (0, import_outvariant.format)(message, ...positionals);
      return `${LIBRARY_PREFIX} ${interpolatedMessage}`;
    }
    function warn(message, ...positionals) {
      console.warn(formatMessage(message, ...positionals));
    }
    function error(message, ...positionals) {
      console.error(formatMessage(message, ...positionals));
    }
    var devUtils = {
      formatMessage,
      warn,
      error
    };
    function pipeEvents(source, destination) {
      const rawEmit = source.emit;
      if (rawEmit._isPiped) {
        return;
      }
      source.emit = function(event, ...data2) {
        destination.emit(event, ...data2);
        return rawEmit.call(this, event, ...data2);
      };
      source.emit._isPiped = true;
    }
    function toReadonlyArray(source) {
      const clone = [...source];
      Object.freeze(clone);
      return clone;
    }
    var SetupApi = class {
      constructor(...initialHandlers) {
        this.validateHandlers(...initialHandlers);
        this.initialHandlers = toReadonlyArray(initialHandlers);
        this.currentHandlers = [...initialHandlers];
        this.emitter = new import_strict_event_emitter.Emitter();
        this.publicEmitter = new import_strict_event_emitter.Emitter();
        pipeEvents(this.emitter, this.publicEmitter);
        this.events = this.createLifeCycleEvents();
      }
      validateHandlers(...handlers) {
        for (const handler of handlers) {
          (0, import_outvariant2.invariant)(
            !Array.isArray(handler),
            devUtils.formatMessage(
              'Failed to construct "%s" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.'
            ),
            this.constructor.name
          );
        }
      }
      dispose() {
        this.emitter.removeAllListeners();
        this.publicEmitter.removeAllListeners();
      }
      use(...runtimeHandlers) {
        this.currentHandlers.unshift(...runtimeHandlers);
      }
      restoreHandlers() {
        this.currentHandlers.forEach((handler) => {
          handler.markAsSkipped(false);
        });
      }
      resetHandlers(...nextHandlers) {
        this.currentHandlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];
      }
      listHandlers() {
        return toReadonlyArray(this.currentHandlers);
      }
      createLifeCycleEvents() {
        return {
          on: (...args) => {
            return this.publicEmitter.on(...args);
          },
          removeListener: (...args) => {
            return this.publicEmitter.removeListener(...args);
          },
          removeAllListeners: (...args) => {
            return this.publicEmitter.removeAllListeners(...args);
          }
        };
      }
    };
    function isObject(value) {
      return value != null && typeof value === "object" && !Array.isArray(value);
    }
    function mergeRight(left, right) {
      return Object.entries(right).reduce((result, [key, rightValue]) => {
        const leftValue = result[key];
        if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
          result[key] = leftValue.concat(rightValue);
          return result;
        }
        if (isObject(leftValue) && isObject(rightValue)) {
          result[key] = mergeRight(leftValue, rightValue);
          return result;
        }
        result[key] = rightValue;
        return result;
      }, Object.assign({}, left));
    }
    var cookieUtils2 = __toESM2(require_cookie());
    var import_cookies = require_lib10();
    var import_interceptors = require_lib9();
    var import_bufferUtils = require_bufferUtils();
    var import_headers_polyfill2 = require_lib3();
    var cookieUtils = __toESM2(require_cookie());
    function getAllCookies() {
      return cookieUtils.parse(document.cookie);
    }
    function getRequestCookies(request) {
      if (typeof document === "undefined" || typeof location === "undefined") {
        return {};
      }
      switch (request.credentials) {
        case "same-origin": {
          return location.origin === request.url.origin ? getAllCookies() : {};
        }
        case "include": {
          return getAllCookies();
        }
        default: {
          return {};
        }
      }
    }
    function jsonParse(value) {
      try {
        return JSON.parse(value);
      } catch (error2) {
        return void 0;
      }
    }
    var import_headers_polyfill = require_lib3();
    function parseContentHeaders(headersString) {
      var _a2, _b;
      const headers = (0, import_headers_polyfill.stringToHeaders)(headersString);
      const contentType = headers.get("content-type") || "text/plain";
      const disposition = headers.get("content-disposition");
      if (!disposition) {
        throw new Error('"Content-Disposition" header is required.');
      }
      const directives = disposition.split(";").reduce((acc, chunk) => {
        const [name2, ...rest] = chunk.trim().split("=");
        acc[name2] = rest.join("=");
        return acc;
      }, {});
      const name = (_a2 = directives.name) == null ? void 0 : _a2.slice(1, -1);
      const filename = (_b = directives.filename) == null ? void 0 : _b.slice(1, -1);
      return {
        name,
        filename,
        contentType
      };
    }
    function parseMultipartData(data2, headers) {
      const contentType = headers == null ? void 0 : headers.get("content-type");
      if (!contentType) {
        return void 0;
      }
      const [, ...directives] = contentType.split(/; */);
      const boundary = directives.filter((d) => d.startsWith("boundary=")).map((s) => s.replace(/^boundary=/, ""))[0];
      if (!boundary) {
        return void 0;
      }
      const boundaryRegExp = new RegExp(`--+${boundary}`);
      const fields = data2.split(boundaryRegExp).filter((chunk) => chunk.startsWith("\r\n") && chunk.endsWith("\r\n")).map((chunk) => chunk.trimStart().replace(/\r\n$/, ""));
      if (!fields.length) {
        return void 0;
      }
      const parsedBody = {};
      try {
        for (const field2 of fields) {
          const [contentHeaders, ...rest] = field2.split("\r\n\r\n");
          const contentBody = rest.join("\r\n\r\n");
          const { contentType: contentType2, filename, name } = parseContentHeaders(contentHeaders);
          const value = filename === void 0 ? contentBody : new File([contentBody], filename, { type: contentType2 });
          const parsedValue = parsedBody[name];
          if (parsedValue === void 0) {
            parsedBody[name] = value;
          } else if (Array.isArray(parsedValue)) {
            parsedBody[name] = [...parsedValue, value];
          } else {
            parsedBody[name] = [parsedValue, value];
          }
        }
        return parsedBody;
      } catch (error2) {
        return void 0;
      }
    }
    function parseBody(body2, headers) {
      var _a2;
      if (!body2) {
        return body2;
      }
      const contentType = ((_a2 = headers == null ? void 0 : headers.get("content-type")) == null ? void 0 : _a2.toLowerCase()) || "";
      const hasMultipartContent = contentType.startsWith("multipart/form-data");
      if (hasMultipartContent && typeof body2 !== "object") {
        return parseMultipartData(body2.toString(), headers) || body2;
      }
      const hasJsonContent = contentType.includes("json");
      if (hasJsonContent && typeof body2 !== "object") {
        return jsonParse(body2.toString()) || body2;
      }
      return body2;
    }
    function isStringEqual(actual, expected) {
      return actual.toLowerCase() === expected.toLowerCase();
    }
    var MockedRequest = class extends import_interceptors.IsomorphicRequest {
      constructor(url, init = {}) {
        super(url, init);
        if (init.id) {
          this.id = init.id;
        }
        this.cache = init.cache || "default";
        this.destination = init.destination || "";
        this.integrity = init.integrity || "";
        this.keepalive = init.keepalive || false;
        this.mode = init.mode || "cors";
        this.priority = init.priority || "auto";
        this.redirect = init.redirect || "follow";
        this.referrer = init.referrer || "";
        this.referrerPolicy = init.referrerPolicy || "no-referrer";
        this.cookies = init.cookies || this.getCookies();
      }
      get body() {
        const text2 = (0, import_bufferUtils.decodeBuffer)(this["_body"]);
        const body2 = parseBody(text2, this.headers);
        if (isStringEqual(this.method, "GET") && body2 === "") {
          return void 0;
        }
        return body2;
      }
      passthrough() {
        return {
          status: 101,
          statusText: "Continue",
          headers: new import_headers_polyfill2.Headers(),
          body: null,
          passthrough: true,
          once: false
        };
      }
      getCookies() {
        var _a2;
        const requestCookiesString = this.headers.get("cookie");
        const ownCookies = requestCookiesString ? cookieUtils2.parse(requestCookiesString) : {};
        import_cookies.store.hydrate();
        const cookiesFromStore = Array.from(
          (_a2 = import_cookies.store.get({ ...this, url: this.url.href })) == null ? void 0 : _a2.entries()
        ).reduce((cookies, [name, { value }]) => {
          return Object.assign(cookies, { [name.trim()]: value });
        }, {});
        const cookiesFromDocument = getRequestCookies(this);
        const forwardedCookies = {
          ...cookiesFromDocument,
          ...cookiesFromStore
        };
        for (const [name, value] of Object.entries(forwardedCookies)) {
          this.headers.append("cookie", `${name}=${value}`);
        }
        return {
          ...forwardedCookies,
          ...ownCookies
        };
      }
    };
    var import_until = require_lib6();
    var getResponse = async (request, handlers, resolutionContext) => {
      const relevantHandlers = handlers.filter((handler) => {
        return handler.test(request, resolutionContext);
      });
      if (relevantHandlers.length === 0) {
        return {
          handler: void 0,
          response: void 0
        };
      }
      const result = await relevantHandlers.reduce(async (executionResult, handler) => {
        const previousResults = await executionResult;
        if (!!(previousResults == null ? void 0 : previousResults.response)) {
          return executionResult;
        }
        const result2 = await handler.run(request, resolutionContext);
        if (result2 === null || result2.handler.shouldSkip) {
          return null;
        }
        if (!result2.response) {
          return {
            request: result2.request,
            handler: result2.handler,
            response: void 0,
            parsedResult: result2.parsedResult
          };
        }
        if (result2.response.once) {
          handler.markAsSkipped(true);
        }
        return result2;
      }, Promise.resolve(null));
      if (!result) {
        return {
          handler: void 0,
          response: void 0
        };
      }
      return {
        handler: result.handler,
        publicRequest: result.request,
        parsedRequest: result.parsedResult,
        response: result.response
      };
    };
    var import_js_levenshtein = __toESM2(require_js_levenshtein());
    var import_graphql = (init_graphql(), __toCommonJS(graphql_exports));
    var getPublicUrlFromRequest = (request) => {
      return request.referrer.startsWith(request.url.origin) ? request.url.pathname : new URL(
        request.url.pathname,
        `${request.url.protocol}//${request.url.host}`
      ).href;
    };
    function parseDocumentNode(node) {
      var _a2;
      const operationDef = node.definitions.find((def) => {
        return def.kind === "OperationDefinition";
      });
      return {
        operationType: operationDef == null ? void 0 : operationDef.operation,
        operationName: (_a2 = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a2.value
      };
    }
    function parseQuery(query) {
      try {
        const ast = (0, import_graphql.parse)(query);
        return parseDocumentNode(ast);
      } catch (error2) {
        return error2;
      }
    }
    function extractMultipartVariables(variables, map, files) {
      const operations = { variables };
      for (const [key, pathArray] of Object.entries(map)) {
        if (!(key in files)) {
          throw new Error(`Given files do not have a key '${key}' .`);
        }
        for (const dotPath of pathArray) {
          const [lastPath, ...reversedPaths] = dotPath.split(".").reverse();
          const paths = reversedPaths.reverse();
          let target = operations;
          for (const path of paths) {
            if (!(path in target)) {
              throw new Error(`Property '${paths}' is not in operations.`);
            }
            target = target[path];
          }
          target[lastPath] = files[key];
        }
      }
      return operations.variables;
    }
    function getGraphQLInput(request) {
      var _a2, _b;
      switch (request.method) {
        case "GET": {
          const query = request.url.searchParams.get("query");
          const variables = request.url.searchParams.get("variables") || "";
          return {
            query,
            variables: jsonParse(variables)
          };
        }
        case "POST": {
          if ((_a2 = request.body) == null ? void 0 : _a2.query) {
            const { query, variables } = request.body;
            return {
              query,
              variables
            };
          }
          if ((_b = request.body) == null ? void 0 : _b.operations) {
            const { operations, map, ...files } = request.body;
            const parsedOperations = jsonParse(
              operations
            ) || {};
            if (!parsedOperations.query) {
              return null;
            }
            const parsedMap = jsonParse(map || "") || {};
            const variables = parsedOperations.variables ? extractMultipartVariables(
              parsedOperations.variables,
              parsedMap,
              files
            ) : {};
            return {
              query: parsedOperations.query,
              variables
            };
          }
        }
        default:
          return null;
      }
    }
    function parseGraphQLRequest(request) {
      const input = getGraphQLInput(request);
      if (!input || !input.query) {
        return void 0;
      }
      const { query, variables } = input;
      const parsedResult = parseQuery(query);
      if (parsedResult instanceof Error) {
        const requestPublicUrl = getPublicUrlFromRequest(request);
        throw new Error(
          devUtils.formatMessage(
            'Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.\n\n%s',
            request.method,
            requestPublicUrl,
            parsedResult.message
          )
        );
      }
      return {
        operationType: parsedResult.operationType,
        operationName: parsedResult.operationName,
        variables
      };
    }
    var codes_default = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "103": "Early Hints",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a Teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Too Early",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    };
    var status = (statusCode, statusText) => {
      return (res) => {
        res.status = statusCode;
        res.statusText = statusText || codes_default[String(statusCode)];
        return res;
      };
    };
    var import_headers_polyfill3 = require_lib3();
    function set(...args) {
      return (res) => {
        const [name, value] = args;
        if (typeof name === "string") {
          res.headers.append(name, value);
        } else {
          const headers = (0, import_headers_polyfill3.objectToHeaders)(name);
          headers.forEach((value2, name2) => {
            res.headers.append(name2, value2);
          });
        }
        return res;
      };
    }
    var cookieUtils3 = __toESM2(require_cookie());
    var cookie = (name, value, options) => {
      return (res) => {
        const serializedCookie = cookieUtils3.serialize(name, value, options);
        res.headers.append("Set-Cookie", serializedCookie);
        if (typeof document !== "undefined") {
          document.cookie = serializedCookie;
        }
        return res;
      };
    };
    var body = (value) => {
      return (res) => {
        res.body = value;
        return res;
      };
    };
    var json = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "application/json");
        res.body = JSON.stringify(body2);
        return res;
      };
    };
    var data = (payload) => {
      return (res) => {
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { data: payload });
        return json(nextBody)(res);
      };
    };
    var extensions = (payload) => {
      return (res) => {
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { extensions: payload });
        return json(nextBody)(res);
      };
    };
    var import_is_node_process = require_lib4();
    var SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647;
    var MIN_SERVER_RESPONSE_TIME = 100;
    var MAX_SERVER_RESPONSE_TIME = 400;
    var NODE_SERVER_RESPONSE_TIME = 5;
    var getRandomServerResponseTime = () => {
      if ((0, import_is_node_process.isNodeProcess)()) {
        return NODE_SERVER_RESPONSE_TIME;
      }
      return Math.floor(
        Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) + MIN_SERVER_RESPONSE_TIME
      );
    };
    var delay = (durationOrMode) => {
      return (res) => {
        let delayTime;
        if (typeof durationOrMode === "string") {
          switch (durationOrMode) {
            case "infinite": {
              delayTime = SET_TIMEOUT_MAX_ALLOWED_INT;
              break;
            }
            case "real": {
              delayTime = getRandomServerResponseTime();
              break;
            }
            default: {
              throw new Error(
                `Failed to delay a response: unknown delay mode "${durationOrMode}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`
              );
            }
          }
        } else if (typeof durationOrMode === "undefined") {
          delayTime = getRandomServerResponseTime();
        } else {
          if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {
            throw new Error(
              `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for "setTimeout" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`
            );
          }
          delayTime = durationOrMode;
        }
        res.delay = delayTime;
        return res;
      };
    };
    var errors = (errorsList) => {
      return (res) => {
        if (errorsList == null) {
          return res;
        }
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { errors: errorsList });
        return json(nextBody)(res);
      };
    };
    var import_is_node_process2 = require_lib4();
    var import_headers_polyfill4 = require_lib3();
    var useFetch = (0, import_is_node_process2.isNodeProcess)() ? (input, init) => Promise.resolve().then(() => __toESM2(require_browser())).then(
      ({ default: nodeFetch }) => nodeFetch(input, init)
    ) : globalThis.fetch;
    var augmentRequestInit = (requestInit) => {
      const headers = new import_headers_polyfill4.Headers(requestInit.headers);
      headers.set("x-msw-bypass", "true");
      return {
        ...requestInit,
        headers: headers.all()
      };
    };
    var createFetchRequestParameters = (input) => {
      const { body: body2, method } = input;
      const requestParameters = {
        ...input,
        body: void 0
      };
      if (["GET", "HEAD"].includes(method)) {
        return requestParameters;
      }
      if (typeof body2 === "object" || typeof body2 === "number" || typeof body2 === "boolean") {
        requestParameters.body = JSON.stringify(body2);
      } else {
        requestParameters.body = body2;
      }
      return requestParameters;
    };
    var fetch2 = (input, requestInit = {}) => {
      if (typeof input === "string") {
        return useFetch(input, augmentRequestInit(requestInit));
      }
      const requestParameters = createFetchRequestParameters(input);
      const derivedRequestInit = augmentRequestInit(requestParameters);
      return useFetch(input.url.href, derivedRequestInit);
    };
    var text = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "text/plain");
        res.body = body2;
        return res;
      };
    };
    var xml = (body2) => {
      return (res) => {
        res.headers.set("Content-Type", "text/xml");
        res.body = body2;
        return res;
      };
    };
    function getStatusCodeColor(status2) {
      if (status2 < 300) {
        return "#69AB32";
      }
      if (status2 < 400) {
        return "#F0BB4B";
      }
      return "#E95F5D";
    }
    function getTimestamp() {
      const now = /* @__PURE__ */ new Date();
      return [now.getHours(), now.getMinutes(), now.getSeconds()].map(String).map((chunk) => chunk.slice(0, 2)).map((chunk) => chunk.padStart(2, "0")).join(":");
    }
    function prepareRequest(request) {
      return {
        ...request,
        body: request.body,
        headers: request.headers.all()
      };
    }
    var import_headers_polyfill5 = require_lib3();
    function prepareResponse(res) {
      const responseHeaders = (0, import_headers_polyfill5.objectToHeaders)(res.headers);
      const parsedBody = parseBody(res.body, responseHeaders);
      return {
        ...res,
        body: parsedBody
      };
    }
    var import_path_to_regexp = (init_dist2(), __toCommonJS(dist_exports));
    var import_getCleanUrl = require_getCleanUrl();
    var REDUNDANT_CHARACTERS_EXP = /[\?|#].*$/g;
    function getSearchParams(path) {
      return new URL(`/${path}`, "http://localhost").searchParams;
    }
    function cleanUrl(path) {
      return path.replace(REDUNDANT_CHARACTERS_EXP, "");
    }
    function isAbsoluteUrl(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    }
    function getAbsoluteUrl(path, baseUrl) {
      if (isAbsoluteUrl(path)) {
        return path;
      }
      if (path.startsWith("*")) {
        return path;
      }
      const origin = baseUrl || typeof document !== "undefined" && document.baseURI;
      return origin ? decodeURI(new URL(encodeURI(path), origin).href) : path;
    }
    function normalizePath(path, baseUrl) {
      if (path instanceof RegExp) {
        return path;
      }
      const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);
      return cleanUrl(maybeAbsoluteUrl);
    }
    function coercePath(path) {
      return path.replace(
        /([:a-zA-Z_-]*)(\*{1,2})+/g,
        (_, parameterName, wildcard) => {
          const expression = "(.*)";
          if (!parameterName) {
            return expression;
          }
          return parameterName.startsWith(":") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;
        }
      ).replace(/([^\/])(:)(?=\d+)/, "$1\\$2").replace(/^([^\/]+)(:)(?=\/\/)/, "$1\\$2");
    }
    function matchRequestUrl(url, path, baseUrl) {
      const normalizedPath = normalizePath(path, baseUrl);
      const cleanPath = typeof normalizedPath === "string" ? coercePath(normalizedPath) : normalizedPath;
      const cleanUrl2 = (0, import_getCleanUrl.getCleanUrl)(url);
      const result = (0, import_path_to_regexp.match)(cleanPath, { decode: decodeURIComponent })(cleanUrl2);
      const params = result && result.params || {};
      return {
        matches: result !== false,
        params
      };
    }
    var import_headers_polyfill7 = require_lib3();
    var import_headers_polyfill6 = require_lib3();
    function compose(...fns) {
      return (...args) => {
        return fns.reduceRight((leftFn, rightFn) => {
          return leftFn instanceof Promise ? Promise.resolve(leftFn).then(rightFn) : rightFn(leftFn);
        }, args[0]);
      };
    }
    var NetworkError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "NetworkError";
      }
    };
    var defaultResponse = {
      status: 200,
      statusText: "OK",
      body: null,
      delay: 0,
      once: false,
      passthrough: false
    };
    var defaultResponseTransformers = [];
    function createResponseComposition(responseOverrides, defaultTransformers = defaultResponseTransformers) {
      return async (...transformers) => {
        const initialResponse = Object.assign(
          {},
          defaultResponse,
          {
            headers: new import_headers_polyfill6.Headers({
              "x-powered-by": "msw"
            })
          },
          responseOverrides
        );
        const resolvedTransformers = [
          ...defaultTransformers,
          ...transformers
        ].filter(Boolean);
        const resolvedResponse = resolvedTransformers.length > 0 ? compose(...resolvedTransformers)(initialResponse) : initialResponse;
        return resolvedResponse;
      };
    }
    var response = Object.assign(createResponseComposition(), {
      once: createResponseComposition({ once: true }),
      networkError(message) {
        throw new NetworkError(message);
      }
    });
    var SOURCE_FRAME = /[\/\\]msw[\/\\]src[\/\\](.+)/;
    var BUILD_FRAME = /(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/;
    function getCallFrame(error2) {
      const stack = error2.stack;
      if (!stack) {
        return;
      }
      const frames = stack.split("\n").slice(1);
      const declarationFrame = frames.find((frame) => {
        return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));
      });
      if (!declarationFrame) {
        return;
      }
      const declarationPath = declarationFrame.replace(/\s*at [^()]*\(([^)]+)\)/, "$1").replace(/^@/, "");
      return declarationPath;
    }
    function isIterable(fn) {
      if (!fn) {
        return false;
      }
      return typeof fn[Symbol.iterator] == "function";
    }
    var defaultContext = {
      status,
      set,
      delay,
      fetch: fetch2
    };
    var RequestHandler = class {
      constructor(options) {
        this.shouldSkip = false;
        this.ctx = options.ctx || defaultContext;
        this.resolver = options.resolver;
        const callFrame = getCallFrame(new Error());
        this.info = {
          ...options.info,
          callFrame
        };
      }
      parse(_request, _resolutionContext) {
        return null;
      }
      test(request, resolutionContext) {
        return this.predicate(
          request,
          this.parse(request, resolutionContext),
          resolutionContext
        );
      }
      getPublicRequest(request, _parsedResult) {
        return request;
      }
      markAsSkipped(shouldSkip = true) {
        this.shouldSkip = shouldSkip;
      }
      async run(request, resolutionContext) {
        if (this.shouldSkip) {
          return null;
        }
        const parsedResult = this.parse(request, resolutionContext);
        const shouldIntercept = this.predicate(
          request,
          parsedResult,
          resolutionContext
        );
        if (!shouldIntercept) {
          return null;
        }
        const publicRequest = this.getPublicRequest(request, parsedResult);
        const executeResolver = this.wrapResolver(this.resolver);
        const mockedResponse = await executeResolver(
          publicRequest,
          response,
          this.ctx
        );
        return this.createExecutionResult(
          parsedResult,
          publicRequest,
          mockedResponse
        );
      }
      wrapResolver(resolver) {
        return async (req, res, ctx) => {
          const result = this.resolverGenerator || await resolver(req, res, ctx);
          if (isIterable(result)) {
            const { value, done } = result[Symbol.iterator]().next();
            const nextResponse = await value;
            if (!nextResponse && done) {
              return this.resolverGeneratorResult;
            }
            if (!this.resolverGenerator) {
              this.resolverGenerator = result;
            }
            this.resolverGeneratorResult = nextResponse;
            return nextResponse;
          }
          return result;
        };
      }
      createExecutionResult(parsedResult, request, response2) {
        return {
          handler: this,
          parsedResult: parsedResult || null,
          request,
          response: response2 || null
        };
      }
    };
    var restContext = {
      ...defaultContext,
      cookie,
      body,
      text,
      json,
      xml
    };
    var RestRequest = class extends MockedRequest {
      constructor(request, params) {
        super(request.url, {
          ...request,
          body: request["_body"]
        });
        this.params = params;
        this.id = request.id;
      }
    };
    var RestHandler = class extends RequestHandler {
      constructor(method, path, resolver) {
        super({
          info: {
            header: `${method} ${path}`,
            path,
            method
          },
          ctx: restContext,
          resolver
        });
        this.checkRedundantQueryParameters();
      }
      checkRedundantQueryParameters() {
        const { method, path } = this.info;
        if (path instanceof RegExp) {
          return;
        }
        const url = cleanUrl(path);
        if (url === path) {
          return;
        }
        const searchParams = getSearchParams(path);
        const queryParams = [];
        searchParams.forEach((_, paramName) => {
          queryParams.push(paramName);
        });
        devUtils.warn(
          `Found a redundant usage of query parameters in the request handler URL for "${method} ${path}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`
        );
      }
      parse(request, resolutionContext) {
        return matchRequestUrl(
          request.url,
          this.info.path,
          resolutionContext == null ? void 0 : resolutionContext.baseUrl
        );
      }
      getPublicRequest(request, parsedResult) {
        return new RestRequest(request, parsedResult.params || {});
      }
      predicate(request, parsedResult) {
        const matchesMethod = this.info.method instanceof RegExp ? this.info.method.test(request.method) : isStringEqual(this.info.method, request.method);
        return matchesMethod && parsedResult.matches;
      }
      log(request, response2) {
        const publicUrl = getPublicUrlFromRequest(request);
        const loggedRequest = prepareRequest(request);
        const loggedResponse = prepareResponse(response2);
        const statusColor = getStatusCodeColor(response2.status);
        console.groupCollapsed(
          devUtils.formatMessage("%s %s %s (%c%s%c)"),
          getTimestamp(),
          request.method,
          publicUrl,
          `color:${statusColor}`,
          `${response2.status} ${response2.statusText}`,
          "color:inherit"
        );
        console.log("Request", loggedRequest);
        console.log("Handler:", this);
        console.log("Response", loggedResponse);
        console.groupEnd();
      }
    };
    var import_outvariant3 = require_lib5();
    var field = (fieldName, fieldValue) => {
      return (res) => {
        validateFieldName(fieldName);
        const prevBody = jsonParse(res.body) || {};
        const nextBody = mergeRight(prevBody, { [fieldName]: fieldValue });
        return json(nextBody)(res);
      };
    };
    function validateFieldName(fieldName) {
      (0, import_outvariant3.invariant)(
        fieldName.trim() !== "",
        devUtils.formatMessage(
          "Failed to set a custom field on a GraphQL response: field name cannot be empty."
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "data",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?',
          fieldName
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "errors",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?',
          fieldName
        )
      );
      (0, import_outvariant3.invariant)(
        fieldName !== "extensions",
        devUtils.formatMessage(
          'Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?',
          fieldName
        )
      );
    }
    function tryCatch(fn, onException) {
      try {
        const result = fn();
        return result;
      } catch (error2) {
        onException == null ? void 0 : onException(error2);
      }
    }
    var graphqlContext = {
      ...defaultContext,
      data,
      extensions,
      errors,
      cookie,
      field
    };
    function isDocumentNode(value) {
      if (value == null) {
        return false;
      }
      return typeof value === "object" && "kind" in value && "definitions" in value;
    }
    var GraphQLRequest = class extends MockedRequest {
      constructor(request, variables, operationName) {
        super(request.url, {
          ...request,
          body: request["_body"]
        });
        this.variables = variables;
        this.operationName = operationName;
      }
    };
    var GraphQLHandler = class extends RequestHandler {
      constructor(operationType, operationName, endpoint, resolver) {
        let resolvedOperationName = operationName;
        if (isDocumentNode(operationName)) {
          const parsedNode = parseDocumentNode(operationName);
          if (parsedNode.operationType !== operationType) {
            throw new Error(
              `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${operationType}", but got "${parsedNode.operationType}").`
            );
          }
          if (!parsedNode.operationName) {
            throw new Error(
              `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`
            );
          }
          resolvedOperationName = parsedNode.operationName;
        }
        const header = operationType === "all" ? `${operationType} (origin: ${endpoint.toString()})` : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`;
        super({
          info: {
            header,
            operationType,
            operationName: resolvedOperationName
          },
          ctx: graphqlContext,
          resolver
        });
        this.endpoint = endpoint;
      }
      parse(request) {
        return tryCatch(
          () => parseGraphQLRequest(request),
          (error2) => console.error(error2.message)
        );
      }
      getPublicRequest(request, parsedResult) {
        var _a2, _b;
        return new GraphQLRequest(
          request,
          (_a2 = parsedResult == null ? void 0 : parsedResult.variables) != null ? _a2 : {},
          (_b = parsedResult == null ? void 0 : parsedResult.operationName) != null ? _b : ""
        );
      }
      predicate(request, parsedResult) {
        if (!parsedResult) {
          return false;
        }
        if (!parsedResult.operationName && this.info.operationType !== "all") {
          const publicUrl = getPublicUrlFromRequest(request);
          devUtils.warn(`Failed to intercept a GraphQL request at "${request.method} ${publicUrl}": anonymous GraphQL operations are not supported.

Consider naming this operation or using "graphql.operation()" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `);
          return false;
        }
        const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint);
        const hasMatchingOperationType = this.info.operationType === "all" || parsedResult.operationType === this.info.operationType;
        const hasMatchingOperationName = this.info.operationName instanceof RegExp ? this.info.operationName.test(parsedResult.operationName || "") : parsedResult.operationName === this.info.operationName;
        return hasMatchingUrl.matches && hasMatchingOperationType && hasMatchingOperationName;
      }
      log(request, response2, parsedRequest) {
        const loggedRequest = prepareRequest(request);
        const loggedResponse = prepareResponse(response2);
        const statusColor = getStatusCodeColor(response2.status);
        const requestInfo = (parsedRequest == null ? void 0 : parsedRequest.operationName) ? `${parsedRequest == null ? void 0 : parsedRequest.operationType} ${parsedRequest == null ? void 0 : parsedRequest.operationName}` : `anonymous ${parsedRequest == null ? void 0 : parsedRequest.operationType}`;
        console.groupCollapsed(
          devUtils.formatMessage("%s %s (%c%s%c)"),
          getTimestamp(),
          `${requestInfo}`,
          `color:${statusColor}`,
          `${response2.status} ${response2.statusText}`,
          "color:inherit"
        );
        console.log("Request:", loggedRequest);
        console.log("Handler:", this);
        console.log("Response:", loggedResponse);
        console.groupEnd();
      }
    };
    var MAX_MATCH_SCORE = 3;
    var MAX_SUGGESTION_COUNT = 4;
    var TYPE_MATCH_DELTA = 0.5;
    function groupHandlersByType(handlers) {
      return handlers.reduce(
        (groups, handler) => {
          if (handler instanceof RestHandler) {
            groups.rest.push(handler);
          }
          if (handler instanceof GraphQLHandler) {
            groups.graphql.push(handler);
          }
          return groups;
        },
        {
          rest: [],
          graphql: []
        }
      );
    }
    function getRestHandlerScore() {
      return (request, handler) => {
        const { path, method } = handler.info;
        if (path instanceof RegExp || method instanceof RegExp) {
          return Infinity;
        }
        const hasSameMethod = isStringEqual(request.method, method);
        const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;
        const requestPublicUrl = getPublicUrlFromRequest(request);
        const score = (0, import_js_levenshtein.default)(requestPublicUrl, path);
        return score - methodScoreDelta;
      };
    }
    function getGraphQLHandlerScore(parsedQuery) {
      return (_, handler) => {
        if (typeof parsedQuery.operationName === "undefined") {
          return Infinity;
        }
        const { operationType, operationName } = handler.info;
        if (typeof operationName !== "string") {
          return Infinity;
        }
        const hasSameOperationType = parsedQuery.operationType === operationType;
        const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;
        const score = (0, import_js_levenshtein.default)(parsedQuery.operationName, operationName);
        return score - operationTypeScoreDelta;
      };
    }
    function getSuggestedHandler(request, handlers, getScore) {
      const suggestedHandlers = handlers.reduce((suggestions, handler) => {
        const score = getScore(request, handler);
        return suggestions.concat([[score, handler]]);
      }, []).sort(([leftScore], [rightScore]) => leftScore - rightScore).filter(([score]) => score <= MAX_MATCH_SCORE).slice(0, MAX_SUGGESTION_COUNT).map(([, handler]) => handler);
      return suggestedHandlers;
    }
    function getSuggestedHandlersMessage(handlers) {
      if (handlers.length > 1) {
        return `Did you mean to request one of the following resources instead?

${handlers.map((handler) => `  • ${handler.info.header}`).join("\n")}`;
      }
      return `Did you mean to request "${handlers[0].info.header}" instead?`;
    }
    function onUnhandledRequest(request, handlers, strategy = "warn") {
      const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request));
      function generateHandlerSuggestion() {
        const handlerGroups = groupHandlersByType(handlers);
        const relevantHandlers = parsedGraphQLQuery ? handlerGroups.graphql : handlerGroups.rest;
        const suggestedHandlers = getSuggestedHandler(
          request,
          relevantHandlers,
          parsedGraphQLQuery ? getGraphQLHandlerScore(parsedGraphQLQuery) : getRestHandlerScore()
        );
        return suggestedHandlers.length > 0 ? getSuggestedHandlersMessage(suggestedHandlers) : "";
      }
      function generateUnhandledRequestMessage() {
        const publicUrl = getPublicUrlFromRequest(request);
        const requestHeader = parsedGraphQLQuery ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})` : `${request.method} ${publicUrl}`;
        const handlerSuggestion = generateHandlerSuggestion();
        const messageTemplate = [
          `captured a request without a matching request handler:`,
          `  • ${requestHeader}`,
          handlerSuggestion,
          `If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks`
        ].filter(Boolean);
        return messageTemplate.join("\n\n");
      }
      function applyStrategy(strategy2) {
        const message = generateUnhandledRequestMessage();
        switch (strategy2) {
          case "error": {
            devUtils.error("Error: %s", message);
            throw new Error(
              devUtils.formatMessage(
                'Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.'
              )
            );
          }
          case "warn": {
            devUtils.warn("Warning: %s", message);
            break;
          }
          case "bypass":
            break;
          default:
            throw new Error(
              devUtils.formatMessage(
                'Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.',
                strategy2
              )
            );
        }
      }
      if (typeof strategy === "function") {
        strategy(request, {
          warning: applyStrategy.bind(null, "warn"),
          error: applyStrategy.bind(null, "error")
        });
        return;
      }
      applyStrategy(strategy);
    }
    var import_cookies2 = require_lib10();
    function readResponseCookies(request, response2) {
      import_cookies2.store.add({ ...request, url: request.url.toString() }, response2);
      import_cookies2.store.persist();
    }
    async function handleRequest(request, handlers, options, emitter, handleRequestOptions) {
      var _a2, _b, _c, _d, _e, _f;
      emitter.emit("request:start", request);
      if (request.headers.get("x-msw-bypass") === "true") {
        emitter.emit("request:end", request);
        (_a2 = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _a2.call(handleRequestOptions, request);
        return;
      }
      const [lookupError, lookupResult] = await (0, import_until.until)(() => {
        return getResponse(
          request,
          handlers,
          handleRequestOptions == null ? void 0 : handleRequestOptions.resolutionContext
        );
      });
      if (lookupError) {
        emitter.emit("unhandledException", lookupError, request);
        throw lookupError;
      }
      const { handler, response: response2 } = lookupResult;
      if (!handler) {
        onUnhandledRequest(request, handlers, options.onUnhandledRequest);
        emitter.emit("request:unhandled", request);
        emitter.emit("request:end", request);
        (_b = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _b.call(handleRequestOptions, request);
        return;
      }
      if (!response2) {
        devUtils.warn(
          `Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.

  • %s
    %s`,
          response2,
          handler.info.header,
          handler.info.callFrame
        );
        emitter.emit("request:end", request);
        (_c = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _c.call(handleRequestOptions, request);
        return;
      }
      if (response2.passthrough) {
        emitter.emit("request:end", request);
        (_d = handleRequestOptions == null ? void 0 : handleRequestOptions.onPassthroughResponse) == null ? void 0 : _d.call(handleRequestOptions, request);
        return;
      }
      readResponseCookies(request, response2);
      emitter.emit("request:match", request);
      const requiredLookupResult = lookupResult;
      const transformedResponse = ((_e = handleRequestOptions == null ? void 0 : handleRequestOptions.transformResponse) == null ? void 0 : _e.call(handleRequestOptions, response2)) || response2;
      (_f = handleRequestOptions == null ? void 0 : handleRequestOptions.onMockedResponse) == null ? void 0 : _f.call(
        handleRequestOptions,
        transformedResponse,
        requiredLookupResult
      );
      emitter.emit("request:end", request);
      return transformedResponse;
    }
    var { bold } = import_chalk.default;
    var DEFAULT_LISTEN_OPTIONS = {
      onUnhandledRequest: "warn"
    };
    var SetupServerApi = class extends SetupApi {
      constructor(interceptors, ...handlers) {
        super(...handlers);
        this.interceptor = new import_interceptors2.BatchInterceptor({
          name: "setup-server",
          interceptors: interceptors.map((Interceptor2) => new Interceptor2())
        });
        this.resolvedOptions = {};
        this.init();
      }
      init() {
        this.interceptor.on("request", async (request) => {
          const mockedRequest = new MockedRequest(request.url, {
            ...request,
            body: await request.arrayBuffer()
          });
          const response2 = await handleRequest(
            mockedRequest,
            this.currentHandlers,
            this.resolvedOptions,
            this.emitter,
            {
              transformResponse(response3) {
                return {
                  status: response3.status,
                  statusText: response3.statusText,
                  headers: response3.headers.all(),
                  body: response3.body,
                  delay: response3.delay
                };
              }
            }
          );
          if (response2) {
            if (response2.delay) {
              await new Promise((resolve) => {
                setTimeout2(resolve, response2.delay);
              });
            }
            request.respondWith(response2);
          }
          return;
        });
        this.interceptor.on("response", (request, response2) => {
          if (!request.id) {
            return;
          }
          if (response2.headers.get("x-powered-by") === "msw") {
            this.emitter.emit("response:mocked", response2, request.id);
          } else {
            this.emitter.emit("response:bypass", response2, request.id);
          }
        });
      }
      listen(options = {}) {
        this.resolvedOptions = mergeRight(
          DEFAULT_LISTEN_OPTIONS,
          options
        );
        this.interceptor.apply();
        (0, import_outvariant4.invariant)(
          [import_interceptors2.InterceptorReadyState.APPLYING, import_interceptors2.InterceptorReadyState.APPLIED].includes(
            this.interceptor.readyState
          ),
          devUtils.formatMessage(
            'Failed to start "setupServer": the interceptor failed to apply. This is likely an issue with the library and you should report it at "%s".'
          ),
          "https://github.com/mswjs/msw/issues/new/choose"
        );
      }
      printHandlers() {
        const handlers = this.listHandlers();
        handlers.forEach((handler) => {
          const { header, callFrame } = handler.info;
          const pragma = handler.info.hasOwnProperty("operationType") ? "[graphql]" : "[rest]";
          console.log(`${bold(`${pragma} ${header}`)}
  Declaration: ${callFrame}
`);
        });
      }
      close() {
        super.dispose();
        this.interceptor.dispose();
      }
    };
    var import_ClientRequest = require_ClientRequest();
    var import_XMLHttpRequest = require_XMLHttpRequest();
    var import_fetch2 = require_fetch();
    var setupServer = (...handlers) => {
      return new SetupServerApi(
        [import_ClientRequest.ClientRequestInterceptor, import_XMLHttpRequest.XMLHttpRequestInterceptor, import_fetch2.FetchInterceptor],
        ...handlers
      );
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/mockRequests.js
var require_mockRequests = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/mockRequests.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var mockRequests_exports = {};
    __export2(mockRequests_exports, {
      closeServer: () => closeServer,
      mockCurrentUser: () => mockCurrentUser,
      mockGraphQLMutation: () => mockGraphQLMutation,
      mockGraphQLQuery: () => mockGraphQLQuery,
      mockedUserMeta: () => mockedUserMeta,
      registerHandler: () => registerHandler,
      setupRequestHandlers: () => setupRequestHandlers,
      startMSW: () => startMSW
    });
    module2.exports = __toCommonJS2(mockRequests_exports);
    var import_msw = require_lib13();
    var REQUEST_HANDLER_QUEUE = [];
    var SERVER_INSTANCE;
    var startMSW = async (target, options) => {
      if (SERVER_INSTANCE) {
        return SERVER_INSTANCE;
      }
      if (target === "browsers") {
        SERVER_INSTANCE = (0, import_msw.setupWorker)();
        await SERVER_INSTANCE.start(options);
      } else {
        const { setupServer } = require_node();
        SERVER_INSTANCE = setupServer();
        await SERVER_INSTANCE.listen(options);
      }
      return SERVER_INSTANCE;
    };
    var setupRequestHandlers = () => {
      SERVER_INSTANCE.resetHandlers();
      for (const handler of REQUEST_HANDLER_QUEUE) {
        SERVER_INSTANCE.use(handler);
      }
    };
    var closeServer = () => {
      SERVER_INSTANCE.close();
    };
    var registerHandler = (handler) => {
      if (!SERVER_INSTANCE) {
        REQUEST_HANDLER_QUEUE = [...REQUEST_HANDLER_QUEUE, handler];
      } else {
        SERVER_INSTANCE.use(handler);
      }
    };
    var mockGraphQL = (type, operation, data, responseEnhancer) => {
      const resolver = (req, res, ctx) => {
        let d = data;
        let responseTransforms = [];
        if (typeof data === "function") {
          const captureTransform = (fn) => {
            return (...args) => {
              const resTransform = fn(...args);
              responseTransforms = [...responseTransforms, resTransform];
              return resTransform;
            };
          };
          const newCtx = {
            status: captureTransform(ctx.status),
            delay: captureTransform(ctx.delay),
            errors: captureTransform(ctx.errors),
            set: captureTransform(ctx.set),
            fetch: captureTransform(ctx.fetch),
            data: captureTransform(ctx.data),
            extensions: captureTransform(ctx.extensions),
            cookie: captureTransform(ctx.cookie),
            field: captureTransform(ctx.field)
          };
          d = data(req.variables, {
            req,
            ctx: newCtx
          });
        }
        return (responseEnhancer ? res[responseEnhancer] : res)(
          ctx.data(d),
          ...responseTransforms
        );
      };
      registerHandler(import_msw.graphql[type](operation, resolver));
      return data;
    };
    var mockGraphQLQuery = (operation, data, responseEnhancer) => {
      return mockGraphQL("query", operation, data, responseEnhancer);
    };
    var mockGraphQLMutation = (operation, data, responseEnhancer) => {
      return mockGraphQL("mutation", operation, data, responseEnhancer);
    };
    var mockedUserMeta = {
      currentUser: null
    };
    var mockCurrentUser = (user) => {
      mockedUserMeta.currentUser = user;
      mockGraphQLQuery("__REDWOOD__AUTH_GET_CURRENT_USER", () => {
        return {
          redwood: {
            currentUser: user
          }
        };
      });
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/mockAuth.js
var require_mockAuth = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/mockAuth.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var mockAuth_exports = {};
    __export2(mockAuth_exports, {
      createAuthentication: () => createAuthentication2,
      useAuth: () => useAuth2
    });
    module2.exports = __toCommonJS2(mockAuth_exports);
    var import_react = __toESM2(require_react());
    __reExport(mockAuth_exports, require_cjs(), module2.exports);
    var import_mockRequests = require_mockRequests();
    var AuthProvider = ({ children }) => {
      return import_react.default.createElement(import_react.default.Fragment, null, children);
    };
    function makeArray(input) {
      return !input ? [] : Array.isArray(input) ? input : [input];
    }
    function useAuth2() {
      return {
        loading: false,
        isAuthenticated: !!import_mockRequests.mockedUserMeta.currentUser,
        logIn: async () => {
        },
        logOut: async () => {
        },
        signUp: async () => {
        },
        currentUser: import_mockRequests.mockedUserMeta.currentUser,
        userMetadata: import_mockRequests.mockedUserMeta.currentUser,
        getToken: async () => null,
        getCurrentUser: async () => import_mockRequests.mockedUserMeta.currentUser,
        hasRole: (roles2) => {
          var _a2;
          const currentUserRoles = makeArray(
            (_a2 = import_mockRequests.mockedUserMeta.currentUser) == null ? void 0 : _a2.roles
          );
          if (currentUserRoles) {
            return makeArray(roles2).some((role) => currentUserRoles.includes(role));
          }
          return false;
        },
        reauthenticate: async () => {
        },
        forgotPassword: async () => {
        },
        resetPassword: async () => {
        },
        validateResetToken: async () => {
        },
        type: "default",
        client: void 0,
        hasError: false
      };
    }
    var createAuthentication2 = () => {
      return { AuthProvider, useAuth: useAuth2 };
    };
  }
});

// ../node_modules/@redwoodjs/testing/dist/web/index.js
var require_web = __commonJS({
  "../node_modules/@redwoodjs/testing/dist/web/index.js"(exports, module2) {
    "use strict";
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var web_exports = {};
    __export2(web_exports, {
      MockProviders: () => import_MockProviders.MockProviders,
      render: () => import_customRender.customRender,
      renderHook: () => import_customRender.customRenderHook,
      useAuth: () => import_mockAuth.useAuth
    });
    module2.exports = __toCommonJS2(web_exports);
    var import_global = require_global();
    __reExport(web_exports, (init_react_esm(), __toCommonJS(react_esm_exports)), module2.exports);
    var import_customRender = require_customRender();
    var import_MockProviders = require_MockProviders();
    var import_mockAuth = require_mockAuth();
    __reExport(web_exports, require_mockRequests(), module2.exports);
  }
});

// ../node_modules/@redwoodjs/testing/web/index.js
var require_web2 = __commonJS({
  "../node_modules/@redwoodjs/testing/web/index.js"(exports, module2) {
    var import_dist37 = __toESM(require_dist());
    var import_dist38 = __toESM(require_dist2());
    var import_dist39 = __toESM(require_dist3());
    module2.exports = require_web();
  }
});

export {
  require_web2 as require_web
};
/*! Bundled license information:

react-dom/cjs/react-dom-test-utils.production.min.js:
  (**
   * @license React
   * react-dom-test-utils.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-test-utils.development.js:
  (**
   * @license React
   * react-dom-test-utils.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.production.min.js:
  (** @license React v17.0.2
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=chunk-6QN4TZ4R.js.map
