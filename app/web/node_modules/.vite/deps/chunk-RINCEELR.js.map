{
  "version": 3,
  "sources": ["../../../../node_modules/@redwoodjs/auth/dist/useAuth.js", "../../../../node_modules/@redwoodjs/auth/dist/index.js", "../../../../node_modules/@redwoodjs/auth/dist/authFactory.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthContext.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/AuthProvider.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/AuthProviderState.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/ServerAuthProvider.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useCurrentUser.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useToken.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useForgotPassword.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useHasRole.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useLogIn.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useReauthenticate.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useLogOut.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useResetPassword.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useSignUp.js", "../../../../node_modules/@redwoodjs/auth/dist/AuthProvider/useValidateResetToken.js", "../../../../node_modules/@redwoodjs/auth/dist/getCurrentUserFromMiddleware.js"],
  "sourcesContent": ["import React from \"react\";\nfunction createUseAuth(AuthContext) {\n  const useAuth = () => {\n    const context = React.useContext(AuthContext);\n    if (!context) {\n      throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n  };\n  return useAuth;\n}\nfunction useNoAuth() {\n  return {\n    loading: false,\n    isAuthenticated: false,\n    logIn: async () => {\n    },\n    logOut: async () => {\n    },\n    signUp: async () => {\n    },\n    currentUser: null,\n    userMetadata: null,\n    getToken: async () => null,\n    getCurrentUser: async () => null,\n    hasRole: () => false,\n    reauthenticate: async () => {\n    },\n    forgotPassword: async () => {\n    },\n    resetPassword: async () => {\n    },\n    validateResetToken: async () => {\n    },\n    type: \"default\",\n    client: void 0,\n    hasError: false\n  };\n}\nexport {\n  createUseAuth,\n  useNoAuth\n};\n", "import { useNoAuth } from \"./useAuth.js\";\nimport { createAuthentication } from \"./authFactory.js\";\nimport {\n  spaDefaultAuthProviderState,\n  middlewareDefaultAuthProviderState\n} from \"./AuthProvider/AuthProviderState.js\";\nimport { getCurrentUserFromMiddleware } from \"./getCurrentUserFromMiddleware.js\";\nexport {\n  createAuthentication,\n  getCurrentUserFromMiddleware,\n  middlewareDefaultAuthProviderState,\n  spaDefaultAuthProviderState,\n  useNoAuth\n};\n", "import { createAuthContext } from \"./AuthContext.js\";\nimport { createAuthProvider } from \"./AuthProvider/AuthProvider.js\";\nimport { createUseAuth } from \"./useAuth.js\";\nfunction createAuthentication(authImplementation, customProviderHooks) {\n  const AuthContext = createAuthContext();\n  const useAuth = createUseAuth(AuthContext);\n  const AuthProvider = createAuthProvider(\n    AuthContext,\n    authImplementation,\n    customProviderHooks\n  );\n  return { AuthContext, AuthProvider, useAuth };\n}\nexport {\n  createAuthentication\n};\n", "import React from \"react\";\nfunction createAuthContext() {\n  return React.createContext(void 0);\n}\nexport {\n  createAuthContext\n};\n", "import React, { useContext, useEffect, useState } from \"react\";\nimport { spaDefaultAuthProviderState } from \"./AuthProviderState.js\";\nimport { ServerAuthContext } from \"./ServerAuthProvider.js\";\nimport { useCurrentUser } from \"./useCurrentUser.js\";\nimport { useForgotPassword } from \"./useForgotPassword.js\";\nimport { useHasRole } from \"./useHasRole.js\";\nimport { useLogIn } from \"./useLogIn.js\";\nimport { useLogOut } from \"./useLogOut.js\";\nimport { useReauthenticate } from \"./useReauthenticate.js\";\nimport { useResetPassword } from \"./useResetPassword.js\";\nimport { useSignUp } from \"./useSignUp.js\";\nimport { useToken } from \"./useToken.js\";\nimport { useValidateResetToken } from \"./useValidateResetToken.js\";\nfunction createAuthProvider(AuthContext, authImplementation, customProviderHooks) {\n  const AuthProvider = ({ children }) => {\n    const serverAuthState = useContext(ServerAuthContext);\n    const [authProviderState, setAuthProviderState] = useState(serverAuthState || spaDefaultAuthProviderState);\n    const getToken = useToken(authImplementation);\n    const getCurrentUser = customProviderHooks?.useCurrentUser ? customProviderHooks.useCurrentUser : (\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCurrentUser(authImplementation)\n    );\n    const reauthenticate = useReauthenticate(\n      authImplementation,\n      setAuthProviderState,\n      getCurrentUser\n    );\n    const hasRole = customProviderHooks?.useHasRole ? customProviderHooks.useHasRole(authProviderState.currentUser) : (\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useHasRole(authProviderState.currentUser)\n    );\n    const signUp = useSignUp(\n      authImplementation,\n      setAuthProviderState,\n      getCurrentUser\n    );\n    const logIn = useLogIn(\n      authImplementation,\n      setAuthProviderState,\n      getCurrentUser\n    );\n    const logOut = useLogOut(authImplementation, setAuthProviderState);\n    const forgotPassword = useForgotPassword(authImplementation);\n    const resetPassword = useResetPassword(authImplementation);\n    const validateResetToken = useValidateResetToken(authImplementation);\n    const type = authImplementation.type;\n    const client = authImplementation.client;\n    useEffect(() => {\n      async function doRestoreState() {\n        await authImplementation.restoreAuthState?.();\n        if (!serverAuthState) {\n          reauthenticate();\n        }\n      }\n      doRestoreState();\n    }, [reauthenticate, serverAuthState]);\n    return /* @__PURE__ */ React.createElement(\n      AuthContext.Provider,\n      {\n        value: {\n          ...authProviderState,\n          signUp,\n          logIn,\n          logOut,\n          getToken,\n          getCurrentUser,\n          hasRole,\n          reauthenticate,\n          forgotPassword,\n          resetPassword,\n          validateResetToken,\n          client,\n          type\n        }\n      },\n      children\n    );\n  };\n  return AuthProvider;\n}\nexport {\n  createAuthProvider\n};\n", "const spaDefaultAuthProviderState = {\n  loading: true,\n  isAuthenticated: false,\n  userMetadata: null,\n  currentUser: null,\n  hasError: false\n};\nconst middlewareDefaultAuthProviderState = {\n  loading: false,\n  isAuthenticated: false,\n  userMetadata: null,\n  currentUser: null,\n  hasError: false\n};\nexport {\n  middlewareDefaultAuthProviderState,\n  spaDefaultAuthProviderState\n};\n", "import React from \"react\";\nimport { middlewareDefaultAuthProviderState } from \"./AuthProviderState.js\";\nconst getAuthInitialStateFromServer = () => {\n  if (globalThis?.__REDWOOD__SERVER__AUTH_STATE__) {\n    const initialState = {\n      ...middlewareDefaultAuthProviderState,\n      encryptedSession: null,\n      ...globalThis?.__REDWOOD__SERVER__AUTH_STATE__ || {}\n    };\n    globalThis.__REDWOOD__SERVER__AUTH_STATE__ = null;\n    return initialState;\n  }\n  return null;\n};\nconst ServerAuthContext = React.createContext(\n  getAuthInitialStateFromServer()\n);\nconst ServerAuthProvider = ({\n  value,\n  children\n}) => {\n  const stringifiedAuthState = `__REDWOOD__SERVER__AUTH_STATE__ = ${JSON.stringify(\n    sanitizeServerAuthState(value)\n  )};`;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n    \"script\",\n    {\n      id: \"__REDWOOD__SERVER_AUTH_STATE__\",\n      dangerouslySetInnerHTML: {\n        __html: stringifiedAuthState\n      }\n    }\n  ), /* @__PURE__ */ React.createElement(ServerAuthContext.Provider, { value }, children));\n};\nfunction sanitizeServerAuthState(value) {\n  const sanitizedState = { ...value };\n  delete sanitizedState.cookieHeader;\n  return sanitizedState;\n}\nexport {\n  ServerAuthContext,\n  ServerAuthProvider\n};\n", "import { useCallback } from \"react\";\nimport { useToken } from \"./useToken.js\";\nconst useCurrentUser = (authImplementation) => {\n  const getToken = useToken(authImplementation);\n  return useCallback(async () => {\n    const token = await getToken();\n    const response = await globalThis.fetch(globalThis.RWJS_API_GRAPHQL_URL, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"auth-provider\": authImplementation.type,\n        authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        query: \"query __REDWOOD__AUTH_GET_CURRENT_USER { redwood { currentUser } }\"\n      })\n    });\n    if (response.ok) {\n      const { data } = await response.json();\n      return data?.redwood?.currentUser;\n    } else {\n      throw new Error(\n        `Could not fetch current user: ${response.statusText} (${response.status})`\n      );\n    }\n  }, [authImplementation, getToken]);\n};\nexport {\n  useCurrentUser\n};\n", "import { useCallback } from \"react\";\nconst useToken = (authImplementation) => {\n  return useCallback(async () => {\n    try {\n      const token = await authImplementation.getToken();\n      return token;\n    } catch (e) {\n      console.error(\"Caught internal:\", e);\n      return null;\n    }\n  }, [authImplementation]);\n};\nexport {\n  useToken\n};\n", "import { useCallback } from \"react\";\nconst useForgotPassword = (authImplementation) => {\n  return useCallback(\n    async (username) => {\n      if (authImplementation.forgotPassword) {\n        return await authImplementation.forgotPassword(username);\n      } else {\n        throw new Error(\n          `Auth client ${authImplementation.type} does not implement this function`\n        );\n      }\n    },\n    [authImplementation]\n  );\n};\nexport {\n  useForgotPassword\n};\n", "import { useCallback } from \"react\";\nconst useHasRole = (currentUser) => {\n  return useCallback(\n    (rolesToCheck) => {\n      if (currentUser?.roles) {\n        if (typeof rolesToCheck === \"string\") {\n          if (typeof currentUser.roles === \"string\") {\n            return currentUser.roles === rolesToCheck;\n          } else if (Array.isArray(currentUser.roles)) {\n            return currentUser.roles?.some(\n              (allowedRole) => rolesToCheck === allowedRole\n            );\n          }\n        }\n        if (Array.isArray(rolesToCheck)) {\n          if (Array.isArray(currentUser.roles)) {\n            return currentUser.roles?.some(\n              (allowedRole) => rolesToCheck.includes(allowedRole)\n            );\n          } else if (typeof currentUser.roles === \"string\") {\n            return rolesToCheck.some(\n              (allowedRole) => currentUser?.roles === allowedRole\n            );\n          }\n        }\n      }\n      return false;\n    },\n    [currentUser]\n  );\n};\nexport {\n  useHasRole\n};\n", "import { useCallback } from \"react\";\nimport { spaDefaultAuthProviderState } from \"./AuthProviderState.js\";\nimport { useReauthenticate } from \"./useReauthenticate.js\";\nconst useLogIn = (authImplementation, setAuthProviderState, getCurrentUser) => {\n  const reauthenticate = useReauthenticate(\n    authImplementation,\n    setAuthProviderState,\n    getCurrentUser\n  );\n  return useCallback(\n    async (options) => {\n      setAuthProviderState(spaDefaultAuthProviderState);\n      const loginResult = await authImplementation.login(options);\n      await reauthenticate();\n      return loginResult;\n    },\n    [authImplementation, reauthenticate, setAuthProviderState]\n  );\n};\nexport {\n  useLogIn\n};\n", "import { useCallback } from \"react\";\nimport { useToken } from \"./useToken.js\";\nconst notAuthenticatedState = {\n  isAuthenticated: false,\n  currentUser: null,\n  userMetadata: null,\n  loading: false,\n  hasError: false\n};\nconst useReauthenticate = (authImplementation, setAuthProviderState, getCurrentUser) => {\n  const getToken = useToken(authImplementation);\n  return useCallback(async () => {\n    if (authImplementation.loadWhileReauthenticating) {\n      setAuthProviderState((oldState) => ({\n        ...oldState,\n        loading: true\n      }));\n    }\n    try {\n      const token = await getToken();\n      let currentUser;\n      if (token || authImplementation.middlewareAuthEnabled) {\n        currentUser = await getCurrentUser();\n      }\n      if (!currentUser) {\n        let loading = false;\n        if (authImplementation.clientHasLoaded) {\n          loading = !authImplementation.clientHasLoaded();\n        }\n        setAuthProviderState({\n          ...notAuthenticatedState,\n          loading,\n          client: authImplementation.client\n        });\n      } else {\n        const userMetadata = await authImplementation.getUserMetadata();\n        setAuthProviderState((oldState) => ({\n          ...oldState,\n          userMetadata,\n          currentUser,\n          isAuthenticated: !!currentUser,\n          loading: false,\n          client: authImplementation.client\n        }));\n      }\n    } catch (e) {\n      setAuthProviderState({\n        ...notAuthenticatedState,\n        hasError: true,\n        error: e\n      });\n    }\n  }, [authImplementation, setAuthProviderState, getToken, getCurrentUser]);\n};\nexport {\n  useReauthenticate\n};\n", "import { useCallback } from \"react\";\nconst useLogOut = (authImplementation, setAuthProviderState) => {\n  return useCallback(\n    async (options) => {\n      const logoutOutput = await authImplementation.logout(options);\n      setAuthProviderState({\n        userMetadata: null,\n        currentUser: null,\n        isAuthenticated: false,\n        hasError: false,\n        error: void 0,\n        loading: false\n      });\n      return logoutOutput;\n    },\n    [authImplementation, setAuthProviderState]\n  );\n};\nexport {\n  useLogOut\n};\n", "import { useCallback } from \"react\";\nconst useResetPassword = (authImplementation) => {\n  return useCallback(\n    async (options) => {\n      if (authImplementation.resetPassword) {\n        return await authImplementation.resetPassword(options);\n      } else {\n        throw new Error(\n          `Auth client ${authImplementation.type} does not implement this function`\n        );\n      }\n    },\n    [authImplementation]\n  );\n};\nexport {\n  useResetPassword\n};\n", "import { useCallback } from \"react\";\nimport { useReauthenticate } from \"./useReauthenticate.js\";\nconst useSignUp = (authImplementation, setAuthProviderState, getCurrentUser) => {\n  const reauthenticate = useReauthenticate(\n    authImplementation,\n    setAuthProviderState,\n    getCurrentUser\n  );\n  return useCallback(\n    async (options) => {\n      const signupOutput = await authImplementation.signup(options);\n      await reauthenticate();\n      return signupOutput;\n    },\n    [authImplementation, reauthenticate]\n  );\n};\nexport {\n  useSignUp\n};\n", "import { useCallback } from \"react\";\nconst useValidateResetToken = (authImplementation) => {\n  return useCallback(\n    async (resetToken) => {\n      if (authImplementation.validateResetToken) {\n        return await authImplementation.validateResetToken(resetToken);\n      } else {\n        throw new Error(\n          `Auth client ${authImplementation.type} does not implement this function`\n        );\n      }\n    },\n    [authImplementation]\n  );\n};\nexport {\n  useValidateResetToken\n};\n", "const getCurrentUserFromMiddleware = async (authUrl) => {\n  const response = await globalThis.fetch(`${authUrl}/currentUser`, {\n    method: \"GET\",\n    credentials: \"include\",\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n  if (response.ok) {\n    const { currentUser } = await response.json();\n    if (!currentUser) {\n      throw new Error(\"No current user found\");\n    }\n    return currentUser;\n  } else {\n    throw new Error(\n      `Could not fetch current user: ${response.statusText} (${response.status})`\n    );\n  }\n};\nexport {\n  getCurrentUserFromMiddleware\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,mBAAkB;AAWlB,SAAS,YAAY;AACnB,SAAO;AAAA,IACL,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,OAAO,YAAY;AAAA,IACnB;AAAA,IACA,QAAQ,YAAY;AAAA,IACpB;AAAA,IACA,QAAQ,YAAY;AAAA,IACpB;AAAA,IACA,aAAa;AAAA,IACb,cAAc;AAAA,IACd,UAAU,YAAY;AAAA,IACtB,gBAAgB,YAAY;AAAA,IAC5B,SAAS,MAAM;AAAA,IACf,gBAAgB,YAAY;AAAA,IAC5B;AAAA,IACA,gBAAgB,YAAY;AAAA,IAC5B;AAAA,IACA,eAAe,YAAY;AAAA,IAC3B;AAAA,IACA,oBAAoB,YAAY;AAAA,IAChC;AAAA,IACA,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU;AAAA,EACZ;AACF;;;ACtCA,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;;;ACAA,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;;;ACAA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAC,gBAAkB;;;ACAlB,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,iBAAuD;;;ACAvD,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAOA,IAAM,qCAAqC;AAAA,EACzC,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,aAAa;AAAA,EACb,UAAU;AACZ;;;ACbA,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAAkB;AAElB,IAAM,gCAAgC,MAAM;AAC1C,MAAI,yCAAY,iCAAiC;AAC/C,UAAM,eAAe;AAAA,MACnB,GAAG;AAAA,MACH,kBAAkB;AAAA,MAClB,IAAG,yCAAY,oCAAmC,CAAC;AAAA,IACrD;AACA,eAAW,kCAAkC;AAC7C,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAM,oBAAoB,cAAAC,QAAM;AAAA,EAC9B,8BAA8B;AAChC;;;AChBA,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,gBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,iBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,iBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,iBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAC,iBAA4B;;;ACA5B,IAAAC,gBAAA;AAAA,IAAAA,gBAAA;AAAA,IAAAA,gBAAA;",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_dist", "import_react", "React", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist", "import_react", "import_dist"]
}
